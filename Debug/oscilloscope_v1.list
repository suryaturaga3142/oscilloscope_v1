
oscilloscope_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08008b58  08008b58  00009b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f04  08008f04  0000a314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f04  08008f04  00009f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f0c  08008f0c  0000a314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f0c  08008f0c  00009f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f10  08008f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  080090e8  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009188  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a34  20000314  08009228  0000a314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d48  08009228  0000ad48  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a360  00000000  00000000  0000a342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035ea  00000000  00000000  000246a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001678  00000000  00000000  00027c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001172  00000000  00000000  00029308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bd8e  00000000  00000000  0002a47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b747  00000000  00000000  00056208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010cc57  00000000  00000000  0007194f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017e5a6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e40  00000000  00000000  0017e5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  0018542c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08008b40 	.word	0x08008b40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08008b40 	.word	0x08008b40

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <__io_putchar+0x20>)
 800062e:	f004 fe83 	bl	8005338 <HAL_UART_Transmit>
  return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000580 	.word	0x20000580

08000640 <HAL_GPIO_EXTI_Callback>:

volatile uint16_t adc_buf[ADC_BUF_LEN * ADC_CHANS];
volatile uint16_t dac_buf[DAC_BUF_LEN];
volatile uint16_t timestamp = 0;

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin) {
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000650:	d102      	bne.n	8000658 <HAL_GPIO_EXTI_Callback+0x18>
		timestamp = 0;
 8000652:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <HAL_GPIO_EXTI_Callback+0x24>)
 8000654:	2200      	movs	r2, #0
 8000656:	801a      	strh	r2, [r3, #0]
	}
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000be8 	.word	0x20000be8

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e028      	b.n	80006c6 <main+0x5e>
		dac_buf[i] = 1.3f * i * (i - 15) * (i - 31) + 1970;
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067e:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80007b8 <main+0x150>
 8000682:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3b0f      	subs	r3, #15
 800068a:	ee07 3a90 	vmov	s15, r3
 800068e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3b1f      	subs	r3, #31
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80007bc <main+0x154>
 80006aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b2:	ee17 3a90 	vmov	r3, s15
 80006b6:	b299      	uxth	r1, r3
 80006b8:	4a41      	ldr	r2, [pc, #260]	@ (80007c0 <main+0x158>)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	3301      	adds	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2b1f      	cmp	r3, #31
 80006ca:	ddd3      	ble.n	8000674 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 ff9f 	bl	800160e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f888 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 fabc 	bl	8000c50 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d8:	f000 fa88 	bl	8000bec <MX_DMA_Init>
  MX_ETH_Init();
 80006dc:	f000 f98c 	bl	80009f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006e0:	f000 fa26 	bl	8000b30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e4:	f000 fa54 	bl	8000b90 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006e8:	f000 f8ee 	bl	80008c8 <MX_ADC1_Init>
  MX_DAC_Init();
 80006ec:	f000 f95a 	bl	80009a4 <MX_DAC_Init>
  MX_TIM2_Init();
 80006f0:	f000 f9d0 	bl	8000a94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80006f4:	4833      	ldr	r0, [pc, #204]	@ (80007c4 <main+0x15c>)
 80006f6:	f004 fac9 	bl	8004c8c <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dac_buf, DAC_BUF_LEN, DAC_ALIGN_12B_R);
 80006fa:	2300      	movs	r3, #0
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2320      	movs	r3, #32
 8000700:	4a2f      	ldr	r2, [pc, #188]	@ (80007c0 <main+0x158>)
 8000702:	2100      	movs	r1, #0
 8000704:	4830      	ldr	r0, [pc, #192]	@ (80007c8 <main+0x160>)
 8000706:	f001 fd6d 	bl	80021e4 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN * ADC_CHANS);
 800070a:	2260      	movs	r2, #96	@ 0x60
 800070c:	492f      	ldr	r1, [pc, #188]	@ (80007cc <main+0x164>)
 800070e:	4830      	ldr	r0, [pc, #192]	@ (80007d0 <main+0x168>)
 8000710:	f001 f842 	bl	8001798 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int delay = 1000.0f * (htim2.Init.Prescaler + 1) * (htim2.Init.Period + 1) / TIM_CLK;
 8000714:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <main+0x15c>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	3301      	adds	r3, #1
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000722:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80007d4 <main+0x16c>
 8000726:	ee27 7a87 	vmul.f32	s14, s15, s14
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <main+0x15c>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800073c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80007d8 <main+0x170>
 8000740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000748:	ee17 3a90 	vmov	r3, s15
 800074c:	60fb      	str	r3, [r7, #12]
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	e02d      	b.n	80007b0 <main+0x148>
		  uint16_t val_in0 = adc_buf[3 * i];
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <main+0x164>)
 800075e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000762:	817b      	strh	r3, [r7, #10]
		  uint16_t val_in3 = adc_buf[3 * i + 1];
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	3301      	adds	r3, #1
 800076e:	4a17      	ldr	r2, [pc, #92]	@ (80007cc <main+0x164>)
 8000770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000774:	813b      	strh	r3, [r7, #8]
		  uint16_t val_in5 = adc_buf[3 * i + 2];
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	4613      	mov	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	4413      	add	r3, r2
 800077e:	3302      	adds	r3, #2
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <main+0x164>)
 8000782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000786:	80fb      	strh	r3, [r7, #6]
		  printf("%5u %4u %4u %4u\r\n", timestamp, val_in0, val_in3, val_in5);
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <main+0x174>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	4618      	mov	r0, r3
 8000790:	897a      	ldrh	r2, [r7, #10]
 8000792:	8939      	ldrh	r1, [r7, #8]
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	460b      	mov	r3, r1
 800079a:	4601      	mov	r1, r0
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <main+0x178>)
 800079e:	f006 fac3 	bl	8006d28 <iprintf>
		  HAL_Delay(delay);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 ff8f 	bl	80016c8 <HAL_Delay>
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	3301      	adds	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	2b1f      	cmp	r3, #31
 80007b4:	ddce      	ble.n	8000754 <main+0xec>
  {
 80007b6:	e7ad      	b.n	8000714 <main+0xac>
 80007b8:	3fa66666 	.word	0x3fa66666
 80007bc:	44f64000 	.word	0x44f64000
 80007c0:	20000ba8 	.word	0x20000ba8
 80007c4:	20000534 	.word	0x20000534
 80007c8:	20000410 	.word	0x20000410
 80007cc:	20000ae8 	.word	0x20000ae8
 80007d0:	20000368 	.word	0x20000368
 80007d4:	447a0000 	.word	0x447a0000
 80007d8:	4cb71b00 	.word	0x4cb71b00
 80007dc:	20000be8 	.word	0x20000be8
 80007e0:	08008b58 	.word	0x08008b58

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	@ 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2234      	movs	r2, #52	@ 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 faed 	bl	8006dd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000808:	f003 f88c 	bl	8003924 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <SystemClock_Config+0xdc>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000810:	4a2b      	ldr	r2, [pc, #172]	@ (80008c0 <SystemClock_Config+0xdc>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	@ 0x40
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <SystemClock_Config+0xdc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <SystemClock_Config+0xe0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800082c:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <SystemClock_Config+0xe0>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <SystemClock_Config+0xe0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000844:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000858:	2360      	movs	r3, #96	@ 0x60
 800085a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000864:	2302      	movs	r3, #2
 8000866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4618      	mov	r0, r3
 800086e:	f003 f8b9 	bl	80039e4 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000878:	f000 fab0 	bl	8000ddc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800087c:	f003 f862 	bl	8003944 <HAL_PWREx_EnableOverDrive>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000886:	f000 faa9 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2103      	movs	r1, #3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fb4a 	bl	8003f40 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008b2:	f000 fa93 	bl	8000ddc <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	@ 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008dc:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <MX_ADC1_Init+0xd8>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e0:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MX_ADC1_Init+0xd4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800090a:	4b24      	ldr	r3, [pc, #144]	@ (800099c <MX_ADC1_Init+0xd4>)
 800090c:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000912:	4b22      	ldr	r3, [pc, #136]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000918:	4b20      	ldr	r3, [pc, #128]	@ (800099c <MX_ADC1_Init+0xd4>)
 800091a:	2203      	movs	r2, #3
 800091c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000928:	2201      	movs	r2, #1
 800092a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	481b      	ldr	r0, [pc, #108]	@ (800099c <MX_ADC1_Init+0xd4>)
 800092e:	f000 feef 	bl	8001710 <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000938:	f000 fa50 	bl	8000ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4813      	ldr	r0, [pc, #76]	@ (800099c <MX_ADC1_Init+0xd4>)
 800094e:	f001 f83f 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000958:	f000 fa40 	bl	8000ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800095c:	2303      	movs	r3, #3
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000960:	2302      	movs	r3, #2
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <MX_ADC1_Init+0xd4>)
 800096a:	f001 f831 	bl	80019d0 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000974:	f000 fa32 	bl	8000ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000978:	2305      	movs	r3, #5
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800097c:	2303      	movs	r3, #3
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_ADC1_Init+0xd4>)
 8000986:	f001 f823 	bl	80019d0 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000990:	f000 fa24 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000368 	.word	0x20000368
 80009a0:	40012000 	.word	0x40012000

080009a4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_DAC_Init+0x4c>)
 80009b4:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <MX_DAC_Init+0x50>)
 80009b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_DAC_Init+0x4c>)
 80009ba:	f001 fbf0 	bl	800219e <HAL_DAC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009c4:	f000 fa0a 	bl	8000ddc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80009c8:	2324      	movs	r3, #36	@ 0x24
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <MX_DAC_Init+0x4c>)
 80009d8:	f001 fce2 	bl	80023a0 <HAL_DAC_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009e2:	f000 f9fb 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000410 	.word	0x20000410
 80009f4:	40007400 	.word	0x40007400

080009f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_ETH_Init+0x84>)
 80009fe:	4a20      	ldr	r2, [pc, #128]	@ (8000a80 <MX_ETH_Init+0x88>)
 8000a00:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a02:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <MX_ETH_Init+0x8c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <MX_ETH_Init+0x8c>)
 8000a0a:	2280      	movs	r2, #128	@ 0x80
 8000a0c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <MX_ETH_Init+0x8c>)
 8000a10:	22e1      	movs	r2, #225	@ 0xe1
 8000a12:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_ETH_Init+0x8c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_ETH_Init+0x8c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_ETH_Init+0x8c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_ETH_Init+0x84>)
 8000a28:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <MX_ETH_Init+0x8c>)
 8000a2a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_ETH_Init+0x84>)
 8000a2e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a32:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_ETH_Init+0x84>)
 8000a36:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <MX_ETH_Init+0x90>)
 8000a38:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_ETH_Init+0x84>)
 8000a3c:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <MX_ETH_Init+0x94>)
 8000a3e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_ETH_Init+0x84>)
 8000a42:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a46:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <MX_ETH_Init+0x84>)
 8000a4a:	f002 f905 	bl	8002c58 <HAL_ETH_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a54:	f000 f9c2 	bl	8000ddc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a58:	2238      	movs	r2, #56	@ 0x38
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_ETH_Init+0x98>)
 8000a5e:	f006 f9b8 	bl	8006dd2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_ETH_Init+0x98>)
 8000a64:	2221      	movs	r2, #33	@ 0x21
 8000a66:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_ETH_Init+0x98>)
 8000a6a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a6e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <MX_ETH_Init+0x98>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000484 	.word	0x20000484
 8000a80:	40028000 	.word	0x40028000
 8000a84:	20000bec 	.word	0x20000bec
 8000a88:	20000274 	.word	0x20000274
 8000a8c:	200001d4 	.word	0x200001d4
 8000a90:	20000330 	.word	0x20000330

08000a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000ab4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ab8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000abc:	22c7      	movs	r2, #199	@ 0xc7
 8000abe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000ac8:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ada:	4814      	ldr	r0, [pc, #80]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000adc:	f004 f87e 	bl	8004bdc <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ae6:	f000 f979 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000af8:	f004 f938 	bl	8004d6c <HAL_TIM_ConfigClockSource>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b02:	f000 f96b 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b06:	2320      	movs	r3, #32
 8000b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	@ (8000b2c <MX_TIM2_Init+0x98>)
 8000b14:	f004 fb34 	bl	8005180 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b1e:	f000 f95d 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000534 	.word	0x20000534

08000b30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b36:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <MX_USART3_UART_Init+0x5c>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <MX_USART3_UART_Init+0x58>)
 8000b74:	f004 fb92 	bl	800529c <HAL_UART_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b7e:	f000 f92d 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000580 	.word	0x20000580
 8000b8c:	40004800 	.word	0x40004800

08000b90 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2206      	movs	r2, #6
 8000ba0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	f002 fd6c 	bl	80036b0 <HAL_PCD_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bde:	f000 f8fd 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000608 	.word	0x20000608

08000bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a15      	ldr	r2, [pc, #84]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2010      	movs	r0, #16
 8000c28:	f001 fa83 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c2c:	2010      	movs	r0, #16
 8000c2e:	f001 fa9c 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2038      	movs	r0, #56	@ 0x38
 8000c38:	f001 fa7b 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c3c:	2038      	movs	r0, #56	@ 0x38
 8000c3e:	f001 fa94 	bl	800216a <HAL_NVIC_EnableIRQ>

}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b58      	ldr	r3, [pc, #352]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a57      	ldr	r2, [pc, #348]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b55      	ldr	r3, [pc, #340]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c7e:	4b52      	ldr	r3, [pc, #328]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a51      	ldr	r2, [pc, #324]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0320 	and.w	r3, r3, #32
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	4b4c      	ldr	r3, [pc, #304]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b49      	ldr	r3, [pc, #292]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b46      	ldr	r3, [pc, #280]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a45      	ldr	r2, [pc, #276]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b43      	ldr	r3, [pc, #268]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a3f      	ldr	r2, [pc, #252]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a39      	ldr	r2, [pc, #228]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b37      	ldr	r3, [pc, #220]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf6:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a33      	ldr	r2, [pc, #204]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <MX_GPIO_Init+0x178>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d14:	482d      	ldr	r0, [pc, #180]	@ (8000dcc <MX_GPIO_Init+0x17c>)
 8000d16:	f002 fc99 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2140      	movs	r1, #64	@ 0x40
 8000d1e:	482c      	ldr	r0, [pc, #176]	@ (8000dd0 <MX_GPIO_Init+0x180>)
 8000d20:	f002 fc94 	bl	800364c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4826      	ldr	r0, [pc, #152]	@ (8000dd4 <MX_GPIO_Init+0x184>)
 8000d3c:	f002 fada 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4820      	ldr	r0, [pc, #128]	@ (8000dd8 <MX_GPIO_Init+0x188>)
 8000d58:	f002 facc 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d5c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4815      	ldr	r0, [pc, #84]	@ (8000dcc <MX_GPIO_Init+0x17c>)
 8000d76:	f002 fabd 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d7a:	2340      	movs	r3, #64	@ 0x40
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480f      	ldr	r0, [pc, #60]	@ (8000dd0 <MX_GPIO_Init+0x180>)
 8000d92:	f002 faaf 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d96:	2380      	movs	r3, #128	@ 0x80
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4809      	ldr	r0, [pc, #36]	@ (8000dd0 <MX_GPIO_Init+0x180>)
 8000daa:	f002 faa3 	bl	80032f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2028      	movs	r0, #40	@ 0x28
 8000db4:	f001 f9bd 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db8:	2028      	movs	r0, #40	@ 0x28
 8000dba:	f001 f9d6 	bl	800216a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3730      	adds	r7, #48	@ 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40021400 	.word	0x40021400

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Error_Handler+0x8>

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <HAL_MspInit+0x44>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_MspInit+0x44>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f04 <HAL_ADC_MspInit+0xd4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d153      	bne.n	8000efa <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e52:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a2c      	ldr	r2, [pc, #176]	@ (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a26      	ldr	r2, [pc, #152]	@ (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b24      	ldr	r3, [pc, #144]	@ (8000f08 <HAL_ADC_MspInit+0xd8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8000e82:	2329      	movs	r3, #41	@ 0x29
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e86:	2303      	movs	r3, #3
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <HAL_ADC_MspInit+0xdc>)
 8000e96:	f002 fa2d 	bl	80032f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f14 <HAL_ADC_MspInit+0xe4>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000eb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ebc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ede:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ee0:	f001 fb42 	bl	8002568 <HAL_DMA_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000eea:	f7ff ff77 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ef2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_ADC_MspInit+0xe0>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	@ 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40012000 	.word	0x40012000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	200003b0 	.word	0x200003b0
 8000f14:	40026410 	.word	0x40026410

08000f18 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a2d      	ldr	r2, [pc, #180]	@ (8000fec <HAL_DAC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d154      	bne.n	8000fe4 <HAL_DAC_MspInit+0xcc>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff0 <HAL_DAC_MspInit+0xd8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff0 <HAL_DAC_MspInit+0xd8>)
 8000f40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <HAL_DAC_MspInit+0xd8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <HAL_DAC_MspInit+0xd8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <HAL_DAC_MspInit+0xd8>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <HAL_DAC_MspInit+0xd8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481d      	ldr	r0, [pc, #116]	@ (8000ff4 <HAL_DAC_MspInit+0xdc>)
 8000f7e:	f002 f9b9 	bl	80032f4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000f84:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <HAL_DAC_MspInit+0xe4>)
 8000f86:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000f8a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000f8e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000f92:	2240      	movs	r2, #64	@ 0x40
 8000f94:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000f9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000faa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000fc8:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fca:	f001 facd 	bl	8002568 <HAL_DMA_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000fd4:	f7ff ff02 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <HAL_DAC_MspInit+0xe0>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	@ 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40007400 	.word	0x40007400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	20000424 	.word	0x20000424
 8000ffc:	40026088 	.word	0x40026088

08001000 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	@ 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a4e      	ldr	r2, [pc, #312]	@ (8001158 <HAL_ETH_MspInit+0x158>)
 800101e:	4293      	cmp	r3, r2
 8001020:	f040 8096 	bne.w	8001150 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001024:	4b4d      	ldr	r3, [pc, #308]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	4a4c      	ldr	r2, [pc, #304]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800102a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800102e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001030:	4b4a      	ldr	r3, [pc, #296]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001038:	623b      	str	r3, [r7, #32]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	4b47      	ldr	r3, [pc, #284]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001040:	4a46      	ldr	r2, [pc, #280]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001042:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001046:	6313      	str	r3, [r2, #48]	@ 0x30
 8001048:	4b44      	ldr	r3, [pc, #272]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4b41      	ldr	r3, [pc, #260]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	4a40      	ldr	r2, [pc, #256]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800105a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800105e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001060:	4b3e      	ldr	r3, [pc, #248]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	4b3b      	ldr	r3, [pc, #236]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	4a3a      	ldr	r2, [pc, #232]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6313      	str	r3, [r2, #48]	@ 0x30
 8001078:	4b38      	ldr	r3, [pc, #224]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b35      	ldr	r3, [pc, #212]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a34      	ldr	r2, [pc, #208]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001090:	4b32      	ldr	r3, [pc, #200]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a2e      	ldr	r2, [pc, #184]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b4:	4b29      	ldr	r3, [pc, #164]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	4a28      	ldr	r2, [pc, #160]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 80010ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010be:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_ETH_MspInit+0x15c>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010cc:	2332      	movs	r3, #50	@ 0x32
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010dc:	230b      	movs	r3, #11
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	481e      	ldr	r0, [pc, #120]	@ (8001160 <HAL_ETH_MspInit+0x160>)
 80010e8:	f002 f904 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010ec:	2386      	movs	r3, #134	@ 0x86
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fc:	230b      	movs	r3, #11
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4817      	ldr	r0, [pc, #92]	@ (8001164 <HAL_ETH_MspInit+0x164>)
 8001108:	f002 f8f4 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800110c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111e:	230b      	movs	r3, #11
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	480f      	ldr	r0, [pc, #60]	@ (8001168 <HAL_ETH_MspInit+0x168>)
 800112a:	f002 f8e3 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800112e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001140:	230b      	movs	r3, #11
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	4808      	ldr	r0, [pc, #32]	@ (800116c <HAL_ETH_MspInit+0x16c>)
 800114c:	f002 f8d2 	bl	80032f4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001150:	bf00      	nop
 8001152:	3738      	adds	r7, #56	@ 0x38
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40028000 	.word	0x40028000
 800115c:	40023800 	.word	0x40023800
 8001160:	40020800 	.word	0x40020800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40021800 	.word	0x40021800

08001170 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001180:	d10b      	bne.n	800119a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_TIM_Base_MspInit+0x38>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0ae      	sub	sp, #184	@ 0xb8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2290      	movs	r2, #144	@ 0x90
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fe00 	bl	8006dd2 <memset>
  if(huart->Instance==USART3)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <HAL_UART_MspInit+0xb4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d13c      	bne.n	8001256 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f8ce 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011f6:	f7ff fdf1 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_UART_MspInit+0xb8>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <HAL_UART_MspInit+0xb8>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <HAL_UART_MspInit+0xb8>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <HAL_UART_MspInit+0xb8>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <HAL_UART_MspInit+0xb8>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_UART_MspInit+0xb8>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800122a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800122e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001244:	2307      	movs	r3, #7
 8001246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <HAL_UART_MspInit+0xbc>)
 8001252:	f002 f84f 	bl	80032f4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001256:	bf00      	nop
 8001258:	37b8      	adds	r7, #184	@ 0xb8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40004800 	.word	0x40004800
 8001264:	40023800 	.word	0x40023800
 8001268:	40020c00 	.word	0x40020c00

0800126c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ae      	sub	sp, #184	@ 0xb8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2290      	movs	r2, #144	@ 0x90
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fda0 	bl	8006dd2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800129a:	d159      	bne.n	8001350 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800129c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80012a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 f86d 	bl	800438c <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012b8:	f7ff fd90 	bl	8000ddc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012ee:	230a      	movs	r3, #10
 80012f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4818      	ldr	r0, [pc, #96]	@ (800135c <HAL_PCD_MspInit+0xf0>)
 80012fc:	f001 fffa 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001318:	4619      	mov	r1, r3
 800131a:	4810      	ldr	r0, [pc, #64]	@ (800135c <HAL_PCD_MspInit+0xf0>)
 800131c:	f001 ffea 	bl	80032f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001320:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001324:	4a0c      	ldr	r2, [pc, #48]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 8001326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132a:	6353      	str	r3, [r2, #52]	@ 0x34
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 800132e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 800133a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133c:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001342:	6453      	str	r3, [r2, #68]	@ 0x44
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <HAL_PCD_MspInit+0xec>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001350:	bf00      	nop
 8001352:	37b8      	adds	r7, #184	@ 0xb8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	timestamp++;
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <SysTick_Handler+0x1c>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <SysTick_Handler+0x1c>)
 80013c4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 f95f 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000be8 	.word	0x20000be8

080013d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <DMA1_Stream5_IRQHandler+0x10>)
 80013da:	f001 f9d3 	bl	8002784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000424 	.word	0x20000424

080013e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80013ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013f0:	f002 f946 	bl	8003680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <DMA2_Stream0_IRQHandler+0x10>)
 80013fe:	f001 f9c1 	bl	8002784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200003b0 	.word	0x200003b0

0800140c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return 1;
 8001410:	2301      	movs	r3, #1
}
 8001412:	4618      	mov	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_kill>:

int _kill(int pid, int sig)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001426:	f005 fd27 	bl	8006e78 <__errno>
 800142a:	4603      	mov	r3, r0
 800142c:	2216      	movs	r2, #22
 800142e:	601a      	str	r2, [r3, #0]
  return -1;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <_exit>:

void _exit (int status)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ffe7 	bl	800141c <_kill>
  while (1) {}    /* Make sure we hang here */
 800144e:	bf00      	nop
 8001450:	e7fd      	b.n	800144e <_exit+0x12>

08001452 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e00a      	b.n	800147a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001464:	f3af 8000 	nop.w
 8001468:	4601      	mov	r1, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60ba      	str	r2, [r7, #8]
 8001470:	b2ca      	uxtb	r2, r1
 8001472:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	429a      	cmp	r2, r3
 8001480:	dbf0      	blt.n	8001464 <_read+0x12>
  }

  return len;
 8001482:	687b      	ldr	r3, [r7, #4]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e009      	b.n	80014b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	60ba      	str	r2, [r7, #8]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f8b8 	bl	800061c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbf1      	blt.n	800149e <_write+0x12>
  }
  return len;
 80014ba:	687b      	ldr	r3, [r7, #4]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_close>:

int _close(int file)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ec:	605a      	str	r2, [r3, #4]
  return 0;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_isatty>:

int _isatty(int file)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f005 fc8c 	bl	8006e78 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20080000 	.word	0x20080000
 800158c:	00000400 	.word	0x00000400
 8001590:	20000bf4 	.word	0x20000bf4
 8001594:	20000d48 	.word	0x20000d48

08001598 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <SystemInit+0x20>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a2:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <SystemInit+0x20>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c0:	f7ff ffea 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	@ (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f005 fc4b 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff f83b 	bl	8000668 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001600:	08008f14 	.word	0x08008f14
  ldr r2, =_sbss
 8001604:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001608:	20000d48 	.word	0x20000d48

0800160c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC_IRQHandler>

0800160e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001612:	2003      	movs	r0, #3
 8001614:	f000 fd82 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001618:	2000      	movs	r0, #0
 800161a:	f000 f805 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161e:	f7ff fbe3 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 fd9d 	bl	8002186 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 fd65 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	20000008 	.word	0x20000008
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000bf8 	.word	0x20000bf8

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000bf8 	.word	0x20000bf8

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e031      	b.n	800178a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fb7e 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_ADC_Init+0x84>)
 8001754:	4013      	ands	r3, r2
 8001756:	f043 0202 	orr.w	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fa90 	bl	8001c84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40
 800177a:	e001      	b.n	8001780 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	ffffeefd 	.word	0xffffeefd

08001798 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Start_DMA+0x22>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e0d6      	b.n	8001968 <HAL_ADC_Start_DMA+0x1d0>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d018      	beq.n	8001802 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80017e0:	4b63      	ldr	r3, [pc, #396]	@ (8001970 <HAL_ADC_Start_DMA+0x1d8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a63      	ldr	r2, [pc, #396]	@ (8001974 <HAL_ADC_Start_DMA+0x1dc>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9a      	lsrs	r2, r3, #18
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	f040 809e 	bne.w	800194e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001816:	4b58      	ldr	r3, [pc, #352]	@ (8001978 <HAL_ADC_Start_DMA+0x1e0>)
 8001818:	4013      	ands	r3, r2
 800181a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001838:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800184c:	d106      	bne.n	800185c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f023 0206 	bic.w	r2, r3, #6
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	645a      	str	r2, [r3, #68]	@ 0x44
 800185a:	e002      	b.n	8001862 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186e:	4a43      	ldr	r2, [pc, #268]	@ (800197c <HAL_ADC_Start_DMA+0x1e4>)
 8001870:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001876:	4a42      	ldr	r2, [pc, #264]	@ (8001980 <HAL_ADC_Start_DMA+0x1e8>)
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187e:	4a41      	ldr	r2, [pc, #260]	@ (8001984 <HAL_ADC_Start_DMA+0x1ec>)
 8001880:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800188a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800189a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	334c      	adds	r3, #76	@ 0x4c
 80018b6:	4619      	mov	r1, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f000 ff02 	bl	80026c4 <HAL_DMA_Start_IT>
 80018c0:	4603      	mov	r3, r0
 80018c2:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <HAL_ADC_Start_DMA+0x1f0>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10f      	bne.n	80018f0 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d143      	bne.n	8001966 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e03a      	b.n	8001966 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a25      	ldr	r2, [pc, #148]	@ (800198c <HAL_ADC_Start_DMA+0x1f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10e      	bne.n	8001918 <HAL_ADC_Start_DMA+0x180>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001916:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <HAL_ADC_Start_DMA+0x1f0>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d120      	bne.n	8001966 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <HAL_ADC_Start_DMA+0x1f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d11b      	bne.n	8001966 <HAL_ADC_Start_DMA+0x1ce>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d114      	bne.n	8001966 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	e00b      	b.n	8001966 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8001966:	7dfb      	ldrb	r3, [r7, #23]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83
 8001978:	fffff8fe 	.word	0xfffff8fe
 800197c:	08001e79 	.word	0x08001e79
 8001980:	08001f33 	.word	0x08001f33
 8001984:	08001f4f 	.word	0x08001f4f
 8001988:	40012300 	.word	0x40012300
 800198c:	40012000 	.word	0x40012000
 8001990:	40012200 	.word	0x40012200

08001994 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x1c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e13a      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x292>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b09      	cmp	r3, #9
 80019fa:	d93a      	bls.n	8001a72 <HAL_ADC_ConfigChannel+0xa2>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a04:	d035      	beq.n	8001a72 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68d9      	ldr	r1, [r3, #12]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b1e      	subs	r3, #30
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	400a      	ands	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a8f      	ldr	r2, [pc, #572]	@ (8001c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10a      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	061a      	lsls	r2, r3, #24
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4a:	e039      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68d9      	ldr	r1, [r3, #12]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4403      	add	r3, r0
 8001a64:	3b1e      	subs	r3, #30
 8001a66:	409a      	lsls	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a70:	e026      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6919      	ldr	r1, [r3, #16]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43da      	mvns	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	400a      	ands	r2, r1
 8001a98:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6919      	ldr	r1, [r3, #16]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4403      	add	r3, r0
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b06      	cmp	r3, #6
 8001ac6:	d824      	bhi.n	8001b12 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	221f      	movs	r2, #31
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b05      	subs	r3, #5
 8001b04:	fa00 f203 	lsl.w	r2, r0, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b10:	e04c      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d824      	bhi.n	8001b64 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b23      	subs	r3, #35	@ 0x23
 8001b2c:	221f      	movs	r2, #31
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	3b23      	subs	r3, #35	@ 0x23
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b62:	e023      	b.n	8001bac <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	3b41      	subs	r3, #65	@ 0x41
 8001b76:	221f      	movs	r2, #31
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	400a      	ands	r2, r1
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b41      	subs	r3, #65	@ 0x41
 8001ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a30      	ldr	r2, [pc, #192]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10a      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1fc>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bbe:	d105      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bc6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001bca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x226>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a25      	ldr	r2, [pc, #148]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001be4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001be8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bea:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bf4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <HAL_ADC_ConfigChannel+0x2a4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d12b      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x288>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d003      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0x242>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b11      	cmp	r3, #17
 8001c10:	d122      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c18:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001c1c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a15      	ldr	r2, [pc, #84]	@ (8001c78 <HAL_ADC_ConfigChannel+0x2a8>)
 8001c24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c28:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a10      	ldr	r2, [pc, #64]	@ (8001c70 <HAL_ADC_ConfigChannel+0x2a0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d111      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_ADC_ConfigChannel+0x2ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <HAL_ADC_ConfigChannel+0x2b0>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0c9a      	lsrs	r2, r3, #18
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	10000012 	.word	0x10000012
 8001c74:	40012000 	.word	0x40012000
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c8c:	4b78      	ldr	r3, [pc, #480]	@ (8001e70 <ADC_Init+0x1ec>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a77      	ldr	r2, [pc, #476]	@ (8001e70 <ADC_Init+0x1ec>)
 8001c92:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001c96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c98:	4b75      	ldr	r3, [pc, #468]	@ (8001e70 <ADC_Init+0x1ec>)
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4973      	ldr	r1, [pc, #460]	@ (8001e70 <ADC_Init+0x1ec>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	021a      	lsls	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6899      	ldr	r1, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	4a58      	ldr	r2, [pc, #352]	@ (8001e74 <ADC_Init+0x1f0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d022      	beq.n	8001d5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6899      	ldr	r1, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	e00f      	b.n	8001d7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0202 	bic.w	r2, r2, #2
 8001d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	005a      	lsls	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01b      	beq.n	8001de4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001dca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	035a      	lsls	r2, r3, #13
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	e007      	b.n	8001df4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001df2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	051a      	lsls	r2, r3, #20
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e36:	025a      	lsls	r2, r3, #9
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	029a      	lsls	r2, r3, #10
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40012300 	.word	0x40012300
 8001e74:	0f000001 	.word	0x0f000001

08001e78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d13c      	bne.n	8001f0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d12b      	bne.n	8001f04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d127      	bne.n	8001f04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d119      	bne.n	8001f04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0220 	bic.w	r2, r2, #32
 8001ede:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fd45 	bl	8001994 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f0a:	e00e      	b.n	8001f2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff fd4f 	bl	80019bc <HAL_ADC_ErrorCallback>
}
 8001f1e:	e004      	b.n	8001f2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff fd31 	bl	80019a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2240      	movs	r2, #64	@ 0x40
 8001f60:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	f043 0204 	orr.w	r2, r3, #4
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f7ff fd24 	bl	80019bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x40>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x40>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00
 8001fc0:	05fa0000 	.word	0x05fa0000

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	@ (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff29 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff3e 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff31 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e014      	b.n	80021da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	791b      	ldrb	r3, [r3, #4]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe fea9 	bl	8000f18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0a2      	b.n	8002342 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	795b      	ldrb	r3, [r3, #5]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_DAC_Start_DMA+0x24>
 8002204:	2302      	movs	r3, #2
 8002206:	e09c      	b.n	8002342 <HAL_DAC_Start_DMA+0x15e>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2202      	movs	r2, #2
 8002212:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d129      	bne.n	800226e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4a4b      	ldr	r2, [pc, #300]	@ (800234c <HAL_DAC_Start_DMA+0x168>)
 8002220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	4a4a      	ldr	r2, [pc, #296]	@ (8002350 <HAL_DAC_Start_DMA+0x16c>)
 8002228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4a49      	ldr	r2, [pc, #292]	@ (8002354 <HAL_DAC_Start_DMA+0x170>)
 8002230:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002240:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_DAC_Start_DMA+0x6c>
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d005      	beq.n	800225a <HAL_DAC_Start_DMA+0x76>
 800224e:	e009      	b.n	8002264 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3308      	adds	r3, #8
 8002256:	613b      	str	r3, [r7, #16]
        break;
 8002258:	e033      	b.n	80022c2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	330c      	adds	r3, #12
 8002260:	613b      	str	r3, [r7, #16]
        break;
 8002262:	e02e      	b.n	80022c2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3310      	adds	r3, #16
 800226a:	613b      	str	r3, [r7, #16]
        break;
 800226c:	e029      	b.n	80022c2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4a39      	ldr	r2, [pc, #228]	@ (8002358 <HAL_DAC_Start_DMA+0x174>)
 8002274:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4a38      	ldr	r2, [pc, #224]	@ (800235c <HAL_DAC_Start_DMA+0x178>)
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	4a37      	ldr	r2, [pc, #220]	@ (8002360 <HAL_DAC_Start_DMA+0x17c>)
 8002284:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002294:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_DAC_Start_DMA+0xc0>
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d005      	beq.n	80022ae <HAL_DAC_Start_DMA+0xca>
 80022a2:	e009      	b.n	80022b8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3314      	adds	r3, #20
 80022aa:	613b      	str	r3, [r7, #16]
        break;
 80022ac:	e009      	b.n	80022c2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3318      	adds	r3, #24
 80022b4:	613b      	str	r3, [r7, #16]
        break;
 80022b6:	e004      	b.n	80022c2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	331c      	adds	r3, #28
 80022be:	613b      	str	r3, [r7, #16]
        break;
 80022c0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6898      	ldr	r0, [r3, #8]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	f000 f9ef 	bl	80026c4 <HAL_DMA_Start_IT>
 80022e6:	4603      	mov	r3, r0
 80022e8:	75fb      	strb	r3, [r7, #23]
 80022ea:	e010      	b.n	800230e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80022fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68d8      	ldr	r0, [r3, #12]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	f000 f9dd 	bl	80026c4 <HAL_DMA_Start_IT>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2201      	movs	r2, #1
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e005      	b.n	8002340 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002340:	7dfb      	ldrb	r3, [r7, #23]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	08002453 	.word	0x08002453
 8002350:	08002475 	.word	0x08002475
 8002354:	08002491 	.word	0x08002491
 8002358:	080024fb 	.word	0x080024fb
 800235c:	0800251d 	.word	0x0800251d
 8002360:	08002539 	.word	0x08002539

08002364 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	@ 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_DAC_ConfigChannel+0x1c>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e042      	b.n	8002446 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	795b      	ldrb	r3, [r3, #5]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_DAC_ConfigChannel+0x2c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e03c      	b.n	8002446 <HAL_DAC_ConfigChannel+0xa6>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2202      	movs	r2, #2
 80023d6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	22c0      	movs	r2, #192	@ 0xc0
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002444:	7ffb      	ldrb	r3, [r7, #31]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff ff7f 	bl	8002364 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	711a      	strb	r2, [r3, #4]
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002480:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff ff78 	bl	8002378 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f043 0204 	orr.w	r2, r3, #4
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff ff6e 	bl	800238c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	711a      	strb	r2, [r3, #4]
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff ffd8 	bl	80024be <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	711a      	strb	r2, [r3, #4]
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002528:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff ffd1 	bl	80024d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002544:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f043 0204 	orr.w	r2, r3, #4
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff ffc7 	bl	80024e6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	711a      	strb	r2, [r3, #4]
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff f89c 	bl	80016b0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e099      	b.n	80026b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a4:	e00f      	b.n	80025c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a6:	f7ff f883 	bl	80016b0 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d908      	bls.n	80025c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e078      	b.n	80026b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e8      	bne.n	80025a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <HAL_DMA_Init+0x158>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	2b04      	cmp	r3, #4
 800261e:	d107      	bne.n	8002630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	4313      	orrs	r3, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0307 	bic.w	r3, r3, #7
 8002646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	2b04      	cmp	r3, #4
 8002658:	d117      	bne.n	800268a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fa77 	bl	8002b60 <DMA_CheckFifoParam>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2240      	movs	r2, #64	@ 0x40
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002686:	2301      	movs	r3, #1
 8002688:	e016      	b.n	80026b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa2e 	bl	8002af4 <DMA_CalcBaseAndBitshift>
 8002698:	4603      	mov	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	e010803f 	.word	0xe010803f

080026c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Start_IT+0x26>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e048      	b.n	800277c <HAL_DMA_Start_IT+0xb8>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d137      	bne.n	800276e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f9c0 	bl	8002a98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	223f      	movs	r2, #63	@ 0x3f
 800271e:	409a      	lsls	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0216 	orr.w	r2, r2, #22
 8002732:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002742:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e005      	b.n	800277a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002790:	4b8e      	ldr	r3, [pc, #568]	@ (80029cc <HAL_DMA_IRQHandler+0x248>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a8e      	ldr	r2, [pc, #568]	@ (80029d0 <HAL_DMA_IRQHandler+0x24c>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ae:	2208      	movs	r2, #8
 80027b0:	409a      	lsls	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01a      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d013      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0204 	bic.w	r2, r2, #4
 80027d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027dc:	2208      	movs	r2, #8
 80027de:	409a      	lsls	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	2201      	movs	r2, #1
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	2201      	movs	r2, #1
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281e:	f043 0202 	orr.w	r2, r3, #2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	2204      	movs	r2, #4
 800282c:	409a      	lsls	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d012      	beq.n	800285c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002848:	2204      	movs	r2, #4
 800284a:	409a      	lsls	r2, r3
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f043 0204 	orr.w	r2, r3, #4
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	2210      	movs	r2, #16
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d043      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d03c      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	2210      	movs	r2, #16
 8002880:	409a      	lsls	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d018      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d108      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d024      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
 80028b2:	e01f      	b.n	80028f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
 80028c4:	e016      	b.n	80028f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0208 	bic.w	r2, r2, #8
 80028e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	2220      	movs	r2, #32
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 808f 	beq.w	8002a24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8087 	beq.w	8002a24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	2220      	movs	r2, #32
 800291c:	409a      	lsls	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b05      	cmp	r3, #5
 800292c:	d136      	bne.n	800299c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0216 	bic.w	r2, r2, #22
 800293c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800294c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_DMA_IRQHandler+0x1da>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0208 	bic.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	223f      	movs	r2, #63	@ 0x3f
 8002974:	409a      	lsls	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298e:	2b00      	cmp	r3, #0
 8002990:	d07e      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
        }
        return;
 800299a:	e079      	b.n	8002a90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d031      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
 80029c8:	e02c      	b.n	8002a24 <HAL_DMA_IRQHandler+0x2a0>
 80029ca:	bf00      	nop
 80029cc:	20000000 	.word	0x20000000
 80029d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d023      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
 80029e4:	e01e      	b.n	8002a24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0210 	bic.w	r2, r2, #16
 8002a02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d032      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2205      	movs	r2, #5
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	3301      	adds	r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d307      	bcc.n	8002a6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f2      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x2cc>
 8002a6a:	e000      	b.n	8002a6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
 8002a8e:	e000      	b.n	8002a92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a90:	bf00      	nop
    }
  }
}
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b40      	cmp	r3, #64	@ 0x40
 8002ac4:	d108      	bne.n	8002ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ad6:	e007      	b.n	8002ae8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3b10      	subs	r3, #16
 8002b04:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <DMA_CalcBaseAndBitshift+0x60>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b0e:	4a12      	ldr	r2, [pc, #72]	@ (8002b58 <DMA_CalcBaseAndBitshift+0x64>)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d908      	bls.n	8002b34 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <DMA_CalcBaseAndBitshift+0x68>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	1d1a      	adds	r2, r3, #4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b32:	e006      	b.n	8002b42 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <DMA_CalcBaseAndBitshift+0x68>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	aaaaaaab 	.word	0xaaaaaaab
 8002b58:	08008b84 	.word	0x08008b84
 8002b5c:	fffffc00 	.word	0xfffffc00

08002b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11f      	bne.n	8002bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d856      	bhi.n	8002c2e <DMA_CheckFifoParam+0xce>
 8002b80:	a201      	add	r2, pc, #4	@ (adr r2, 8002b88 <DMA_CheckFifoParam+0x28>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002bab 	.word	0x08002bab
 8002b90:	08002b99 	.word	0x08002b99
 8002b94:	08002c2f 	.word	0x08002c2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d046      	beq.n	8002c32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba8:	e043      	b.n	8002c32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bb2:	d140      	bne.n	8002c36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb8:	e03d      	b.n	8002c36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bc2:	d121      	bne.n	8002c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d837      	bhi.n	8002c3a <DMA_CheckFifoParam+0xda>
 8002bca:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd0 <DMA_CheckFifoParam+0x70>)
 8002bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd0:	08002be1 	.word	0x08002be1
 8002bd4:	08002be7 	.word	0x08002be7
 8002bd8:	08002be1 	.word	0x08002be1
 8002bdc:	08002bf9 	.word	0x08002bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e030      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d025      	beq.n	8002c3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf6:	e022      	b.n	8002c3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c00:	d11f      	bne.n	8002c42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c06:	e01c      	b.n	8002c42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d903      	bls.n	8002c16 <DMA_CheckFifoParam+0xb6>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d003      	beq.n	8002c1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c14:	e018      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1a:	e015      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2c:	e00b      	b.n	8002c46 <DMA_CheckFifoParam+0xe6>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e00a      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e008      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e006      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e004      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
    }
  } 
  
  return status; 
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop

08002c58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e086      	b.n	8002d78 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe f9bf 	bl	8001000 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	4b3f      	ldr	r3, [pc, #252]	@ (8002d80 <HAL_ETH_Init+0x128>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	4a3e      	ldr	r2, [pc, #248]	@ (8002d80 <HAL_ETH_Init+0x128>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d80 <HAL_ETH_Init+0x128>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <HAL_ETH_Init+0x12c>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a39      	ldr	r2, [pc, #228]	@ (8002d84 <HAL_ETH_Init+0x12c>)
 8002ca0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ca4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ca6:	4b37      	ldr	r3, [pc, #220]	@ (8002d84 <HAL_ETH_Init+0x12c>)
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4935      	ldr	r1, [pc, #212]	@ (8002d84 <HAL_ETH_Init+0x12c>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002cb4:	4b33      	ldr	r3, [pc, #204]	@ (8002d84 <HAL_ETH_Init+0x12c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd0:	f7fe fcee 	bl	80016b0 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cd6:	e011      	b.n	8002cfc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002cd8:	f7fe fcea 	bl	80016b0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ce6:	d909      	bls.n	8002cfc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2204      	movs	r2, #4
 8002cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	22e0      	movs	r2, #224	@ 0xe0
 8002cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e03d      	b.n	8002d78 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e4      	bne.n	8002cd8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f97a 	bl	8003008 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fa25 	bl	8003164 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fa7b 	bl	8003216 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	461a      	mov	r2, r3
 8002d26:	2100      	movs	r1, #0
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f9e3 	bl	80030f4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_ETH_Init+0x130>)
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002d62:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2210      	movs	r2, #16
 8002d72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40013800 	.word	0x40013800
 8002d88:	00020060 	.word	0x00020060

08002d8c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4b53      	ldr	r3, [pc, #332]	@ (8002ef0 <ETH_SetMACConfig+0x164>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	7b9b      	ldrb	r3, [r3, #14]
 8002daa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	7c12      	ldrb	r2, [r2, #16]
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	d102      	bne.n	8002dba <ETH_SetMACConfig+0x2e>
 8002db4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002db8:	e000      	b.n	8002dbc <ETH_SetMACConfig+0x30>
 8002dba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002dbc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	7c52      	ldrb	r2, [r2, #17]
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	d102      	bne.n	8002dcc <ETH_SetMACConfig+0x40>
 8002dc6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002dca:	e000      	b.n	8002dce <ETH_SetMACConfig+0x42>
 8002dcc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	7fdb      	ldrb	r3, [r3, #31]
 8002dda:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ddc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002de2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	7f92      	ldrb	r2, [r2, #30]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d102      	bne.n	8002df2 <ETH_SetMACConfig+0x66>
 8002dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002df0:	e000      	b.n	8002df4 <ETH_SetMACConfig+0x68>
 8002df2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002df4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	7f1b      	ldrb	r3, [r3, #28]
 8002dfa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dfc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e12:	2a00      	cmp	r2, #0
 8002e14:	d102      	bne.n	8002e1c <ETH_SetMACConfig+0x90>
 8002e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e1a:	e000      	b.n	8002e1e <ETH_SetMACConfig+0x92>
 8002e1c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	7bdb      	ldrb	r3, [r3, #15]
 8002e24:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e26:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e34:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e36:	4313      	orrs	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f7fe fc3a 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e72:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d101      	bne.n	8002e82 <ETH_SetMACConfig+0xf6>
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	e000      	b.n	8002e84 <ETH_SetMACConfig+0xf8>
 8002e82:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e84:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002e92:	2a01      	cmp	r2, #1
 8002e94:	d101      	bne.n	8002e9a <ETH_SetMACConfig+0x10e>
 8002e96:	2208      	movs	r2, #8
 8002e98:	e000      	b.n	8002e9c <ETH_SetMACConfig+0x110>
 8002e9a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e9c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002ea4:	2a01      	cmp	r2, #1
 8002ea6:	d101      	bne.n	8002eac <ETH_SetMACConfig+0x120>
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	e000      	b.n	8002eae <ETH_SetMACConfig+0x122>
 8002eac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002eae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002eb6:	2a01      	cmp	r2, #1
 8002eb8:	d101      	bne.n	8002ebe <ETH_SetMACConfig+0x132>
 8002eba:	2202      	movs	r2, #2
 8002ebc:	e000      	b.n	8002ec0 <ETH_SetMACConfig+0x134>
 8002ebe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f7fe fbf5 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	619a      	str	r2, [r3, #24]
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	fd20810f 	.word	0xfd20810f

08002ef4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003004 <ETH_SetDMAConfig+0x110>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	7b1b      	ldrb	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <ETH_SetDMAConfig+0x2c>
 8002f1a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f1e:	e000      	b.n	8002f22 <ETH_SetDMAConfig+0x2e>
 8002f20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	7b5b      	ldrb	r3, [r3, #13]
 8002f26:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f28:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	7f52      	ldrb	r2, [r2, #29]
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	d102      	bne.n	8002f38 <ETH_SetDMAConfig+0x44>
 8002f32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f36:	e000      	b.n	8002f3a <ETH_SetDMAConfig+0x46>
 8002f38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	7b9b      	ldrb	r3, [r3, #14]
 8002f40:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f42:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	7f1b      	ldrb	r3, [r3, #28]
 8002f4e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f50:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	7f9b      	ldrb	r3, [r3, #30]
 8002f56:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f58:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f5e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f66:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7fe fb9c 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	791b      	ldrb	r3, [r3, #4]
 8002fa2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fa8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002fae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fb4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fbc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002fbe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fc6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fcc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fda:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fe fb6d 	bl	80016c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	f8de3f23 	.word	0xf8de3f23

08003008 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0a6      	sub	sp, #152	@ 0x98
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800301c:	2300      	movs	r3, #0
 800301e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800304a:	2300      	movs	r3, #0
 800304c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003054:	2300      	movs	r3, #0
 8003056:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003070:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003074:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003076:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800307a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003082:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fe7f 	bl	8002d8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003092:	2301      	movs	r3, #1
 8003094:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800309c:	2301      	movs	r3, #1
 800309e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80030c8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030ce:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff05 	bl	8002ef4 <ETH_SetDMAConfig>
}
 80030ea:	bf00      	nop
 80030ec:	3798      	adds	r7, #152	@ 0x98
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3305      	adds	r3, #5
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	3204      	adds	r2, #4
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <ETH_MACAddressConfig+0x68>)
 8003116:	4413      	add	r3, r2
 8003118:	461a      	mov	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3303      	adds	r3, #3
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	061a      	lsls	r2, r3, #24
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3302      	adds	r3, #2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3301      	adds	r3, #1
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	4313      	orrs	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	7812      	ldrb	r2, [r2, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <ETH_MACAddressConfig+0x6c>)
 8003146:	4413      	add	r3, r2
 8003148:	461a      	mov	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	6013      	str	r3, [r2, #0]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40028040 	.word	0x40028040
 8003160:	40028044 	.word	0x40028044

08003164 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e03e      	b.n	80031f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2200      	movs	r2, #0
 800319a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	3206      	adds	r2, #6
 80031a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d80c      	bhi.n	80031d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68d9      	ldr	r1, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	e004      	b.n	80031de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d9bd      	bls.n	8003172 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003208:	611a      	str	r2, [r3, #16]
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e048      	b.n	80032b6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6919      	ldr	r1, [r3, #16]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2200      	movs	r2, #0
 8003252:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003260:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	3212      	adds	r2, #18
 8003282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d80c      	bhi.n	80032a6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6919      	ldr	r1, [r3, #16]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e004      	b.n	80032b0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d9b3      	bls.n	8003224 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032e6:	60da      	str	r2, [r3, #12]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	@ 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e175      	b.n	8003600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	f040 8164 	bne.w	80035fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d005      	beq.n	800334a <HAL_GPIO_Init+0x56>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d130      	bne.n	80033ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80be 	beq.w	80035fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	4b66      	ldr	r3, [pc, #408]	@ (8003618 <HAL_GPIO_Init+0x324>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	4a65      	ldr	r2, [pc, #404]	@ (8003618 <HAL_GPIO_Init+0x324>)
 8003484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003488:	6453      	str	r3, [r2, #68]	@ 0x44
 800348a:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <HAL_GPIO_Init+0x324>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003496:	4a61      	ldr	r2, [pc, #388]	@ (800361c <HAL_GPIO_Init+0x328>)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a58      	ldr	r2, [pc, #352]	@ (8003620 <HAL_GPIO_Init+0x32c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d037      	beq.n	8003532 <HAL_GPIO_Init+0x23e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a57      	ldr	r2, [pc, #348]	@ (8003624 <HAL_GPIO_Init+0x330>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d031      	beq.n	800352e <HAL_GPIO_Init+0x23a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a56      	ldr	r2, [pc, #344]	@ (8003628 <HAL_GPIO_Init+0x334>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02b      	beq.n	800352a <HAL_GPIO_Init+0x236>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a55      	ldr	r2, [pc, #340]	@ (800362c <HAL_GPIO_Init+0x338>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d025      	beq.n	8003526 <HAL_GPIO_Init+0x232>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a54      	ldr	r2, [pc, #336]	@ (8003630 <HAL_GPIO_Init+0x33c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <HAL_GPIO_Init+0x22e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a53      	ldr	r2, [pc, #332]	@ (8003634 <HAL_GPIO_Init+0x340>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d019      	beq.n	800351e <HAL_GPIO_Init+0x22a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a52      	ldr	r2, [pc, #328]	@ (8003638 <HAL_GPIO_Init+0x344>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_GPIO_Init+0x226>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a51      	ldr	r2, [pc, #324]	@ (800363c <HAL_GPIO_Init+0x348>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00d      	beq.n	8003516 <HAL_GPIO_Init+0x222>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a50      	ldr	r2, [pc, #320]	@ (8003640 <HAL_GPIO_Init+0x34c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_GPIO_Init+0x21e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4f      	ldr	r2, [pc, #316]	@ (8003644 <HAL_GPIO_Init+0x350>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d101      	bne.n	800350e <HAL_GPIO_Init+0x21a>
 800350a:	2309      	movs	r3, #9
 800350c:	e012      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800350e:	230a      	movs	r3, #10
 8003510:	e010      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003512:	2308      	movs	r3, #8
 8003514:	e00e      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003516:	2307      	movs	r3, #7
 8003518:	e00c      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800351a:	2306      	movs	r3, #6
 800351c:	e00a      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800351e:	2305      	movs	r3, #5
 8003520:	e008      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003522:	2304      	movs	r3, #4
 8003524:	e006      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003526:	2303      	movs	r3, #3
 8003528:	e004      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800352a:	2302      	movs	r3, #2
 800352c:	e002      	b.n	8003534 <HAL_GPIO_Init+0x240>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <HAL_GPIO_Init+0x240>
 8003532:	2300      	movs	r3, #0
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	f002 0203 	and.w	r2, r2, #3
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	4093      	lsls	r3, r2
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003544:	4935      	ldr	r1, [pc, #212]	@ (800361c <HAL_GPIO_Init+0x328>)
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	089b      	lsrs	r3, r3, #2
 800354a:	3302      	adds	r3, #2
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003552:	4b3d      	ldr	r3, [pc, #244]	@ (8003648 <HAL_GPIO_Init+0x354>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003576:	4a34      	ldr	r2, [pc, #208]	@ (8003648 <HAL_GPIO_Init+0x354>)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357c:	4b32      	ldr	r3, [pc, #200]	@ (8003648 <HAL_GPIO_Init+0x354>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035a0:	4a29      	ldr	r2, [pc, #164]	@ (8003648 <HAL_GPIO_Init+0x354>)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a6:	4b28      	ldr	r3, [pc, #160]	@ (8003648 <HAL_GPIO_Init+0x354>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <HAL_GPIO_Init+0x354>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003648 <HAL_GPIO_Init+0x354>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035f4:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <HAL_GPIO_Init+0x354>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b0f      	cmp	r3, #15
 8003604:	f67f ae86 	bls.w	8003314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3724      	adds	r7, #36	@ 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	40013800 	.word	0x40013800
 8003620:	40020000 	.word	0x40020000
 8003624:	40020400 	.word	0x40020400
 8003628:	40020800 	.word	0x40020800
 800362c:	40020c00 	.word	0x40020c00
 8003630:	40021000 	.word	0x40021000
 8003634:	40021400 	.word	0x40021400
 8003638:	40021800 	.word	0x40021800
 800363c:	40021c00 	.word	0x40021c00
 8003640:	40022000 	.word	0x40022000
 8003644:	40022400 	.word	0x40022400
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
 8003658:	4613      	mov	r3, r2
 800365a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003668:	e003      	b.n	8003672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800366a:	887b      	ldrh	r3, [r7, #2]
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	619a      	str	r2, [r3, #24]
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800368a:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc ffce 	bl	8000640 <HAL_GPIO_EXTI_Callback>
  }
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e108      	b.n	80038d4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd fdc5 	bl	800126c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2203      	movs	r2, #3
 80036e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f0:	d102      	bne.n	80036f8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fb7f 	bl	8005e00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	7c1a      	ldrb	r2, [r3, #16]
 800370a:	f88d 2000 	strb.w	r2, [sp]
 800370e:	3304      	adds	r3, #4
 8003710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003712:	f002 fb1b 	bl	8005d4c <USB_CoreInit>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d5      	b.n	80038d4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f002 fb77 	bl	8005e22 <USB_SetCurrentMode>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0c6      	b.n	80038d4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003746:	2300      	movs	r3, #0
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	e04a      	b.n	80037e2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3315      	adds	r3, #21
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3314      	adds	r3, #20
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003774:	7bfa      	ldrb	r2, [r7, #15]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	b298      	uxth	r0, r3
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	332e      	adds	r3, #46	@ 0x2e
 8003788:	4602      	mov	r2, r0
 800378a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3318      	adds	r3, #24
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	331c      	adds	r3, #28
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3320      	adds	r3, #32
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3324      	adds	r3, #36	@ 0x24
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	3301      	adds	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	791b      	ldrb	r3, [r3, #4]
 80037e6:	7bfa      	ldrb	r2, [r7, #15]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3af      	bcc.n	800374c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e044      	b.n	800387c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	3301      	adds	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	791b      	ldrb	r3, [r3, #4]
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	429a      	cmp	r2, r3
 8003884:	d3b5      	bcc.n	80037f2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7c1a      	ldrb	r2, [r3, #16]
 800388e:	f88d 2000 	strb.w	r2, [sp]
 8003892:	3304      	adds	r3, #4
 8003894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003896:	f002 fb11 	bl	8005ebc <USB_DevInit>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e013      	b.n	80038d4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7b1b      	ldrb	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f80a 	bl	80038dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f002 fccc 	bl	800626a <USB_DevDisconnect>

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_PCDEx_ActivateLPM+0x44>)
 800390c:	4313      	orrs	r3, r2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	10000003 	.word	0x10000003

08003924 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800392e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40007000 	.word	0x40007000

08003944 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <HAL_PWREx_EnableOverDrive+0x98>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <HAL_PWREx_EnableOverDrive+0x98>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	@ 0x40
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_PWREx_EnableOverDrive+0x98>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003966:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003970:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003972:	f7fd fe9d 	bl	80016b0 <HAL_GetTick>
 8003976:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003978:	e009      	b.n	800398e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800397a:	f7fd fe99 	bl	80016b0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003988:	d901      	bls.n	800398e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e022      	b.n	80039d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800398e:	4b14      	ldr	r3, [pc, #80]	@ (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399a:	d1ee      	bne.n	800397a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800399c:	4b10      	ldr	r3, [pc, #64]	@ (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0f      	ldr	r2, [pc, #60]	@ (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a8:	f7fd fe82 	bl	80016b0 <HAL_GetTick>
 80039ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ae:	e009      	b.n	80039c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b0:	f7fd fe7e 	bl	80016b0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039be:	d901      	bls.n	80039c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e007      	b.n	80039d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d0:	d1ee      	bne.n	80039b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40007000 	.word	0x40007000

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e29b      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8087 	beq.w	8003b16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a08:	4b96      	ldr	r3, [pc, #600]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d00c      	beq.n	8003a2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a14:	4b93      	ldr	r3, [pc, #588]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d112      	bne.n	8003a46 <HAL_RCC_OscConfig+0x62>
 8003a20:	4b90      	ldr	r3, [pc, #576]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a2c:	d10b      	bne.n	8003a46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d06c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x130>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d168      	bne.n	8003b14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e275      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a4e:	d106      	bne.n	8003a5e <HAL_RCC_OscConfig+0x7a>
 8003a50:	4b84      	ldr	r3, [pc, #528]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a83      	ldr	r2, [pc, #524]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	e02e      	b.n	8003abc <HAL_RCC_OscConfig+0xd8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x9c>
 8003a66:	4b7f      	ldr	r3, [pc, #508]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b7c      	ldr	r3, [pc, #496]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a7b      	ldr	r2, [pc, #492]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e01d      	b.n	8003abc <HAL_RCC_OscConfig+0xd8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003a8a:	4b76      	ldr	r3, [pc, #472]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a75      	ldr	r2, [pc, #468]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b73      	ldr	r3, [pc, #460]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a72      	ldr	r2, [pc, #456]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e00b      	b.n	8003abc <HAL_RCC_OscConfig+0xd8>
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6b      	ldr	r2, [pc, #428]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fdf4 	bl	80016b0 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fd fdf0 	bl	80016b0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	@ 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e229      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b61      	ldr	r3, [pc, #388]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e014      	b.n	8003b16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fde0 	bl	80016b0 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fd fddc 	bl	80016b0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e215      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b06:	4b57      	ldr	r3, [pc, #348]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x110>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d069      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b22:	4b50      	ldr	r3, [pc, #320]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x190>
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	4b47      	ldr	r3, [pc, #284]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x17a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d001      	beq.n	8003b5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e1e9      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b41      	ldr	r3, [pc, #260]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	493d      	ldr	r1, [pc, #244]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	e040      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b39      	ldr	r3, [pc, #228]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a38      	ldr	r2, [pc, #224]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fd92 	bl	80016b0 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fd fd8e 	bl	80016b0 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e1c7      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b30      	ldr	r3, [pc, #192]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	4b2d      	ldr	r3, [pc, #180]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4929      	ldr	r1, [pc, #164]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
 8003bc2:	e018      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc4:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fd6e 	bl	80016b0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd fd6a 	bl	80016b0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1a3      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b1e      	ldr	r3, [pc, #120]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d038      	beq.n	8003c74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d019      	beq.n	8003c3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b16      	ldr	r3, [pc, #88]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0e:	4a15      	ldr	r2, [pc, #84]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fd fd4b 	bl	80016b0 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fd fd47 	bl	80016b0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e180      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x23a>
 8003c3c:	e01a      	b.n	8003c74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c3e:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c42:	4a08      	ldr	r2, [pc, #32]	@ (8003c64 <HAL_RCC_OscConfig+0x280>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fd31 	bl	80016b0 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c52:	f7fd fd2d 	bl	80016b0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d903      	bls.n	8003c68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e166      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
 8003c64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	4b92      	ldr	r3, [pc, #584]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80a4 	beq.w	8003dca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c82:	4b8c      	ldr	r3, [pc, #560]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	4b89      	ldr	r3, [pc, #548]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	4a88      	ldr	r2, [pc, #544]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c9a:	4b86      	ldr	r3, [pc, #536]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003caa:	4b83      	ldr	r3, [pc, #524]	@ (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d118      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cb6:	4b80      	ldr	r3, [pc, #512]	@ (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7f      	ldr	r2, [pc, #508]	@ (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc2:	f7fd fcf5 	bl	80016b0 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cca:	f7fd fcf1 	bl	80016b0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b64      	cmp	r3, #100	@ 0x64
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e12a      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cdc:	4b76      	ldr	r3, [pc, #472]	@ (8003eb8 <HAL_RCC_OscConfig+0x4d4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0x31a>
 8003cf0:	4b70      	ldr	r3, [pc, #448]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf4:	4a6f      	ldr	r2, [pc, #444]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cfc:	e02d      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x33c>
 8003d06:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0a:	4a6a      	ldr	r2, [pc, #424]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d12:	4b68      	ldr	r3, [pc, #416]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	4a67      	ldr	r2, [pc, #412]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1e:	e01c      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b05      	cmp	r3, #5
 8003d26:	d10c      	bne.n	8003d42 <HAL_RCC_OscConfig+0x35e>
 8003d28:	4b62      	ldr	r3, [pc, #392]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	4a61      	ldr	r2, [pc, #388]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	f043 0304 	orr.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d34:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d38:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d40:	e00b      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
 8003d42:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d46:	4a5b      	ldr	r2, [pc, #364]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d4e:	4b59      	ldr	r3, [pc, #356]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	4a58      	ldr	r2, [pc, #352]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d015      	beq.n	8003d8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fd fca5 	bl	80016b0 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fd fca1 	bl	80016b0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0d8      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	4b4c      	ldr	r3, [pc, #304]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ee      	beq.n	8003d6a <HAL_RCC_OscConfig+0x386>
 8003d8c:	e014      	b.n	8003db8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8e:	f7fd fc8f 	bl	80016b0 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d94:	e00a      	b.n	8003dac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fd fc8b 	bl	80016b0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e0c2      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dac:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ee      	bne.n	8003d96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80ae 	beq.w	8003f30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd4:	4b37      	ldr	r3, [pc, #220]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d06d      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d14b      	bne.n	8003e80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de8:	4b32      	ldr	r3, [pc, #200]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a31      	ldr	r2, [pc, #196]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fc5c 	bl	80016b0 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd fc58 	bl	80016b0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e091      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b29      	ldr	r3, [pc, #164]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69da      	ldr	r2, [r3, #28]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	491b      	ldr	r1, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fc2a 	bl	80016b0 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7fd fc26 	bl	80016b0 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e05f      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x47c>
 8003e7e:	e057      	b.n	8003f30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a0b      	ldr	r2, [pc, #44]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fc10 	bl	80016b0 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd fc0c 	bl	80016b0 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e045      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x4b0>
 8003eb2:	e03d      	b.n	8003f30 <HAL_RCC_OscConfig+0x54c>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f3c <HAL_RCC_OscConfig+0x558>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d030      	beq.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d129      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d122      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003eec:	4013      	ands	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ef2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d119      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	3b01      	subs	r3, #1
 8003f06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d10f      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d107      	bne.n	8003f2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0d0      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b6a      	ldr	r3, [pc, #424]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d910      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b67      	ldr	r3, [pc, #412]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 020f 	bic.w	r2, r3, #15
 8003f6e:	4965      	ldr	r1, [pc, #404]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b63      	ldr	r3, [pc, #396]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0b8      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa0:	4b59      	ldr	r3, [pc, #356]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a58      	ldr	r2, [pc, #352]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003faa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb8:	4b53      	ldr	r3, [pc, #332]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc4:	4b50      	ldr	r3, [pc, #320]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	494d      	ldr	r1, [pc, #308]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d040      	beq.n	8004064 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	4b47      	ldr	r3, [pc, #284]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d115      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e07f      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b41      	ldr	r3, [pc, #260]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e073      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	4b3d      	ldr	r3, [pc, #244]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06b      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4936      	ldr	r1, [pc, #216]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004034:	f7fd fb3c 	bl	80016b0 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	e00a      	b.n	8004052 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403c:	f7fd fb38 	bl	80016b0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e053      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	4b2d      	ldr	r3, [pc, #180]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 020c 	and.w	r2, r3, #12
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d1eb      	bne.n	800403c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004064:	4b27      	ldr	r3, [pc, #156]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d210      	bcs.n	8004094 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b24      	ldr	r3, [pc, #144]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	4922      	ldr	r1, [pc, #136]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b20      	ldr	r3, [pc, #128]	@ (8004104 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e032      	b.n	80040fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4916      	ldr	r1, [pc, #88]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040be:	4b12      	ldr	r3, [pc, #72]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	490e      	ldr	r1, [pc, #56]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d2:	f000 f821 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80040d6:	4602      	mov	r2, r0
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	490a      	ldr	r1, [pc, #40]	@ (800410c <HAL_RCC_ClockConfig+0x1cc>)
 80040e4:	5ccb      	ldrb	r3, [r1, r3]
 80040e6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ea:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <HAL_RCC_ClockConfig+0x1d0>)
 80040ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ee:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_RCC_ClockConfig+0x1d4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fd fa98 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023c00 	.word	0x40023c00
 8004108:	40023800 	.word	0x40023800
 800410c:	08008b6c 	.word	0x08008b6c
 8004110:	20000000 	.word	0x20000000
 8004114:	20000004 	.word	0x20000004

08004118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800411c:	b094      	sub	sp, #80	@ 0x50
 800411e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004120:	2300      	movs	r3, #0
 8004122:	647b      	str	r3, [r7, #68]	@ 0x44
 8004124:	2300      	movs	r3, #0
 8004126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004128:	2300      	movs	r3, #0
 800412a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004130:	4b79      	ldr	r3, [pc, #484]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b08      	cmp	r3, #8
 800413a:	d00d      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x40>
 800413c:	2b08      	cmp	r3, #8
 800413e:	f200 80e1 	bhi.w	8004304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x34>
 8004146:	2b04      	cmp	r3, #4
 8004148:	d003      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0x3a>
 800414a:	e0db      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b73      	ldr	r3, [pc, #460]	@ (800431c <HAL_RCC_GetSysClockFreq+0x204>)
 800414e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004150:	e0db      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004152:	4b73      	ldr	r3, [pc, #460]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x208>)
 8004154:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004156:	e0d8      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004158:	4b6f      	ldr	r3, [pc, #444]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004160:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004162:	4b6d      	ldr	r3, [pc, #436]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d063      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b6a      	ldr	r3, [pc, #424]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	2200      	movs	r2, #0
 8004176:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004178:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004180:	633b      	str	r3, [r7, #48]	@ 0x30
 8004182:	2300      	movs	r3, #0
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
 8004186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419c:	0150      	lsls	r0, r2, #5
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4621      	mov	r1, r4
 80041a4:	1a51      	subs	r1, r2, r1
 80041a6:	6139      	str	r1, [r7, #16]
 80041a8:	4629      	mov	r1, r5
 80041aa:	eb63 0301 	sbc.w	r3, r3, r1
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041bc:	4659      	mov	r1, fp
 80041be:	018b      	lsls	r3, r1, #6
 80041c0:	4651      	mov	r1, sl
 80041c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041c6:	4651      	mov	r1, sl
 80041c8:	018a      	lsls	r2, r1, #6
 80041ca:	4651      	mov	r1, sl
 80041cc:	ebb2 0801 	subs.w	r8, r2, r1
 80041d0:	4659      	mov	r1, fp
 80041d2:	eb63 0901 	sbc.w	r9, r3, r1
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ea:	4690      	mov	r8, r2
 80041ec:	4699      	mov	r9, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	eb18 0303 	adds.w	r3, r8, r3
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	462b      	mov	r3, r5
 80041f8:	eb49 0303 	adc.w	r3, r9, r3
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800420a:	4629      	mov	r1, r5
 800420c:	024b      	lsls	r3, r1, #9
 800420e:	4621      	mov	r1, r4
 8004210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004214:	4621      	mov	r1, r4
 8004216:	024a      	lsls	r2, r1, #9
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800421e:	2200      	movs	r2, #0
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004228:	f7fc f862 	bl	80002f0 <__aeabi_uldivmod>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4613      	mov	r3, r2
 8004232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004234:	e058      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b38      	ldr	r3, [pc, #224]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	2200      	movs	r2, #0
 800423e:	4618      	mov	r0, r3
 8004240:	4611      	mov	r1, r2
 8004242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	2300      	movs	r3, #0
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
 800424c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	f04f 0000 	mov.w	r0, #0
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	0159      	lsls	r1, r3, #5
 800425e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004262:	0150      	lsls	r0, r2, #5
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4641      	mov	r1, r8
 800426a:	ebb2 0a01 	subs.w	sl, r2, r1
 800426e:	4649      	mov	r1, r9
 8004270:	eb63 0b01 	sbc.w	fp, r3, r1
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004288:	ebb2 040a 	subs.w	r4, r2, sl
 800428c:	eb63 050b 	sbc.w	r5, r3, fp
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	f04f 0300 	mov.w	r3, #0
 8004298:	00eb      	lsls	r3, r5, #3
 800429a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800429e:	00e2      	lsls	r2, r4, #3
 80042a0:	4614      	mov	r4, r2
 80042a2:	461d      	mov	r5, r3
 80042a4:	4643      	mov	r3, r8
 80042a6:	18e3      	adds	r3, r4, r3
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	464b      	mov	r3, r9
 80042ac:	eb45 0303 	adc.w	r3, r5, r3
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042be:	4629      	mov	r1, r5
 80042c0:	028b      	lsls	r3, r1, #10
 80042c2:	4621      	mov	r1, r4
 80042c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c8:	4621      	mov	r1, r4
 80042ca:	028a      	lsls	r2, r1, #10
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d2:	2200      	movs	r2, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	61fa      	str	r2, [r7, #28]
 80042d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042dc:	f7fc f808 	bl	80002f0 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4613      	mov	r3, r2
 80042e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004302:	e002      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCC_GetSysClockFreq+0x204>)
 8004306:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800430c:	4618      	mov	r0, r3
 800430e:	3750      	adds	r7, #80	@ 0x50
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800
 800431c:	00f42400 	.word	0x00f42400
 8004320:	007a1200 	.word	0x007a1200

08004324 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b03      	ldr	r3, [pc, #12]	@ (8004338 <HAL_RCC_GetHCLKFreq+0x14>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000000 	.word	0x20000000

0800433c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004340:	f7ff fff0 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4903      	ldr	r1, [pc, #12]	@ (8004360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	08008b7c 	.word	0x08008b7c

08004364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004368:	f7ff ffdc 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	0b5b      	lsrs	r3, r3, #13
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	4903      	ldr	r1, [pc, #12]	@ (8004388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40023800 	.word	0x40023800
 8004388:	08008b7c 	.word	0x08008b7c

0800438c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d012      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043b4:	4b69      	ldr	r3, [pc, #420]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a68      	ldr	r2, [pc, #416]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80043be:	6093      	str	r3, [r2, #8]
 80043c0:	4b66      	ldr	r3, [pc, #408]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c8:	4964      	ldr	r1, [pc, #400]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d017      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e6:	4b5d      	ldr	r3, [pc, #372]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f4:	4959      	ldr	r1, [pc, #356]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d017      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004422:	4b4e      	ldr	r3, [pc, #312]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004428:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	494a      	ldr	r1, [pc, #296]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004440:	d101      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004442:	2301      	movs	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 808b 	beq.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b3a      	ldr	r3, [pc, #232]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	4a39      	ldr	r2, [pc, #228]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447a:	6413      	str	r3, [r2, #64]	@ 0x40
 800447c:	4b37      	ldr	r3, [pc, #220]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004488:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a34      	ldr	r2, [pc, #208]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7fd f90c 	bl	80016b0 <HAL_GetTick>
 8004498:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449c:	f7fd f908 	bl	80016b0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	@ 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e38f      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ba:	4b28      	ldr	r3, [pc, #160]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d035      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d02e      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d8:	4b20      	ldr	r3, [pc, #128]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	4a1d      	ldr	r2, [pc, #116]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ee:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044fa:	4a18      	ldr	r2, [pc, #96]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004500:	4b16      	ldr	r3, [pc, #88]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d114      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fd f8d0 	bl	80016b0 <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004512:	e00a      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fd f8cc 	bl	80016b0 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e351      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	4b0c      	ldr	r3, [pc, #48]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0ee      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004542:	d111      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004550:	4b04      	ldr	r3, [pc, #16]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004552:	400b      	ands	r3, r1
 8004554:	4901      	ldr	r1, [pc, #4]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
 800455a:	e00b      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800455c:	40023800 	.word	0x40023800
 8004560:	40007000 	.word	0x40007000
 8004564:	0ffffcff 	.word	0x0ffffcff
 8004568:	4bac      	ldr	r3, [pc, #688]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4aab      	ldr	r2, [pc, #684]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004572:	6093      	str	r3, [r2, #8]
 8004574:	4ba9      	ldr	r3, [pc, #676]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004576:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004580:	49a6      	ldr	r1, [pc, #664]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004582:	4313      	orrs	r3, r2
 8004584:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004592:	4ba2      	ldr	r3, [pc, #648]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004598:	4aa0      	ldr	r2, [pc, #640]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800459e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80045a2:	4b9e      	ldr	r3, [pc, #632]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	499b      	ldr	r1, [pc, #620]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c0:	4b96      	ldr	r3, [pc, #600]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ce:	4993      	ldr	r1, [pc, #588]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045e2:	4b8e      	ldr	r3, [pc, #568]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045f0:	498a      	ldr	r1, [pc, #552]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004604:	4b85      	ldr	r3, [pc, #532]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004612:	4982      	ldr	r1, [pc, #520]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004626:	4b7d      	ldr	r3, [pc, #500]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	4979      	ldr	r1, [pc, #484]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004648:	4b74      	ldr	r3, [pc, #464]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	4971      	ldr	r1, [pc, #452]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800466a:	4b6c      	ldr	r3, [pc, #432]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004670:	f023 020c 	bic.w	r2, r3, #12
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004678:	4968      	ldr	r1, [pc, #416]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800468c:	4b63      	ldr	r3, [pc, #396]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004692:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469a:	4960      	ldr	r1, [pc, #384]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046ae:	4b5b      	ldr	r3, [pc, #364]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046bc:	4957      	ldr	r1, [pc, #348]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046d0:	4b52      	ldr	r3, [pc, #328]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046de:	494f      	ldr	r1, [pc, #316]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046f2:	4b4a      	ldr	r3, [pc, #296]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004700:	4946      	ldr	r1, [pc, #280]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004714:	4b41      	ldr	r3, [pc, #260]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004722:	493e      	ldr	r1, [pc, #248]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004736:	4b39      	ldr	r3, [pc, #228]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004744:	4935      	ldr	r1, [pc, #212]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004758:	4b30      	ldr	r3, [pc, #192]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004766:	492d      	ldr	r1, [pc, #180]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d011      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800477a:	4b28      	ldr	r3, [pc, #160]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004780:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004788:	4924      	ldr	r1, [pc, #144]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004798:	d101      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ba:	4b18      	ldr	r3, [pc, #96]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c8:	4914      	ldr	r1, [pc, #80]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00b      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047ec:	490b      	ldr	r1, [pc, #44]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00f      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004810:	4902      	ldr	r1, [pc, #8]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004818:	e002      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800482c:	4b8a      	ldr	r3, [pc, #552]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004832:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	4986      	ldr	r1, [pc, #536]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004850:	4b81      	ldr	r3, [pc, #516]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004856:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004860:	497d      	ldr	r1, [pc, #500]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d006      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80d6 	beq.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800487c:	4b76      	ldr	r3, [pc, #472]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a75      	ldr	r2, [pc, #468]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004882:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004888:	f7fc ff12 	bl	80016b0 <HAL_GetTick>
 800488c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004890:	f7fc ff0e 	bl	80016b0 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e195      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d021      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11d      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048c2:	4b65      	ldr	r3, [pc, #404]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048d0:	4b61      	ldr	r3, [pc, #388]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048d6:	0e1b      	lsrs	r3, r3, #24
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	019a      	lsls	r2, r3, #6
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	071b      	lsls	r3, r3, #28
 80048f6:	4958      	ldr	r1, [pc, #352]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d004      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02e      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004928:	d129      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800492a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004938:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493e:	0f1b      	lsrs	r3, r3, #28
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	019a      	lsls	r2, r3, #6
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	061b      	lsls	r3, r3, #24
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	071b      	lsls	r3, r3, #28
 800495e:	493e      	ldr	r1, [pc, #248]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004966:	4b3c      	ldr	r3, [pc, #240]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800496c:	f023 021f 	bic.w	r2, r3, #31
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	3b01      	subs	r3, #1
 8004976:	4938      	ldr	r1, [pc, #224]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01d      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800498a:	4b33      	ldr	r3, [pc, #204]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004990:	0e1b      	lsrs	r3, r3, #24
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004998:	4b2f      	ldr	r3, [pc, #188]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800499e:	0f1b      	lsrs	r3, r3, #28
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	019a      	lsls	r2, r3, #6
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	061b      	lsls	r3, r3, #24
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	071b      	lsls	r3, r3, #28
 80049be:	4926      	ldr	r1, [pc, #152]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d011      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	019a      	lsls	r2, r3, #6
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	491a      	ldr	r1, [pc, #104]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049f6:	4b18      	ldr	r3, [pc, #96]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a02:	f7fc fe55 	bl	80016b0 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a0a:	f7fc fe51 	bl	80016b0 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	@ 0x64
 8004a16:	d901      	bls.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0d8      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	f040 80ce 	bne.w	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a30:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a08      	ldr	r2, [pc, #32]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fc fe38 	bl	80016b0 <HAL_GetTick>
 8004a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a42:	e00b      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a44:	f7fc fe34 	bl	80016b0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	@ 0x64
 8004a50:	d904      	bls.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0bb      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a68:	d0ec      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02e      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d12a      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a92:	4b51      	ldr	r3, [pc, #324]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	0f1b      	lsrs	r3, r3, #28
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	019a      	lsls	r2, r3, #6
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	071b      	lsls	r3, r3, #28
 8004ac6:	4944      	ldr	r1, [pc, #272]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ace:	4b42      	ldr	r3, [pc, #264]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ad4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	3b01      	subs	r3, #1
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	493d      	ldr	r1, [pc, #244]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d022      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004afc:	d11d      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004afe:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b04:	0e1b      	lsrs	r3, r3, #24
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b0c:	4b32      	ldr	r3, [pc, #200]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b12:	0f1b      	lsrs	r3, r3, #28
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	019a      	lsls	r2, r3, #6
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	071b      	lsls	r3, r3, #28
 8004b32:	4929      	ldr	r1, [pc, #164]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d028      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b54:	4b20      	ldr	r3, [pc, #128]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	019a      	lsls	r2, r3, #6
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	061b      	lsls	r3, r3, #24
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	4917      	ldr	r1, [pc, #92]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b82:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	4911      	ldr	r1, [pc, #68]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b98:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba4:	f7fc fd84 	bl	80016b0 <HAL_GetTick>
 8004ba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bac:	f7fc fd80 	bl	80016b0 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	@ 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e007      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bca:	d1ef      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800

08004bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e049      	b.n	8004c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc fab4 	bl	8001170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 f970 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e04c      	b.n	8004d3e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a26      	ldr	r2, [pc, #152]	@ (8004d4c <HAL_TIM_Base_Start+0xc0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d022      	beq.n	8004cfc <HAL_TIM_Base_Start+0x70>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbe:	d01d      	beq.n	8004cfc <HAL_TIM_Base_Start+0x70>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	@ (8004d50 <HAL_TIM_Base_Start+0xc4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d018      	beq.n	8004cfc <HAL_TIM_Base_Start+0x70>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a21      	ldr	r2, [pc, #132]	@ (8004d54 <HAL_TIM_Base_Start+0xc8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_TIM_Base_Start+0x70>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d58 <HAL_TIM_Base_Start+0xcc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_TIM_Base_Start+0x70>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <HAL_TIM_Base_Start+0xd0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_TIM_Base_Start+0x70>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <HAL_TIM_Base_Start+0xd4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_Base_Start+0x70>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <HAL_TIM_Base_Start+0xd8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d115      	bne.n	8004d28 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <HAL_TIM_Base_Start+0xdc>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d015      	beq.n	8004d3a <HAL_TIM_Base_Start+0xae>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d14:	d011      	beq.n	8004d3a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	e008      	b.n	8004d3a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e000      	b.n	8004d3c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40010400 	.word	0x40010400
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40001800 	.word	0x40001800
 8004d68:	00010007 	.word	0x00010007

08004d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIM_ConfigClockSource+0x1c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e0b4      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x186>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	4b56      	ldr	r3, [pc, #344]	@ (8004efc <HAL_TIM_ConfigClockSource+0x190>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc0:	d03e      	beq.n	8004e40 <HAL_TIM_ConfigClockSource+0xd4>
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc6:	f200 8087 	bhi.w	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	f000 8086 	beq.w	8004ede <HAL_TIM_ConfigClockSource+0x172>
 8004dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd6:	d87f      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b70      	cmp	r3, #112	@ 0x70
 8004dda:	d01a      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0xa6>
 8004ddc:	2b70      	cmp	r3, #112	@ 0x70
 8004dde:	d87b      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b60      	cmp	r3, #96	@ 0x60
 8004de2:	d050      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x11a>
 8004de4:	2b60      	cmp	r3, #96	@ 0x60
 8004de6:	d877      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004de8:	2b50      	cmp	r3, #80	@ 0x50
 8004dea:	d03c      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0xfa>
 8004dec:	2b50      	cmp	r3, #80	@ 0x50
 8004dee:	d873      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d058      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0x13a>
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d86f      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b30      	cmp	r3, #48	@ 0x30
 8004dfa:	d064      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004dfc:	2b30      	cmp	r3, #48	@ 0x30
 8004dfe:	d86b      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d060      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d867      	bhi.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d05c      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d05a      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	e062      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e22:	f000 f98d 	bl	8005140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	609a      	str	r2, [r3, #8]
      break;
 8004e3e:	e04f      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	f000 f976 	bl	8005140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e62:	609a      	str	r2, [r3, #8]
      break;
 8004e64:	e03c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	461a      	mov	r2, r3
 8004e74:	f000 f8ea 	bl	800504c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2150      	movs	r1, #80	@ 0x50
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f943 	bl	800510a <TIM_ITRx_SetConfig>
      break;
 8004e84:	e02c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	461a      	mov	r2, r3
 8004e94:	f000 f909 	bl	80050aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2160      	movs	r1, #96	@ 0x60
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f933 	bl	800510a <TIM_ITRx_SetConfig>
      break;
 8004ea4:	e01c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 f8ca 	bl	800504c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2140      	movs	r1, #64	@ 0x40
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 f923 	bl	800510a <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e00c      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f000 f91a 	bl	800510a <TIM_ITRx_SetConfig>
      break;
 8004ed6:	e003      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e000      	b.n	8004ee0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ede:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	fffeff88 	.word	0xfffeff88

08004f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a43      	ldr	r2, [pc, #268]	@ (8005020 <TIM_Base_SetConfig+0x120>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1e:	d00f      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a40      	ldr	r2, [pc, #256]	@ (8005024 <TIM_Base_SetConfig+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005028 <TIM_Base_SetConfig+0x128>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3e      	ldr	r2, [pc, #248]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a32      	ldr	r2, [pc, #200]	@ (8005020 <TIM_Base_SetConfig+0x120>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d027      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2f      	ldr	r2, [pc, #188]	@ (8005024 <TIM_Base_SetConfig+0x124>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d023      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005028 <TIM_Base_SetConfig+0x128>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2d      	ldr	r2, [pc, #180]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d017      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2b      	ldr	r2, [pc, #172]	@ (8005034 <TIM_Base_SetConfig+0x134>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005038 <TIM_Base_SetConfig+0x138>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a29      	ldr	r2, [pc, #164]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a28      	ldr	r2, [pc, #160]	@ (8005040 <TIM_Base_SetConfig+0x140>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a27      	ldr	r2, [pc, #156]	@ (8005044 <TIM_Base_SetConfig+0x144>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	@ (8005048 <TIM_Base_SetConfig+0x148>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d108      	bne.n	8004fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8005020 <TIM_Base_SetConfig+0x120>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0xf2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a10      	ldr	r2, [pc, #64]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d103      	bne.n	8004ffa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f043 0204 	orr.w	r2, r3, #4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	601a      	str	r2, [r3, #0]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40010400 	.word	0x40010400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800
 8005040:	40001800 	.word	0x40001800
 8005044:	40001c00 	.word	0x40001c00
 8005048:	40002000 	.word	0x40002000

0800504c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f023 030a 	bic.w	r3, r3, #10
 8005088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b087      	sub	sp, #28
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f023 0210 	bic.w	r2, r3, #16
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	031b      	lsls	r3, r3, #12
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	f043 0307 	orr.w	r3, r3, #7
 800512c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800515a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	431a      	orrs	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4313      	orrs	r3, r2
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	609a      	str	r2, [r3, #8]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005194:	2302      	movs	r3, #2
 8005196:	e06d      	b.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a30      	ldr	r2, [pc, #192]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a20      	ldr	r2, [pc, #128]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520a:	d01d      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1d      	ldr	r2, [pc, #116]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1c      	ldr	r2, [pc, #112]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1a      	ldr	r2, [pc, #104]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a15      	ldr	r2, [pc, #84]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a16      	ldr	r2, [pc, #88]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a15      	ldr	r2, [pc, #84]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800524e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40010000 	.word	0x40010000
 8005284:	40010400 	.word	0x40010400
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40014000 	.word	0x40014000
 8005298:	40001800 	.word	0x40001800

0800529c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e040      	b.n	8005330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fb ff74 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	@ 0x24
 80052c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fb16 	bl	8005914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8af 	bl	800544c <UART_SetConfig>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e01b      	b.n	8005330 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fb95 	bl	8005a58 <UART_CheckIdleState>
 800532e:	4603      	mov	r3, r0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	@ 0x28
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800534c:	2b20      	cmp	r3, #32
 800534e:	d177      	bne.n	8005440 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_UART_Transmit+0x24>
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e070      	b.n	8005442 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2221      	movs	r2, #33	@ 0x21
 800536c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800536e:	f7fc f99f 	bl	80016b0 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538c:	d108      	bne.n	80053a0 <HAL_UART_Transmit+0x68>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	e003      	b.n	80053a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053a8:	e02f      	b.n	800540a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2180      	movs	r1, #128	@ 0x80
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fbf7 	bl	8005ba8 <UART_WaitOnFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e03b      	b.n	8005442 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	3302      	adds	r3, #2
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e007      	b.n	80053f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	781a      	ldrb	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1c9      	bne.n	80053aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2200      	movs	r2, #0
 800541e:	2140      	movs	r1, #64	@ 0x40
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fbc1 	bl	8005ba8 <UART_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e005      	b.n	8005442 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
  }
}
 8005442:	4618      	mov	r0, r3
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4ba6      	ldr	r3, [pc, #664]	@ (8005710 <UART_SetConfig+0x2c4>)
 8005478:	4013      	ands	r3, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	6979      	ldr	r1, [r7, #20]
 8005480:	430b      	orrs	r3, r1
 8005482:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a94      	ldr	r2, [pc, #592]	@ (8005714 <UART_SetConfig+0x2c8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d120      	bne.n	800550a <UART_SetConfig+0xbe>
 80054c8:	4b93      	ldr	r3, [pc, #588]	@ (8005718 <UART_SetConfig+0x2cc>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d816      	bhi.n	8005504 <UART_SetConfig+0xb8>
 80054d6:	a201      	add	r2, pc, #4	@ (adr r2, 80054dc <UART_SetConfig+0x90>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054ed 	.word	0x080054ed
 80054e0:	080054f9 	.word	0x080054f9
 80054e4:	080054f3 	.word	0x080054f3
 80054e8:	080054ff 	.word	0x080054ff
 80054ec:	2301      	movs	r3, #1
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e150      	b.n	8005794 <UART_SetConfig+0x348>
 80054f2:	2302      	movs	r3, #2
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e14d      	b.n	8005794 <UART_SetConfig+0x348>
 80054f8:	2304      	movs	r3, #4
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e14a      	b.n	8005794 <UART_SetConfig+0x348>
 80054fe:	2308      	movs	r3, #8
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e147      	b.n	8005794 <UART_SetConfig+0x348>
 8005504:	2310      	movs	r3, #16
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e144      	b.n	8005794 <UART_SetConfig+0x348>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a83      	ldr	r2, [pc, #524]	@ (800571c <UART_SetConfig+0x2d0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d132      	bne.n	800557a <UART_SetConfig+0x12e>
 8005514:	4b80      	ldr	r3, [pc, #512]	@ (8005718 <UART_SetConfig+0x2cc>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d828      	bhi.n	8005574 <UART_SetConfig+0x128>
 8005522:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <UART_SetConfig+0xdc>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800555d 	.word	0x0800555d
 800552c:	08005575 	.word	0x08005575
 8005530:	08005575 	.word	0x08005575
 8005534:	08005575 	.word	0x08005575
 8005538:	08005569 	.word	0x08005569
 800553c:	08005575 	.word	0x08005575
 8005540:	08005575 	.word	0x08005575
 8005544:	08005575 	.word	0x08005575
 8005548:	08005563 	.word	0x08005563
 800554c:	08005575 	.word	0x08005575
 8005550:	08005575 	.word	0x08005575
 8005554:	08005575 	.word	0x08005575
 8005558:	0800556f 	.word	0x0800556f
 800555c:	2300      	movs	r3, #0
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e118      	b.n	8005794 <UART_SetConfig+0x348>
 8005562:	2302      	movs	r3, #2
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e115      	b.n	8005794 <UART_SetConfig+0x348>
 8005568:	2304      	movs	r3, #4
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e112      	b.n	8005794 <UART_SetConfig+0x348>
 800556e:	2308      	movs	r3, #8
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e10f      	b.n	8005794 <UART_SetConfig+0x348>
 8005574:	2310      	movs	r3, #16
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e10c      	b.n	8005794 <UART_SetConfig+0x348>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a68      	ldr	r2, [pc, #416]	@ (8005720 <UART_SetConfig+0x2d4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d120      	bne.n	80055c6 <UART_SetConfig+0x17a>
 8005584:	4b64      	ldr	r3, [pc, #400]	@ (8005718 <UART_SetConfig+0x2cc>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800558e:	2b30      	cmp	r3, #48	@ 0x30
 8005590:	d013      	beq.n	80055ba <UART_SetConfig+0x16e>
 8005592:	2b30      	cmp	r3, #48	@ 0x30
 8005594:	d814      	bhi.n	80055c0 <UART_SetConfig+0x174>
 8005596:	2b20      	cmp	r3, #32
 8005598:	d009      	beq.n	80055ae <UART_SetConfig+0x162>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d810      	bhi.n	80055c0 <UART_SetConfig+0x174>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <UART_SetConfig+0x15c>
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d006      	beq.n	80055b4 <UART_SetConfig+0x168>
 80055a6:	e00b      	b.n	80055c0 <UART_SetConfig+0x174>
 80055a8:	2300      	movs	r3, #0
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e0f2      	b.n	8005794 <UART_SetConfig+0x348>
 80055ae:	2302      	movs	r3, #2
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e0ef      	b.n	8005794 <UART_SetConfig+0x348>
 80055b4:	2304      	movs	r3, #4
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e0ec      	b.n	8005794 <UART_SetConfig+0x348>
 80055ba:	2308      	movs	r3, #8
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e0e9      	b.n	8005794 <UART_SetConfig+0x348>
 80055c0:	2310      	movs	r3, #16
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e0e6      	b.n	8005794 <UART_SetConfig+0x348>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a56      	ldr	r2, [pc, #344]	@ (8005724 <UART_SetConfig+0x2d8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d120      	bne.n	8005612 <UART_SetConfig+0x1c6>
 80055d0:	4b51      	ldr	r3, [pc, #324]	@ (8005718 <UART_SetConfig+0x2cc>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055da:	2bc0      	cmp	r3, #192	@ 0xc0
 80055dc:	d013      	beq.n	8005606 <UART_SetConfig+0x1ba>
 80055de:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e0:	d814      	bhi.n	800560c <UART_SetConfig+0x1c0>
 80055e2:	2b80      	cmp	r3, #128	@ 0x80
 80055e4:	d009      	beq.n	80055fa <UART_SetConfig+0x1ae>
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d810      	bhi.n	800560c <UART_SetConfig+0x1c0>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <UART_SetConfig+0x1a8>
 80055ee:	2b40      	cmp	r3, #64	@ 0x40
 80055f0:	d006      	beq.n	8005600 <UART_SetConfig+0x1b4>
 80055f2:	e00b      	b.n	800560c <UART_SetConfig+0x1c0>
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e0cc      	b.n	8005794 <UART_SetConfig+0x348>
 80055fa:	2302      	movs	r3, #2
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e0c9      	b.n	8005794 <UART_SetConfig+0x348>
 8005600:	2304      	movs	r3, #4
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e0c6      	b.n	8005794 <UART_SetConfig+0x348>
 8005606:	2308      	movs	r3, #8
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e0c3      	b.n	8005794 <UART_SetConfig+0x348>
 800560c:	2310      	movs	r3, #16
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e0c0      	b.n	8005794 <UART_SetConfig+0x348>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a44      	ldr	r2, [pc, #272]	@ (8005728 <UART_SetConfig+0x2dc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d125      	bne.n	8005668 <UART_SetConfig+0x21c>
 800561c:	4b3e      	ldr	r3, [pc, #248]	@ (8005718 <UART_SetConfig+0x2cc>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800562a:	d017      	beq.n	800565c <UART_SetConfig+0x210>
 800562c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005630:	d817      	bhi.n	8005662 <UART_SetConfig+0x216>
 8005632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005636:	d00b      	beq.n	8005650 <UART_SetConfig+0x204>
 8005638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563c:	d811      	bhi.n	8005662 <UART_SetConfig+0x216>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <UART_SetConfig+0x1fe>
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d006      	beq.n	8005656 <UART_SetConfig+0x20a>
 8005648:	e00b      	b.n	8005662 <UART_SetConfig+0x216>
 800564a:	2300      	movs	r3, #0
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e0a1      	b.n	8005794 <UART_SetConfig+0x348>
 8005650:	2302      	movs	r3, #2
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e09e      	b.n	8005794 <UART_SetConfig+0x348>
 8005656:	2304      	movs	r3, #4
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e09b      	b.n	8005794 <UART_SetConfig+0x348>
 800565c:	2308      	movs	r3, #8
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e098      	b.n	8005794 <UART_SetConfig+0x348>
 8005662:	2310      	movs	r3, #16
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e095      	b.n	8005794 <UART_SetConfig+0x348>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2f      	ldr	r2, [pc, #188]	@ (800572c <UART_SetConfig+0x2e0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d125      	bne.n	80056be <UART_SetConfig+0x272>
 8005672:	4b29      	ldr	r3, [pc, #164]	@ (8005718 <UART_SetConfig+0x2cc>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005678:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800567c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005680:	d017      	beq.n	80056b2 <UART_SetConfig+0x266>
 8005682:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005686:	d817      	bhi.n	80056b8 <UART_SetConfig+0x26c>
 8005688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800568c:	d00b      	beq.n	80056a6 <UART_SetConfig+0x25a>
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005692:	d811      	bhi.n	80056b8 <UART_SetConfig+0x26c>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <UART_SetConfig+0x254>
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569c:	d006      	beq.n	80056ac <UART_SetConfig+0x260>
 800569e:	e00b      	b.n	80056b8 <UART_SetConfig+0x26c>
 80056a0:	2301      	movs	r3, #1
 80056a2:	77fb      	strb	r3, [r7, #31]
 80056a4:	e076      	b.n	8005794 <UART_SetConfig+0x348>
 80056a6:	2302      	movs	r3, #2
 80056a8:	77fb      	strb	r3, [r7, #31]
 80056aa:	e073      	b.n	8005794 <UART_SetConfig+0x348>
 80056ac:	2304      	movs	r3, #4
 80056ae:	77fb      	strb	r3, [r7, #31]
 80056b0:	e070      	b.n	8005794 <UART_SetConfig+0x348>
 80056b2:	2308      	movs	r3, #8
 80056b4:	77fb      	strb	r3, [r7, #31]
 80056b6:	e06d      	b.n	8005794 <UART_SetConfig+0x348>
 80056b8:	2310      	movs	r3, #16
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e06a      	b.n	8005794 <UART_SetConfig+0x348>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <UART_SetConfig+0x2e4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d138      	bne.n	800573a <UART_SetConfig+0x2ee>
 80056c8:	4b13      	ldr	r3, [pc, #76]	@ (8005718 <UART_SetConfig+0x2cc>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80056d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056d6:	d017      	beq.n	8005708 <UART_SetConfig+0x2bc>
 80056d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056dc:	d82a      	bhi.n	8005734 <UART_SetConfig+0x2e8>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e2:	d00b      	beq.n	80056fc <UART_SetConfig+0x2b0>
 80056e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e8:	d824      	bhi.n	8005734 <UART_SetConfig+0x2e8>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <UART_SetConfig+0x2aa>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f2:	d006      	beq.n	8005702 <UART_SetConfig+0x2b6>
 80056f4:	e01e      	b.n	8005734 <UART_SetConfig+0x2e8>
 80056f6:	2300      	movs	r3, #0
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e04b      	b.n	8005794 <UART_SetConfig+0x348>
 80056fc:	2302      	movs	r3, #2
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e048      	b.n	8005794 <UART_SetConfig+0x348>
 8005702:	2304      	movs	r3, #4
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e045      	b.n	8005794 <UART_SetConfig+0x348>
 8005708:	2308      	movs	r3, #8
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e042      	b.n	8005794 <UART_SetConfig+0x348>
 800570e:	bf00      	nop
 8005710:	efff69f3 	.word	0xefff69f3
 8005714:	40011000 	.word	0x40011000
 8005718:	40023800 	.word	0x40023800
 800571c:	40004400 	.word	0x40004400
 8005720:	40004800 	.word	0x40004800
 8005724:	40004c00 	.word	0x40004c00
 8005728:	40005000 	.word	0x40005000
 800572c:	40011400 	.word	0x40011400
 8005730:	40007800 	.word	0x40007800
 8005734:	2310      	movs	r3, #16
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e02c      	b.n	8005794 <UART_SetConfig+0x348>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a72      	ldr	r2, [pc, #456]	@ (8005908 <UART_SetConfig+0x4bc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d125      	bne.n	8005790 <UART_SetConfig+0x344>
 8005744:	4b71      	ldr	r3, [pc, #452]	@ (800590c <UART_SetConfig+0x4c0>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800574e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005752:	d017      	beq.n	8005784 <UART_SetConfig+0x338>
 8005754:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005758:	d817      	bhi.n	800578a <UART_SetConfig+0x33e>
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575e:	d00b      	beq.n	8005778 <UART_SetConfig+0x32c>
 8005760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005764:	d811      	bhi.n	800578a <UART_SetConfig+0x33e>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <UART_SetConfig+0x326>
 800576a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800576e:	d006      	beq.n	800577e <UART_SetConfig+0x332>
 8005770:	e00b      	b.n	800578a <UART_SetConfig+0x33e>
 8005772:	2300      	movs	r3, #0
 8005774:	77fb      	strb	r3, [r7, #31]
 8005776:	e00d      	b.n	8005794 <UART_SetConfig+0x348>
 8005778:	2302      	movs	r3, #2
 800577a:	77fb      	strb	r3, [r7, #31]
 800577c:	e00a      	b.n	8005794 <UART_SetConfig+0x348>
 800577e:	2304      	movs	r3, #4
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e007      	b.n	8005794 <UART_SetConfig+0x348>
 8005784:	2308      	movs	r3, #8
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e004      	b.n	8005794 <UART_SetConfig+0x348>
 800578a:	2310      	movs	r3, #16
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e001      	b.n	8005794 <UART_SetConfig+0x348>
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800579c:	d15b      	bne.n	8005856 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800579e:	7ffb      	ldrb	r3, [r7, #31]
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d828      	bhi.n	80057f6 <UART_SetConfig+0x3aa>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <UART_SetConfig+0x360>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057d9 	.word	0x080057d9
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057f7 	.word	0x080057f7
 80057bc:	080057e7 	.word	0x080057e7
 80057c0:	080057f7 	.word	0x080057f7
 80057c4:	080057f7 	.word	0x080057f7
 80057c8:	080057f7 	.word	0x080057f7
 80057cc:	080057ef 	.word	0x080057ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d0:	f7fe fdb4 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 80057d4:	61b8      	str	r0, [r7, #24]
        break;
 80057d6:	e013      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d8:	f7fe fdc4 	bl	8004364 <HAL_RCC_GetPCLK2Freq>
 80057dc:	61b8      	str	r0, [r7, #24]
        break;
 80057de:	e00f      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005910 <UART_SetConfig+0x4c4>)
 80057e2:	61bb      	str	r3, [r7, #24]
        break;
 80057e4:	e00c      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e6:	f7fe fc97 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80057ea:	61b8      	str	r0, [r7, #24]
        break;
 80057ec:	e008      	b.n	8005800 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057f2:	61bb      	str	r3, [r7, #24]
        break;
 80057f4:	e004      	b.n	8005800 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	77bb      	strb	r3, [r7, #30]
        break;
 80057fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d074      	beq.n	80058f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	005a      	lsls	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	085b      	lsrs	r3, r3, #1
 8005810:	441a      	add	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	fbb2 f3f3 	udiv	r3, r2, r3
 800581a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b0f      	cmp	r3, #15
 8005820:	d916      	bls.n	8005850 <UART_SetConfig+0x404>
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005828:	d212      	bcs.n	8005850 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f023 030f 	bic.w	r3, r3, #15
 8005832:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	b29a      	uxth	r2, r3
 8005840:	89fb      	ldrh	r3, [r7, #14]
 8005842:	4313      	orrs	r3, r2
 8005844:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	89fa      	ldrh	r2, [r7, #14]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	e04f      	b.n	80058f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	77bb      	strb	r3, [r7, #30]
 8005854:	e04c      	b.n	80058f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005856:	7ffb      	ldrb	r3, [r7, #31]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d828      	bhi.n	80058ae <UART_SetConfig+0x462>
 800585c:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <UART_SetConfig+0x418>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	080058af 	.word	0x080058af
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058af 	.word	0x080058af
 800587c:	080058af 	.word	0x080058af
 8005880:	080058af 	.word	0x080058af
 8005884:	080058a7 	.word	0x080058a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe fd58 	bl	800433c <HAL_RCC_GetPCLK1Freq>
 800588c:	61b8      	str	r0, [r7, #24]
        break;
 800588e:	e013      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe fd68 	bl	8004364 <HAL_RCC_GetPCLK2Freq>
 8005894:	61b8      	str	r0, [r7, #24]
        break;
 8005896:	e00f      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005898:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <UART_SetConfig+0x4c4>)
 800589a:	61bb      	str	r3, [r7, #24]
        break;
 800589c:	e00c      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589e:	f7fe fc3b 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80058a2:	61b8      	str	r0, [r7, #24]
        break;
 80058a4:	e008      	b.n	80058b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058aa:	61bb      	str	r3, [r7, #24]
        break;
 80058ac:	e004      	b.n	80058b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	77bb      	strb	r3, [r7, #30]
        break;
 80058b6:	bf00      	nop
    }

    if (pclk != 0U)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d018      	beq.n	80058f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	085a      	lsrs	r2, r3, #1
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	441a      	add	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b0f      	cmp	r3, #15
 80058d6:	d909      	bls.n	80058ec <UART_SetConfig+0x4a0>
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058de:	d205      	bcs.n	80058ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60da      	str	r2, [r3, #12]
 80058ea:	e001      	b.n	80058f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80058fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40007c00 	.word	0x40007c00
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400

08005914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	f003 0310 	and.w	r3, r3, #16
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a12:	d10a      	bne.n	8005a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b098      	sub	sp, #96	@ 0x60
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a68:	f7fb fe22 	bl	80016b0 <HAL_GetTick>
 8005a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d12e      	bne.n	8005ada <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a84:	2200      	movs	r2, #0
 8005a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f88c 	bl	8005ba8 <UART_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d021      	beq.n	8005ada <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	e853 3f00 	ldrex	r3, [r3]
 8005aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e6      	bne.n	8005a96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e062      	b.n	8005ba0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d149      	bne.n	8005b7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f856 	bl	8005ba8 <UART_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d03c      	beq.n	8005b7c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e6      	bne.n	8005b02 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0301 	bic.w	r3, r3, #1
 8005b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3308      	adds	r3, #8
 8005b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b54:	61fa      	str	r2, [r7, #28]
 8005b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	69b9      	ldr	r1, [r7, #24]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	617b      	str	r3, [r7, #20]
   return(result);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e5      	bne.n	8005b34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e011      	b.n	8005ba0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3758      	adds	r7, #88	@ 0x58
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb8:	e04f      	b.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d04b      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc2:	f7fb fd75 	bl	80016b0 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d302      	bcc.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e04e      	b.n	8005c7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d037      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b80      	cmp	r3, #128	@ 0x80
 8005bee:	d034      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b40      	cmp	r3, #64	@ 0x40
 8005bf4:	d031      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d110      	bne.n	8005c26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f838 	bl	8005c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2208      	movs	r2, #8
 8005c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e029      	b.n	8005c7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c34:	d111      	bne.n	8005c5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f81e 	bl	8005c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e00f      	b.n	8005c7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4013      	ands	r3, r2
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d0a0      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b095      	sub	sp, #84	@ 0x54
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005caa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e6      	bne.n	8005c8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f023 0301 	bic.w	r3, r3, #1
 8005cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3308      	adds	r3, #8
 8005cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d118      	bne.n	8005d2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f023 0310 	bic.w	r3, r3, #16
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6979      	ldr	r1, [r7, #20]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	613b      	str	r3, [r7, #16]
   return(result);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e6      	bne.n	8005cf8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d3e:	bf00      	nop
 8005d40:	3754      	adds	r7, #84	@ 0x54
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	f107 001c 	add.w	r0, r7, #28
 8005d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d121      	bne.n	8005daa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	4b21      	ldr	r3, [pc, #132]	@ (8005dfc <USB_CoreInit+0xb0>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa92 	bl	80062c8 <USB_CoreReset>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e010      	b.n	8005dcc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa86 	bl	80062c8 <USB_CoreReset>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005dcc:	7fbb      	ldrb	r3, [r7, #30]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d10b      	bne.n	8005dea <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f043 0206 	orr.w	r2, r3, #6
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f043 0220 	orr.w	r2, r3, #32
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005df6:	b004      	add	sp, #16
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	ffbdffbf 	.word	0xffbdffbf

08005e00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 0201 	bic.w	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d115      	bne.n	8005e70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e50:	200a      	movs	r0, #10
 8005e52:	f7fb fc39 	bl	80016c8 <HAL_Delay>
      ms += 10U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	330a      	adds	r3, #10
 8005e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa25 	bl	80062ac <USB_GetMode>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d01e      	beq.n	8005ea6 <USB_SetCurrentMode+0x84>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e6c:	d9f0      	bls.n	8005e50 <USB_SetCurrentMode+0x2e>
 8005e6e:	e01a      	b.n	8005ea6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d115      	bne.n	8005ea2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e82:	200a      	movs	r0, #10
 8005e84:	f7fb fc20 	bl	80016c8 <HAL_Delay>
      ms += 10U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	330a      	adds	r3, #10
 8005e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa0c 	bl	80062ac <USB_GetMode>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <USB_SetCurrentMode+0x84>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e9e:	d9f0      	bls.n	8005e82 <USB_SetCurrentMode+0x60>
 8005ea0:	e001      	b.n	8005ea6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e005      	b.n	8005eb2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005eaa:	d101      	bne.n	8005eb0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e009      	b.n	8005ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3340      	adds	r3, #64	@ 0x40
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0e      	cmp	r3, #14
 8005ef4:	d9f2      	bls.n	8005edc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11c      	bne.n	8005f38 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f0c:	f043 0302 	orr.w	r3, r3, #2
 8005f10:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f16:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e005      	b.n	8005f44 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10d      	bne.n	8005f74 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f60:	2100      	movs	r1, #0
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f968 	bl	8006238 <USB_SetDevSpeed>
 8005f68:	e008      	b.n	8005f7c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f963 	bl	8006238 <USB_SetDevSpeed>
 8005f72:	e003      	b.n	8005f7c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f74:	2103      	movs	r1, #3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f95e 	bl	8006238 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f7c:	2110      	movs	r1, #16
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f8fa 	bl	8006178 <USB_FlushTxFifo>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f924 	bl	80061dc <USB_FlushRxFifo>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	e043      	b.n	8006050 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fde:	d118      	bne.n	8006012 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	e013      	b.n	8006024 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006008:	461a      	mov	r2, r3
 800600a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e008      	b.n	8006024 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800601e:	461a      	mov	r2, r3
 8006020:	2300      	movs	r3, #0
 8006022:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006030:	461a      	mov	r2, r3
 8006032:	2300      	movs	r3, #0
 8006034:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006042:	461a      	mov	r2, r3
 8006044:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006048:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3301      	adds	r3, #1
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006054:	461a      	mov	r2, r3
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	4293      	cmp	r3, r2
 800605a:	d3b5      	bcc.n	8005fc8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800605c:	2300      	movs	r3, #0
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	e043      	b.n	80060ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006078:	d118      	bne.n	80060ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608c:	461a      	mov	r2, r3
 800608e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	e013      	b.n	80060be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	461a      	mov	r2, r3
 80060a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	e008      	b.n	80060be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b8:	461a      	mov	r2, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ca:	461a      	mov	r2, r3
 80060cc:	2300      	movs	r3, #0
 80060ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060dc:	461a      	mov	r2, r3
 80060de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3301      	adds	r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060ee:	461a      	mov	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d3b5      	bcc.n	8006062 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006108:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006116:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f043 0210 	orr.w	r2, r3, #16
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699a      	ldr	r2, [r3, #24]
 8006130:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <USB_DevInit+0x2b4>)
 8006132:	4313      	orrs	r3, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006138:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f043 0208 	orr.w	r2, r3, #8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800614c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006150:	2b01      	cmp	r3, #1
 8006152:	d105      	bne.n	8006160 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	4b06      	ldr	r3, [pc, #24]	@ (8006174 <USB_DevInit+0x2b8>)
 800615a:	4313      	orrs	r3, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800616c:	b004      	add	sp, #16
 800616e:	4770      	bx	lr
 8006170:	803c3800 	.word	0x803c3800
 8006174:	40000004 	.word	0x40000004

08006178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006192:	d901      	bls.n	8006198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e01b      	b.n	80061d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	daf2      	bge.n	8006186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	019b      	lsls	r3, r3, #6
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061bc:	d901      	bls.n	80061c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e006      	b.n	80061d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d0f0      	beq.n	80061b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061f4:	d901      	bls.n	80061fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e018      	b.n	800622c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	daf2      	bge.n	80061e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2210      	movs	r2, #16
 800620a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006218:	d901      	bls.n	800621e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e006      	b.n	800622c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0310 	and.w	r3, r3, #16
 8006226:	2b10      	cmp	r3, #16
 8006228:	d0f0      	beq.n	800620c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	68f9      	ldr	r1, [r7, #12]
 8006254:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006258:	4313      	orrs	r3, r2
 800625a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006284:	f023 0303 	bic.w	r3, r3, #3
 8006288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006298:	f043 0302 	orr.w	r3, r3, #2
 800629c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0301 	and.w	r3, r3, #1
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062e0:	d901      	bls.n	80062e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e022      	b.n	800632c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	daf2      	bge.n	80062d4 <USB_CoreReset+0xc>

  count = 10U;
 80062ee:	230a      	movs	r3, #10
 80062f0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80062f2:	e002      	b.n	80062fa <USB_CoreReset+0x32>
  {
    count--;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f9      	bne.n	80062f4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f043 0201 	orr.w	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006318:	d901      	bls.n	800631e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e006      	b.n	800632c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d0f0      	beq.n	800630c <USB_CoreReset+0x44>

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <__cvt>:
 8006338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633a:	ed2d 8b02 	vpush	{d8}
 800633e:	eeb0 8b40 	vmov.f64	d8, d0
 8006342:	b085      	sub	sp, #20
 8006344:	4617      	mov	r7, r2
 8006346:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006348:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800634a:	ee18 2a90 	vmov	r2, s17
 800634e:	f025 0520 	bic.w	r5, r5, #32
 8006352:	2a00      	cmp	r2, #0
 8006354:	bfb6      	itet	lt
 8006356:	222d      	movlt	r2, #45	@ 0x2d
 8006358:	2200      	movge	r2, #0
 800635a:	eeb1 8b40 	vneglt.f64	d8, d0
 800635e:	2d46      	cmp	r5, #70	@ 0x46
 8006360:	460c      	mov	r4, r1
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	d004      	beq.n	8006370 <__cvt+0x38>
 8006366:	2d45      	cmp	r5, #69	@ 0x45
 8006368:	d100      	bne.n	800636c <__cvt+0x34>
 800636a:	3401      	adds	r4, #1
 800636c:	2102      	movs	r1, #2
 800636e:	e000      	b.n	8006372 <__cvt+0x3a>
 8006370:	2103      	movs	r1, #3
 8006372:	ab03      	add	r3, sp, #12
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	ab02      	add	r3, sp, #8
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4622      	mov	r2, r4
 800637c:	4633      	mov	r3, r6
 800637e:	eeb0 0b48 	vmov.f64	d0, d8
 8006382:	f000 fe31 	bl	8006fe8 <_dtoa_r>
 8006386:	2d47      	cmp	r5, #71	@ 0x47
 8006388:	d114      	bne.n	80063b4 <__cvt+0x7c>
 800638a:	07fb      	lsls	r3, r7, #31
 800638c:	d50a      	bpl.n	80063a4 <__cvt+0x6c>
 800638e:	1902      	adds	r2, r0, r4
 8006390:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006398:	bf08      	it	eq
 800639a:	9203      	streq	r2, [sp, #12]
 800639c:	2130      	movs	r1, #48	@ 0x30
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d319      	bcc.n	80063d8 <__cvt+0xa0>
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063a8:	1a1b      	subs	r3, r3, r0
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	b005      	add	sp, #20
 80063ae:	ecbd 8b02 	vpop	{d8}
 80063b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b4:	2d46      	cmp	r5, #70	@ 0x46
 80063b6:	eb00 0204 	add.w	r2, r0, r4
 80063ba:	d1e9      	bne.n	8006390 <__cvt+0x58>
 80063bc:	7803      	ldrb	r3, [r0, #0]
 80063be:	2b30      	cmp	r3, #48	@ 0x30
 80063c0:	d107      	bne.n	80063d2 <__cvt+0x9a>
 80063c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80063c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ca:	bf1c      	itt	ne
 80063cc:	f1c4 0401 	rsbne	r4, r4, #1
 80063d0:	6034      	strne	r4, [r6, #0]
 80063d2:	6833      	ldr	r3, [r6, #0]
 80063d4:	441a      	add	r2, r3
 80063d6:	e7db      	b.n	8006390 <__cvt+0x58>
 80063d8:	1c5c      	adds	r4, r3, #1
 80063da:	9403      	str	r4, [sp, #12]
 80063dc:	7019      	strb	r1, [r3, #0]
 80063de:	e7de      	b.n	800639e <__cvt+0x66>

080063e0 <__exponent>:
 80063e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063e2:	2900      	cmp	r1, #0
 80063e4:	bfba      	itte	lt
 80063e6:	4249      	neglt	r1, r1
 80063e8:	232d      	movlt	r3, #45	@ 0x2d
 80063ea:	232b      	movge	r3, #43	@ 0x2b
 80063ec:	2909      	cmp	r1, #9
 80063ee:	7002      	strb	r2, [r0, #0]
 80063f0:	7043      	strb	r3, [r0, #1]
 80063f2:	dd29      	ble.n	8006448 <__exponent+0x68>
 80063f4:	f10d 0307 	add.w	r3, sp, #7
 80063f8:	461d      	mov	r5, r3
 80063fa:	270a      	movs	r7, #10
 80063fc:	461a      	mov	r2, r3
 80063fe:	fbb1 f6f7 	udiv	r6, r1, r7
 8006402:	fb07 1416 	mls	r4, r7, r6, r1
 8006406:	3430      	adds	r4, #48	@ 0x30
 8006408:	f802 4c01 	strb.w	r4, [r2, #-1]
 800640c:	460c      	mov	r4, r1
 800640e:	2c63      	cmp	r4, #99	@ 0x63
 8006410:	f103 33ff 	add.w	r3, r3, #4294967295
 8006414:	4631      	mov	r1, r6
 8006416:	dcf1      	bgt.n	80063fc <__exponent+0x1c>
 8006418:	3130      	adds	r1, #48	@ 0x30
 800641a:	1e94      	subs	r4, r2, #2
 800641c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006420:	1c41      	adds	r1, r0, #1
 8006422:	4623      	mov	r3, r4
 8006424:	42ab      	cmp	r3, r5
 8006426:	d30a      	bcc.n	800643e <__exponent+0x5e>
 8006428:	f10d 0309 	add.w	r3, sp, #9
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	42ac      	cmp	r4, r5
 8006430:	bf88      	it	hi
 8006432:	2300      	movhi	r3, #0
 8006434:	3302      	adds	r3, #2
 8006436:	4403      	add	r3, r0
 8006438:	1a18      	subs	r0, r3, r0
 800643a:	b003      	add	sp, #12
 800643c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006442:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006446:	e7ed      	b.n	8006424 <__exponent+0x44>
 8006448:	2330      	movs	r3, #48	@ 0x30
 800644a:	3130      	adds	r1, #48	@ 0x30
 800644c:	7083      	strb	r3, [r0, #2]
 800644e:	70c1      	strb	r1, [r0, #3]
 8006450:	1d03      	adds	r3, r0, #4
 8006452:	e7f1      	b.n	8006438 <__exponent+0x58>
 8006454:	0000      	movs	r0, r0
	...

08006458 <_printf_float>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	b08d      	sub	sp, #52	@ 0x34
 800645e:	460c      	mov	r4, r1
 8006460:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006464:	4616      	mov	r6, r2
 8006466:	461f      	mov	r7, r3
 8006468:	4605      	mov	r5, r0
 800646a:	f000 fcbb 	bl	8006de4 <_localeconv_r>
 800646e:	f8d0 b000 	ldr.w	fp, [r0]
 8006472:	4658      	mov	r0, fp
 8006474:	f7f9 ff34 	bl	80002e0 <strlen>
 8006478:	2300      	movs	r3, #0
 800647a:	930a      	str	r3, [sp, #40]	@ 0x28
 800647c:	f8d8 3000 	ldr.w	r3, [r8]
 8006480:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	9005      	str	r0, [sp, #20]
 8006488:	3307      	adds	r3, #7
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	f103 0108 	add.w	r1, r3, #8
 8006492:	f8c8 1000 	str.w	r1, [r8]
 8006496:	ed93 0b00 	vldr	d0, [r3]
 800649a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80066f8 <_printf_float+0x2a0>
 800649e:	eeb0 7bc0 	vabs.f64	d7, d0
 80064a2:	eeb4 7b46 	vcmp.f64	d7, d6
 80064a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80064ae:	dd24      	ble.n	80064fa <_printf_float+0xa2>
 80064b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80064b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b8:	d502      	bpl.n	80064c0 <_printf_float+0x68>
 80064ba:	232d      	movs	r3, #45	@ 0x2d
 80064bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c0:	498f      	ldr	r1, [pc, #572]	@ (8006700 <_printf_float+0x2a8>)
 80064c2:	4b90      	ldr	r3, [pc, #576]	@ (8006704 <_printf_float+0x2ac>)
 80064c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80064c8:	bf8c      	ite	hi
 80064ca:	4688      	movhi	r8, r1
 80064cc:	4698      	movls	r8, r3
 80064ce:	f022 0204 	bic.w	r2, r2, #4
 80064d2:	2303      	movs	r3, #3
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	6022      	str	r2, [r4, #0]
 80064d8:	f04f 0a00 	mov.w	sl, #0
 80064dc:	9700      	str	r7, [sp, #0]
 80064de:	4633      	mov	r3, r6
 80064e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064e2:	4621      	mov	r1, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 f9d1 	bl	800688c <_printf_common>
 80064ea:	3001      	adds	r0, #1
 80064ec:	f040 8089 	bne.w	8006602 <_printf_float+0x1aa>
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	b00d      	add	sp, #52	@ 0x34
 80064f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80064fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006502:	d709      	bvc.n	8006518 <_printf_float+0xc0>
 8006504:	ee10 3a90 	vmov	r3, s1
 8006508:	2b00      	cmp	r3, #0
 800650a:	bfbc      	itt	lt
 800650c:	232d      	movlt	r3, #45	@ 0x2d
 800650e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006512:	497d      	ldr	r1, [pc, #500]	@ (8006708 <_printf_float+0x2b0>)
 8006514:	4b7d      	ldr	r3, [pc, #500]	@ (800670c <_printf_float+0x2b4>)
 8006516:	e7d5      	b.n	80064c4 <_printf_float+0x6c>
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006520:	d139      	bne.n	8006596 <_printf_float+0x13e>
 8006522:	2306      	movs	r3, #6
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800652a:	2300      	movs	r3, #0
 800652c:	6022      	str	r2, [r4, #0]
 800652e:	9303      	str	r3, [sp, #12]
 8006530:	ab0a      	add	r3, sp, #40	@ 0x28
 8006532:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006536:	ab09      	add	r3, sp, #36	@ 0x24
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	6861      	ldr	r1, [r4, #4]
 800653c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006540:	4628      	mov	r0, r5
 8006542:	f7ff fef9 	bl	8006338 <__cvt>
 8006546:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800654a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800654c:	4680      	mov	r8, r0
 800654e:	d129      	bne.n	80065a4 <_printf_float+0x14c>
 8006550:	1cc8      	adds	r0, r1, #3
 8006552:	db02      	blt.n	800655a <_printf_float+0x102>
 8006554:	6863      	ldr	r3, [r4, #4]
 8006556:	4299      	cmp	r1, r3
 8006558:	dd41      	ble.n	80065de <_printf_float+0x186>
 800655a:	f1a9 0902 	sub.w	r9, r9, #2
 800655e:	fa5f f989 	uxtb.w	r9, r9
 8006562:	3901      	subs	r1, #1
 8006564:	464a      	mov	r2, r9
 8006566:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800656a:	9109      	str	r1, [sp, #36]	@ 0x24
 800656c:	f7ff ff38 	bl	80063e0 <__exponent>
 8006570:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006572:	1813      	adds	r3, r2, r0
 8006574:	2a01      	cmp	r2, #1
 8006576:	4682      	mov	sl, r0
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	dc02      	bgt.n	8006582 <_printf_float+0x12a>
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	07d2      	lsls	r2, r2, #31
 8006580:	d501      	bpl.n	8006586 <_printf_float+0x12e>
 8006582:	3301      	adds	r3, #1
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0a6      	beq.n	80064dc <_printf_float+0x84>
 800658e:	232d      	movs	r3, #45	@ 0x2d
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006594:	e7a2      	b.n	80064dc <_printf_float+0x84>
 8006596:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800659a:	d1c4      	bne.n	8006526 <_printf_float+0xce>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1c2      	bne.n	8006526 <_printf_float+0xce>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e7bf      	b.n	8006524 <_printf_float+0xcc>
 80065a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80065a8:	d9db      	bls.n	8006562 <_printf_float+0x10a>
 80065aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80065ae:	d118      	bne.n	80065e2 <_printf_float+0x18a>
 80065b0:	2900      	cmp	r1, #0
 80065b2:	6863      	ldr	r3, [r4, #4]
 80065b4:	dd0b      	ble.n	80065ce <_printf_float+0x176>
 80065b6:	6121      	str	r1, [r4, #16]
 80065b8:	b913      	cbnz	r3, 80065c0 <_printf_float+0x168>
 80065ba:	6822      	ldr	r2, [r4, #0]
 80065bc:	07d0      	lsls	r0, r2, #31
 80065be:	d502      	bpl.n	80065c6 <_printf_float+0x16e>
 80065c0:	3301      	adds	r3, #1
 80065c2:	440b      	add	r3, r1
 80065c4:	6123      	str	r3, [r4, #16]
 80065c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065c8:	f04f 0a00 	mov.w	sl, #0
 80065cc:	e7db      	b.n	8006586 <_printf_float+0x12e>
 80065ce:	b913      	cbnz	r3, 80065d6 <_printf_float+0x17e>
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	07d2      	lsls	r2, r2, #31
 80065d4:	d501      	bpl.n	80065da <_printf_float+0x182>
 80065d6:	3302      	adds	r3, #2
 80065d8:	e7f4      	b.n	80065c4 <_printf_float+0x16c>
 80065da:	2301      	movs	r3, #1
 80065dc:	e7f2      	b.n	80065c4 <_printf_float+0x16c>
 80065de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80065e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065e4:	4299      	cmp	r1, r3
 80065e6:	db05      	blt.n	80065f4 <_printf_float+0x19c>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	6121      	str	r1, [r4, #16]
 80065ec:	07d8      	lsls	r0, r3, #31
 80065ee:	d5ea      	bpl.n	80065c6 <_printf_float+0x16e>
 80065f0:	1c4b      	adds	r3, r1, #1
 80065f2:	e7e7      	b.n	80065c4 <_printf_float+0x16c>
 80065f4:	2900      	cmp	r1, #0
 80065f6:	bfd4      	ite	le
 80065f8:	f1c1 0202 	rsble	r2, r1, #2
 80065fc:	2201      	movgt	r2, #1
 80065fe:	4413      	add	r3, r2
 8006600:	e7e0      	b.n	80065c4 <_printf_float+0x16c>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	055a      	lsls	r2, r3, #21
 8006606:	d407      	bmi.n	8006618 <_printf_float+0x1c0>
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	4642      	mov	r2, r8
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	d12a      	bne.n	800666c <_printf_float+0x214>
 8006616:	e76b      	b.n	80064f0 <_printf_float+0x98>
 8006618:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800661c:	f240 80e0 	bls.w	80067e0 <_printf_float+0x388>
 8006620:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006624:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662c:	d133      	bne.n	8006696 <_printf_float+0x23e>
 800662e:	4a38      	ldr	r2, [pc, #224]	@ (8006710 <_printf_float+0x2b8>)
 8006630:	2301      	movs	r3, #1
 8006632:	4631      	mov	r1, r6
 8006634:	4628      	mov	r0, r5
 8006636:	47b8      	blx	r7
 8006638:	3001      	adds	r0, #1
 800663a:	f43f af59 	beq.w	80064f0 <_printf_float+0x98>
 800663e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006642:	4543      	cmp	r3, r8
 8006644:	db02      	blt.n	800664c <_printf_float+0x1f4>
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	07d8      	lsls	r0, r3, #31
 800664a:	d50f      	bpl.n	800666c <_printf_float+0x214>
 800664c:	9b05      	ldr	r3, [sp, #20]
 800664e:	465a      	mov	r2, fp
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af4a 	beq.w	80064f0 <_printf_float+0x98>
 800665c:	f04f 0900 	mov.w	r9, #0
 8006660:	f108 38ff 	add.w	r8, r8, #4294967295
 8006664:	f104 0a1a 	add.w	sl, r4, #26
 8006668:	45c8      	cmp	r8, r9
 800666a:	dc09      	bgt.n	8006680 <_printf_float+0x228>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	079b      	lsls	r3, r3, #30
 8006670:	f100 8107 	bmi.w	8006882 <_printf_float+0x42a>
 8006674:	68e0      	ldr	r0, [r4, #12]
 8006676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006678:	4298      	cmp	r0, r3
 800667a:	bfb8      	it	lt
 800667c:	4618      	movlt	r0, r3
 800667e:	e739      	b.n	80064f4 <_printf_float+0x9c>
 8006680:	2301      	movs	r3, #1
 8006682:	4652      	mov	r2, sl
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af30 	beq.w	80064f0 <_printf_float+0x98>
 8006690:	f109 0901 	add.w	r9, r9, #1
 8006694:	e7e8      	b.n	8006668 <_printf_float+0x210>
 8006696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc3b      	bgt.n	8006714 <_printf_float+0x2bc>
 800669c:	4a1c      	ldr	r2, [pc, #112]	@ (8006710 <_printf_float+0x2b8>)
 800669e:	2301      	movs	r3, #1
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f af22 	beq.w	80064f0 <_printf_float+0x98>
 80066ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066b0:	ea59 0303 	orrs.w	r3, r9, r3
 80066b4:	d102      	bne.n	80066bc <_printf_float+0x264>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	07d9      	lsls	r1, r3, #31
 80066ba:	d5d7      	bpl.n	800666c <_printf_float+0x214>
 80066bc:	9b05      	ldr	r3, [sp, #20]
 80066be:	465a      	mov	r2, fp
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f af12 	beq.w	80064f0 <_printf_float+0x98>
 80066cc:	f04f 0a00 	mov.w	sl, #0
 80066d0:	f104 0b1a 	add.w	fp, r4, #26
 80066d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d6:	425b      	negs	r3, r3
 80066d8:	4553      	cmp	r3, sl
 80066da:	dc01      	bgt.n	80066e0 <_printf_float+0x288>
 80066dc:	464b      	mov	r3, r9
 80066de:	e794      	b.n	800660a <_printf_float+0x1b2>
 80066e0:	2301      	movs	r3, #1
 80066e2:	465a      	mov	r2, fp
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	f43f af00 	beq.w	80064f0 <_printf_float+0x98>
 80066f0:	f10a 0a01 	add.w	sl, sl, #1
 80066f4:	e7ee      	b.n	80066d4 <_printf_float+0x27c>
 80066f6:	bf00      	nop
 80066f8:	ffffffff 	.word	0xffffffff
 80066fc:	7fefffff 	.word	0x7fefffff
 8006700:	08008b90 	.word	0x08008b90
 8006704:	08008b8c 	.word	0x08008b8c
 8006708:	08008b98 	.word	0x08008b98
 800670c:	08008b94 	.word	0x08008b94
 8006710:	08008b9c 	.word	0x08008b9c
 8006714:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006716:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800671a:	4553      	cmp	r3, sl
 800671c:	bfa8      	it	ge
 800671e:	4653      	movge	r3, sl
 8006720:	2b00      	cmp	r3, #0
 8006722:	4699      	mov	r9, r3
 8006724:	dc37      	bgt.n	8006796 <_printf_float+0x33e>
 8006726:	2300      	movs	r3, #0
 8006728:	9307      	str	r3, [sp, #28]
 800672a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800672e:	f104 021a 	add.w	r2, r4, #26
 8006732:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006734:	9907      	ldr	r1, [sp, #28]
 8006736:	9306      	str	r3, [sp, #24]
 8006738:	eba3 0309 	sub.w	r3, r3, r9
 800673c:	428b      	cmp	r3, r1
 800673e:	dc31      	bgt.n	80067a4 <_printf_float+0x34c>
 8006740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006742:	459a      	cmp	sl, r3
 8006744:	dc3b      	bgt.n	80067be <_printf_float+0x366>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	07da      	lsls	r2, r3, #31
 800674a:	d438      	bmi.n	80067be <_printf_float+0x366>
 800674c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674e:	ebaa 0903 	sub.w	r9, sl, r3
 8006752:	9b06      	ldr	r3, [sp, #24]
 8006754:	ebaa 0303 	sub.w	r3, sl, r3
 8006758:	4599      	cmp	r9, r3
 800675a:	bfa8      	it	ge
 800675c:	4699      	movge	r9, r3
 800675e:	f1b9 0f00 	cmp.w	r9, #0
 8006762:	dc34      	bgt.n	80067ce <_printf_float+0x376>
 8006764:	f04f 0800 	mov.w	r8, #0
 8006768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800676c:	f104 0b1a 	add.w	fp, r4, #26
 8006770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006772:	ebaa 0303 	sub.w	r3, sl, r3
 8006776:	eba3 0309 	sub.w	r3, r3, r9
 800677a:	4543      	cmp	r3, r8
 800677c:	f77f af76 	ble.w	800666c <_printf_float+0x214>
 8006780:	2301      	movs	r3, #1
 8006782:	465a      	mov	r2, fp
 8006784:	4631      	mov	r1, r6
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	f43f aeb0 	beq.w	80064f0 <_printf_float+0x98>
 8006790:	f108 0801 	add.w	r8, r8, #1
 8006794:	e7ec      	b.n	8006770 <_printf_float+0x318>
 8006796:	4642      	mov	r2, r8
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	d1c1      	bne.n	8006726 <_printf_float+0x2ce>
 80067a2:	e6a5      	b.n	80064f0 <_printf_float+0x98>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	9206      	str	r2, [sp, #24]
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	f43f ae9e 	beq.w	80064f0 <_printf_float+0x98>
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	9a06      	ldr	r2, [sp, #24]
 80067b8:	3301      	adds	r3, #1
 80067ba:	9307      	str	r3, [sp, #28]
 80067bc:	e7b9      	b.n	8006732 <_printf_float+0x2da>
 80067be:	9b05      	ldr	r3, [sp, #20]
 80067c0:	465a      	mov	r2, fp
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	d1bf      	bne.n	800674c <_printf_float+0x2f4>
 80067cc:	e690      	b.n	80064f0 <_printf_float+0x98>
 80067ce:	9a06      	ldr	r2, [sp, #24]
 80067d0:	464b      	mov	r3, r9
 80067d2:	4442      	add	r2, r8
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	d1c2      	bne.n	8006764 <_printf_float+0x30c>
 80067de:	e687      	b.n	80064f0 <_printf_float+0x98>
 80067e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80067e4:	f1b9 0f01 	cmp.w	r9, #1
 80067e8:	dc01      	bgt.n	80067ee <_printf_float+0x396>
 80067ea:	07db      	lsls	r3, r3, #31
 80067ec:	d536      	bpl.n	800685c <_printf_float+0x404>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4642      	mov	r2, r8
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f ae79 	beq.w	80064f0 <_printf_float+0x98>
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	465a      	mov	r2, fp
 8006802:	4631      	mov	r1, r6
 8006804:	4628      	mov	r0, r5
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	f43f ae71 	beq.w	80064f0 <_printf_float+0x98>
 800680e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006812:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681a:	f109 39ff 	add.w	r9, r9, #4294967295
 800681e:	d018      	beq.n	8006852 <_printf_float+0x3fa>
 8006820:	464b      	mov	r3, r9
 8006822:	f108 0201 	add.w	r2, r8, #1
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	d10c      	bne.n	800684a <_printf_float+0x3f2>
 8006830:	e65e      	b.n	80064f0 <_printf_float+0x98>
 8006832:	2301      	movs	r3, #1
 8006834:	465a      	mov	r2, fp
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f ae57 	beq.w	80064f0 <_printf_float+0x98>
 8006842:	f108 0801 	add.w	r8, r8, #1
 8006846:	45c8      	cmp	r8, r9
 8006848:	dbf3      	blt.n	8006832 <_printf_float+0x3da>
 800684a:	4653      	mov	r3, sl
 800684c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006850:	e6dc      	b.n	800660c <_printf_float+0x1b4>
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	f104 0b1a 	add.w	fp, r4, #26
 800685a:	e7f4      	b.n	8006846 <_printf_float+0x3ee>
 800685c:	2301      	movs	r3, #1
 800685e:	4642      	mov	r2, r8
 8006860:	e7e1      	b.n	8006826 <_printf_float+0x3ce>
 8006862:	2301      	movs	r3, #1
 8006864:	464a      	mov	r2, r9
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f ae3f 	beq.w	80064f0 <_printf_float+0x98>
 8006872:	f108 0801 	add.w	r8, r8, #1
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800687a:	1a5b      	subs	r3, r3, r1
 800687c:	4543      	cmp	r3, r8
 800687e:	dcf0      	bgt.n	8006862 <_printf_float+0x40a>
 8006880:	e6f8      	b.n	8006674 <_printf_float+0x21c>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	f104 0919 	add.w	r9, r4, #25
 800688a:	e7f4      	b.n	8006876 <_printf_float+0x41e>

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4616      	mov	r6, r2
 8006892:	4698      	mov	r8, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800689c:	4293      	cmp	r3, r2
 800689e:	bfb8      	it	lt
 80068a0:	4613      	movlt	r3, r2
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068a8:	4607      	mov	r7, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	b10a      	cbz	r2, 80068b2 <_printf_common+0x26>
 80068ae:	3301      	adds	r3, #1
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	0699      	lsls	r1, r3, #26
 80068b6:	bf42      	ittt	mi
 80068b8:	6833      	ldrmi	r3, [r6, #0]
 80068ba:	3302      	addmi	r3, #2
 80068bc:	6033      	strmi	r3, [r6, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	f015 0506 	ands.w	r5, r5, #6
 80068c4:	d106      	bne.n	80068d4 <_printf_common+0x48>
 80068c6:	f104 0a19 	add.w	sl, r4, #25
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	6832      	ldr	r2, [r6, #0]
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dc26      	bgt.n	8006922 <_printf_common+0x96>
 80068d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068d8:	6822      	ldr	r2, [r4, #0]
 80068da:	3b00      	subs	r3, #0
 80068dc:	bf18      	it	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	0692      	lsls	r2, r2, #26
 80068e2:	d42b      	bmi.n	800693c <_printf_common+0xb0>
 80068e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068e8:	4641      	mov	r1, r8
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c8      	blx	r9
 80068ee:	3001      	adds	r0, #1
 80068f0:	d01e      	beq.n	8006930 <_printf_common+0xa4>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	f003 0306 	and.w	r3, r3, #6
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	bf02      	ittt	eq
 80068fe:	68e5      	ldreq	r5, [r4, #12]
 8006900:	6833      	ldreq	r3, [r6, #0]
 8006902:	1aed      	subeq	r5, r5, r3
 8006904:	68a3      	ldr	r3, [r4, #8]
 8006906:	bf0c      	ite	eq
 8006908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800690c:	2500      	movne	r5, #0
 800690e:	4293      	cmp	r3, r2
 8006910:	bfc4      	itt	gt
 8006912:	1a9b      	subgt	r3, r3, r2
 8006914:	18ed      	addgt	r5, r5, r3
 8006916:	2600      	movs	r6, #0
 8006918:	341a      	adds	r4, #26
 800691a:	42b5      	cmp	r5, r6
 800691c:	d11a      	bne.n	8006954 <_printf_common+0xc8>
 800691e:	2000      	movs	r0, #0
 8006920:	e008      	b.n	8006934 <_printf_common+0xa8>
 8006922:	2301      	movs	r3, #1
 8006924:	4652      	mov	r2, sl
 8006926:	4641      	mov	r1, r8
 8006928:	4638      	mov	r0, r7
 800692a:	47c8      	blx	r9
 800692c:	3001      	adds	r0, #1
 800692e:	d103      	bne.n	8006938 <_printf_common+0xac>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	3501      	adds	r5, #1
 800693a:	e7c6      	b.n	80068ca <_printf_common+0x3e>
 800693c:	18e1      	adds	r1, r4, r3
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	2030      	movs	r0, #48	@ 0x30
 8006942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006946:	4422      	add	r2, r4
 8006948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800694c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006950:	3302      	adds	r3, #2
 8006952:	e7c7      	b.n	80068e4 <_printf_common+0x58>
 8006954:	2301      	movs	r3, #1
 8006956:	4622      	mov	r2, r4
 8006958:	4641      	mov	r1, r8
 800695a:	4638      	mov	r0, r7
 800695c:	47c8      	blx	r9
 800695e:	3001      	adds	r0, #1
 8006960:	d0e6      	beq.n	8006930 <_printf_common+0xa4>
 8006962:	3601      	adds	r6, #1
 8006964:	e7d9      	b.n	800691a <_printf_common+0x8e>
	...

08006968 <_printf_i>:
 8006968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	7e0f      	ldrb	r7, [r1, #24]
 800696e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006970:	2f78      	cmp	r7, #120	@ 0x78
 8006972:	4691      	mov	r9, r2
 8006974:	4680      	mov	r8, r0
 8006976:	460c      	mov	r4, r1
 8006978:	469a      	mov	sl, r3
 800697a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800697e:	d807      	bhi.n	8006990 <_printf_i+0x28>
 8006980:	2f62      	cmp	r7, #98	@ 0x62
 8006982:	d80a      	bhi.n	800699a <_printf_i+0x32>
 8006984:	2f00      	cmp	r7, #0
 8006986:	f000 80d1 	beq.w	8006b2c <_printf_i+0x1c4>
 800698a:	2f58      	cmp	r7, #88	@ 0x58
 800698c:	f000 80b8 	beq.w	8006b00 <_printf_i+0x198>
 8006990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006998:	e03a      	b.n	8006a10 <_printf_i+0xa8>
 800699a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800699e:	2b15      	cmp	r3, #21
 80069a0:	d8f6      	bhi.n	8006990 <_printf_i+0x28>
 80069a2:	a101      	add	r1, pc, #4	@ (adr r1, 80069a8 <_printf_i+0x40>)
 80069a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a8:	08006a01 	.word	0x08006a01
 80069ac:	08006a15 	.word	0x08006a15
 80069b0:	08006991 	.word	0x08006991
 80069b4:	08006991 	.word	0x08006991
 80069b8:	08006991 	.word	0x08006991
 80069bc:	08006991 	.word	0x08006991
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006991 	.word	0x08006991
 80069c8:	08006991 	.word	0x08006991
 80069cc:	08006991 	.word	0x08006991
 80069d0:	08006991 	.word	0x08006991
 80069d4:	08006b13 	.word	0x08006b13
 80069d8:	08006a3f 	.word	0x08006a3f
 80069dc:	08006acd 	.word	0x08006acd
 80069e0:	08006991 	.word	0x08006991
 80069e4:	08006991 	.word	0x08006991
 80069e8:	08006b35 	.word	0x08006b35
 80069ec:	08006991 	.word	0x08006991
 80069f0:	08006a3f 	.word	0x08006a3f
 80069f4:	08006991 	.word	0x08006991
 80069f8:	08006991 	.word	0x08006991
 80069fc:	08006ad5 	.word	0x08006ad5
 8006a00:	6833      	ldr	r3, [r6, #0]
 8006a02:	1d1a      	adds	r2, r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6032      	str	r2, [r6, #0]
 8006a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a10:	2301      	movs	r3, #1
 8006a12:	e09c      	b.n	8006b4e <_printf_i+0x1e6>
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	1d19      	adds	r1, r3, #4
 8006a1a:	6031      	str	r1, [r6, #0]
 8006a1c:	0606      	lsls	r6, r0, #24
 8006a1e:	d501      	bpl.n	8006a24 <_printf_i+0xbc>
 8006a20:	681d      	ldr	r5, [r3, #0]
 8006a22:	e003      	b.n	8006a2c <_printf_i+0xc4>
 8006a24:	0645      	lsls	r5, r0, #25
 8006a26:	d5fb      	bpl.n	8006a20 <_printf_i+0xb8>
 8006a28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	da03      	bge.n	8006a38 <_printf_i+0xd0>
 8006a30:	232d      	movs	r3, #45	@ 0x2d
 8006a32:	426d      	negs	r5, r5
 8006a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a38:	4858      	ldr	r0, [pc, #352]	@ (8006b9c <_printf_i+0x234>)
 8006a3a:	230a      	movs	r3, #10
 8006a3c:	e011      	b.n	8006a62 <_printf_i+0xfa>
 8006a3e:	6821      	ldr	r1, [r4, #0]
 8006a40:	6833      	ldr	r3, [r6, #0]
 8006a42:	0608      	lsls	r0, r1, #24
 8006a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a48:	d402      	bmi.n	8006a50 <_printf_i+0xe8>
 8006a4a:	0649      	lsls	r1, r1, #25
 8006a4c:	bf48      	it	mi
 8006a4e:	b2ad      	uxthmi	r5, r5
 8006a50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a52:	4852      	ldr	r0, [pc, #328]	@ (8006b9c <_printf_i+0x234>)
 8006a54:	6033      	str	r3, [r6, #0]
 8006a56:	bf14      	ite	ne
 8006a58:	230a      	movne	r3, #10
 8006a5a:	2308      	moveq	r3, #8
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a62:	6866      	ldr	r6, [r4, #4]
 8006a64:	60a6      	str	r6, [r4, #8]
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	db05      	blt.n	8006a76 <_printf_i+0x10e>
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	432e      	orrs	r6, r5
 8006a6e:	f021 0104 	bic.w	r1, r1, #4
 8006a72:	6021      	str	r1, [r4, #0]
 8006a74:	d04b      	beq.n	8006b0e <_printf_i+0x1a6>
 8006a76:	4616      	mov	r6, r2
 8006a78:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a7c:	fb03 5711 	mls	r7, r3, r1, r5
 8006a80:	5dc7      	ldrb	r7, [r0, r7]
 8006a82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a86:	462f      	mov	r7, r5
 8006a88:	42bb      	cmp	r3, r7
 8006a8a:	460d      	mov	r5, r1
 8006a8c:	d9f4      	bls.n	8006a78 <_printf_i+0x110>
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d10b      	bne.n	8006aaa <_printf_i+0x142>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	07df      	lsls	r7, r3, #31
 8006a96:	d508      	bpl.n	8006aaa <_printf_i+0x142>
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	6861      	ldr	r1, [r4, #4]
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	bfde      	ittt	le
 8006aa0:	2330      	movle	r3, #48	@ 0x30
 8006aa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aa6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006aaa:	1b92      	subs	r2, r2, r6
 8006aac:	6122      	str	r2, [r4, #16]
 8006aae:	f8cd a000 	str.w	sl, [sp]
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	aa03      	add	r2, sp, #12
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4640      	mov	r0, r8
 8006aba:	f7ff fee7 	bl	800688c <_printf_common>
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d14a      	bne.n	8006b58 <_printf_i+0x1f0>
 8006ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac6:	b004      	add	sp, #16
 8006ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	f043 0320 	orr.w	r3, r3, #32
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	4832      	ldr	r0, [pc, #200]	@ (8006ba0 <_printf_i+0x238>)
 8006ad6:	2778      	movs	r7, #120	@ 0x78
 8006ad8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	6831      	ldr	r1, [r6, #0]
 8006ae0:	061f      	lsls	r7, r3, #24
 8006ae2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ae6:	d402      	bmi.n	8006aee <_printf_i+0x186>
 8006ae8:	065f      	lsls	r7, r3, #25
 8006aea:	bf48      	it	mi
 8006aec:	b2ad      	uxthmi	r5, r5
 8006aee:	6031      	str	r1, [r6, #0]
 8006af0:	07d9      	lsls	r1, r3, #31
 8006af2:	bf44      	itt	mi
 8006af4:	f043 0320 	orrmi.w	r3, r3, #32
 8006af8:	6023      	strmi	r3, [r4, #0]
 8006afa:	b11d      	cbz	r5, 8006b04 <_printf_i+0x19c>
 8006afc:	2310      	movs	r3, #16
 8006afe:	e7ad      	b.n	8006a5c <_printf_i+0xf4>
 8006b00:	4826      	ldr	r0, [pc, #152]	@ (8006b9c <_printf_i+0x234>)
 8006b02:	e7e9      	b.n	8006ad8 <_printf_i+0x170>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	f023 0320 	bic.w	r3, r3, #32
 8006b0a:	6023      	str	r3, [r4, #0]
 8006b0c:	e7f6      	b.n	8006afc <_printf_i+0x194>
 8006b0e:	4616      	mov	r6, r2
 8006b10:	e7bd      	b.n	8006a8e <_printf_i+0x126>
 8006b12:	6833      	ldr	r3, [r6, #0]
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	6961      	ldr	r1, [r4, #20]
 8006b18:	1d18      	adds	r0, r3, #4
 8006b1a:	6030      	str	r0, [r6, #0]
 8006b1c:	062e      	lsls	r6, r5, #24
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	d501      	bpl.n	8006b26 <_printf_i+0x1be>
 8006b22:	6019      	str	r1, [r3, #0]
 8006b24:	e002      	b.n	8006b2c <_printf_i+0x1c4>
 8006b26:	0668      	lsls	r0, r5, #25
 8006b28:	d5fb      	bpl.n	8006b22 <_printf_i+0x1ba>
 8006b2a:	8019      	strh	r1, [r3, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	6123      	str	r3, [r4, #16]
 8006b30:	4616      	mov	r6, r2
 8006b32:	e7bc      	b.n	8006aae <_printf_i+0x146>
 8006b34:	6833      	ldr	r3, [r6, #0]
 8006b36:	1d1a      	adds	r2, r3, #4
 8006b38:	6032      	str	r2, [r6, #0]
 8006b3a:	681e      	ldr	r6, [r3, #0]
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	2100      	movs	r1, #0
 8006b40:	4630      	mov	r0, r6
 8006b42:	f7f9 fb7d 	bl	8000240 <memchr>
 8006b46:	b108      	cbz	r0, 8006b4c <_printf_i+0x1e4>
 8006b48:	1b80      	subs	r0, r0, r6
 8006b4a:	6060      	str	r0, [r4, #4]
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	6123      	str	r3, [r4, #16]
 8006b50:	2300      	movs	r3, #0
 8006b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b56:	e7aa      	b.n	8006aae <_printf_i+0x146>
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4640      	mov	r0, r8
 8006b60:	47d0      	blx	sl
 8006b62:	3001      	adds	r0, #1
 8006b64:	d0ad      	beq.n	8006ac2 <_printf_i+0x15a>
 8006b66:	6823      	ldr	r3, [r4, #0]
 8006b68:	079b      	lsls	r3, r3, #30
 8006b6a:	d413      	bmi.n	8006b94 <_printf_i+0x22c>
 8006b6c:	68e0      	ldr	r0, [r4, #12]
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	4298      	cmp	r0, r3
 8006b72:	bfb8      	it	lt
 8006b74:	4618      	movlt	r0, r3
 8006b76:	e7a6      	b.n	8006ac6 <_printf_i+0x15e>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	4640      	mov	r0, r8
 8006b80:	47d0      	blx	sl
 8006b82:	3001      	adds	r0, #1
 8006b84:	d09d      	beq.n	8006ac2 <_printf_i+0x15a>
 8006b86:	3501      	adds	r5, #1
 8006b88:	68e3      	ldr	r3, [r4, #12]
 8006b8a:	9903      	ldr	r1, [sp, #12]
 8006b8c:	1a5b      	subs	r3, r3, r1
 8006b8e:	42ab      	cmp	r3, r5
 8006b90:	dcf2      	bgt.n	8006b78 <_printf_i+0x210>
 8006b92:	e7eb      	b.n	8006b6c <_printf_i+0x204>
 8006b94:	2500      	movs	r5, #0
 8006b96:	f104 0619 	add.w	r6, r4, #25
 8006b9a:	e7f5      	b.n	8006b88 <_printf_i+0x220>
 8006b9c:	08008b9e 	.word	0x08008b9e
 8006ba0:	08008baf 	.word	0x08008baf

08006ba4 <std>:
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4604      	mov	r4, r0
 8006baa:	e9c0 3300 	strd	r3, r3, [r0]
 8006bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bb2:	6083      	str	r3, [r0, #8]
 8006bb4:	8181      	strh	r1, [r0, #12]
 8006bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bb8:	81c2      	strh	r2, [r0, #14]
 8006bba:	6183      	str	r3, [r0, #24]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	305c      	adds	r0, #92	@ 0x5c
 8006bc2:	f000 f906 	bl	8006dd2 <memset>
 8006bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <std+0x58>)
 8006bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bca:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <std+0x5c>)
 8006bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x60>)
 8006bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x64>)
 8006bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <std+0x68>)
 8006bd8:	6224      	str	r4, [r4, #32]
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d006      	beq.n	8006bec <std+0x48>
 8006bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006be2:	4294      	cmp	r4, r2
 8006be4:	d002      	beq.n	8006bec <std+0x48>
 8006be6:	33d0      	adds	r3, #208	@ 0xd0
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d105      	bne.n	8006bf8 <std+0x54>
 8006bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf4:	f000 b96a 	b.w	8006ecc <__retarget_lock_init_recursive>
 8006bf8:	bd10      	pop	{r4, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08006d4d 	.word	0x08006d4d
 8006c00:	08006d6f 	.word	0x08006d6f
 8006c04:	08006da7 	.word	0x08006da7
 8006c08:	08006dcb 	.word	0x08006dcb
 8006c0c:	20000bfc 	.word	0x20000bfc

08006c10 <stdio_exit_handler>:
 8006c10:	4a02      	ldr	r2, [pc, #8]	@ (8006c1c <stdio_exit_handler+0xc>)
 8006c12:	4903      	ldr	r1, [pc, #12]	@ (8006c20 <stdio_exit_handler+0x10>)
 8006c14:	4803      	ldr	r0, [pc, #12]	@ (8006c24 <stdio_exit_handler+0x14>)
 8006c16:	f000 b869 	b.w	8006cec <_fwalk_sglue>
 8006c1a:	bf00      	nop
 8006c1c:	2000000c 	.word	0x2000000c
 8006c20:	08008725 	.word	0x08008725
 8006c24:	2000001c 	.word	0x2000001c

08006c28 <cleanup_stdio>:
 8006c28:	6841      	ldr	r1, [r0, #4]
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c5c <cleanup_stdio+0x34>)
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	4604      	mov	r4, r0
 8006c32:	d001      	beq.n	8006c38 <cleanup_stdio+0x10>
 8006c34:	f001 fd76 	bl	8008724 <_fflush_r>
 8006c38:	68a1      	ldr	r1, [r4, #8]
 8006c3a:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <cleanup_stdio+0x38>)
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	d002      	beq.n	8006c46 <cleanup_stdio+0x1e>
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 fd6f 	bl	8008724 <_fflush_r>
 8006c46:	68e1      	ldr	r1, [r4, #12]
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <cleanup_stdio+0x3c>)
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d004      	beq.n	8006c58 <cleanup_stdio+0x30>
 8006c4e:	4620      	mov	r0, r4
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	f001 bd66 	b.w	8008724 <_fflush_r>
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000bfc 	.word	0x20000bfc
 8006c60:	20000c64 	.word	0x20000c64
 8006c64:	20000ccc 	.word	0x20000ccc

08006c68 <global_stdio_init.part.0>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <global_stdio_init.part.0+0x30>)
 8006c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8006c9c <global_stdio_init.part.0+0x34>)
 8006c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca0 <global_stdio_init.part.0+0x38>)
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	4620      	mov	r0, r4
 8006c74:	2200      	movs	r2, #0
 8006c76:	2104      	movs	r1, #4
 8006c78:	f7ff ff94 	bl	8006ba4 <std>
 8006c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c80:	2201      	movs	r2, #1
 8006c82:	2109      	movs	r1, #9
 8006c84:	f7ff ff8e 	bl	8006ba4 <std>
 8006c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c92:	2112      	movs	r1, #18
 8006c94:	f7ff bf86 	b.w	8006ba4 <std>
 8006c98:	20000d34 	.word	0x20000d34
 8006c9c:	20000bfc 	.word	0x20000bfc
 8006ca0:	08006c11 	.word	0x08006c11

08006ca4 <__sfp_lock_acquire>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	@ (8006cac <__sfp_lock_acquire+0x8>)
 8006ca6:	f000 b912 	b.w	8006ece <__retarget_lock_acquire_recursive>
 8006caa:	bf00      	nop
 8006cac:	20000d3d 	.word	0x20000d3d

08006cb0 <__sfp_lock_release>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	@ (8006cb8 <__sfp_lock_release+0x8>)
 8006cb2:	f000 b90d 	b.w	8006ed0 <__retarget_lock_release_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	20000d3d 	.word	0x20000d3d

08006cbc <__sinit>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	f7ff fff0 	bl	8006ca4 <__sfp_lock_acquire>
 8006cc4:	6a23      	ldr	r3, [r4, #32]
 8006cc6:	b11b      	cbz	r3, 8006cd0 <__sinit+0x14>
 8006cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ccc:	f7ff bff0 	b.w	8006cb0 <__sfp_lock_release>
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <__sinit+0x28>)
 8006cd2:	6223      	str	r3, [r4, #32]
 8006cd4:	4b04      	ldr	r3, [pc, #16]	@ (8006ce8 <__sinit+0x2c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1f5      	bne.n	8006cc8 <__sinit+0xc>
 8006cdc:	f7ff ffc4 	bl	8006c68 <global_stdio_init.part.0>
 8006ce0:	e7f2      	b.n	8006cc8 <__sinit+0xc>
 8006ce2:	bf00      	nop
 8006ce4:	08006c29 	.word	0x08006c29
 8006ce8:	20000d34 	.word	0x20000d34

08006cec <_fwalk_sglue>:
 8006cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	4688      	mov	r8, r1
 8006cf4:	4614      	mov	r4, r2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8006d00:	d505      	bpl.n	8006d0e <_fwalk_sglue+0x22>
 8006d02:	6824      	ldr	r4, [r4, #0]
 8006d04:	2c00      	cmp	r4, #0
 8006d06:	d1f7      	bne.n	8006cf8 <_fwalk_sglue+0xc>
 8006d08:	4630      	mov	r0, r6
 8006d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0e:	89ab      	ldrh	r3, [r5, #12]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d907      	bls.n	8006d24 <_fwalk_sglue+0x38>
 8006d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	d003      	beq.n	8006d24 <_fwalk_sglue+0x38>
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4638      	mov	r0, r7
 8006d20:	47c0      	blx	r8
 8006d22:	4306      	orrs	r6, r0
 8006d24:	3568      	adds	r5, #104	@ 0x68
 8006d26:	e7e9      	b.n	8006cfc <_fwalk_sglue+0x10>

08006d28 <iprintf>:
 8006d28:	b40f      	push	{r0, r1, r2, r3}
 8006d2a:	b507      	push	{r0, r1, r2, lr}
 8006d2c:	4906      	ldr	r1, [pc, #24]	@ (8006d48 <iprintf+0x20>)
 8006d2e:	ab04      	add	r3, sp, #16
 8006d30:	6808      	ldr	r0, [r1, #0]
 8006d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d36:	6881      	ldr	r1, [r0, #8]
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	f001 fb57 	bl	80083ec <_vfiprintf_r>
 8006d3e:	b003      	add	sp, #12
 8006d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d44:	b004      	add	sp, #16
 8006d46:	4770      	bx	lr
 8006d48:	20000018 	.word	0x20000018

08006d4c <__sread>:
 8006d4c:	b510      	push	{r4, lr}
 8006d4e:	460c      	mov	r4, r1
 8006d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d54:	f000 f86c 	bl	8006e30 <_read_r>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	bfab      	itete	ge
 8006d5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d60:	181b      	addge	r3, r3, r0
 8006d62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d66:	bfac      	ite	ge
 8006d68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d6a:	81a3      	strhlt	r3, [r4, #12]
 8006d6c:	bd10      	pop	{r4, pc}

08006d6e <__swrite>:
 8006d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d72:	461f      	mov	r7, r3
 8006d74:	898b      	ldrh	r3, [r1, #12]
 8006d76:	05db      	lsls	r3, r3, #23
 8006d78:	4605      	mov	r5, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	4616      	mov	r6, r2
 8006d7e:	d505      	bpl.n	8006d8c <__swrite+0x1e>
 8006d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d84:	2302      	movs	r3, #2
 8006d86:	2200      	movs	r2, #0
 8006d88:	f000 f840 	bl	8006e0c <_lseek_r>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006da2:	f000 b857 	b.w	8006e54 <_write_r>

08006da6 <__sseek>:
 8006da6:	b510      	push	{r4, lr}
 8006da8:	460c      	mov	r4, r1
 8006daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dae:	f000 f82d 	bl	8006e0c <_lseek_r>
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	bf15      	itete	ne
 8006db8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dc2:	81a3      	strheq	r3, [r4, #12]
 8006dc4:	bf18      	it	ne
 8006dc6:	81a3      	strhne	r3, [r4, #12]
 8006dc8:	bd10      	pop	{r4, pc}

08006dca <__sclose>:
 8006dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dce:	f000 b80d 	b.w	8006dec <_close_r>

08006dd2 <memset>:
 8006dd2:	4402      	add	r2, r0
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d100      	bne.n	8006ddc <memset+0xa>
 8006dda:	4770      	bx	lr
 8006ddc:	f803 1b01 	strb.w	r1, [r3], #1
 8006de0:	e7f9      	b.n	8006dd6 <memset+0x4>
	...

08006de4 <_localeconv_r>:
 8006de4:	4800      	ldr	r0, [pc, #0]	@ (8006de8 <_localeconv_r+0x4>)
 8006de6:	4770      	bx	lr
 8006de8:	20000158 	.word	0x20000158

08006dec <_close_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d06      	ldr	r5, [pc, #24]	@ (8006e08 <_close_r+0x1c>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	f7fa fb64 	bl	80014c4 <_close>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_close_r+0x1a>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_close_r+0x1a>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	20000d38 	.word	0x20000d38

08006e0c <_lseek_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d07      	ldr	r5, [pc, #28]	@ (8006e2c <_lseek_r+0x20>)
 8006e10:	4604      	mov	r4, r0
 8006e12:	4608      	mov	r0, r1
 8006e14:	4611      	mov	r1, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	602a      	str	r2, [r5, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f7fa fb79 	bl	8001512 <_lseek>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_lseek_r+0x1e>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_lseek_r+0x1e>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	20000d38 	.word	0x20000d38

08006e30 <_read_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d07      	ldr	r5, [pc, #28]	@ (8006e50 <_read_r+0x20>)
 8006e34:	4604      	mov	r4, r0
 8006e36:	4608      	mov	r0, r1
 8006e38:	4611      	mov	r1, r2
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	602a      	str	r2, [r5, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f7fa fb07 	bl	8001452 <_read>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_read_r+0x1e>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_read_r+0x1e>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	20000d38 	.word	0x20000d38

08006e54 <_write_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4d07      	ldr	r5, [pc, #28]	@ (8006e74 <_write_r+0x20>)
 8006e58:	4604      	mov	r4, r0
 8006e5a:	4608      	mov	r0, r1
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	2200      	movs	r2, #0
 8006e60:	602a      	str	r2, [r5, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	f7fa fb12 	bl	800148c <_write>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	d102      	bne.n	8006e72 <_write_r+0x1e>
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	b103      	cbz	r3, 8006e72 <_write_r+0x1e>
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	bd38      	pop	{r3, r4, r5, pc}
 8006e74:	20000d38 	.word	0x20000d38

08006e78 <__errno>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	@ (8006e80 <__errno+0x8>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000018 	.word	0x20000018

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4d0d      	ldr	r5, [pc, #52]	@ (8006ebc <__libc_init_array+0x38>)
 8006e88:	4c0d      	ldr	r4, [pc, #52]	@ (8006ec0 <__libc_init_array+0x3c>)
 8006e8a:	1b64      	subs	r4, r4, r5
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	2600      	movs	r6, #0
 8006e90:	42a6      	cmp	r6, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	4d0b      	ldr	r5, [pc, #44]	@ (8006ec4 <__libc_init_array+0x40>)
 8006e96:	4c0c      	ldr	r4, [pc, #48]	@ (8006ec8 <__libc_init_array+0x44>)
 8006e98:	f001 fe52 	bl	8008b40 <_init>
 8006e9c:	1b64      	subs	r4, r4, r5
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	2600      	movs	r6, #0
 8006ea2:	42a6      	cmp	r6, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eac:	4798      	blx	r3
 8006eae:	3601      	adds	r6, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb6:	4798      	blx	r3
 8006eb8:	3601      	adds	r6, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	08008f0c 	.word	0x08008f0c
 8006ec0:	08008f0c 	.word	0x08008f0c
 8006ec4:	08008f0c 	.word	0x08008f0c
 8006ec8:	08008f10 	.word	0x08008f10

08006ecc <__retarget_lock_init_recursive>:
 8006ecc:	4770      	bx	lr

08006ece <__retarget_lock_acquire_recursive>:
 8006ece:	4770      	bx	lr

08006ed0 <__retarget_lock_release_recursive>:
 8006ed0:	4770      	bx	lr

08006ed2 <quorem>:
 8006ed2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed6:	6903      	ldr	r3, [r0, #16]
 8006ed8:	690c      	ldr	r4, [r1, #16]
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	4607      	mov	r7, r0
 8006ede:	db7e      	blt.n	8006fde <quorem+0x10c>
 8006ee0:	3c01      	subs	r4, #1
 8006ee2:	f101 0814 	add.w	r8, r1, #20
 8006ee6:	00a3      	lsls	r3, r4, #2
 8006ee8:	f100 0514 	add.w	r5, r0, #20
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef2:	9301      	str	r3, [sp, #4]
 8006ef4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006efc:	3301      	adds	r3, #1
 8006efe:	429a      	cmp	r2, r3
 8006f00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f04:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f08:	d32e      	bcc.n	8006f68 <quorem+0x96>
 8006f0a:	f04f 0a00 	mov.w	sl, #0
 8006f0e:	46c4      	mov	ip, r8
 8006f10:	46ae      	mov	lr, r5
 8006f12:	46d3      	mov	fp, sl
 8006f14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f18:	b298      	uxth	r0, r3
 8006f1a:	fb06 a000 	mla	r0, r6, r0, sl
 8006f1e:	0c02      	lsrs	r2, r0, #16
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	fb06 2303 	mla	r3, r6, r3, r2
 8006f26:	f8de 2000 	ldr.w	r2, [lr]
 8006f2a:	b280      	uxth	r0, r0
 8006f2c:	b292      	uxth	r2, r2
 8006f2e:	1a12      	subs	r2, r2, r0
 8006f30:	445a      	add	r2, fp
 8006f32:	f8de 0000 	ldr.w	r0, [lr]
 8006f36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f44:	b292      	uxth	r2, r2
 8006f46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f4a:	45e1      	cmp	r9, ip
 8006f4c:	f84e 2b04 	str.w	r2, [lr], #4
 8006f50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f54:	d2de      	bcs.n	8006f14 <quorem+0x42>
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	58eb      	ldr	r3, [r5, r3]
 8006f5a:	b92b      	cbnz	r3, 8006f68 <quorem+0x96>
 8006f5c:	9b01      	ldr	r3, [sp, #4]
 8006f5e:	3b04      	subs	r3, #4
 8006f60:	429d      	cmp	r5, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	d32f      	bcc.n	8006fc6 <quorem+0xf4>
 8006f66:	613c      	str	r4, [r7, #16]
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f001 f90d 	bl	8008188 <__mcmp>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	db25      	blt.n	8006fbe <quorem+0xec>
 8006f72:	4629      	mov	r1, r5
 8006f74:	2000      	movs	r0, #0
 8006f76:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f7a:	f8d1 c000 	ldr.w	ip, [r1]
 8006f7e:	fa1f fe82 	uxth.w	lr, r2
 8006f82:	fa1f f38c 	uxth.w	r3, ip
 8006f86:	eba3 030e 	sub.w	r3, r3, lr
 8006f8a:	4403      	add	r3, r0
 8006f8c:	0c12      	lsrs	r2, r2, #16
 8006f8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f9c:	45c1      	cmp	r9, r8
 8006f9e:	f841 3b04 	str.w	r3, [r1], #4
 8006fa2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fa6:	d2e6      	bcs.n	8006f76 <quorem+0xa4>
 8006fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb0:	b922      	cbnz	r2, 8006fbc <quorem+0xea>
 8006fb2:	3b04      	subs	r3, #4
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	d30b      	bcc.n	8006fd2 <quorem+0x100>
 8006fba:	613c      	str	r4, [r7, #16]
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	b003      	add	sp, #12
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	d1cb      	bne.n	8006f66 <quorem+0x94>
 8006fce:	3c01      	subs	r4, #1
 8006fd0:	e7c6      	b.n	8006f60 <quorem+0x8e>
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	3b04      	subs	r3, #4
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	d1ef      	bne.n	8006fba <quorem+0xe8>
 8006fda:	3c01      	subs	r4, #1
 8006fdc:	e7ea      	b.n	8006fb4 <quorem+0xe2>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e7ee      	b.n	8006fc0 <quorem+0xee>
 8006fe2:	0000      	movs	r0, r0
 8006fe4:	0000      	movs	r0, r0
	...

08006fe8 <_dtoa_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ed2d 8b02 	vpush	{d8}
 8006ff0:	69c7      	ldr	r7, [r0, #28]
 8006ff2:	b091      	sub	sp, #68	@ 0x44
 8006ff4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ff8:	ec55 4b10 	vmov	r4, r5, d0
 8006ffc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006ffe:	9107      	str	r1, [sp, #28]
 8007000:	4681      	mov	r9, r0
 8007002:	9209      	str	r2, [sp, #36]	@ 0x24
 8007004:	930d      	str	r3, [sp, #52]	@ 0x34
 8007006:	b97f      	cbnz	r7, 8007028 <_dtoa_r+0x40>
 8007008:	2010      	movs	r0, #16
 800700a:	f000 fd95 	bl	8007b38 <malloc>
 800700e:	4602      	mov	r2, r0
 8007010:	f8c9 001c 	str.w	r0, [r9, #28]
 8007014:	b920      	cbnz	r0, 8007020 <_dtoa_r+0x38>
 8007016:	4ba0      	ldr	r3, [pc, #640]	@ (8007298 <_dtoa_r+0x2b0>)
 8007018:	21ef      	movs	r1, #239	@ 0xef
 800701a:	48a0      	ldr	r0, [pc, #640]	@ (800729c <_dtoa_r+0x2b4>)
 800701c:	f001 fc5c 	bl	80088d8 <__assert_func>
 8007020:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007024:	6007      	str	r7, [r0, #0]
 8007026:	60c7      	str	r7, [r0, #12]
 8007028:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800702c:	6819      	ldr	r1, [r3, #0]
 800702e:	b159      	cbz	r1, 8007048 <_dtoa_r+0x60>
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	604a      	str	r2, [r1, #4]
 8007034:	2301      	movs	r3, #1
 8007036:	4093      	lsls	r3, r2
 8007038:	608b      	str	r3, [r1, #8]
 800703a:	4648      	mov	r0, r9
 800703c:	f000 fe72 	bl	8007d24 <_Bfree>
 8007040:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	1e2b      	subs	r3, r5, #0
 800704a:	bfbb      	ittet	lt
 800704c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007050:	9303      	strlt	r3, [sp, #12]
 8007052:	2300      	movge	r3, #0
 8007054:	2201      	movlt	r2, #1
 8007056:	bfac      	ite	ge
 8007058:	6033      	strge	r3, [r6, #0]
 800705a:	6032      	strlt	r2, [r6, #0]
 800705c:	4b90      	ldr	r3, [pc, #576]	@ (80072a0 <_dtoa_r+0x2b8>)
 800705e:	9e03      	ldr	r6, [sp, #12]
 8007060:	43b3      	bics	r3, r6
 8007062:	d110      	bne.n	8007086 <_dtoa_r+0x9e>
 8007064:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007066:	f242 730f 	movw	r3, #9999	@ 0x270f
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007070:	4323      	orrs	r3, r4
 8007072:	f000 84e6 	beq.w	8007a42 <_dtoa_r+0xa5a>
 8007076:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007078:	4f8a      	ldr	r7, [pc, #552]	@ (80072a4 <_dtoa_r+0x2bc>)
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 84e8 	beq.w	8007a50 <_dtoa_r+0xa68>
 8007080:	1cfb      	adds	r3, r7, #3
 8007082:	f000 bce3 	b.w	8007a4c <_dtoa_r+0xa64>
 8007086:	ed9d 8b02 	vldr	d8, [sp, #8]
 800708a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007092:	d10a      	bne.n	80070aa <_dtoa_r+0xc2>
 8007094:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007096:	2301      	movs	r3, #1
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800709c:	b113      	cbz	r3, 80070a4 <_dtoa_r+0xbc>
 800709e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80070a0:	4b81      	ldr	r3, [pc, #516]	@ (80072a8 <_dtoa_r+0x2c0>)
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	4f81      	ldr	r7, [pc, #516]	@ (80072ac <_dtoa_r+0x2c4>)
 80070a6:	f000 bcd3 	b.w	8007a50 <_dtoa_r+0xa68>
 80070aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80070ac:	a90f      	add	r1, sp, #60	@ 0x3c
 80070ae:	4648      	mov	r0, r9
 80070b0:	eeb0 0b48 	vmov.f64	d0, d8
 80070b4:	f001 f918 	bl	80082e8 <__d2b>
 80070b8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80070bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070be:	9001      	str	r0, [sp, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d045      	beq.n	8007150 <_dtoa_r+0x168>
 80070c4:	eeb0 7b48 	vmov.f64	d7, d8
 80070c8:	ee18 1a90 	vmov	r1, s17
 80070cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80070d0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80070d4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80070d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80070dc:	2500      	movs	r5, #0
 80070de:	ee07 1a90 	vmov	s15, r1
 80070e2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80070e6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007280 <_dtoa_r+0x298>
 80070ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80070ee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007288 <_dtoa_r+0x2a0>
 80070f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80070f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007290 <_dtoa_r+0x2a8>
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007102:	eeb0 7b46 	vmov.f64	d7, d6
 8007106:	eea4 7b05 	vfma.f64	d7, d4, d5
 800710a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800710e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007116:	ee16 8a90 	vmov	r8, s13
 800711a:	d508      	bpl.n	800712e <_dtoa_r+0x146>
 800711c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007120:	eeb4 6b47 	vcmp.f64	d6, d7
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	bf18      	it	ne
 800712a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800712e:	f1b8 0f16 	cmp.w	r8, #22
 8007132:	d82b      	bhi.n	800718c <_dtoa_r+0x1a4>
 8007134:	495e      	ldr	r1, [pc, #376]	@ (80072b0 <_dtoa_r+0x2c8>)
 8007136:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800713a:	ed91 7b00 	vldr	d7, [r1]
 800713e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007146:	d501      	bpl.n	800714c <_dtoa_r+0x164>
 8007148:	f108 38ff 	add.w	r8, r8, #4294967295
 800714c:	2100      	movs	r1, #0
 800714e:	e01e      	b.n	800718e <_dtoa_r+0x1a6>
 8007150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007152:	4413      	add	r3, r2
 8007154:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007158:	2920      	cmp	r1, #32
 800715a:	bfc1      	itttt	gt
 800715c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007160:	408e      	lslgt	r6, r1
 8007162:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007166:	fa24 f101 	lsrgt.w	r1, r4, r1
 800716a:	bfd6      	itet	le
 800716c:	f1c1 0120 	rsble	r1, r1, #32
 8007170:	4331      	orrgt	r1, r6
 8007172:	fa04 f101 	lslle.w	r1, r4, r1
 8007176:	ee07 1a90 	vmov	s15, r1
 800717a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800717e:	3b01      	subs	r3, #1
 8007180:	ee17 1a90 	vmov	r1, s15
 8007184:	2501      	movs	r5, #1
 8007186:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800718a:	e7a8      	b.n	80070de <_dtoa_r+0xf6>
 800718c:	2101      	movs	r1, #1
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	1e53      	subs	r3, r2, #1
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	bf45      	ittet	mi
 8007196:	f1c2 0301 	rsbmi	r3, r2, #1
 800719a:	9304      	strmi	r3, [sp, #16]
 800719c:	2300      	movpl	r3, #0
 800719e:	2300      	movmi	r3, #0
 80071a0:	bf4c      	ite	mi
 80071a2:	9306      	strmi	r3, [sp, #24]
 80071a4:	9304      	strpl	r3, [sp, #16]
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	910c      	str	r1, [sp, #48]	@ 0x30
 80071ac:	db18      	blt.n	80071e0 <_dtoa_r+0x1f8>
 80071ae:	9b06      	ldr	r3, [sp, #24]
 80071b0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80071b4:	4443      	add	r3, r8
 80071b6:	9306      	str	r3, [sp, #24]
 80071b8:	2300      	movs	r3, #0
 80071ba:	9a07      	ldr	r2, [sp, #28]
 80071bc:	2a09      	cmp	r2, #9
 80071be:	d845      	bhi.n	800724c <_dtoa_r+0x264>
 80071c0:	2a05      	cmp	r2, #5
 80071c2:	bfc4      	itt	gt
 80071c4:	3a04      	subgt	r2, #4
 80071c6:	9207      	strgt	r2, [sp, #28]
 80071c8:	9a07      	ldr	r2, [sp, #28]
 80071ca:	f1a2 0202 	sub.w	r2, r2, #2
 80071ce:	bfcc      	ite	gt
 80071d0:	2400      	movgt	r4, #0
 80071d2:	2401      	movle	r4, #1
 80071d4:	2a03      	cmp	r2, #3
 80071d6:	d844      	bhi.n	8007262 <_dtoa_r+0x27a>
 80071d8:	e8df f002 	tbb	[pc, r2]
 80071dc:	0b173634 	.word	0x0b173634
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	2200      	movs	r2, #0
 80071e4:	eba3 0308 	sub.w	r3, r3, r8
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80071ec:	f1c8 0300 	rsb	r3, r8, #0
 80071f0:	e7e3      	b.n	80071ba <_dtoa_r+0x1d2>
 80071f2:	2201      	movs	r2, #1
 80071f4:	9208      	str	r2, [sp, #32]
 80071f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071f8:	eb08 0b02 	add.w	fp, r8, r2
 80071fc:	f10b 0a01 	add.w	sl, fp, #1
 8007200:	4652      	mov	r2, sl
 8007202:	2a01      	cmp	r2, #1
 8007204:	bfb8      	it	lt
 8007206:	2201      	movlt	r2, #1
 8007208:	e006      	b.n	8007218 <_dtoa_r+0x230>
 800720a:	2201      	movs	r2, #1
 800720c:	9208      	str	r2, [sp, #32]
 800720e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007210:	2a00      	cmp	r2, #0
 8007212:	dd29      	ble.n	8007268 <_dtoa_r+0x280>
 8007214:	4693      	mov	fp, r2
 8007216:	4692      	mov	sl, r2
 8007218:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800721c:	2100      	movs	r1, #0
 800721e:	2004      	movs	r0, #4
 8007220:	f100 0614 	add.w	r6, r0, #20
 8007224:	4296      	cmp	r6, r2
 8007226:	d926      	bls.n	8007276 <_dtoa_r+0x28e>
 8007228:	6079      	str	r1, [r7, #4]
 800722a:	4648      	mov	r0, r9
 800722c:	9305      	str	r3, [sp, #20]
 800722e:	f000 fd39 	bl	8007ca4 <_Balloc>
 8007232:	9b05      	ldr	r3, [sp, #20]
 8007234:	4607      	mov	r7, r0
 8007236:	2800      	cmp	r0, #0
 8007238:	d13e      	bne.n	80072b8 <_dtoa_r+0x2d0>
 800723a:	4b1e      	ldr	r3, [pc, #120]	@ (80072b4 <_dtoa_r+0x2cc>)
 800723c:	4602      	mov	r2, r0
 800723e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007242:	e6ea      	b.n	800701a <_dtoa_r+0x32>
 8007244:	2200      	movs	r2, #0
 8007246:	e7e1      	b.n	800720c <_dtoa_r+0x224>
 8007248:	2200      	movs	r2, #0
 800724a:	e7d3      	b.n	80071f4 <_dtoa_r+0x20c>
 800724c:	2401      	movs	r4, #1
 800724e:	2200      	movs	r2, #0
 8007250:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007254:	f04f 3bff 	mov.w	fp, #4294967295
 8007258:	2100      	movs	r1, #0
 800725a:	46da      	mov	sl, fp
 800725c:	2212      	movs	r2, #18
 800725e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007260:	e7da      	b.n	8007218 <_dtoa_r+0x230>
 8007262:	2201      	movs	r2, #1
 8007264:	9208      	str	r2, [sp, #32]
 8007266:	e7f5      	b.n	8007254 <_dtoa_r+0x26c>
 8007268:	f04f 0b01 	mov.w	fp, #1
 800726c:	46da      	mov	sl, fp
 800726e:	465a      	mov	r2, fp
 8007270:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007274:	e7d0      	b.n	8007218 <_dtoa_r+0x230>
 8007276:	3101      	adds	r1, #1
 8007278:	0040      	lsls	r0, r0, #1
 800727a:	e7d1      	b.n	8007220 <_dtoa_r+0x238>
 800727c:	f3af 8000 	nop.w
 8007280:	636f4361 	.word	0x636f4361
 8007284:	3fd287a7 	.word	0x3fd287a7
 8007288:	8b60c8b3 	.word	0x8b60c8b3
 800728c:	3fc68a28 	.word	0x3fc68a28
 8007290:	509f79fb 	.word	0x509f79fb
 8007294:	3fd34413 	.word	0x3fd34413
 8007298:	08008bcd 	.word	0x08008bcd
 800729c:	08008be4 	.word	0x08008be4
 80072a0:	7ff00000 	.word	0x7ff00000
 80072a4:	08008bc9 	.word	0x08008bc9
 80072a8:	08008b9d 	.word	0x08008b9d
 80072ac:	08008b9c 	.word	0x08008b9c
 80072b0:	08008d38 	.word	0x08008d38
 80072b4:	08008c3c 	.word	0x08008c3c
 80072b8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80072bc:	f1ba 0f0e 	cmp.w	sl, #14
 80072c0:	6010      	str	r0, [r2, #0]
 80072c2:	d86e      	bhi.n	80073a2 <_dtoa_r+0x3ba>
 80072c4:	2c00      	cmp	r4, #0
 80072c6:	d06c      	beq.n	80073a2 <_dtoa_r+0x3ba>
 80072c8:	f1b8 0f00 	cmp.w	r8, #0
 80072cc:	f340 80b4 	ble.w	8007438 <_dtoa_r+0x450>
 80072d0:	4ac8      	ldr	r2, [pc, #800]	@ (80075f4 <_dtoa_r+0x60c>)
 80072d2:	f008 010f 	and.w	r1, r8, #15
 80072d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80072da:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80072de:	ed92 7b00 	vldr	d7, [r2]
 80072e2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80072e6:	f000 809b 	beq.w	8007420 <_dtoa_r+0x438>
 80072ea:	4ac3      	ldr	r2, [pc, #780]	@ (80075f8 <_dtoa_r+0x610>)
 80072ec:	ed92 6b08 	vldr	d6, [r2, #32]
 80072f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80072f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80072f8:	f001 010f 	and.w	r1, r1, #15
 80072fc:	2203      	movs	r2, #3
 80072fe:	48be      	ldr	r0, [pc, #760]	@ (80075f8 <_dtoa_r+0x610>)
 8007300:	2900      	cmp	r1, #0
 8007302:	f040 808f 	bne.w	8007424 <_dtoa_r+0x43c>
 8007306:	ed9d 6b02 	vldr	d6, [sp, #8]
 800730a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800730e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007312:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007314:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007318:	2900      	cmp	r1, #0
 800731a:	f000 80b3 	beq.w	8007484 <_dtoa_r+0x49c>
 800731e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007322:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732a:	f140 80ab 	bpl.w	8007484 <_dtoa_r+0x49c>
 800732e:	f1ba 0f00 	cmp.w	sl, #0
 8007332:	f000 80a7 	beq.w	8007484 <_dtoa_r+0x49c>
 8007336:	f1bb 0f00 	cmp.w	fp, #0
 800733a:	dd30      	ble.n	800739e <_dtoa_r+0x3b6>
 800733c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007340:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007344:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007348:	f108 31ff 	add.w	r1, r8, #4294967295
 800734c:	9105      	str	r1, [sp, #20]
 800734e:	3201      	adds	r2, #1
 8007350:	465c      	mov	r4, fp
 8007352:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007356:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800735a:	ee07 2a90 	vmov	s15, r2
 800735e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007362:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007366:	ee15 2a90 	vmov	r2, s11
 800736a:	ec51 0b15 	vmov	r0, r1, d5
 800736e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007372:	2c00      	cmp	r4, #0
 8007374:	f040 808a 	bne.w	800748c <_dtoa_r+0x4a4>
 8007378:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800737c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007380:	ec41 0b17 	vmov	d7, r0, r1
 8007384:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800738c:	f300 826a 	bgt.w	8007864 <_dtoa_r+0x87c>
 8007390:	eeb1 7b47 	vneg.f64	d7, d7
 8007394:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	d423      	bmi.n	80073e6 <_dtoa_r+0x3fe>
 800739e:	ed8d 8b02 	vstr	d8, [sp, #8]
 80073a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073a4:	2a00      	cmp	r2, #0
 80073a6:	f2c0 8129 	blt.w	80075fc <_dtoa_r+0x614>
 80073aa:	f1b8 0f0e 	cmp.w	r8, #14
 80073ae:	f300 8125 	bgt.w	80075fc <_dtoa_r+0x614>
 80073b2:	4b90      	ldr	r3, [pc, #576]	@ (80075f4 <_dtoa_r+0x60c>)
 80073b4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073b8:	ed93 6b00 	vldr	d6, [r3]
 80073bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f280 80c8 	bge.w	8007554 <_dtoa_r+0x56c>
 80073c4:	f1ba 0f00 	cmp.w	sl, #0
 80073c8:	f300 80c4 	bgt.w	8007554 <_dtoa_r+0x56c>
 80073cc:	d10b      	bne.n	80073e6 <_dtoa_r+0x3fe>
 80073ce:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80073d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80073d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e2:	f2c0 823c 	blt.w	800785e <_dtoa_r+0x876>
 80073e6:	2400      	movs	r4, #0
 80073e8:	4625      	mov	r5, r4
 80073ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ec:	43db      	mvns	r3, r3
 80073ee:	9305      	str	r3, [sp, #20]
 80073f0:	463e      	mov	r6, r7
 80073f2:	f04f 0800 	mov.w	r8, #0
 80073f6:	4621      	mov	r1, r4
 80073f8:	4648      	mov	r0, r9
 80073fa:	f000 fc93 	bl	8007d24 <_Bfree>
 80073fe:	2d00      	cmp	r5, #0
 8007400:	f000 80a2 	beq.w	8007548 <_dtoa_r+0x560>
 8007404:	f1b8 0f00 	cmp.w	r8, #0
 8007408:	d005      	beq.n	8007416 <_dtoa_r+0x42e>
 800740a:	45a8      	cmp	r8, r5
 800740c:	d003      	beq.n	8007416 <_dtoa_r+0x42e>
 800740e:	4641      	mov	r1, r8
 8007410:	4648      	mov	r0, r9
 8007412:	f000 fc87 	bl	8007d24 <_Bfree>
 8007416:	4629      	mov	r1, r5
 8007418:	4648      	mov	r0, r9
 800741a:	f000 fc83 	bl	8007d24 <_Bfree>
 800741e:	e093      	b.n	8007548 <_dtoa_r+0x560>
 8007420:	2202      	movs	r2, #2
 8007422:	e76c      	b.n	80072fe <_dtoa_r+0x316>
 8007424:	07cc      	lsls	r4, r1, #31
 8007426:	d504      	bpl.n	8007432 <_dtoa_r+0x44a>
 8007428:	ed90 6b00 	vldr	d6, [r0]
 800742c:	3201      	adds	r2, #1
 800742e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007432:	1049      	asrs	r1, r1, #1
 8007434:	3008      	adds	r0, #8
 8007436:	e763      	b.n	8007300 <_dtoa_r+0x318>
 8007438:	d022      	beq.n	8007480 <_dtoa_r+0x498>
 800743a:	f1c8 0100 	rsb	r1, r8, #0
 800743e:	4a6d      	ldr	r2, [pc, #436]	@ (80075f4 <_dtoa_r+0x60c>)
 8007440:	f001 000f 	and.w	r0, r1, #15
 8007444:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007448:	ed92 7b00 	vldr	d7, [r2]
 800744c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007450:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007454:	4868      	ldr	r0, [pc, #416]	@ (80075f8 <_dtoa_r+0x610>)
 8007456:	1109      	asrs	r1, r1, #4
 8007458:	2400      	movs	r4, #0
 800745a:	2202      	movs	r2, #2
 800745c:	b929      	cbnz	r1, 800746a <_dtoa_r+0x482>
 800745e:	2c00      	cmp	r4, #0
 8007460:	f43f af57 	beq.w	8007312 <_dtoa_r+0x32a>
 8007464:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007468:	e753      	b.n	8007312 <_dtoa_r+0x32a>
 800746a:	07ce      	lsls	r6, r1, #31
 800746c:	d505      	bpl.n	800747a <_dtoa_r+0x492>
 800746e:	ed90 6b00 	vldr	d6, [r0]
 8007472:	3201      	adds	r2, #1
 8007474:	2401      	movs	r4, #1
 8007476:	ee27 7b06 	vmul.f64	d7, d7, d6
 800747a:	1049      	asrs	r1, r1, #1
 800747c:	3008      	adds	r0, #8
 800747e:	e7ed      	b.n	800745c <_dtoa_r+0x474>
 8007480:	2202      	movs	r2, #2
 8007482:	e746      	b.n	8007312 <_dtoa_r+0x32a>
 8007484:	f8cd 8014 	str.w	r8, [sp, #20]
 8007488:	4654      	mov	r4, sl
 800748a:	e762      	b.n	8007352 <_dtoa_r+0x36a>
 800748c:	4a59      	ldr	r2, [pc, #356]	@ (80075f4 <_dtoa_r+0x60c>)
 800748e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007492:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007496:	9a08      	ldr	r2, [sp, #32]
 8007498:	ec41 0b17 	vmov	d7, r0, r1
 800749c:	443c      	add	r4, r7
 800749e:	b34a      	cbz	r2, 80074f4 <_dtoa_r+0x50c>
 80074a0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80074a4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80074a8:	463e      	mov	r6, r7
 80074aa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80074ae:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80074b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80074b6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074ba:	ee14 2a90 	vmov	r2, s9
 80074be:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80074c2:	3230      	adds	r2, #48	@ 0x30
 80074c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80074c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d0:	f806 2b01 	strb.w	r2, [r6], #1
 80074d4:	d438      	bmi.n	8007548 <_dtoa_r+0x560>
 80074d6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80074da:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	d46e      	bmi.n	80075c2 <_dtoa_r+0x5da>
 80074e4:	42a6      	cmp	r6, r4
 80074e6:	f43f af5a 	beq.w	800739e <_dtoa_r+0x3b6>
 80074ea:	ee27 7b03 	vmul.f64	d7, d7, d3
 80074ee:	ee26 6b03 	vmul.f64	d6, d6, d3
 80074f2:	e7e0      	b.n	80074b6 <_dtoa_r+0x4ce>
 80074f4:	4621      	mov	r1, r4
 80074f6:	463e      	mov	r6, r7
 80074f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074fc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007500:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007504:	ee14 2a90 	vmov	r2, s9
 8007508:	3230      	adds	r2, #48	@ 0x30
 800750a:	f806 2b01 	strb.w	r2, [r6], #1
 800750e:	42a6      	cmp	r6, r4
 8007510:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007514:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007518:	d119      	bne.n	800754e <_dtoa_r+0x566>
 800751a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800751e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007522:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752a:	dc4a      	bgt.n	80075c2 <_dtoa_r+0x5da>
 800752c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007530:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007538:	f57f af31 	bpl.w	800739e <_dtoa_r+0x3b6>
 800753c:	460e      	mov	r6, r1
 800753e:	3901      	subs	r1, #1
 8007540:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007544:	2b30      	cmp	r3, #48	@ 0x30
 8007546:	d0f9      	beq.n	800753c <_dtoa_r+0x554>
 8007548:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800754c:	e027      	b.n	800759e <_dtoa_r+0x5b6>
 800754e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007552:	e7d5      	b.n	8007500 <_dtoa_r+0x518>
 8007554:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007558:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800755c:	463e      	mov	r6, r7
 800755e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007562:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007566:	ee15 3a10 	vmov	r3, s10
 800756a:	3330      	adds	r3, #48	@ 0x30
 800756c:	f806 3b01 	strb.w	r3, [r6], #1
 8007570:	1bf3      	subs	r3, r6, r7
 8007572:	459a      	cmp	sl, r3
 8007574:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007578:	eea3 7b46 	vfms.f64	d7, d3, d6
 800757c:	d132      	bne.n	80075e4 <_dtoa_r+0x5fc>
 800757e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007582:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	dc18      	bgt.n	80075be <_dtoa_r+0x5d6>
 800758c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007594:	d103      	bne.n	800759e <_dtoa_r+0x5b6>
 8007596:	ee15 3a10 	vmov	r3, s10
 800759a:	07db      	lsls	r3, r3, #31
 800759c:	d40f      	bmi.n	80075be <_dtoa_r+0x5d6>
 800759e:	9901      	ldr	r1, [sp, #4]
 80075a0:	4648      	mov	r0, r9
 80075a2:	f000 fbbf 	bl	8007d24 <_Bfree>
 80075a6:	2300      	movs	r3, #0
 80075a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80075aa:	7033      	strb	r3, [r6, #0]
 80075ac:	f108 0301 	add.w	r3, r8, #1
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 824b 	beq.w	8007a50 <_dtoa_r+0xa68>
 80075ba:	601e      	str	r6, [r3, #0]
 80075bc:	e248      	b.n	8007a50 <_dtoa_r+0xa68>
 80075be:	f8cd 8014 	str.w	r8, [sp, #20]
 80075c2:	4633      	mov	r3, r6
 80075c4:	461e      	mov	r6, r3
 80075c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ca:	2a39      	cmp	r2, #57	@ 0x39
 80075cc:	d106      	bne.n	80075dc <_dtoa_r+0x5f4>
 80075ce:	429f      	cmp	r7, r3
 80075d0:	d1f8      	bne.n	80075c4 <_dtoa_r+0x5dc>
 80075d2:	9a05      	ldr	r2, [sp, #20]
 80075d4:	3201      	adds	r2, #1
 80075d6:	9205      	str	r2, [sp, #20]
 80075d8:	2230      	movs	r2, #48	@ 0x30
 80075da:	703a      	strb	r2, [r7, #0]
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	3201      	adds	r2, #1
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e7b1      	b.n	8007548 <_dtoa_r+0x560>
 80075e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80075e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f0:	d1b5      	bne.n	800755e <_dtoa_r+0x576>
 80075f2:	e7d4      	b.n	800759e <_dtoa_r+0x5b6>
 80075f4:	08008d38 	.word	0x08008d38
 80075f8:	08008d10 	.word	0x08008d10
 80075fc:	9908      	ldr	r1, [sp, #32]
 80075fe:	2900      	cmp	r1, #0
 8007600:	f000 80e9 	beq.w	80077d6 <_dtoa_r+0x7ee>
 8007604:	9907      	ldr	r1, [sp, #28]
 8007606:	2901      	cmp	r1, #1
 8007608:	f300 80cb 	bgt.w	80077a2 <_dtoa_r+0x7ba>
 800760c:	2d00      	cmp	r5, #0
 800760e:	f000 80c4 	beq.w	800779a <_dtoa_r+0x7b2>
 8007612:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007616:	9e04      	ldr	r6, [sp, #16]
 8007618:	461c      	mov	r4, r3
 800761a:	9305      	str	r3, [sp, #20]
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	4413      	add	r3, r2
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	9b06      	ldr	r3, [sp, #24]
 8007624:	2101      	movs	r1, #1
 8007626:	4413      	add	r3, r2
 8007628:	4648      	mov	r0, r9
 800762a:	9306      	str	r3, [sp, #24]
 800762c:	f000 fc2e 	bl	8007e8c <__i2b>
 8007630:	9b05      	ldr	r3, [sp, #20]
 8007632:	4605      	mov	r5, r0
 8007634:	b166      	cbz	r6, 8007650 <_dtoa_r+0x668>
 8007636:	9a06      	ldr	r2, [sp, #24]
 8007638:	2a00      	cmp	r2, #0
 800763a:	dd09      	ble.n	8007650 <_dtoa_r+0x668>
 800763c:	42b2      	cmp	r2, r6
 800763e:	9904      	ldr	r1, [sp, #16]
 8007640:	bfa8      	it	ge
 8007642:	4632      	movge	r2, r6
 8007644:	1a89      	subs	r1, r1, r2
 8007646:	9104      	str	r1, [sp, #16]
 8007648:	9906      	ldr	r1, [sp, #24]
 800764a:	1ab6      	subs	r6, r6, r2
 800764c:	1a8a      	subs	r2, r1, r2
 800764e:	9206      	str	r2, [sp, #24]
 8007650:	b30b      	cbz	r3, 8007696 <_dtoa_r+0x6ae>
 8007652:	9a08      	ldr	r2, [sp, #32]
 8007654:	2a00      	cmp	r2, #0
 8007656:	f000 80c5 	beq.w	80077e4 <_dtoa_r+0x7fc>
 800765a:	2c00      	cmp	r4, #0
 800765c:	f000 80bf 	beq.w	80077de <_dtoa_r+0x7f6>
 8007660:	4629      	mov	r1, r5
 8007662:	4622      	mov	r2, r4
 8007664:	4648      	mov	r0, r9
 8007666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007668:	f000 fcc8 	bl	8007ffc <__pow5mult>
 800766c:	9a01      	ldr	r2, [sp, #4]
 800766e:	4601      	mov	r1, r0
 8007670:	4605      	mov	r5, r0
 8007672:	4648      	mov	r0, r9
 8007674:	f000 fc20 	bl	8007eb8 <__multiply>
 8007678:	9901      	ldr	r1, [sp, #4]
 800767a:	9005      	str	r0, [sp, #20]
 800767c:	4648      	mov	r0, r9
 800767e:	f000 fb51 	bl	8007d24 <_Bfree>
 8007682:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007684:	1b1b      	subs	r3, r3, r4
 8007686:	f000 80b0 	beq.w	80077ea <_dtoa_r+0x802>
 800768a:	9905      	ldr	r1, [sp, #20]
 800768c:	461a      	mov	r2, r3
 800768e:	4648      	mov	r0, r9
 8007690:	f000 fcb4 	bl	8007ffc <__pow5mult>
 8007694:	9001      	str	r0, [sp, #4]
 8007696:	2101      	movs	r1, #1
 8007698:	4648      	mov	r0, r9
 800769a:	f000 fbf7 	bl	8007e8c <__i2b>
 800769e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a0:	4604      	mov	r4, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 81da 	beq.w	8007a5c <_dtoa_r+0xa74>
 80076a8:	461a      	mov	r2, r3
 80076aa:	4601      	mov	r1, r0
 80076ac:	4648      	mov	r0, r9
 80076ae:	f000 fca5 	bl	8007ffc <__pow5mult>
 80076b2:	9b07      	ldr	r3, [sp, #28]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	4604      	mov	r4, r0
 80076b8:	f300 80a0 	bgt.w	80077fc <_dtoa_r+0x814>
 80076bc:	9b02      	ldr	r3, [sp, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f040 8096 	bne.w	80077f0 <_dtoa_r+0x808>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	f040 8092 	bne.w	80077f4 <_dtoa_r+0x80c>
 80076d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076d4:	0d12      	lsrs	r2, r2, #20
 80076d6:	0512      	lsls	r2, r2, #20
 80076d8:	2a00      	cmp	r2, #0
 80076da:	f000 808d 	beq.w	80077f8 <_dtoa_r+0x810>
 80076de:	9b04      	ldr	r3, [sp, #16]
 80076e0:	3301      	adds	r3, #1
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	9b06      	ldr	r3, [sp, #24]
 80076e6:	3301      	adds	r3, #1
 80076e8:	9306      	str	r3, [sp, #24]
 80076ea:	2301      	movs	r3, #1
 80076ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 81b9 	beq.w	8007a68 <_dtoa_r+0xa80>
 80076f6:	6922      	ldr	r2, [r4, #16]
 80076f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80076fc:	6910      	ldr	r0, [r2, #16]
 80076fe:	f000 fb79 	bl	8007df4 <__hi0bits>
 8007702:	f1c0 0020 	rsb	r0, r0, #32
 8007706:	9b06      	ldr	r3, [sp, #24]
 8007708:	4418      	add	r0, r3
 800770a:	f010 001f 	ands.w	r0, r0, #31
 800770e:	f000 8081 	beq.w	8007814 <_dtoa_r+0x82c>
 8007712:	f1c0 0220 	rsb	r2, r0, #32
 8007716:	2a04      	cmp	r2, #4
 8007718:	dd73      	ble.n	8007802 <_dtoa_r+0x81a>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	f1c0 001c 	rsb	r0, r0, #28
 8007720:	4403      	add	r3, r0
 8007722:	9304      	str	r3, [sp, #16]
 8007724:	9b06      	ldr	r3, [sp, #24]
 8007726:	4406      	add	r6, r0
 8007728:	4403      	add	r3, r0
 800772a:	9306      	str	r3, [sp, #24]
 800772c:	9b04      	ldr	r3, [sp, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd05      	ble.n	800773e <_dtoa_r+0x756>
 8007732:	9901      	ldr	r1, [sp, #4]
 8007734:	461a      	mov	r2, r3
 8007736:	4648      	mov	r0, r9
 8007738:	f000 fcba 	bl	80080b0 <__lshift>
 800773c:	9001      	str	r0, [sp, #4]
 800773e:	9b06      	ldr	r3, [sp, #24]
 8007740:	2b00      	cmp	r3, #0
 8007742:	dd05      	ble.n	8007750 <_dtoa_r+0x768>
 8007744:	4621      	mov	r1, r4
 8007746:	461a      	mov	r2, r3
 8007748:	4648      	mov	r0, r9
 800774a:	f000 fcb1 	bl	80080b0 <__lshift>
 800774e:	4604      	mov	r4, r0
 8007750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007752:	2b00      	cmp	r3, #0
 8007754:	d060      	beq.n	8007818 <_dtoa_r+0x830>
 8007756:	9801      	ldr	r0, [sp, #4]
 8007758:	4621      	mov	r1, r4
 800775a:	f000 fd15 	bl	8008188 <__mcmp>
 800775e:	2800      	cmp	r0, #0
 8007760:	da5a      	bge.n	8007818 <_dtoa_r+0x830>
 8007762:	f108 33ff 	add.w	r3, r8, #4294967295
 8007766:	9305      	str	r3, [sp, #20]
 8007768:	9901      	ldr	r1, [sp, #4]
 800776a:	2300      	movs	r3, #0
 800776c:	220a      	movs	r2, #10
 800776e:	4648      	mov	r0, r9
 8007770:	f000 fafa 	bl	8007d68 <__multadd>
 8007774:	9b08      	ldr	r3, [sp, #32]
 8007776:	9001      	str	r0, [sp, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f000 8177 	beq.w	8007a6c <_dtoa_r+0xa84>
 800777e:	4629      	mov	r1, r5
 8007780:	2300      	movs	r3, #0
 8007782:	220a      	movs	r2, #10
 8007784:	4648      	mov	r0, r9
 8007786:	f000 faef 	bl	8007d68 <__multadd>
 800778a:	f1bb 0f00 	cmp.w	fp, #0
 800778e:	4605      	mov	r5, r0
 8007790:	dc6e      	bgt.n	8007870 <_dtoa_r+0x888>
 8007792:	9b07      	ldr	r3, [sp, #28]
 8007794:	2b02      	cmp	r3, #2
 8007796:	dc48      	bgt.n	800782a <_dtoa_r+0x842>
 8007798:	e06a      	b.n	8007870 <_dtoa_r+0x888>
 800779a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800779c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80077a0:	e739      	b.n	8007616 <_dtoa_r+0x62e>
 80077a2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	db07      	blt.n	80077ba <_dtoa_r+0x7d2>
 80077aa:	f1ba 0f00 	cmp.w	sl, #0
 80077ae:	eba3 0404 	sub.w	r4, r3, r4
 80077b2:	db0b      	blt.n	80077cc <_dtoa_r+0x7e4>
 80077b4:	9e04      	ldr	r6, [sp, #16]
 80077b6:	4652      	mov	r2, sl
 80077b8:	e72f      	b.n	800761a <_dtoa_r+0x632>
 80077ba:	1ae2      	subs	r2, r4, r3
 80077bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077be:	9e04      	ldr	r6, [sp, #16]
 80077c0:	4413      	add	r3, r2
 80077c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c4:	4652      	mov	r2, sl
 80077c6:	4623      	mov	r3, r4
 80077c8:	2400      	movs	r4, #0
 80077ca:	e726      	b.n	800761a <_dtoa_r+0x632>
 80077cc:	9a04      	ldr	r2, [sp, #16]
 80077ce:	eba2 060a 	sub.w	r6, r2, sl
 80077d2:	2200      	movs	r2, #0
 80077d4:	e721      	b.n	800761a <_dtoa_r+0x632>
 80077d6:	9e04      	ldr	r6, [sp, #16]
 80077d8:	9d08      	ldr	r5, [sp, #32]
 80077da:	461c      	mov	r4, r3
 80077dc:	e72a      	b.n	8007634 <_dtoa_r+0x64c>
 80077de:	9a01      	ldr	r2, [sp, #4]
 80077e0:	9205      	str	r2, [sp, #20]
 80077e2:	e752      	b.n	800768a <_dtoa_r+0x6a2>
 80077e4:	9901      	ldr	r1, [sp, #4]
 80077e6:	461a      	mov	r2, r3
 80077e8:	e751      	b.n	800768e <_dtoa_r+0x6a6>
 80077ea:	9b05      	ldr	r3, [sp, #20]
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	e752      	b.n	8007696 <_dtoa_r+0x6ae>
 80077f0:	2300      	movs	r3, #0
 80077f2:	e77b      	b.n	80076ec <_dtoa_r+0x704>
 80077f4:	9b02      	ldr	r3, [sp, #8]
 80077f6:	e779      	b.n	80076ec <_dtoa_r+0x704>
 80077f8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077fa:	e778      	b.n	80076ee <_dtoa_r+0x706>
 80077fc:	2300      	movs	r3, #0
 80077fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007800:	e779      	b.n	80076f6 <_dtoa_r+0x70e>
 8007802:	d093      	beq.n	800772c <_dtoa_r+0x744>
 8007804:	9b04      	ldr	r3, [sp, #16]
 8007806:	321c      	adds	r2, #28
 8007808:	4413      	add	r3, r2
 800780a:	9304      	str	r3, [sp, #16]
 800780c:	9b06      	ldr	r3, [sp, #24]
 800780e:	4416      	add	r6, r2
 8007810:	4413      	add	r3, r2
 8007812:	e78a      	b.n	800772a <_dtoa_r+0x742>
 8007814:	4602      	mov	r2, r0
 8007816:	e7f5      	b.n	8007804 <_dtoa_r+0x81c>
 8007818:	f1ba 0f00 	cmp.w	sl, #0
 800781c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007820:	46d3      	mov	fp, sl
 8007822:	dc21      	bgt.n	8007868 <_dtoa_r+0x880>
 8007824:	9b07      	ldr	r3, [sp, #28]
 8007826:	2b02      	cmp	r3, #2
 8007828:	dd1e      	ble.n	8007868 <_dtoa_r+0x880>
 800782a:	f1bb 0f00 	cmp.w	fp, #0
 800782e:	f47f addc 	bne.w	80073ea <_dtoa_r+0x402>
 8007832:	4621      	mov	r1, r4
 8007834:	465b      	mov	r3, fp
 8007836:	2205      	movs	r2, #5
 8007838:	4648      	mov	r0, r9
 800783a:	f000 fa95 	bl	8007d68 <__multadd>
 800783e:	4601      	mov	r1, r0
 8007840:	4604      	mov	r4, r0
 8007842:	9801      	ldr	r0, [sp, #4]
 8007844:	f000 fca0 	bl	8008188 <__mcmp>
 8007848:	2800      	cmp	r0, #0
 800784a:	f77f adce 	ble.w	80073ea <_dtoa_r+0x402>
 800784e:	463e      	mov	r6, r7
 8007850:	2331      	movs	r3, #49	@ 0x31
 8007852:	f806 3b01 	strb.w	r3, [r6], #1
 8007856:	9b05      	ldr	r3, [sp, #20]
 8007858:	3301      	adds	r3, #1
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	e5c9      	b.n	80073f2 <_dtoa_r+0x40a>
 800785e:	f8cd 8014 	str.w	r8, [sp, #20]
 8007862:	4654      	mov	r4, sl
 8007864:	4625      	mov	r5, r4
 8007866:	e7f2      	b.n	800784e <_dtoa_r+0x866>
 8007868:	9b08      	ldr	r3, [sp, #32]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8102 	beq.w	8007a74 <_dtoa_r+0xa8c>
 8007870:	2e00      	cmp	r6, #0
 8007872:	dd05      	ble.n	8007880 <_dtoa_r+0x898>
 8007874:	4629      	mov	r1, r5
 8007876:	4632      	mov	r2, r6
 8007878:	4648      	mov	r0, r9
 800787a:	f000 fc19 	bl	80080b0 <__lshift>
 800787e:	4605      	mov	r5, r0
 8007880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d058      	beq.n	8007938 <_dtoa_r+0x950>
 8007886:	6869      	ldr	r1, [r5, #4]
 8007888:	4648      	mov	r0, r9
 800788a:	f000 fa0b 	bl	8007ca4 <_Balloc>
 800788e:	4606      	mov	r6, r0
 8007890:	b928      	cbnz	r0, 800789e <_dtoa_r+0x8b6>
 8007892:	4b82      	ldr	r3, [pc, #520]	@ (8007a9c <_dtoa_r+0xab4>)
 8007894:	4602      	mov	r2, r0
 8007896:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800789a:	f7ff bbbe 	b.w	800701a <_dtoa_r+0x32>
 800789e:	692a      	ldr	r2, [r5, #16]
 80078a0:	3202      	adds	r2, #2
 80078a2:	0092      	lsls	r2, r2, #2
 80078a4:	f105 010c 	add.w	r1, r5, #12
 80078a8:	300c      	adds	r0, #12
 80078aa:	f001 f807 	bl	80088bc <memcpy>
 80078ae:	2201      	movs	r2, #1
 80078b0:	4631      	mov	r1, r6
 80078b2:	4648      	mov	r0, r9
 80078b4:	f000 fbfc 	bl	80080b0 <__lshift>
 80078b8:	1c7b      	adds	r3, r7, #1
 80078ba:	9304      	str	r3, [sp, #16]
 80078bc:	eb07 030b 	add.w	r3, r7, fp
 80078c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c2:	9b02      	ldr	r3, [sp, #8]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	46a8      	mov	r8, r5
 80078ca:	9308      	str	r3, [sp, #32]
 80078cc:	4605      	mov	r5, r0
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	9801      	ldr	r0, [sp, #4]
 80078d2:	4621      	mov	r1, r4
 80078d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80078d8:	f7ff fafb 	bl	8006ed2 <quorem>
 80078dc:	4641      	mov	r1, r8
 80078de:	9002      	str	r0, [sp, #8]
 80078e0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80078e4:	9801      	ldr	r0, [sp, #4]
 80078e6:	f000 fc4f 	bl	8008188 <__mcmp>
 80078ea:	462a      	mov	r2, r5
 80078ec:	9006      	str	r0, [sp, #24]
 80078ee:	4621      	mov	r1, r4
 80078f0:	4648      	mov	r0, r9
 80078f2:	f000 fc65 	bl	80081c0 <__mdiff>
 80078f6:	68c2      	ldr	r2, [r0, #12]
 80078f8:	4606      	mov	r6, r0
 80078fa:	b9fa      	cbnz	r2, 800793c <_dtoa_r+0x954>
 80078fc:	4601      	mov	r1, r0
 80078fe:	9801      	ldr	r0, [sp, #4]
 8007900:	f000 fc42 	bl	8008188 <__mcmp>
 8007904:	4602      	mov	r2, r0
 8007906:	4631      	mov	r1, r6
 8007908:	4648      	mov	r0, r9
 800790a:	920a      	str	r2, [sp, #40]	@ 0x28
 800790c:	f000 fa0a 	bl	8007d24 <_Bfree>
 8007910:	9b07      	ldr	r3, [sp, #28]
 8007912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007914:	9e04      	ldr	r6, [sp, #16]
 8007916:	ea42 0103 	orr.w	r1, r2, r3
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	4319      	orrs	r1, r3
 800791e:	d10f      	bne.n	8007940 <_dtoa_r+0x958>
 8007920:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007924:	d028      	beq.n	8007978 <_dtoa_r+0x990>
 8007926:	9b06      	ldr	r3, [sp, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	dd02      	ble.n	8007932 <_dtoa_r+0x94a>
 800792c:	9b02      	ldr	r3, [sp, #8]
 800792e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007932:	f88b a000 	strb.w	sl, [fp]
 8007936:	e55e      	b.n	80073f6 <_dtoa_r+0x40e>
 8007938:	4628      	mov	r0, r5
 800793a:	e7bd      	b.n	80078b8 <_dtoa_r+0x8d0>
 800793c:	2201      	movs	r2, #1
 800793e:	e7e2      	b.n	8007906 <_dtoa_r+0x91e>
 8007940:	9b06      	ldr	r3, [sp, #24]
 8007942:	2b00      	cmp	r3, #0
 8007944:	db04      	blt.n	8007950 <_dtoa_r+0x968>
 8007946:	9907      	ldr	r1, [sp, #28]
 8007948:	430b      	orrs	r3, r1
 800794a:	9908      	ldr	r1, [sp, #32]
 800794c:	430b      	orrs	r3, r1
 800794e:	d120      	bne.n	8007992 <_dtoa_r+0x9aa>
 8007950:	2a00      	cmp	r2, #0
 8007952:	ddee      	ble.n	8007932 <_dtoa_r+0x94a>
 8007954:	9901      	ldr	r1, [sp, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	4648      	mov	r0, r9
 800795a:	f000 fba9 	bl	80080b0 <__lshift>
 800795e:	4621      	mov	r1, r4
 8007960:	9001      	str	r0, [sp, #4]
 8007962:	f000 fc11 	bl	8008188 <__mcmp>
 8007966:	2800      	cmp	r0, #0
 8007968:	dc03      	bgt.n	8007972 <_dtoa_r+0x98a>
 800796a:	d1e2      	bne.n	8007932 <_dtoa_r+0x94a>
 800796c:	f01a 0f01 	tst.w	sl, #1
 8007970:	d0df      	beq.n	8007932 <_dtoa_r+0x94a>
 8007972:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007976:	d1d9      	bne.n	800792c <_dtoa_r+0x944>
 8007978:	2339      	movs	r3, #57	@ 0x39
 800797a:	f88b 3000 	strb.w	r3, [fp]
 800797e:	4633      	mov	r3, r6
 8007980:	461e      	mov	r6, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007988:	2a39      	cmp	r2, #57	@ 0x39
 800798a:	d052      	beq.n	8007a32 <_dtoa_r+0xa4a>
 800798c:	3201      	adds	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	e531      	b.n	80073f6 <_dtoa_r+0x40e>
 8007992:	2a00      	cmp	r2, #0
 8007994:	dd07      	ble.n	80079a6 <_dtoa_r+0x9be>
 8007996:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800799a:	d0ed      	beq.n	8007978 <_dtoa_r+0x990>
 800799c:	f10a 0301 	add.w	r3, sl, #1
 80079a0:	f88b 3000 	strb.w	r3, [fp]
 80079a4:	e527      	b.n	80073f6 <_dtoa_r+0x40e>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079aa:	f803 ac01 	strb.w	sl, [r3, #-1]
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d029      	beq.n	8007a06 <_dtoa_r+0xa1e>
 80079b2:	9901      	ldr	r1, [sp, #4]
 80079b4:	2300      	movs	r3, #0
 80079b6:	220a      	movs	r2, #10
 80079b8:	4648      	mov	r0, r9
 80079ba:	f000 f9d5 	bl	8007d68 <__multadd>
 80079be:	45a8      	cmp	r8, r5
 80079c0:	9001      	str	r0, [sp, #4]
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	f04f 020a 	mov.w	r2, #10
 80079ca:	4641      	mov	r1, r8
 80079cc:	4648      	mov	r0, r9
 80079ce:	d107      	bne.n	80079e0 <_dtoa_r+0x9f8>
 80079d0:	f000 f9ca 	bl	8007d68 <__multadd>
 80079d4:	4680      	mov	r8, r0
 80079d6:	4605      	mov	r5, r0
 80079d8:	9b04      	ldr	r3, [sp, #16]
 80079da:	3301      	adds	r3, #1
 80079dc:	9304      	str	r3, [sp, #16]
 80079de:	e776      	b.n	80078ce <_dtoa_r+0x8e6>
 80079e0:	f000 f9c2 	bl	8007d68 <__multadd>
 80079e4:	4629      	mov	r1, r5
 80079e6:	4680      	mov	r8, r0
 80079e8:	2300      	movs	r3, #0
 80079ea:	220a      	movs	r2, #10
 80079ec:	4648      	mov	r0, r9
 80079ee:	f000 f9bb 	bl	8007d68 <__multadd>
 80079f2:	4605      	mov	r5, r0
 80079f4:	e7f0      	b.n	80079d8 <_dtoa_r+0x9f0>
 80079f6:	f1bb 0f00 	cmp.w	fp, #0
 80079fa:	bfcc      	ite	gt
 80079fc:	465e      	movgt	r6, fp
 80079fe:	2601      	movle	r6, #1
 8007a00:	443e      	add	r6, r7
 8007a02:	f04f 0800 	mov.w	r8, #0
 8007a06:	9901      	ldr	r1, [sp, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4648      	mov	r0, r9
 8007a0c:	f000 fb50 	bl	80080b0 <__lshift>
 8007a10:	4621      	mov	r1, r4
 8007a12:	9001      	str	r0, [sp, #4]
 8007a14:	f000 fbb8 	bl	8008188 <__mcmp>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dcb0      	bgt.n	800797e <_dtoa_r+0x996>
 8007a1c:	d102      	bne.n	8007a24 <_dtoa_r+0xa3c>
 8007a1e:	f01a 0f01 	tst.w	sl, #1
 8007a22:	d1ac      	bne.n	800797e <_dtoa_r+0x996>
 8007a24:	4633      	mov	r3, r6
 8007a26:	461e      	mov	r6, r3
 8007a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a2c:	2a30      	cmp	r2, #48	@ 0x30
 8007a2e:	d0fa      	beq.n	8007a26 <_dtoa_r+0xa3e>
 8007a30:	e4e1      	b.n	80073f6 <_dtoa_r+0x40e>
 8007a32:	429f      	cmp	r7, r3
 8007a34:	d1a4      	bne.n	8007980 <_dtoa_r+0x998>
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	9305      	str	r3, [sp, #20]
 8007a3c:	2331      	movs	r3, #49	@ 0x31
 8007a3e:	703b      	strb	r3, [r7, #0]
 8007a40:	e4d9      	b.n	80073f6 <_dtoa_r+0x40e>
 8007a42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007a44:	4f16      	ldr	r7, [pc, #88]	@ (8007aa0 <_dtoa_r+0xab8>)
 8007a46:	b11b      	cbz	r3, 8007a50 <_dtoa_r+0xa68>
 8007a48:	f107 0308 	add.w	r3, r7, #8
 8007a4c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	4638      	mov	r0, r7
 8007a52:	b011      	add	sp, #68	@ 0x44
 8007a54:	ecbd 8b02 	vpop	{d8}
 8007a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	f77f ae2c 	ble.w	80076bc <_dtoa_r+0x6d4>
 8007a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a68:	2001      	movs	r0, #1
 8007a6a:	e64c      	b.n	8007706 <_dtoa_r+0x71e>
 8007a6c:	f1bb 0f00 	cmp.w	fp, #0
 8007a70:	f77f aed8 	ble.w	8007824 <_dtoa_r+0x83c>
 8007a74:	463e      	mov	r6, r7
 8007a76:	9801      	ldr	r0, [sp, #4]
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f7ff fa2a 	bl	8006ed2 <quorem>
 8007a7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007a82:	f806 ab01 	strb.w	sl, [r6], #1
 8007a86:	1bf2      	subs	r2, r6, r7
 8007a88:	4593      	cmp	fp, r2
 8007a8a:	ddb4      	ble.n	80079f6 <_dtoa_r+0xa0e>
 8007a8c:	9901      	ldr	r1, [sp, #4]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	220a      	movs	r2, #10
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 f968 	bl	8007d68 <__multadd>
 8007a98:	9001      	str	r0, [sp, #4]
 8007a9a:	e7ec      	b.n	8007a76 <_dtoa_r+0xa8e>
 8007a9c:	08008c3c 	.word	0x08008c3c
 8007aa0:	08008bc0 	.word	0x08008bc0

08007aa4 <_free_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d041      	beq.n	8007b30 <_free_r+0x8c>
 8007aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab0:	1f0c      	subs	r4, r1, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bfb8      	it	lt
 8007ab6:	18e4      	addlt	r4, r4, r3
 8007ab8:	f000 f8e8 	bl	8007c8c <__malloc_lock>
 8007abc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <_free_r+0x90>)
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	b933      	cbnz	r3, 8007ad0 <_free_r+0x2c>
 8007ac2:	6063      	str	r3, [r4, #4]
 8007ac4:	6014      	str	r4, [r2, #0]
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007acc:	f000 b8e4 	b.w	8007c98 <__malloc_unlock>
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d908      	bls.n	8007ae6 <_free_r+0x42>
 8007ad4:	6820      	ldr	r0, [r4, #0]
 8007ad6:	1821      	adds	r1, r4, r0
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	bf01      	itttt	eq
 8007adc:	6819      	ldreq	r1, [r3, #0]
 8007ade:	685b      	ldreq	r3, [r3, #4]
 8007ae0:	1809      	addeq	r1, r1, r0
 8007ae2:	6021      	streq	r1, [r4, #0]
 8007ae4:	e7ed      	b.n	8007ac2 <_free_r+0x1e>
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	b10b      	cbz	r3, 8007af0 <_free_r+0x4c>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d9fa      	bls.n	8007ae6 <_free_r+0x42>
 8007af0:	6811      	ldr	r1, [r2, #0]
 8007af2:	1850      	adds	r0, r2, r1
 8007af4:	42a0      	cmp	r0, r4
 8007af6:	d10b      	bne.n	8007b10 <_free_r+0x6c>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	4401      	add	r1, r0
 8007afc:	1850      	adds	r0, r2, r1
 8007afe:	4283      	cmp	r3, r0
 8007b00:	6011      	str	r1, [r2, #0]
 8007b02:	d1e0      	bne.n	8007ac6 <_free_r+0x22>
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	6053      	str	r3, [r2, #4]
 8007b0a:	4408      	add	r0, r1
 8007b0c:	6010      	str	r0, [r2, #0]
 8007b0e:	e7da      	b.n	8007ac6 <_free_r+0x22>
 8007b10:	d902      	bls.n	8007b18 <_free_r+0x74>
 8007b12:	230c      	movs	r3, #12
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	e7d6      	b.n	8007ac6 <_free_r+0x22>
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	1821      	adds	r1, r4, r0
 8007b1c:	428b      	cmp	r3, r1
 8007b1e:	bf04      	itt	eq
 8007b20:	6819      	ldreq	r1, [r3, #0]
 8007b22:	685b      	ldreq	r3, [r3, #4]
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	bf04      	itt	eq
 8007b28:	1809      	addeq	r1, r1, r0
 8007b2a:	6021      	streq	r1, [r4, #0]
 8007b2c:	6054      	str	r4, [r2, #4]
 8007b2e:	e7ca      	b.n	8007ac6 <_free_r+0x22>
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
 8007b32:	bf00      	nop
 8007b34:	20000d44 	.word	0x20000d44

08007b38 <malloc>:
 8007b38:	4b02      	ldr	r3, [pc, #8]	@ (8007b44 <malloc+0xc>)
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	f000 b825 	b.w	8007b8c <_malloc_r>
 8007b42:	bf00      	nop
 8007b44:	20000018 	.word	0x20000018

08007b48 <sbrk_aligned>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4e0f      	ldr	r6, [pc, #60]	@ (8007b88 <sbrk_aligned+0x40>)
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	6831      	ldr	r1, [r6, #0]
 8007b50:	4605      	mov	r5, r0
 8007b52:	b911      	cbnz	r1, 8007b5a <sbrk_aligned+0x12>
 8007b54:	f000 fea2 	bl	800889c <_sbrk_r>
 8007b58:	6030      	str	r0, [r6, #0]
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f000 fe9d 	bl	800889c <_sbrk_r>
 8007b62:	1c43      	adds	r3, r0, #1
 8007b64:	d103      	bne.n	8007b6e <sbrk_aligned+0x26>
 8007b66:	f04f 34ff 	mov.w	r4, #4294967295
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	bd70      	pop	{r4, r5, r6, pc}
 8007b6e:	1cc4      	adds	r4, r0, #3
 8007b70:	f024 0403 	bic.w	r4, r4, #3
 8007b74:	42a0      	cmp	r0, r4
 8007b76:	d0f8      	beq.n	8007b6a <sbrk_aligned+0x22>
 8007b78:	1a21      	subs	r1, r4, r0
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f000 fe8e 	bl	800889c <_sbrk_r>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d1f2      	bne.n	8007b6a <sbrk_aligned+0x22>
 8007b84:	e7ef      	b.n	8007b66 <sbrk_aligned+0x1e>
 8007b86:	bf00      	nop
 8007b88:	20000d40 	.word	0x20000d40

08007b8c <_malloc_r>:
 8007b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b90:	1ccd      	adds	r5, r1, #3
 8007b92:	f025 0503 	bic.w	r5, r5, #3
 8007b96:	3508      	adds	r5, #8
 8007b98:	2d0c      	cmp	r5, #12
 8007b9a:	bf38      	it	cc
 8007b9c:	250c      	movcc	r5, #12
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	db01      	blt.n	8007ba8 <_malloc_r+0x1c>
 8007ba4:	42a9      	cmp	r1, r5
 8007ba6:	d904      	bls.n	8007bb2 <_malloc_r+0x26>
 8007ba8:	230c      	movs	r3, #12
 8007baa:	6033      	str	r3, [r6, #0]
 8007bac:	2000      	movs	r0, #0
 8007bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c88 <_malloc_r+0xfc>
 8007bb6:	f000 f869 	bl	8007c8c <__malloc_lock>
 8007bba:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbe:	461c      	mov	r4, r3
 8007bc0:	bb44      	cbnz	r4, 8007c14 <_malloc_r+0x88>
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff ffbf 	bl	8007b48 <sbrk_aligned>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	4604      	mov	r4, r0
 8007bce:	d158      	bne.n	8007c82 <_malloc_r+0xf6>
 8007bd0:	f8d8 4000 	ldr.w	r4, [r8]
 8007bd4:	4627      	mov	r7, r4
 8007bd6:	2f00      	cmp	r7, #0
 8007bd8:	d143      	bne.n	8007c62 <_malloc_r+0xd6>
 8007bda:	2c00      	cmp	r4, #0
 8007bdc:	d04b      	beq.n	8007c76 <_malloc_r+0xea>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	4639      	mov	r1, r7
 8007be2:	4630      	mov	r0, r6
 8007be4:	eb04 0903 	add.w	r9, r4, r3
 8007be8:	f000 fe58 	bl	800889c <_sbrk_r>
 8007bec:	4581      	cmp	r9, r0
 8007bee:	d142      	bne.n	8007c76 <_malloc_r+0xea>
 8007bf0:	6821      	ldr	r1, [r4, #0]
 8007bf2:	1a6d      	subs	r5, r5, r1
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f7ff ffa6 	bl	8007b48 <sbrk_aligned>
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d03a      	beq.n	8007c76 <_malloc_r+0xea>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	442b      	add	r3, r5
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	bb62      	cbnz	r2, 8007c68 <_malloc_r+0xdc>
 8007c0e:	f8c8 7000 	str.w	r7, [r8]
 8007c12:	e00f      	b.n	8007c34 <_malloc_r+0xa8>
 8007c14:	6822      	ldr	r2, [r4, #0]
 8007c16:	1b52      	subs	r2, r2, r5
 8007c18:	d420      	bmi.n	8007c5c <_malloc_r+0xd0>
 8007c1a:	2a0b      	cmp	r2, #11
 8007c1c:	d917      	bls.n	8007c4e <_malloc_r+0xc2>
 8007c1e:	1961      	adds	r1, r4, r5
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	6025      	str	r5, [r4, #0]
 8007c24:	bf18      	it	ne
 8007c26:	6059      	strne	r1, [r3, #4]
 8007c28:	6863      	ldr	r3, [r4, #4]
 8007c2a:	bf08      	it	eq
 8007c2c:	f8c8 1000 	streq.w	r1, [r8]
 8007c30:	5162      	str	r2, [r4, r5]
 8007c32:	604b      	str	r3, [r1, #4]
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 f82f 	bl	8007c98 <__malloc_unlock>
 8007c3a:	f104 000b 	add.w	r0, r4, #11
 8007c3e:	1d23      	adds	r3, r4, #4
 8007c40:	f020 0007 	bic.w	r0, r0, #7
 8007c44:	1ac2      	subs	r2, r0, r3
 8007c46:	bf1c      	itt	ne
 8007c48:	1a1b      	subne	r3, r3, r0
 8007c4a:	50a3      	strne	r3, [r4, r2]
 8007c4c:	e7af      	b.n	8007bae <_malloc_r+0x22>
 8007c4e:	6862      	ldr	r2, [r4, #4]
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	bf0c      	ite	eq
 8007c54:	f8c8 2000 	streq.w	r2, [r8]
 8007c58:	605a      	strne	r2, [r3, #4]
 8007c5a:	e7eb      	b.n	8007c34 <_malloc_r+0xa8>
 8007c5c:	4623      	mov	r3, r4
 8007c5e:	6864      	ldr	r4, [r4, #4]
 8007c60:	e7ae      	b.n	8007bc0 <_malloc_r+0x34>
 8007c62:	463c      	mov	r4, r7
 8007c64:	687f      	ldr	r7, [r7, #4]
 8007c66:	e7b6      	b.n	8007bd6 <_malloc_r+0x4a>
 8007c68:	461a      	mov	r2, r3
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d1fb      	bne.n	8007c68 <_malloc_r+0xdc>
 8007c70:	2300      	movs	r3, #0
 8007c72:	6053      	str	r3, [r2, #4]
 8007c74:	e7de      	b.n	8007c34 <_malloc_r+0xa8>
 8007c76:	230c      	movs	r3, #12
 8007c78:	6033      	str	r3, [r6, #0]
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f000 f80c 	bl	8007c98 <__malloc_unlock>
 8007c80:	e794      	b.n	8007bac <_malloc_r+0x20>
 8007c82:	6005      	str	r5, [r0, #0]
 8007c84:	e7d6      	b.n	8007c34 <_malloc_r+0xa8>
 8007c86:	bf00      	nop
 8007c88:	20000d44 	.word	0x20000d44

08007c8c <__malloc_lock>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	@ (8007c94 <__malloc_lock+0x8>)
 8007c8e:	f7ff b91e 	b.w	8006ece <__retarget_lock_acquire_recursive>
 8007c92:	bf00      	nop
 8007c94:	20000d3c 	.word	0x20000d3c

08007c98 <__malloc_unlock>:
 8007c98:	4801      	ldr	r0, [pc, #4]	@ (8007ca0 <__malloc_unlock+0x8>)
 8007c9a:	f7ff b919 	b.w	8006ed0 <__retarget_lock_release_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	20000d3c 	.word	0x20000d3c

08007ca4 <_Balloc>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	69c6      	ldr	r6, [r0, #28]
 8007ca8:	4604      	mov	r4, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	b976      	cbnz	r6, 8007ccc <_Balloc+0x28>
 8007cae:	2010      	movs	r0, #16
 8007cb0:	f7ff ff42 	bl	8007b38 <malloc>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	61e0      	str	r0, [r4, #28]
 8007cb8:	b920      	cbnz	r0, 8007cc4 <_Balloc+0x20>
 8007cba:	4b18      	ldr	r3, [pc, #96]	@ (8007d1c <_Balloc+0x78>)
 8007cbc:	4818      	ldr	r0, [pc, #96]	@ (8007d20 <_Balloc+0x7c>)
 8007cbe:	216b      	movs	r1, #107	@ 0x6b
 8007cc0:	f000 fe0a 	bl	80088d8 <__assert_func>
 8007cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cc8:	6006      	str	r6, [r0, #0]
 8007cca:	60c6      	str	r6, [r0, #12]
 8007ccc:	69e6      	ldr	r6, [r4, #28]
 8007cce:	68f3      	ldr	r3, [r6, #12]
 8007cd0:	b183      	cbz	r3, 8007cf4 <_Balloc+0x50>
 8007cd2:	69e3      	ldr	r3, [r4, #28]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cda:	b9b8      	cbnz	r0, 8007d0c <_Balloc+0x68>
 8007cdc:	2101      	movs	r1, #1
 8007cde:	fa01 f605 	lsl.w	r6, r1, r5
 8007ce2:	1d72      	adds	r2, r6, #5
 8007ce4:	0092      	lsls	r2, r2, #2
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f000 fe14 	bl	8008914 <_calloc_r>
 8007cec:	b160      	cbz	r0, 8007d08 <_Balloc+0x64>
 8007cee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cf2:	e00e      	b.n	8007d12 <_Balloc+0x6e>
 8007cf4:	2221      	movs	r2, #33	@ 0x21
 8007cf6:	2104      	movs	r1, #4
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fe0b 	bl	8008914 <_calloc_r>
 8007cfe:	69e3      	ldr	r3, [r4, #28]
 8007d00:	60f0      	str	r0, [r6, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e4      	bne.n	8007cd2 <_Balloc+0x2e>
 8007d08:	2000      	movs	r0, #0
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	6802      	ldr	r2, [r0, #0]
 8007d0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d12:	2300      	movs	r3, #0
 8007d14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d18:	e7f7      	b.n	8007d0a <_Balloc+0x66>
 8007d1a:	bf00      	nop
 8007d1c:	08008bcd 	.word	0x08008bcd
 8007d20:	08008c4d 	.word	0x08008c4d

08007d24 <_Bfree>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	69c6      	ldr	r6, [r0, #28]
 8007d28:	4605      	mov	r5, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	b976      	cbnz	r6, 8007d4c <_Bfree+0x28>
 8007d2e:	2010      	movs	r0, #16
 8007d30:	f7ff ff02 	bl	8007b38 <malloc>
 8007d34:	4602      	mov	r2, r0
 8007d36:	61e8      	str	r0, [r5, #28]
 8007d38:	b920      	cbnz	r0, 8007d44 <_Bfree+0x20>
 8007d3a:	4b09      	ldr	r3, [pc, #36]	@ (8007d60 <_Bfree+0x3c>)
 8007d3c:	4809      	ldr	r0, [pc, #36]	@ (8007d64 <_Bfree+0x40>)
 8007d3e:	218f      	movs	r1, #143	@ 0x8f
 8007d40:	f000 fdca 	bl	80088d8 <__assert_func>
 8007d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d48:	6006      	str	r6, [r0, #0]
 8007d4a:	60c6      	str	r6, [r0, #12]
 8007d4c:	b13c      	cbz	r4, 8007d5e <_Bfree+0x3a>
 8007d4e:	69eb      	ldr	r3, [r5, #28]
 8007d50:	6862      	ldr	r2, [r4, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d58:	6021      	str	r1, [r4, #0]
 8007d5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	08008bcd 	.word	0x08008bcd
 8007d64:	08008c4d 	.word	0x08008c4d

08007d68 <__multadd>:
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	690d      	ldr	r5, [r1, #16]
 8007d6e:	4607      	mov	r7, r0
 8007d70:	460c      	mov	r4, r1
 8007d72:	461e      	mov	r6, r3
 8007d74:	f101 0c14 	add.w	ip, r1, #20
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d7e:	b299      	uxth	r1, r3
 8007d80:	fb02 6101 	mla	r1, r2, r1, r6
 8007d84:	0c1e      	lsrs	r6, r3, #16
 8007d86:	0c0b      	lsrs	r3, r1, #16
 8007d88:	fb02 3306 	mla	r3, r2, r6, r3
 8007d8c:	b289      	uxth	r1, r1
 8007d8e:	3001      	adds	r0, #1
 8007d90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d94:	4285      	cmp	r5, r0
 8007d96:	f84c 1b04 	str.w	r1, [ip], #4
 8007d9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d9e:	dcec      	bgt.n	8007d7a <__multadd+0x12>
 8007da0:	b30e      	cbz	r6, 8007de6 <__multadd+0x7e>
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dc19      	bgt.n	8007ddc <__multadd+0x74>
 8007da8:	6861      	ldr	r1, [r4, #4]
 8007daa:	4638      	mov	r0, r7
 8007dac:	3101      	adds	r1, #1
 8007dae:	f7ff ff79 	bl	8007ca4 <_Balloc>
 8007db2:	4680      	mov	r8, r0
 8007db4:	b928      	cbnz	r0, 8007dc2 <__multadd+0x5a>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b0c      	ldr	r3, [pc, #48]	@ (8007dec <__multadd+0x84>)
 8007dba:	480d      	ldr	r0, [pc, #52]	@ (8007df0 <__multadd+0x88>)
 8007dbc:	21ba      	movs	r1, #186	@ 0xba
 8007dbe:	f000 fd8b 	bl	80088d8 <__assert_func>
 8007dc2:	6922      	ldr	r2, [r4, #16]
 8007dc4:	3202      	adds	r2, #2
 8007dc6:	f104 010c 	add.w	r1, r4, #12
 8007dca:	0092      	lsls	r2, r2, #2
 8007dcc:	300c      	adds	r0, #12
 8007dce:	f000 fd75 	bl	80088bc <memcpy>
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	f7ff ffa5 	bl	8007d24 <_Bfree>
 8007dda:	4644      	mov	r4, r8
 8007ddc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007de0:	3501      	adds	r5, #1
 8007de2:	615e      	str	r6, [r3, #20]
 8007de4:	6125      	str	r5, [r4, #16]
 8007de6:	4620      	mov	r0, r4
 8007de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dec:	08008c3c 	.word	0x08008c3c
 8007df0:	08008c4d 	.word	0x08008c4d

08007df4 <__hi0bits>:
 8007df4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007df8:	4603      	mov	r3, r0
 8007dfa:	bf36      	itet	cc
 8007dfc:	0403      	lslcc	r3, r0, #16
 8007dfe:	2000      	movcs	r0, #0
 8007e00:	2010      	movcc	r0, #16
 8007e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e06:	bf3c      	itt	cc
 8007e08:	021b      	lslcc	r3, r3, #8
 8007e0a:	3008      	addcc	r0, #8
 8007e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e10:	bf3c      	itt	cc
 8007e12:	011b      	lslcc	r3, r3, #4
 8007e14:	3004      	addcc	r0, #4
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1a:	bf3c      	itt	cc
 8007e1c:	009b      	lslcc	r3, r3, #2
 8007e1e:	3002      	addcc	r0, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db05      	blt.n	8007e30 <__hi0bits+0x3c>
 8007e24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e28:	f100 0001 	add.w	r0, r0, #1
 8007e2c:	bf08      	it	eq
 8007e2e:	2020      	moveq	r0, #32
 8007e30:	4770      	bx	lr

08007e32 <__lo0bits>:
 8007e32:	6803      	ldr	r3, [r0, #0]
 8007e34:	4602      	mov	r2, r0
 8007e36:	f013 0007 	ands.w	r0, r3, #7
 8007e3a:	d00b      	beq.n	8007e54 <__lo0bits+0x22>
 8007e3c:	07d9      	lsls	r1, r3, #31
 8007e3e:	d421      	bmi.n	8007e84 <__lo0bits+0x52>
 8007e40:	0798      	lsls	r0, r3, #30
 8007e42:	bf49      	itett	mi
 8007e44:	085b      	lsrmi	r3, r3, #1
 8007e46:	089b      	lsrpl	r3, r3, #2
 8007e48:	2001      	movmi	r0, #1
 8007e4a:	6013      	strmi	r3, [r2, #0]
 8007e4c:	bf5c      	itt	pl
 8007e4e:	6013      	strpl	r3, [r2, #0]
 8007e50:	2002      	movpl	r0, #2
 8007e52:	4770      	bx	lr
 8007e54:	b299      	uxth	r1, r3
 8007e56:	b909      	cbnz	r1, 8007e5c <__lo0bits+0x2a>
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	2010      	movs	r0, #16
 8007e5c:	b2d9      	uxtb	r1, r3
 8007e5e:	b909      	cbnz	r1, 8007e64 <__lo0bits+0x32>
 8007e60:	3008      	adds	r0, #8
 8007e62:	0a1b      	lsrs	r3, r3, #8
 8007e64:	0719      	lsls	r1, r3, #28
 8007e66:	bf04      	itt	eq
 8007e68:	091b      	lsreq	r3, r3, #4
 8007e6a:	3004      	addeq	r0, #4
 8007e6c:	0799      	lsls	r1, r3, #30
 8007e6e:	bf04      	itt	eq
 8007e70:	089b      	lsreq	r3, r3, #2
 8007e72:	3002      	addeq	r0, #2
 8007e74:	07d9      	lsls	r1, r3, #31
 8007e76:	d403      	bmi.n	8007e80 <__lo0bits+0x4e>
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	f100 0001 	add.w	r0, r0, #1
 8007e7e:	d003      	beq.n	8007e88 <__lo0bits+0x56>
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	4770      	bx	lr
 8007e84:	2000      	movs	r0, #0
 8007e86:	4770      	bx	lr
 8007e88:	2020      	movs	r0, #32
 8007e8a:	4770      	bx	lr

08007e8c <__i2b>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	460c      	mov	r4, r1
 8007e90:	2101      	movs	r1, #1
 8007e92:	f7ff ff07 	bl	8007ca4 <_Balloc>
 8007e96:	4602      	mov	r2, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <__i2b+0x1a>
 8007e9a:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <__i2b+0x24>)
 8007e9c:	4805      	ldr	r0, [pc, #20]	@ (8007eb4 <__i2b+0x28>)
 8007e9e:	f240 1145 	movw	r1, #325	@ 0x145
 8007ea2:	f000 fd19 	bl	80088d8 <__assert_func>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	6144      	str	r4, [r0, #20]
 8007eaa:	6103      	str	r3, [r0, #16]
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	08008c3c 	.word	0x08008c3c
 8007eb4:	08008c4d 	.word	0x08008c4d

08007eb8 <__multiply>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4617      	mov	r7, r2
 8007ebe:	690a      	ldr	r2, [r1, #16]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	bfa8      	it	ge
 8007ec6:	463b      	movge	r3, r7
 8007ec8:	4689      	mov	r9, r1
 8007eca:	bfa4      	itt	ge
 8007ecc:	460f      	movge	r7, r1
 8007ece:	4699      	movge	r9, r3
 8007ed0:	693d      	ldr	r5, [r7, #16]
 8007ed2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	eb05 060a 	add.w	r6, r5, sl
 8007ede:	42b3      	cmp	r3, r6
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	bfb8      	it	lt
 8007ee4:	3101      	addlt	r1, #1
 8007ee6:	f7ff fedd 	bl	8007ca4 <_Balloc>
 8007eea:	b930      	cbnz	r0, 8007efa <__multiply+0x42>
 8007eec:	4602      	mov	r2, r0
 8007eee:	4b41      	ldr	r3, [pc, #260]	@ (8007ff4 <__multiply+0x13c>)
 8007ef0:	4841      	ldr	r0, [pc, #260]	@ (8007ff8 <__multiply+0x140>)
 8007ef2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ef6:	f000 fcef 	bl	80088d8 <__assert_func>
 8007efa:	f100 0414 	add.w	r4, r0, #20
 8007efe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007f02:	4623      	mov	r3, r4
 8007f04:	2200      	movs	r2, #0
 8007f06:	4573      	cmp	r3, lr
 8007f08:	d320      	bcc.n	8007f4c <__multiply+0x94>
 8007f0a:	f107 0814 	add.w	r8, r7, #20
 8007f0e:	f109 0114 	add.w	r1, r9, #20
 8007f12:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007f16:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007f1a:	9302      	str	r3, [sp, #8]
 8007f1c:	1beb      	subs	r3, r5, r7
 8007f1e:	3b15      	subs	r3, #21
 8007f20:	f023 0303 	bic.w	r3, r3, #3
 8007f24:	3304      	adds	r3, #4
 8007f26:	3715      	adds	r7, #21
 8007f28:	42bd      	cmp	r5, r7
 8007f2a:	bf38      	it	cc
 8007f2c:	2304      	movcc	r3, #4
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	9103      	str	r1, [sp, #12]
 8007f34:	428b      	cmp	r3, r1
 8007f36:	d80c      	bhi.n	8007f52 <__multiply+0x9a>
 8007f38:	2e00      	cmp	r6, #0
 8007f3a:	dd03      	ble.n	8007f44 <__multiply+0x8c>
 8007f3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d055      	beq.n	8007ff0 <__multiply+0x138>
 8007f44:	6106      	str	r6, [r0, #16]
 8007f46:	b005      	add	sp, #20
 8007f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4c:	f843 2b04 	str.w	r2, [r3], #4
 8007f50:	e7d9      	b.n	8007f06 <__multiply+0x4e>
 8007f52:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f56:	f1ba 0f00 	cmp.w	sl, #0
 8007f5a:	d01f      	beq.n	8007f9c <__multiply+0xe4>
 8007f5c:	46c4      	mov	ip, r8
 8007f5e:	46a1      	mov	r9, r4
 8007f60:	2700      	movs	r7, #0
 8007f62:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f66:	f8d9 3000 	ldr.w	r3, [r9]
 8007f6a:	fa1f fb82 	uxth.w	fp, r2
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f74:	443b      	add	r3, r7
 8007f76:	f8d9 7000 	ldr.w	r7, [r9]
 8007f7a:	0c12      	lsrs	r2, r2, #16
 8007f7c:	0c3f      	lsrs	r7, r7, #16
 8007f7e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f82:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f8c:	4565      	cmp	r5, ip
 8007f8e:	f849 3b04 	str.w	r3, [r9], #4
 8007f92:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007f96:	d8e4      	bhi.n	8007f62 <__multiply+0xaa>
 8007f98:	9b01      	ldr	r3, [sp, #4]
 8007f9a:	50e7      	str	r7, [r4, r3]
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fa2:	3104      	adds	r1, #4
 8007fa4:	f1b9 0f00 	cmp.w	r9, #0
 8007fa8:	d020      	beq.n	8007fec <__multiply+0x134>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	4647      	mov	r7, r8
 8007fae:	46a4      	mov	ip, r4
 8007fb0:	f04f 0a00 	mov.w	sl, #0
 8007fb4:	f8b7 b000 	ldrh.w	fp, [r7]
 8007fb8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007fbc:	fb09 220b 	mla	r2, r9, fp, r2
 8007fc0:	4452      	add	r2, sl
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fc8:	f84c 3b04 	str.w	r3, [ip], #4
 8007fcc:	f857 3b04 	ldr.w	r3, [r7], #4
 8007fd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fd4:	f8bc 3000 	ldrh.w	r3, [ip]
 8007fd8:	fb09 330a 	mla	r3, r9, sl, r3
 8007fdc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007fe0:	42bd      	cmp	r5, r7
 8007fe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fe6:	d8e5      	bhi.n	8007fb4 <__multiply+0xfc>
 8007fe8:	9a01      	ldr	r2, [sp, #4]
 8007fea:	50a3      	str	r3, [r4, r2]
 8007fec:	3404      	adds	r4, #4
 8007fee:	e79f      	b.n	8007f30 <__multiply+0x78>
 8007ff0:	3e01      	subs	r6, #1
 8007ff2:	e7a1      	b.n	8007f38 <__multiply+0x80>
 8007ff4:	08008c3c 	.word	0x08008c3c
 8007ff8:	08008c4d 	.word	0x08008c4d

08007ffc <__pow5mult>:
 8007ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008000:	4615      	mov	r5, r2
 8008002:	f012 0203 	ands.w	r2, r2, #3
 8008006:	4607      	mov	r7, r0
 8008008:	460e      	mov	r6, r1
 800800a:	d007      	beq.n	800801c <__pow5mult+0x20>
 800800c:	4c25      	ldr	r4, [pc, #148]	@ (80080a4 <__pow5mult+0xa8>)
 800800e:	3a01      	subs	r2, #1
 8008010:	2300      	movs	r3, #0
 8008012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008016:	f7ff fea7 	bl	8007d68 <__multadd>
 800801a:	4606      	mov	r6, r0
 800801c:	10ad      	asrs	r5, r5, #2
 800801e:	d03d      	beq.n	800809c <__pow5mult+0xa0>
 8008020:	69fc      	ldr	r4, [r7, #28]
 8008022:	b97c      	cbnz	r4, 8008044 <__pow5mult+0x48>
 8008024:	2010      	movs	r0, #16
 8008026:	f7ff fd87 	bl	8007b38 <malloc>
 800802a:	4602      	mov	r2, r0
 800802c:	61f8      	str	r0, [r7, #28]
 800802e:	b928      	cbnz	r0, 800803c <__pow5mult+0x40>
 8008030:	4b1d      	ldr	r3, [pc, #116]	@ (80080a8 <__pow5mult+0xac>)
 8008032:	481e      	ldr	r0, [pc, #120]	@ (80080ac <__pow5mult+0xb0>)
 8008034:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008038:	f000 fc4e 	bl	80088d8 <__assert_func>
 800803c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008040:	6004      	str	r4, [r0, #0]
 8008042:	60c4      	str	r4, [r0, #12]
 8008044:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800804c:	b94c      	cbnz	r4, 8008062 <__pow5mult+0x66>
 800804e:	f240 2171 	movw	r1, #625	@ 0x271
 8008052:	4638      	mov	r0, r7
 8008054:	f7ff ff1a 	bl	8007e8c <__i2b>
 8008058:	2300      	movs	r3, #0
 800805a:	f8c8 0008 	str.w	r0, [r8, #8]
 800805e:	4604      	mov	r4, r0
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	f04f 0900 	mov.w	r9, #0
 8008066:	07eb      	lsls	r3, r5, #31
 8008068:	d50a      	bpl.n	8008080 <__pow5mult+0x84>
 800806a:	4631      	mov	r1, r6
 800806c:	4622      	mov	r2, r4
 800806e:	4638      	mov	r0, r7
 8008070:	f7ff ff22 	bl	8007eb8 <__multiply>
 8008074:	4631      	mov	r1, r6
 8008076:	4680      	mov	r8, r0
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff fe53 	bl	8007d24 <_Bfree>
 800807e:	4646      	mov	r6, r8
 8008080:	106d      	asrs	r5, r5, #1
 8008082:	d00b      	beq.n	800809c <__pow5mult+0xa0>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	b938      	cbnz	r0, 8008098 <__pow5mult+0x9c>
 8008088:	4622      	mov	r2, r4
 800808a:	4621      	mov	r1, r4
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff ff13 	bl	8007eb8 <__multiply>
 8008092:	6020      	str	r0, [r4, #0]
 8008094:	f8c0 9000 	str.w	r9, [r0]
 8008098:	4604      	mov	r4, r0
 800809a:	e7e4      	b.n	8008066 <__pow5mult+0x6a>
 800809c:	4630      	mov	r0, r6
 800809e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080a2:	bf00      	nop
 80080a4:	08008d00 	.word	0x08008d00
 80080a8:	08008bcd 	.word	0x08008bcd
 80080ac:	08008c4d 	.word	0x08008c4d

080080b0 <__lshift>:
 80080b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	460c      	mov	r4, r1
 80080b6:	6849      	ldr	r1, [r1, #4]
 80080b8:	6923      	ldr	r3, [r4, #16]
 80080ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080be:	68a3      	ldr	r3, [r4, #8]
 80080c0:	4607      	mov	r7, r0
 80080c2:	4691      	mov	r9, r2
 80080c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080c8:	f108 0601 	add.w	r6, r8, #1
 80080cc:	42b3      	cmp	r3, r6
 80080ce:	db0b      	blt.n	80080e8 <__lshift+0x38>
 80080d0:	4638      	mov	r0, r7
 80080d2:	f7ff fde7 	bl	8007ca4 <_Balloc>
 80080d6:	4605      	mov	r5, r0
 80080d8:	b948      	cbnz	r0, 80080ee <__lshift+0x3e>
 80080da:	4602      	mov	r2, r0
 80080dc:	4b28      	ldr	r3, [pc, #160]	@ (8008180 <__lshift+0xd0>)
 80080de:	4829      	ldr	r0, [pc, #164]	@ (8008184 <__lshift+0xd4>)
 80080e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080e4:	f000 fbf8 	bl	80088d8 <__assert_func>
 80080e8:	3101      	adds	r1, #1
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	e7ee      	b.n	80080cc <__lshift+0x1c>
 80080ee:	2300      	movs	r3, #0
 80080f0:	f100 0114 	add.w	r1, r0, #20
 80080f4:	f100 0210 	add.w	r2, r0, #16
 80080f8:	4618      	mov	r0, r3
 80080fa:	4553      	cmp	r3, sl
 80080fc:	db33      	blt.n	8008166 <__lshift+0xb6>
 80080fe:	6920      	ldr	r0, [r4, #16]
 8008100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008104:	f104 0314 	add.w	r3, r4, #20
 8008108:	f019 091f 	ands.w	r9, r9, #31
 800810c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008110:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008114:	d02b      	beq.n	800816e <__lshift+0xbe>
 8008116:	f1c9 0e20 	rsb	lr, r9, #32
 800811a:	468a      	mov	sl, r1
 800811c:	2200      	movs	r2, #0
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	fa00 f009 	lsl.w	r0, r0, r9
 8008124:	4310      	orrs	r0, r2
 8008126:	f84a 0b04 	str.w	r0, [sl], #4
 800812a:	f853 2b04 	ldr.w	r2, [r3], #4
 800812e:	459c      	cmp	ip, r3
 8008130:	fa22 f20e 	lsr.w	r2, r2, lr
 8008134:	d8f3      	bhi.n	800811e <__lshift+0x6e>
 8008136:	ebac 0304 	sub.w	r3, ip, r4
 800813a:	3b15      	subs	r3, #21
 800813c:	f023 0303 	bic.w	r3, r3, #3
 8008140:	3304      	adds	r3, #4
 8008142:	f104 0015 	add.w	r0, r4, #21
 8008146:	4560      	cmp	r0, ip
 8008148:	bf88      	it	hi
 800814a:	2304      	movhi	r3, #4
 800814c:	50ca      	str	r2, [r1, r3]
 800814e:	b10a      	cbz	r2, 8008154 <__lshift+0xa4>
 8008150:	f108 0602 	add.w	r6, r8, #2
 8008154:	3e01      	subs	r6, #1
 8008156:	4638      	mov	r0, r7
 8008158:	612e      	str	r6, [r5, #16]
 800815a:	4621      	mov	r1, r4
 800815c:	f7ff fde2 	bl	8007d24 <_Bfree>
 8008160:	4628      	mov	r0, r5
 8008162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008166:	f842 0f04 	str.w	r0, [r2, #4]!
 800816a:	3301      	adds	r3, #1
 800816c:	e7c5      	b.n	80080fa <__lshift+0x4a>
 800816e:	3904      	subs	r1, #4
 8008170:	f853 2b04 	ldr.w	r2, [r3], #4
 8008174:	f841 2f04 	str.w	r2, [r1, #4]!
 8008178:	459c      	cmp	ip, r3
 800817a:	d8f9      	bhi.n	8008170 <__lshift+0xc0>
 800817c:	e7ea      	b.n	8008154 <__lshift+0xa4>
 800817e:	bf00      	nop
 8008180:	08008c3c 	.word	0x08008c3c
 8008184:	08008c4d 	.word	0x08008c4d

08008188 <__mcmp>:
 8008188:	690a      	ldr	r2, [r1, #16]
 800818a:	4603      	mov	r3, r0
 800818c:	6900      	ldr	r0, [r0, #16]
 800818e:	1a80      	subs	r0, r0, r2
 8008190:	b530      	push	{r4, r5, lr}
 8008192:	d10e      	bne.n	80081b2 <__mcmp+0x2a>
 8008194:	3314      	adds	r3, #20
 8008196:	3114      	adds	r1, #20
 8008198:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800819c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081a8:	4295      	cmp	r5, r2
 80081aa:	d003      	beq.n	80081b4 <__mcmp+0x2c>
 80081ac:	d205      	bcs.n	80081ba <__mcmp+0x32>
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	bd30      	pop	{r4, r5, pc}
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d3f3      	bcc.n	80081a0 <__mcmp+0x18>
 80081b8:	e7fb      	b.n	80081b2 <__mcmp+0x2a>
 80081ba:	2001      	movs	r0, #1
 80081bc:	e7f9      	b.n	80081b2 <__mcmp+0x2a>
	...

080081c0 <__mdiff>:
 80081c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	4689      	mov	r9, r1
 80081c6:	4606      	mov	r6, r0
 80081c8:	4611      	mov	r1, r2
 80081ca:	4648      	mov	r0, r9
 80081cc:	4614      	mov	r4, r2
 80081ce:	f7ff ffdb 	bl	8008188 <__mcmp>
 80081d2:	1e05      	subs	r5, r0, #0
 80081d4:	d112      	bne.n	80081fc <__mdiff+0x3c>
 80081d6:	4629      	mov	r1, r5
 80081d8:	4630      	mov	r0, r6
 80081da:	f7ff fd63 	bl	8007ca4 <_Balloc>
 80081de:	4602      	mov	r2, r0
 80081e0:	b928      	cbnz	r0, 80081ee <__mdiff+0x2e>
 80081e2:	4b3f      	ldr	r3, [pc, #252]	@ (80082e0 <__mdiff+0x120>)
 80081e4:	f240 2137 	movw	r1, #567	@ 0x237
 80081e8:	483e      	ldr	r0, [pc, #248]	@ (80082e4 <__mdiff+0x124>)
 80081ea:	f000 fb75 	bl	80088d8 <__assert_func>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081f4:	4610      	mov	r0, r2
 80081f6:	b003      	add	sp, #12
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	bfbc      	itt	lt
 80081fe:	464b      	movlt	r3, r9
 8008200:	46a1      	movlt	r9, r4
 8008202:	4630      	mov	r0, r6
 8008204:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008208:	bfba      	itte	lt
 800820a:	461c      	movlt	r4, r3
 800820c:	2501      	movlt	r5, #1
 800820e:	2500      	movge	r5, #0
 8008210:	f7ff fd48 	bl	8007ca4 <_Balloc>
 8008214:	4602      	mov	r2, r0
 8008216:	b918      	cbnz	r0, 8008220 <__mdiff+0x60>
 8008218:	4b31      	ldr	r3, [pc, #196]	@ (80082e0 <__mdiff+0x120>)
 800821a:	f240 2145 	movw	r1, #581	@ 0x245
 800821e:	e7e3      	b.n	80081e8 <__mdiff+0x28>
 8008220:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008224:	6926      	ldr	r6, [r4, #16]
 8008226:	60c5      	str	r5, [r0, #12]
 8008228:	f109 0310 	add.w	r3, r9, #16
 800822c:	f109 0514 	add.w	r5, r9, #20
 8008230:	f104 0e14 	add.w	lr, r4, #20
 8008234:	f100 0b14 	add.w	fp, r0, #20
 8008238:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800823c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	46d9      	mov	r9, fp
 8008244:	f04f 0c00 	mov.w	ip, #0
 8008248:	9b01      	ldr	r3, [sp, #4]
 800824a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800824e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	fa1f f38a 	uxth.w	r3, sl
 8008258:	4619      	mov	r1, r3
 800825a:	b283      	uxth	r3, r0
 800825c:	1acb      	subs	r3, r1, r3
 800825e:	0c00      	lsrs	r0, r0, #16
 8008260:	4463      	add	r3, ip
 8008262:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008266:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800826a:	b29b      	uxth	r3, r3
 800826c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008270:	4576      	cmp	r6, lr
 8008272:	f849 3b04 	str.w	r3, [r9], #4
 8008276:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800827a:	d8e5      	bhi.n	8008248 <__mdiff+0x88>
 800827c:	1b33      	subs	r3, r6, r4
 800827e:	3b15      	subs	r3, #21
 8008280:	f023 0303 	bic.w	r3, r3, #3
 8008284:	3415      	adds	r4, #21
 8008286:	3304      	adds	r3, #4
 8008288:	42a6      	cmp	r6, r4
 800828a:	bf38      	it	cc
 800828c:	2304      	movcc	r3, #4
 800828e:	441d      	add	r5, r3
 8008290:	445b      	add	r3, fp
 8008292:	461e      	mov	r6, r3
 8008294:	462c      	mov	r4, r5
 8008296:	4544      	cmp	r4, r8
 8008298:	d30e      	bcc.n	80082b8 <__mdiff+0xf8>
 800829a:	f108 0103 	add.w	r1, r8, #3
 800829e:	1b49      	subs	r1, r1, r5
 80082a0:	f021 0103 	bic.w	r1, r1, #3
 80082a4:	3d03      	subs	r5, #3
 80082a6:	45a8      	cmp	r8, r5
 80082a8:	bf38      	it	cc
 80082aa:	2100      	movcc	r1, #0
 80082ac:	440b      	add	r3, r1
 80082ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082b2:	b191      	cbz	r1, 80082da <__mdiff+0x11a>
 80082b4:	6117      	str	r7, [r2, #16]
 80082b6:	e79d      	b.n	80081f4 <__mdiff+0x34>
 80082b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80082bc:	46e6      	mov	lr, ip
 80082be:	0c08      	lsrs	r0, r1, #16
 80082c0:	fa1c fc81 	uxtah	ip, ip, r1
 80082c4:	4471      	add	r1, lr
 80082c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082ca:	b289      	uxth	r1, r1
 80082cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082d0:	f846 1b04 	str.w	r1, [r6], #4
 80082d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082d8:	e7dd      	b.n	8008296 <__mdiff+0xd6>
 80082da:	3f01      	subs	r7, #1
 80082dc:	e7e7      	b.n	80082ae <__mdiff+0xee>
 80082de:	bf00      	nop
 80082e0:	08008c3c 	.word	0x08008c3c
 80082e4:	08008c4d 	.word	0x08008c4d

080082e8 <__d2b>:
 80082e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	460f      	mov	r7, r1
 80082ee:	2101      	movs	r1, #1
 80082f0:	ec59 8b10 	vmov	r8, r9, d0
 80082f4:	4616      	mov	r6, r2
 80082f6:	f7ff fcd5 	bl	8007ca4 <_Balloc>
 80082fa:	4604      	mov	r4, r0
 80082fc:	b930      	cbnz	r0, 800830c <__d2b+0x24>
 80082fe:	4602      	mov	r2, r0
 8008300:	4b23      	ldr	r3, [pc, #140]	@ (8008390 <__d2b+0xa8>)
 8008302:	4824      	ldr	r0, [pc, #144]	@ (8008394 <__d2b+0xac>)
 8008304:	f240 310f 	movw	r1, #783	@ 0x30f
 8008308:	f000 fae6 	bl	80088d8 <__assert_func>
 800830c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008310:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008314:	b10d      	cbz	r5, 800831a <__d2b+0x32>
 8008316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	f1b8 0300 	subs.w	r3, r8, #0
 8008320:	d023      	beq.n	800836a <__d2b+0x82>
 8008322:	4668      	mov	r0, sp
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	f7ff fd84 	bl	8007e32 <__lo0bits>
 800832a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800832e:	b1d0      	cbz	r0, 8008366 <__d2b+0x7e>
 8008330:	f1c0 0320 	rsb	r3, r0, #32
 8008334:	fa02 f303 	lsl.w	r3, r2, r3
 8008338:	430b      	orrs	r3, r1
 800833a:	40c2      	lsrs	r2, r0
 800833c:	6163      	str	r3, [r4, #20]
 800833e:	9201      	str	r2, [sp, #4]
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	61a3      	str	r3, [r4, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bf0c      	ite	eq
 8008348:	2201      	moveq	r2, #1
 800834a:	2202      	movne	r2, #2
 800834c:	6122      	str	r2, [r4, #16]
 800834e:	b1a5      	cbz	r5, 800837a <__d2b+0x92>
 8008350:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008354:	4405      	add	r5, r0
 8008356:	603d      	str	r5, [r7, #0]
 8008358:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800835c:	6030      	str	r0, [r6, #0]
 800835e:	4620      	mov	r0, r4
 8008360:	b003      	add	sp, #12
 8008362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008366:	6161      	str	r1, [r4, #20]
 8008368:	e7ea      	b.n	8008340 <__d2b+0x58>
 800836a:	a801      	add	r0, sp, #4
 800836c:	f7ff fd61 	bl	8007e32 <__lo0bits>
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	6163      	str	r3, [r4, #20]
 8008374:	3020      	adds	r0, #32
 8008376:	2201      	movs	r2, #1
 8008378:	e7e8      	b.n	800834c <__d2b+0x64>
 800837a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800837e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008382:	6038      	str	r0, [r7, #0]
 8008384:	6918      	ldr	r0, [r3, #16]
 8008386:	f7ff fd35 	bl	8007df4 <__hi0bits>
 800838a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800838e:	e7e5      	b.n	800835c <__d2b+0x74>
 8008390:	08008c3c 	.word	0x08008c3c
 8008394:	08008c4d 	.word	0x08008c4d

08008398 <__sfputc_r>:
 8008398:	6893      	ldr	r3, [r2, #8]
 800839a:	3b01      	subs	r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	b410      	push	{r4}
 80083a0:	6093      	str	r3, [r2, #8]
 80083a2:	da08      	bge.n	80083b6 <__sfputc_r+0x1e>
 80083a4:	6994      	ldr	r4, [r2, #24]
 80083a6:	42a3      	cmp	r3, r4
 80083a8:	db01      	blt.n	80083ae <__sfputc_r+0x16>
 80083aa:	290a      	cmp	r1, #10
 80083ac:	d103      	bne.n	80083b6 <__sfputc_r+0x1e>
 80083ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083b2:	f000 b9df 	b.w	8008774 <__swbuf_r>
 80083b6:	6813      	ldr	r3, [r2, #0]
 80083b8:	1c58      	adds	r0, r3, #1
 80083ba:	6010      	str	r0, [r2, #0]
 80083bc:	7019      	strb	r1, [r3, #0]
 80083be:	4608      	mov	r0, r1
 80083c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <__sfputs_r>:
 80083c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c8:	4606      	mov	r6, r0
 80083ca:	460f      	mov	r7, r1
 80083cc:	4614      	mov	r4, r2
 80083ce:	18d5      	adds	r5, r2, r3
 80083d0:	42ac      	cmp	r4, r5
 80083d2:	d101      	bne.n	80083d8 <__sfputs_r+0x12>
 80083d4:	2000      	movs	r0, #0
 80083d6:	e007      	b.n	80083e8 <__sfputs_r+0x22>
 80083d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083dc:	463a      	mov	r2, r7
 80083de:	4630      	mov	r0, r6
 80083e0:	f7ff ffda 	bl	8008398 <__sfputc_r>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d1f3      	bne.n	80083d0 <__sfputs_r+0xa>
 80083e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083ec <_vfiprintf_r>:
 80083ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f0:	460d      	mov	r5, r1
 80083f2:	b09d      	sub	sp, #116	@ 0x74
 80083f4:	4614      	mov	r4, r2
 80083f6:	4698      	mov	r8, r3
 80083f8:	4606      	mov	r6, r0
 80083fa:	b118      	cbz	r0, 8008404 <_vfiprintf_r+0x18>
 80083fc:	6a03      	ldr	r3, [r0, #32]
 80083fe:	b90b      	cbnz	r3, 8008404 <_vfiprintf_r+0x18>
 8008400:	f7fe fc5c 	bl	8006cbc <__sinit>
 8008404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008406:	07d9      	lsls	r1, r3, #31
 8008408:	d405      	bmi.n	8008416 <_vfiprintf_r+0x2a>
 800840a:	89ab      	ldrh	r3, [r5, #12]
 800840c:	059a      	lsls	r2, r3, #22
 800840e:	d402      	bmi.n	8008416 <_vfiprintf_r+0x2a>
 8008410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008412:	f7fe fd5c 	bl	8006ece <__retarget_lock_acquire_recursive>
 8008416:	89ab      	ldrh	r3, [r5, #12]
 8008418:	071b      	lsls	r3, r3, #28
 800841a:	d501      	bpl.n	8008420 <_vfiprintf_r+0x34>
 800841c:	692b      	ldr	r3, [r5, #16]
 800841e:	b99b      	cbnz	r3, 8008448 <_vfiprintf_r+0x5c>
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f000 f9e4 	bl	80087f0 <__swsetup_r>
 8008428:	b170      	cbz	r0, 8008448 <_vfiprintf_r+0x5c>
 800842a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800842c:	07dc      	lsls	r4, r3, #31
 800842e:	d504      	bpl.n	800843a <_vfiprintf_r+0x4e>
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	b01d      	add	sp, #116	@ 0x74
 8008436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	0598      	lsls	r0, r3, #22
 800843e:	d4f7      	bmi.n	8008430 <_vfiprintf_r+0x44>
 8008440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008442:	f7fe fd45 	bl	8006ed0 <__retarget_lock_release_recursive>
 8008446:	e7f3      	b.n	8008430 <_vfiprintf_r+0x44>
 8008448:	2300      	movs	r3, #0
 800844a:	9309      	str	r3, [sp, #36]	@ 0x24
 800844c:	2320      	movs	r3, #32
 800844e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008452:	f8cd 800c 	str.w	r8, [sp, #12]
 8008456:	2330      	movs	r3, #48	@ 0x30
 8008458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008608 <_vfiprintf_r+0x21c>
 800845c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008460:	f04f 0901 	mov.w	r9, #1
 8008464:	4623      	mov	r3, r4
 8008466:	469a      	mov	sl, r3
 8008468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846c:	b10a      	cbz	r2, 8008472 <_vfiprintf_r+0x86>
 800846e:	2a25      	cmp	r2, #37	@ 0x25
 8008470:	d1f9      	bne.n	8008466 <_vfiprintf_r+0x7a>
 8008472:	ebba 0b04 	subs.w	fp, sl, r4
 8008476:	d00b      	beq.n	8008490 <_vfiprintf_r+0xa4>
 8008478:	465b      	mov	r3, fp
 800847a:	4622      	mov	r2, r4
 800847c:	4629      	mov	r1, r5
 800847e:	4630      	mov	r0, r6
 8008480:	f7ff ffa1 	bl	80083c6 <__sfputs_r>
 8008484:	3001      	adds	r0, #1
 8008486:	f000 80a7 	beq.w	80085d8 <_vfiprintf_r+0x1ec>
 800848a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800848c:	445a      	add	r2, fp
 800848e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008490:	f89a 3000 	ldrb.w	r3, [sl]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 809f 	beq.w	80085d8 <_vfiprintf_r+0x1ec>
 800849a:	2300      	movs	r3, #0
 800849c:	f04f 32ff 	mov.w	r2, #4294967295
 80084a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a4:	f10a 0a01 	add.w	sl, sl, #1
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	9307      	str	r3, [sp, #28]
 80084ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80084b2:	4654      	mov	r4, sl
 80084b4:	2205      	movs	r2, #5
 80084b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ba:	4853      	ldr	r0, [pc, #332]	@ (8008608 <_vfiprintf_r+0x21c>)
 80084bc:	f7f7 fec0 	bl	8000240 <memchr>
 80084c0:	9a04      	ldr	r2, [sp, #16]
 80084c2:	b9d8      	cbnz	r0, 80084fc <_vfiprintf_r+0x110>
 80084c4:	06d1      	lsls	r1, r2, #27
 80084c6:	bf44      	itt	mi
 80084c8:	2320      	movmi	r3, #32
 80084ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084ce:	0713      	lsls	r3, r2, #28
 80084d0:	bf44      	itt	mi
 80084d2:	232b      	movmi	r3, #43	@ 0x2b
 80084d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084d8:	f89a 3000 	ldrb.w	r3, [sl]
 80084dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80084de:	d015      	beq.n	800850c <_vfiprintf_r+0x120>
 80084e0:	9a07      	ldr	r2, [sp, #28]
 80084e2:	4654      	mov	r4, sl
 80084e4:	2000      	movs	r0, #0
 80084e6:	f04f 0c0a 	mov.w	ip, #10
 80084ea:	4621      	mov	r1, r4
 80084ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f0:	3b30      	subs	r3, #48	@ 0x30
 80084f2:	2b09      	cmp	r3, #9
 80084f4:	d94b      	bls.n	800858e <_vfiprintf_r+0x1a2>
 80084f6:	b1b0      	cbz	r0, 8008526 <_vfiprintf_r+0x13a>
 80084f8:	9207      	str	r2, [sp, #28]
 80084fa:	e014      	b.n	8008526 <_vfiprintf_r+0x13a>
 80084fc:	eba0 0308 	sub.w	r3, r0, r8
 8008500:	fa09 f303 	lsl.w	r3, r9, r3
 8008504:	4313      	orrs	r3, r2
 8008506:	9304      	str	r3, [sp, #16]
 8008508:	46a2      	mov	sl, r4
 800850a:	e7d2      	b.n	80084b2 <_vfiprintf_r+0xc6>
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	1d19      	adds	r1, r3, #4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	9103      	str	r1, [sp, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	bfbb      	ittet	lt
 8008518:	425b      	neglt	r3, r3
 800851a:	f042 0202 	orrlt.w	r2, r2, #2
 800851e:	9307      	strge	r3, [sp, #28]
 8008520:	9307      	strlt	r3, [sp, #28]
 8008522:	bfb8      	it	lt
 8008524:	9204      	strlt	r2, [sp, #16]
 8008526:	7823      	ldrb	r3, [r4, #0]
 8008528:	2b2e      	cmp	r3, #46	@ 0x2e
 800852a:	d10a      	bne.n	8008542 <_vfiprintf_r+0x156>
 800852c:	7863      	ldrb	r3, [r4, #1]
 800852e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008530:	d132      	bne.n	8008598 <_vfiprintf_r+0x1ac>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	1d1a      	adds	r2, r3, #4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	9203      	str	r2, [sp, #12]
 800853a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800853e:	3402      	adds	r4, #2
 8008540:	9305      	str	r3, [sp, #20]
 8008542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008618 <_vfiprintf_r+0x22c>
 8008546:	7821      	ldrb	r1, [r4, #0]
 8008548:	2203      	movs	r2, #3
 800854a:	4650      	mov	r0, sl
 800854c:	f7f7 fe78 	bl	8000240 <memchr>
 8008550:	b138      	cbz	r0, 8008562 <_vfiprintf_r+0x176>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	eba0 000a 	sub.w	r0, r0, sl
 8008558:	2240      	movs	r2, #64	@ 0x40
 800855a:	4082      	lsls	r2, r0
 800855c:	4313      	orrs	r3, r2
 800855e:	3401      	adds	r4, #1
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008566:	4829      	ldr	r0, [pc, #164]	@ (800860c <_vfiprintf_r+0x220>)
 8008568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800856c:	2206      	movs	r2, #6
 800856e:	f7f7 fe67 	bl	8000240 <memchr>
 8008572:	2800      	cmp	r0, #0
 8008574:	d03f      	beq.n	80085f6 <_vfiprintf_r+0x20a>
 8008576:	4b26      	ldr	r3, [pc, #152]	@ (8008610 <_vfiprintf_r+0x224>)
 8008578:	bb1b      	cbnz	r3, 80085c2 <_vfiprintf_r+0x1d6>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3307      	adds	r3, #7
 800857e:	f023 0307 	bic.w	r3, r3, #7
 8008582:	3308      	adds	r3, #8
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008588:	443b      	add	r3, r7
 800858a:	9309      	str	r3, [sp, #36]	@ 0x24
 800858c:	e76a      	b.n	8008464 <_vfiprintf_r+0x78>
 800858e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008592:	460c      	mov	r4, r1
 8008594:	2001      	movs	r0, #1
 8008596:	e7a8      	b.n	80084ea <_vfiprintf_r+0xfe>
 8008598:	2300      	movs	r3, #0
 800859a:	3401      	adds	r4, #1
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	4619      	mov	r1, r3
 80085a0:	f04f 0c0a 	mov.w	ip, #10
 80085a4:	4620      	mov	r0, r4
 80085a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085aa:	3a30      	subs	r2, #48	@ 0x30
 80085ac:	2a09      	cmp	r2, #9
 80085ae:	d903      	bls.n	80085b8 <_vfiprintf_r+0x1cc>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0c6      	beq.n	8008542 <_vfiprintf_r+0x156>
 80085b4:	9105      	str	r1, [sp, #20]
 80085b6:	e7c4      	b.n	8008542 <_vfiprintf_r+0x156>
 80085b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80085bc:	4604      	mov	r4, r0
 80085be:	2301      	movs	r3, #1
 80085c0:	e7f0      	b.n	80085a4 <_vfiprintf_r+0x1b8>
 80085c2:	ab03      	add	r3, sp, #12
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	462a      	mov	r2, r5
 80085c8:	4b12      	ldr	r3, [pc, #72]	@ (8008614 <_vfiprintf_r+0x228>)
 80085ca:	a904      	add	r1, sp, #16
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7fd ff43 	bl	8006458 <_printf_float>
 80085d2:	4607      	mov	r7, r0
 80085d4:	1c78      	adds	r0, r7, #1
 80085d6:	d1d6      	bne.n	8008586 <_vfiprintf_r+0x19a>
 80085d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085da:	07d9      	lsls	r1, r3, #31
 80085dc:	d405      	bmi.n	80085ea <_vfiprintf_r+0x1fe>
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	059a      	lsls	r2, r3, #22
 80085e2:	d402      	bmi.n	80085ea <_vfiprintf_r+0x1fe>
 80085e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085e6:	f7fe fc73 	bl	8006ed0 <__retarget_lock_release_recursive>
 80085ea:	89ab      	ldrh	r3, [r5, #12]
 80085ec:	065b      	lsls	r3, r3, #25
 80085ee:	f53f af1f 	bmi.w	8008430 <_vfiprintf_r+0x44>
 80085f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085f4:	e71e      	b.n	8008434 <_vfiprintf_r+0x48>
 80085f6:	ab03      	add	r3, sp, #12
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	462a      	mov	r2, r5
 80085fc:	4b05      	ldr	r3, [pc, #20]	@ (8008614 <_vfiprintf_r+0x228>)
 80085fe:	a904      	add	r1, sp, #16
 8008600:	4630      	mov	r0, r6
 8008602:	f7fe f9b1 	bl	8006968 <_printf_i>
 8008606:	e7e4      	b.n	80085d2 <_vfiprintf_r+0x1e6>
 8008608:	08008ca6 	.word	0x08008ca6
 800860c:	08008cb0 	.word	0x08008cb0
 8008610:	08006459 	.word	0x08006459
 8008614:	080083c7 	.word	0x080083c7
 8008618:	08008cac 	.word	0x08008cac

0800861c <__sflush_r>:
 800861c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	0716      	lsls	r6, r2, #28
 8008626:	4605      	mov	r5, r0
 8008628:	460c      	mov	r4, r1
 800862a:	d454      	bmi.n	80086d6 <__sflush_r+0xba>
 800862c:	684b      	ldr	r3, [r1, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dc02      	bgt.n	8008638 <__sflush_r+0x1c>
 8008632:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	dd48      	ble.n	80086ca <__sflush_r+0xae>
 8008638:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800863a:	2e00      	cmp	r6, #0
 800863c:	d045      	beq.n	80086ca <__sflush_r+0xae>
 800863e:	2300      	movs	r3, #0
 8008640:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008644:	682f      	ldr	r7, [r5, #0]
 8008646:	6a21      	ldr	r1, [r4, #32]
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	d030      	beq.n	80086ae <__sflush_r+0x92>
 800864c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	0759      	lsls	r1, r3, #29
 8008652:	d505      	bpl.n	8008660 <__sflush_r+0x44>
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	1ad2      	subs	r2, r2, r3
 8008658:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800865a:	b10b      	cbz	r3, 8008660 <__sflush_r+0x44>
 800865c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	2300      	movs	r3, #0
 8008662:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008664:	6a21      	ldr	r1, [r4, #32]
 8008666:	4628      	mov	r0, r5
 8008668:	47b0      	blx	r6
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	d106      	bne.n	800867e <__sflush_r+0x62>
 8008670:	6829      	ldr	r1, [r5, #0]
 8008672:	291d      	cmp	r1, #29
 8008674:	d82b      	bhi.n	80086ce <__sflush_r+0xb2>
 8008676:	4a2a      	ldr	r2, [pc, #168]	@ (8008720 <__sflush_r+0x104>)
 8008678:	40ca      	lsrs	r2, r1
 800867a:	07d6      	lsls	r6, r2, #31
 800867c:	d527      	bpl.n	80086ce <__sflush_r+0xb2>
 800867e:	2200      	movs	r2, #0
 8008680:	6062      	str	r2, [r4, #4]
 8008682:	04d9      	lsls	r1, r3, #19
 8008684:	6922      	ldr	r2, [r4, #16]
 8008686:	6022      	str	r2, [r4, #0]
 8008688:	d504      	bpl.n	8008694 <__sflush_r+0x78>
 800868a:	1c42      	adds	r2, r0, #1
 800868c:	d101      	bne.n	8008692 <__sflush_r+0x76>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	b903      	cbnz	r3, 8008694 <__sflush_r+0x78>
 8008692:	6560      	str	r0, [r4, #84]	@ 0x54
 8008694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008696:	602f      	str	r7, [r5, #0]
 8008698:	b1b9      	cbz	r1, 80086ca <__sflush_r+0xae>
 800869a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800869e:	4299      	cmp	r1, r3
 80086a0:	d002      	beq.n	80086a8 <__sflush_r+0x8c>
 80086a2:	4628      	mov	r0, r5
 80086a4:	f7ff f9fe 	bl	8007aa4 <_free_r>
 80086a8:	2300      	movs	r3, #0
 80086aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80086ac:	e00d      	b.n	80086ca <__sflush_r+0xae>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b0      	blx	r6
 80086b4:	4602      	mov	r2, r0
 80086b6:	1c50      	adds	r0, r2, #1
 80086b8:	d1c9      	bne.n	800864e <__sflush_r+0x32>
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0c6      	beq.n	800864e <__sflush_r+0x32>
 80086c0:	2b1d      	cmp	r3, #29
 80086c2:	d001      	beq.n	80086c8 <__sflush_r+0xac>
 80086c4:	2b16      	cmp	r3, #22
 80086c6:	d11e      	bne.n	8008706 <__sflush_r+0xea>
 80086c8:	602f      	str	r7, [r5, #0]
 80086ca:	2000      	movs	r0, #0
 80086cc:	e022      	b.n	8008714 <__sflush_r+0xf8>
 80086ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086d2:	b21b      	sxth	r3, r3
 80086d4:	e01b      	b.n	800870e <__sflush_r+0xf2>
 80086d6:	690f      	ldr	r7, [r1, #16]
 80086d8:	2f00      	cmp	r7, #0
 80086da:	d0f6      	beq.n	80086ca <__sflush_r+0xae>
 80086dc:	0793      	lsls	r3, r2, #30
 80086de:	680e      	ldr	r6, [r1, #0]
 80086e0:	bf08      	it	eq
 80086e2:	694b      	ldreq	r3, [r1, #20]
 80086e4:	600f      	str	r7, [r1, #0]
 80086e6:	bf18      	it	ne
 80086e8:	2300      	movne	r3, #0
 80086ea:	eba6 0807 	sub.w	r8, r6, r7
 80086ee:	608b      	str	r3, [r1, #8]
 80086f0:	f1b8 0f00 	cmp.w	r8, #0
 80086f4:	dde9      	ble.n	80086ca <__sflush_r+0xae>
 80086f6:	6a21      	ldr	r1, [r4, #32]
 80086f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086fa:	4643      	mov	r3, r8
 80086fc:	463a      	mov	r2, r7
 80086fe:	4628      	mov	r0, r5
 8008700:	47b0      	blx	r6
 8008702:	2800      	cmp	r0, #0
 8008704:	dc08      	bgt.n	8008718 <__sflush_r+0xfc>
 8008706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008718:	4407      	add	r7, r0
 800871a:	eba8 0800 	sub.w	r8, r8, r0
 800871e:	e7e7      	b.n	80086f0 <__sflush_r+0xd4>
 8008720:	20400001 	.word	0x20400001

08008724 <_fflush_r>:
 8008724:	b538      	push	{r3, r4, r5, lr}
 8008726:	690b      	ldr	r3, [r1, #16]
 8008728:	4605      	mov	r5, r0
 800872a:	460c      	mov	r4, r1
 800872c:	b913      	cbnz	r3, 8008734 <_fflush_r+0x10>
 800872e:	2500      	movs	r5, #0
 8008730:	4628      	mov	r0, r5
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	b118      	cbz	r0, 800873e <_fflush_r+0x1a>
 8008736:	6a03      	ldr	r3, [r0, #32]
 8008738:	b90b      	cbnz	r3, 800873e <_fflush_r+0x1a>
 800873a:	f7fe fabf 	bl	8006cbc <__sinit>
 800873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0f3      	beq.n	800872e <_fflush_r+0xa>
 8008746:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008748:	07d0      	lsls	r0, r2, #31
 800874a:	d404      	bmi.n	8008756 <_fflush_r+0x32>
 800874c:	0599      	lsls	r1, r3, #22
 800874e:	d402      	bmi.n	8008756 <_fflush_r+0x32>
 8008750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008752:	f7fe fbbc 	bl	8006ece <__retarget_lock_acquire_recursive>
 8008756:	4628      	mov	r0, r5
 8008758:	4621      	mov	r1, r4
 800875a:	f7ff ff5f 	bl	800861c <__sflush_r>
 800875e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008760:	07da      	lsls	r2, r3, #31
 8008762:	4605      	mov	r5, r0
 8008764:	d4e4      	bmi.n	8008730 <_fflush_r+0xc>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	059b      	lsls	r3, r3, #22
 800876a:	d4e1      	bmi.n	8008730 <_fflush_r+0xc>
 800876c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800876e:	f7fe fbaf 	bl	8006ed0 <__retarget_lock_release_recursive>
 8008772:	e7dd      	b.n	8008730 <_fflush_r+0xc>

08008774 <__swbuf_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	4614      	mov	r4, r2
 800877a:	4605      	mov	r5, r0
 800877c:	b118      	cbz	r0, 8008786 <__swbuf_r+0x12>
 800877e:	6a03      	ldr	r3, [r0, #32]
 8008780:	b90b      	cbnz	r3, 8008786 <__swbuf_r+0x12>
 8008782:	f7fe fa9b 	bl	8006cbc <__sinit>
 8008786:	69a3      	ldr	r3, [r4, #24]
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	071a      	lsls	r2, r3, #28
 800878e:	d501      	bpl.n	8008794 <__swbuf_r+0x20>
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	b943      	cbnz	r3, 80087a6 <__swbuf_r+0x32>
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f000 f82a 	bl	80087f0 <__swsetup_r>
 800879c:	b118      	cbz	r0, 80087a6 <__swbuf_r+0x32>
 800879e:	f04f 37ff 	mov.w	r7, #4294967295
 80087a2:	4638      	mov	r0, r7
 80087a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	6922      	ldr	r2, [r4, #16]
 80087aa:	1a98      	subs	r0, r3, r2
 80087ac:	6963      	ldr	r3, [r4, #20]
 80087ae:	b2f6      	uxtb	r6, r6
 80087b0:	4283      	cmp	r3, r0
 80087b2:	4637      	mov	r7, r6
 80087b4:	dc05      	bgt.n	80087c2 <__swbuf_r+0x4e>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7ff ffb3 	bl	8008724 <_fflush_r>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d1ed      	bne.n	800879e <__swbuf_r+0x2a>
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	60a3      	str	r3, [r4, #8]
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	6022      	str	r2, [r4, #0]
 80087ce:	701e      	strb	r6, [r3, #0]
 80087d0:	6962      	ldr	r2, [r4, #20]
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d004      	beq.n	80087e2 <__swbuf_r+0x6e>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	07db      	lsls	r3, r3, #31
 80087dc:	d5e1      	bpl.n	80087a2 <__swbuf_r+0x2e>
 80087de:	2e0a      	cmp	r6, #10
 80087e0:	d1df      	bne.n	80087a2 <__swbuf_r+0x2e>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7ff ff9d 	bl	8008724 <_fflush_r>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d0d9      	beq.n	80087a2 <__swbuf_r+0x2e>
 80087ee:	e7d6      	b.n	800879e <__swbuf_r+0x2a>

080087f0 <__swsetup_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4b29      	ldr	r3, [pc, #164]	@ (8008898 <__swsetup_r+0xa8>)
 80087f4:	4605      	mov	r5, r0
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	460c      	mov	r4, r1
 80087fa:	b118      	cbz	r0, 8008804 <__swsetup_r+0x14>
 80087fc:	6a03      	ldr	r3, [r0, #32]
 80087fe:	b90b      	cbnz	r3, 8008804 <__swsetup_r+0x14>
 8008800:	f7fe fa5c 	bl	8006cbc <__sinit>
 8008804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008808:	0719      	lsls	r1, r3, #28
 800880a:	d422      	bmi.n	8008852 <__swsetup_r+0x62>
 800880c:	06da      	lsls	r2, r3, #27
 800880e:	d407      	bmi.n	8008820 <__swsetup_r+0x30>
 8008810:	2209      	movs	r2, #9
 8008812:	602a      	str	r2, [r5, #0]
 8008814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	e033      	b.n	8008888 <__swsetup_r+0x98>
 8008820:	0758      	lsls	r0, r3, #29
 8008822:	d512      	bpl.n	800884a <__swsetup_r+0x5a>
 8008824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008826:	b141      	cbz	r1, 800883a <__swsetup_r+0x4a>
 8008828:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800882c:	4299      	cmp	r1, r3
 800882e:	d002      	beq.n	8008836 <__swsetup_r+0x46>
 8008830:	4628      	mov	r0, r5
 8008832:	f7ff f937 	bl	8007aa4 <_free_r>
 8008836:	2300      	movs	r3, #0
 8008838:	6363      	str	r3, [r4, #52]	@ 0x34
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	2300      	movs	r3, #0
 8008844:	6063      	str	r3, [r4, #4]
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f043 0308 	orr.w	r3, r3, #8
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	b94b      	cbnz	r3, 800886a <__swsetup_r+0x7a>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800885c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008860:	d003      	beq.n	800886a <__swsetup_r+0x7a>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 f8c1 	bl	80089ec <__smakebuf_r>
 800886a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886e:	f013 0201 	ands.w	r2, r3, #1
 8008872:	d00a      	beq.n	800888a <__swsetup_r+0x9a>
 8008874:	2200      	movs	r2, #0
 8008876:	60a2      	str	r2, [r4, #8]
 8008878:	6962      	ldr	r2, [r4, #20]
 800887a:	4252      	negs	r2, r2
 800887c:	61a2      	str	r2, [r4, #24]
 800887e:	6922      	ldr	r2, [r4, #16]
 8008880:	b942      	cbnz	r2, 8008894 <__swsetup_r+0xa4>
 8008882:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008886:	d1c5      	bne.n	8008814 <__swsetup_r+0x24>
 8008888:	bd38      	pop	{r3, r4, r5, pc}
 800888a:	0799      	lsls	r1, r3, #30
 800888c:	bf58      	it	pl
 800888e:	6962      	ldrpl	r2, [r4, #20]
 8008890:	60a2      	str	r2, [r4, #8]
 8008892:	e7f4      	b.n	800887e <__swsetup_r+0x8e>
 8008894:	2000      	movs	r0, #0
 8008896:	e7f7      	b.n	8008888 <__swsetup_r+0x98>
 8008898:	20000018 	.word	0x20000018

0800889c <_sbrk_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d06      	ldr	r5, [pc, #24]	@ (80088b8 <_sbrk_r+0x1c>)
 80088a0:	2300      	movs	r3, #0
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	602b      	str	r3, [r5, #0]
 80088a8:	f7f8 fe40 	bl	800152c <_sbrk>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_sbrk_r+0x1a>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_sbrk_r+0x1a>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	20000d38 	.word	0x20000d38

080088bc <memcpy>:
 80088bc:	440a      	add	r2, r1
 80088be:	4291      	cmp	r1, r2
 80088c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088c4:	d100      	bne.n	80088c8 <memcpy+0xc>
 80088c6:	4770      	bx	lr
 80088c8:	b510      	push	{r4, lr}
 80088ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088d2:	4291      	cmp	r1, r2
 80088d4:	d1f9      	bne.n	80088ca <memcpy+0xe>
 80088d6:	bd10      	pop	{r4, pc}

080088d8 <__assert_func>:
 80088d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088da:	4614      	mov	r4, r2
 80088dc:	461a      	mov	r2, r3
 80088de:	4b09      	ldr	r3, [pc, #36]	@ (8008904 <__assert_func+0x2c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4605      	mov	r5, r0
 80088e4:	68d8      	ldr	r0, [r3, #12]
 80088e6:	b14c      	cbz	r4, 80088fc <__assert_func+0x24>
 80088e8:	4b07      	ldr	r3, [pc, #28]	@ (8008908 <__assert_func+0x30>)
 80088ea:	9100      	str	r1, [sp, #0]
 80088ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088f0:	4906      	ldr	r1, [pc, #24]	@ (800890c <__assert_func+0x34>)
 80088f2:	462b      	mov	r3, r5
 80088f4:	f000 f842 	bl	800897c <fiprintf>
 80088f8:	f000 f8d6 	bl	8008aa8 <abort>
 80088fc:	4b04      	ldr	r3, [pc, #16]	@ (8008910 <__assert_func+0x38>)
 80088fe:	461c      	mov	r4, r3
 8008900:	e7f3      	b.n	80088ea <__assert_func+0x12>
 8008902:	bf00      	nop
 8008904:	20000018 	.word	0x20000018
 8008908:	08008cc1 	.word	0x08008cc1
 800890c:	08008cce 	.word	0x08008cce
 8008910:	08008cfc 	.word	0x08008cfc

08008914 <_calloc_r>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	fba1 5402 	umull	r5, r4, r1, r2
 800891a:	b934      	cbnz	r4, 800892a <_calloc_r+0x16>
 800891c:	4629      	mov	r1, r5
 800891e:	f7ff f935 	bl	8007b8c <_malloc_r>
 8008922:	4606      	mov	r6, r0
 8008924:	b928      	cbnz	r0, 8008932 <_calloc_r+0x1e>
 8008926:	4630      	mov	r0, r6
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	220c      	movs	r2, #12
 800892c:	6002      	str	r2, [r0, #0]
 800892e:	2600      	movs	r6, #0
 8008930:	e7f9      	b.n	8008926 <_calloc_r+0x12>
 8008932:	462a      	mov	r2, r5
 8008934:	4621      	mov	r1, r4
 8008936:	f7fe fa4c 	bl	8006dd2 <memset>
 800893a:	e7f4      	b.n	8008926 <_calloc_r+0x12>

0800893c <__ascii_mbtowc>:
 800893c:	b082      	sub	sp, #8
 800893e:	b901      	cbnz	r1, 8008942 <__ascii_mbtowc+0x6>
 8008940:	a901      	add	r1, sp, #4
 8008942:	b142      	cbz	r2, 8008956 <__ascii_mbtowc+0x1a>
 8008944:	b14b      	cbz	r3, 800895a <__ascii_mbtowc+0x1e>
 8008946:	7813      	ldrb	r3, [r2, #0]
 8008948:	600b      	str	r3, [r1, #0]
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	1e10      	subs	r0, r2, #0
 800894e:	bf18      	it	ne
 8008950:	2001      	movne	r0, #1
 8008952:	b002      	add	sp, #8
 8008954:	4770      	bx	lr
 8008956:	4610      	mov	r0, r2
 8008958:	e7fb      	b.n	8008952 <__ascii_mbtowc+0x16>
 800895a:	f06f 0001 	mvn.w	r0, #1
 800895e:	e7f8      	b.n	8008952 <__ascii_mbtowc+0x16>

08008960 <__ascii_wctomb>:
 8008960:	4603      	mov	r3, r0
 8008962:	4608      	mov	r0, r1
 8008964:	b141      	cbz	r1, 8008978 <__ascii_wctomb+0x18>
 8008966:	2aff      	cmp	r2, #255	@ 0xff
 8008968:	d904      	bls.n	8008974 <__ascii_wctomb+0x14>
 800896a:	228a      	movs	r2, #138	@ 0x8a
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	f04f 30ff 	mov.w	r0, #4294967295
 8008972:	4770      	bx	lr
 8008974:	700a      	strb	r2, [r1, #0]
 8008976:	2001      	movs	r0, #1
 8008978:	4770      	bx	lr
	...

0800897c <fiprintf>:
 800897c:	b40e      	push	{r1, r2, r3}
 800897e:	b503      	push	{r0, r1, lr}
 8008980:	4601      	mov	r1, r0
 8008982:	ab03      	add	r3, sp, #12
 8008984:	4805      	ldr	r0, [pc, #20]	@ (800899c <fiprintf+0x20>)
 8008986:	f853 2b04 	ldr.w	r2, [r3], #4
 800898a:	6800      	ldr	r0, [r0, #0]
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	f7ff fd2d 	bl	80083ec <_vfiprintf_r>
 8008992:	b002      	add	sp, #8
 8008994:	f85d eb04 	ldr.w	lr, [sp], #4
 8008998:	b003      	add	sp, #12
 800899a:	4770      	bx	lr
 800899c:	20000018 	.word	0x20000018

080089a0 <__swhatbuf_r>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	460c      	mov	r4, r1
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	2900      	cmp	r1, #0
 80089aa:	b096      	sub	sp, #88	@ 0x58
 80089ac:	4615      	mov	r5, r2
 80089ae:	461e      	mov	r6, r3
 80089b0:	da0d      	bge.n	80089ce <__swhatbuf_r+0x2e>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089b8:	f04f 0100 	mov.w	r1, #0
 80089bc:	bf14      	ite	ne
 80089be:	2340      	movne	r3, #64	@ 0x40
 80089c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089c4:	2000      	movs	r0, #0
 80089c6:	6031      	str	r1, [r6, #0]
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	b016      	add	sp, #88	@ 0x58
 80089cc:	bd70      	pop	{r4, r5, r6, pc}
 80089ce:	466a      	mov	r2, sp
 80089d0:	f000 f848 	bl	8008a64 <_fstat_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	dbec      	blt.n	80089b2 <__swhatbuf_r+0x12>
 80089d8:	9901      	ldr	r1, [sp, #4]
 80089da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089e2:	4259      	negs	r1, r3
 80089e4:	4159      	adcs	r1, r3
 80089e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ea:	e7eb      	b.n	80089c4 <__swhatbuf_r+0x24>

080089ec <__smakebuf_r>:
 80089ec:	898b      	ldrh	r3, [r1, #12]
 80089ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f0:	079d      	lsls	r5, r3, #30
 80089f2:	4606      	mov	r6, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	d507      	bpl.n	8008a08 <__smakebuf_r+0x1c>
 80089f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	6123      	str	r3, [r4, #16]
 8008a00:	2301      	movs	r3, #1
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	b003      	add	sp, #12
 8008a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a08:	ab01      	add	r3, sp, #4
 8008a0a:	466a      	mov	r2, sp
 8008a0c:	f7ff ffc8 	bl	80089a0 <__swhatbuf_r>
 8008a10:	9f00      	ldr	r7, [sp, #0]
 8008a12:	4605      	mov	r5, r0
 8008a14:	4639      	mov	r1, r7
 8008a16:	4630      	mov	r0, r6
 8008a18:	f7ff f8b8 	bl	8007b8c <_malloc_r>
 8008a1c:	b948      	cbnz	r0, 8008a32 <__smakebuf_r+0x46>
 8008a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a22:	059a      	lsls	r2, r3, #22
 8008a24:	d4ee      	bmi.n	8008a04 <__smakebuf_r+0x18>
 8008a26:	f023 0303 	bic.w	r3, r3, #3
 8008a2a:	f043 0302 	orr.w	r3, r3, #2
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	e7e2      	b.n	80089f8 <__smakebuf_r+0xc>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	6020      	str	r0, [r4, #0]
 8008a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a42:	b15b      	cbz	r3, 8008a5c <__smakebuf_r+0x70>
 8008a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f000 f81d 	bl	8008a88 <_isatty_r>
 8008a4e:	b128      	cbz	r0, 8008a5c <__smakebuf_r+0x70>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	431d      	orrs	r5, r3
 8008a60:	81a5      	strh	r5, [r4, #12]
 8008a62:	e7cf      	b.n	8008a04 <__smakebuf_r+0x18>

08008a64 <_fstat_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	@ (8008a84 <_fstat_r+0x20>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	f7f8 fd33 	bl	80014dc <_fstat>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d102      	bne.n	8008a80 <_fstat_r+0x1c>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	b103      	cbz	r3, 8008a80 <_fstat_r+0x1c>
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	bd38      	pop	{r3, r4, r5, pc}
 8008a82:	bf00      	nop
 8008a84:	20000d38 	.word	0x20000d38

08008a88 <_isatty_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_isatty_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f8 fd32 	bl	80014fc <_isatty>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_isatty_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_isatty_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	20000d38 	.word	0x20000d38

08008aa8 <abort>:
 8008aa8:	b508      	push	{r3, lr}
 8008aaa:	2006      	movs	r0, #6
 8008aac:	f000 f82c 	bl	8008b08 <raise>
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f7f8 fcc3 	bl	800143c <_exit>

08008ab6 <_raise_r>:
 8008ab6:	291f      	cmp	r1, #31
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4605      	mov	r5, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	d904      	bls.n	8008aca <_raise_r+0x14>
 8008ac0:	2316      	movs	r3, #22
 8008ac2:	6003      	str	r3, [r0, #0]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008acc:	b112      	cbz	r2, 8008ad4 <_raise_r+0x1e>
 8008ace:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad2:	b94b      	cbnz	r3, 8008ae8 <_raise_r+0x32>
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	f000 f831 	bl	8008b3c <_getpid_r>
 8008ada:	4622      	mov	r2, r4
 8008adc:	4601      	mov	r1, r0
 8008ade:	4628      	mov	r0, r5
 8008ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae4:	f000 b818 	b.w	8008b18 <_kill_r>
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d00a      	beq.n	8008b02 <_raise_r+0x4c>
 8008aec:	1c59      	adds	r1, r3, #1
 8008aee:	d103      	bne.n	8008af8 <_raise_r+0x42>
 8008af0:	2316      	movs	r3, #22
 8008af2:	6003      	str	r3, [r0, #0]
 8008af4:	2001      	movs	r0, #1
 8008af6:	e7e7      	b.n	8008ac8 <_raise_r+0x12>
 8008af8:	2100      	movs	r1, #0
 8008afa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008afe:	4620      	mov	r0, r4
 8008b00:	4798      	blx	r3
 8008b02:	2000      	movs	r0, #0
 8008b04:	e7e0      	b.n	8008ac8 <_raise_r+0x12>
	...

08008b08 <raise>:
 8008b08:	4b02      	ldr	r3, [pc, #8]	@ (8008b14 <raise+0xc>)
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	f7ff bfd2 	b.w	8008ab6 <_raise_r>
 8008b12:	bf00      	nop
 8008b14:	20000018 	.word	0x20000018

08008b18 <_kill_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_kill_r+0x20>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	f7f8 fc79 	bl	800141c <_kill>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d102      	bne.n	8008b34 <_kill_r+0x1c>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b103      	cbz	r3, 8008b34 <_kill_r+0x1c>
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	bd38      	pop	{r3, r4, r5, pc}
 8008b36:	bf00      	nop
 8008b38:	20000d38 	.word	0x20000d38

08008b3c <_getpid_r>:
 8008b3c:	f7f8 bc66 	b.w	800140c <_getpid>

08008b40 <_init>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	bf00      	nop
 8008b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b46:	bc08      	pop	{r3}
 8008b48:	469e      	mov	lr, r3
 8008b4a:	4770      	bx	lr

08008b4c <_fini>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr
