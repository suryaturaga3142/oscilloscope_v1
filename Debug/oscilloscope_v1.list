
oscilloscope_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080089c8  080089c8  000099c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d64  08008d64  0000a314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d64  08008d64  00009d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d6c  08008d6c  0000a314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d6c  08008d6c  00009d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d70  08008d70  00009d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008d74  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08008f48  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08008fe8  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009b0  20000314  08009088  0000a314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000cc4  08009088  0000acc4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a27c  00000000  00000000  0000a342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035a9  00000000  00000000  000245be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001668  00000000  00000000  00027b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001166  00000000  00000000  000291d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bd7c  00000000  00000000  0002a336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b6aa  00000000  00000000  000560b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010cbea  00000000  00000000  0007175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017e346  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006dfc  00000000  00000000  0017e38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  00185188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	080089b0 	.word	0x080089b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	080089b0 	.word	0x080089b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <__io_putchar+0x20>)
 800062e:	f004 fdbd 	bl	80051ac <HAL_UART_Transmit>
  return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000580 	.word	0x20000580

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00a      	b.n	8000662 <main+0x22>
		dac_buf[i] = i * 128;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	b29b      	uxth	r3, r3
 8000650:	01db      	lsls	r3, r3, #7
 8000652:	b299      	uxth	r1, r3
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <main+0x9c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b1f      	cmp	r3, #31
 8000666:	ddf1      	ble.n	800064c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 ff23 	bl	80014b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f842 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 fa5a 	bl	8000b28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000674:	f000 fa26 	bl	8000ac4 <MX_DMA_Init>
  MX_ETH_Init();
 8000678:	f000 f92a 	bl	80008d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800067c:	f000 f9c4 	bl	8000a08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000680:	f000 f9f2 	bl	8000a68 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000684:	f000 f8a8 	bl	80007d8 <MX_ADC1_Init>
  MX_DAC_Init();
 8000688:	f000 f8f8 	bl	800087c <MX_DAC_Init>
  MX_TIM2_Init();
 800068c:	f000 f96e 	bl	800096c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000690:	4813      	ldr	r0, [pc, #76]	@ (80006e0 <main+0xa0>)
 8000692:	f004 fa35 	bl	8004b00 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dac_buf, DAC_BUF_LEN, DAC_ALIGN_12B_R);
 8000696:	2300      	movs	r3, #0
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2320      	movs	r3, #32
 800069c:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <main+0x9c>)
 800069e:	2100      	movs	r1, #0
 80006a0:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <main+0xa4>)
 80006a2:	f001 fcf1 	bl	8002088 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80006a6:	2220      	movs	r2, #32
 80006a8:	490f      	ldr	r1, [pc, #60]	@ (80006e8 <main+0xa8>)
 80006aa:	4810      	ldr	r0, [pc, #64]	@ (80006ec <main+0xac>)
 80006ac:	f000 ffc6 	bl	800163c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_Delay(10);
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	e00e      	b.n	80006d4 <main+0x94>
		  printf("%u\r\n", adc_buf[i]);
 80006b6:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <main+0xa8>)
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	4619      	mov	r1, r3
 80006c2:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <main+0xb0>)
 80006c4:	f006 fa68 	bl	8006b98 <iprintf>
		  HAL_Delay(10);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f000 ff4f 	bl	800156c <HAL_Delay>
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	dded      	ble.n	80006b6 <main+0x76>
 80006da:	e7e9      	b.n	80006b0 <main+0x70>
 80006dc:	20000b28 	.word	0x20000b28
 80006e0:	20000534 	.word	0x20000534
 80006e4:	20000410 	.word	0x20000410
 80006e8:	20000ae8 	.word	0x20000ae8
 80006ec:	20000368 	.word	0x20000368
 80006f0:	080089c8 	.word	0x080089c8

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	@ 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2234      	movs	r2, #52	@ 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 fa9d 	bl	8006c42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000718:	f003 f83e 	bl	8003798 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <SystemClock_Config+0xdc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	4a2b      	ldr	r2, [pc, #172]	@ (80007d0 <SystemClock_Config+0xdc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	@ 0x40
 8000728:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <SystemClock_Config+0xdc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <SystemClock_Config+0xe0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073c:	4a25      	ldr	r2, [pc, #148]	@ (80007d4 <SystemClock_Config+0xe0>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <SystemClock_Config+0xe0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000754:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000758:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000768:	2360      	movs	r3, #96	@ 0x60
 800076a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4618      	mov	r0, r3
 800077e:	f003 f86b 	bl	8003858 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000788:	f000 fa8c 	bl	8000ca4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800078c:	f003 f814 	bl	80037b8 <HAL_PWREx_EnableOverDrive>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000796:	f000 fa85 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2302      	movs	r3, #2
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fafc 	bl	8003db4 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007c2:	f000 fa6f 	bl	8000ca4 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ea:	4b22      	ldr	r3, [pc, #136]	@ (8000874 <MX_ADC1_Init+0x9c>)
 80007ec:	4a22      	ldr	r2, [pc, #136]	@ (8000878 <MX_ADC1_Init+0xa0>)
 80007ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f0:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <MX_ADC1_Init+0x9c>)
 80007f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_ADC1_Init+0x9c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_ADC1_Init+0x9c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_ADC1_Init+0x9c>)
 8000806:	2201      	movs	r2, #1
 8000808:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_ADC1_Init+0x9c>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_ADC1_Init+0x9c>)
 8000814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_ADC1_Init+0x9c>)
 800081c:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_ADC1_Init+0x9c>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_ADC1_Init+0x9c>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_ADC1_Init+0x9c>)
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_ADC1_Init+0x9c>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_ADC1_Init+0x9c>)
 800083e:	f000 feb9 	bl	80015b4 <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000848:	f000 fa2c 	bl	8000ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_ADC1_Init+0x9c>)
 800085e:	f001 f809 	bl	8001874 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000868:	f000 fa1c 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000368 	.word	0x20000368
 8000878:	40012000 	.word	0x40012000

0800087c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_DAC_Init+0x4c>)
 800088c:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <MX_DAC_Init+0x50>)
 800088e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000890:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_DAC_Init+0x4c>)
 8000892:	f001 fbd6 	bl	8002042 <HAL_DAC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800089c:	f000 fa02 	bl	8000ca4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80008a0:	2324      	movs	r3, #36	@ 0x24
 80008a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_DAC_Init+0x4c>)
 80008b0:	f001 fcc8 	bl	8002244 <HAL_DAC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008ba:	f000 f9f3 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000410 	.word	0x20000410
 80008cc:	40007400 	.word	0x40007400

080008d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_ETH_Init+0x84>)
 80008d6:	4a20      	ldr	r2, [pc, #128]	@ (8000958 <MX_ETH_Init+0x88>)
 80008d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <MX_ETH_Init+0x8c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <MX_ETH_Init+0x8c>)
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_ETH_Init+0x8c>)
 80008e8:	22e1      	movs	r2, #225	@ 0xe1
 80008ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <MX_ETH_Init+0x8c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_ETH_Init+0x8c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_ETH_Init+0x8c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_ETH_Init+0x84>)
 8000900:	4a16      	ldr	r2, [pc, #88]	@ (800095c <MX_ETH_Init+0x8c>)
 8000902:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <MX_ETH_Init+0x84>)
 8000906:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800090a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_ETH_Init+0x84>)
 800090e:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <MX_ETH_Init+0x90>)
 8000910:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_ETH_Init+0x84>)
 8000914:	4a13      	ldr	r2, [pc, #76]	@ (8000964 <MX_ETH_Init+0x94>)
 8000916:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_ETH_Init+0x84>)
 800091a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800091e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_ETH_Init+0x84>)
 8000922:	f002 f8eb 	bl	8002afc <HAL_ETH_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800092c:	f000 f9ba 	bl	8000ca4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000930:	2238      	movs	r2, #56	@ 0x38
 8000932:	2100      	movs	r1, #0
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <MX_ETH_Init+0x98>)
 8000936:	f006 f984 	bl	8006c42 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800093a:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <MX_ETH_Init+0x98>)
 800093c:	2221      	movs	r2, #33	@ 0x21
 800093e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_ETH_Init+0x98>)
 8000942:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000946:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_ETH_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000484 	.word	0x20000484
 8000958:	40028000 	.word	0x40028000
 800095c:	20000b68 	.word	0x20000b68
 8000960:	20000274 	.word	0x20000274
 8000964:	200001d4 	.word	0x200001d4
 8000968:	20000330 	.word	0x20000330

0800096c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <MX_TIM2_Init+0x98>)
 800098c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000990:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_TIM2_Init+0x98>)
 8000994:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_TIM2_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 95;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_TIM2_Init+0x98>)
 80009a2:	225f      	movs	r2, #95	@ 0x5f
 80009a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <MX_TIM2_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <MX_TIM2_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b2:	4814      	ldr	r0, [pc, #80]	@ (8000a04 <MX_TIM2_Init+0x98>)
 80009b4:	f004 f84c 	bl	8004a50 <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009be:	f000 f971 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <MX_TIM2_Init+0x98>)
 80009d0:	f004 f906 	bl	8004be0 <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009da:	f000 f963 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009de:	2320      	movs	r3, #32
 80009e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <MX_TIM2_Init+0x98>)
 80009ec:	f004 fb02 	bl	8004ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009f6:	f000 f955 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000534 	.word	0x20000534

08000a08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	@ (8000a64 <MX_USART3_UART_Init+0x5c>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_USART3_UART_Init+0x58>)
 8000a4c:	f004 fb60 	bl	8005110 <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a56:	f000 f925 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000580 	.word	0x20000580
 8000a64:	40004800 	.word	0x40004800

08000a68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2206      	movs	r2, #6
 8000a78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2202      	movs	r2, #2
 8000a8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a98:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	f002 fd39 	bl	8003522 <HAL_PCD_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ab6:	f000 f8f5 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000608 	.word	0x20000608

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_DMA_Init+0x60>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <MX_DMA_Init+0x60>)
 8000ad0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_DMA_Init+0x60>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <MX_DMA_Init+0x60>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <MX_DMA_Init+0x60>)
 8000ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <MX_DMA_Init+0x60>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2010      	movs	r0, #16
 8000b00:	f001 fa69 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b04:	2010      	movs	r0, #16
 8000b06:	f001 fa82 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2038      	movs	r0, #56	@ 0x38
 8000b10:	f001 fa61 	bl	8001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b14:	2038      	movs	r0, #56	@ 0x38
 8000b16:	f001 fa7a 	bl	800200e <HAL_NVIC_EnableIRQ>

}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	@ 0x30
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b54      	ldr	r3, [pc, #336]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a53      	ldr	r2, [pc, #332]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b51      	ldr	r3, [pc, #324]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b4e      	ldr	r3, [pc, #312]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b4b      	ldr	r3, [pc, #300]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b48      	ldr	r3, [pc, #288]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a47      	ldr	r2, [pc, #284]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b45      	ldr	r3, [pc, #276]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b42      	ldr	r3, [pc, #264]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a41      	ldr	r2, [pc, #260]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b3f      	ldr	r3, [pc, #252]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b39      	ldr	r3, [pc, #228]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b36      	ldr	r3, [pc, #216]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a35      	ldr	r2, [pc, #212]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b33      	ldr	r3, [pc, #204]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b2d      	ldr	r3, [pc, #180]	@ (8000c90 <MX_GPIO_Init+0x168>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bec:	4829      	ldr	r0, [pc, #164]	@ (8000c94 <MX_GPIO_Init+0x16c>)
 8000bee:	f002 fc7f 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2140      	movs	r1, #64	@ 0x40
 8000bf6:	4828      	ldr	r0, [pc, #160]	@ (8000c98 <MX_GPIO_Init+0x170>)
 8000bf8:	f002 fc7a 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4822      	ldr	r0, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0x174>)
 8000c14:	f002 fac0 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	481c      	ldr	r0, [pc, #112]	@ (8000ca0 <MX_GPIO_Init+0x178>)
 8000c30:	f002 fab2 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c34:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4811      	ldr	r0, [pc, #68]	@ (8000c94 <MX_GPIO_Init+0x16c>)
 8000c4e:	f002 faa3 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c52:	2340      	movs	r3, #64	@ 0x40
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <MX_GPIO_Init+0x170>)
 8000c6a:	f002 fa95 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_GPIO_Init+0x170>)
 8000c82:	f002 fa89 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c86:	bf00      	nop
 8000c88:	3730      	adds	r7, #48	@ 0x30
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40021800 	.word	0x40021800
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40021400 	.word	0x40021400

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2d      	ldr	r2, [pc, #180]	@ (8000dcc <HAL_ADC_MspInit+0xd4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d153      	bne.n	8000dc2 <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a26      	ldr	r2, [pc, #152]	@ (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_ADC_MspInit+0xd8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481d      	ldr	r0, [pc, #116]	@ (8000dd4 <HAL_ADC_MspInit+0xdc>)
 8000d5e:	f002 fa1b 	bl	8003198 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d64:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <HAL_ADC_MspInit+0xe4>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da6:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000da8:	f001 fb30 	bl	800240c <HAL_DMA_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000db2:	f7ff ff77 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000dba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_ADC_MspInit+0xe0>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	200003b0 	.word	0x200003b0
 8000ddc:	40026410 	.word	0x40026410

08000de0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8000eb4 <HAL_DAC_MspInit+0xd4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d154      	bne.n	8000eac <HAL_DAC_MspInit+0xcc>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e02:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <HAL_DAC_MspInit+0xd8>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb8 <HAL_DAC_MspInit+0xd8>)
 8000e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <HAL_DAC_MspInit+0xd8>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b27      	ldr	r3, [pc, #156]	@ (8000eb8 <HAL_DAC_MspInit+0xd8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <HAL_DAC_MspInit+0xd8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b24      	ldr	r3, [pc, #144]	@ (8000eb8 <HAL_DAC_MspInit+0xd8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e32:	2310      	movs	r3, #16
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	481d      	ldr	r0, [pc, #116]	@ (8000ebc <HAL_DAC_MspInit+0xdc>)
 8000e46:	f002 f9a7 	bl	8003198 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec4 <HAL_DAC_MspInit+0xe4>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e52:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000e56:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e5a:	2240      	movs	r2, #64	@ 0x40
 8000e5c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000e64:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e82:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000e90:	480b      	ldr	r0, [pc, #44]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000e92:	f001 fabb 	bl	800240c <HAL_DMA_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000e9c:	f7ff ff02 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <HAL_DAC_MspInit+0xe0>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	@ 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40007400 	.word	0x40007400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	20000424 	.word	0x20000424
 8000ec4:	40026088 	.word	0x40026088

08000ec8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	@ 0x38
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8001020 <HAL_ETH_MspInit+0x158>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	f040 8096 	bne.w	8001018 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000eec:	4b4d      	ldr	r3, [pc, #308]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000ef2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f00:	623b      	str	r3, [r7, #32]
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	4b47      	ldr	r3, [pc, #284]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a46      	ldr	r2, [pc, #280]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f10:	4b44      	ldr	r3, [pc, #272]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	4b41      	ldr	r3, [pc, #260]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	4a40      	ldr	r2, [pc, #256]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f28:	4b3e      	ldr	r3, [pc, #248]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	4b3b      	ldr	r3, [pc, #236]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f38:	4a3a      	ldr	r2, [pc, #232]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f40:	4b38      	ldr	r3, [pc, #224]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b35      	ldr	r3, [pc, #212]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	4a34      	ldr	r2, [pc, #208]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f58:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b2f      	ldr	r3, [pc, #188]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	4a2e      	ldr	r2, [pc, #184]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f70:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7c:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a28      	ldr	r2, [pc, #160]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <HAL_ETH_MspInit+0x15c>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f94:	2332      	movs	r3, #50	@ 0x32
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa4:	230b      	movs	r3, #11
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	481e      	ldr	r0, [pc, #120]	@ (8001028 <HAL_ETH_MspInit+0x160>)
 8000fb0:	f002 f8f2 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fb4:	2386      	movs	r3, #134	@ 0x86
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc4:	230b      	movs	r3, #11
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4817      	ldr	r0, [pc, #92]	@ (800102c <HAL_ETH_MspInit+0x164>)
 8000fd0:	f002 f8e2 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480f      	ldr	r0, [pc, #60]	@ (8001030 <HAL_ETH_MspInit+0x168>)
 8000ff2:	f002 f8d1 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ff6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <HAL_ETH_MspInit+0x16c>)
 8001014:	f002 f8c0 	bl	8003198 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001018:	bf00      	nop
 800101a:	3738      	adds	r7, #56	@ 0x38
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40028000 	.word	0x40028000
 8001024:	40023800 	.word	0x40023800
 8001028:	40020800 	.word	0x40020800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40021800 	.word	0x40021800

08001038 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001048:	d10b      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_Base_MspInit+0x38>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	@ (8001070 <HAL_TIM_Base_MspInit+0x38>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_TIM_Base_MspInit+0x38>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ae      	sub	sp, #184	@ 0xb8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2290      	movs	r2, #144	@ 0x90
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f005 fdd4 	bl	8006c42 <memset>
  if(huart->Instance==USART3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a22      	ldr	r2, [pc, #136]	@ (8001128 <HAL_UART_MspInit+0xb4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d13c      	bne.n	800111e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 f8a4 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff fdf1 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	4a19      	ldr	r2, [pc, #100]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110c:	2307      	movs	r3, #7
 800110e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 800111a:	f002 f83d 	bl	8003198 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	37b8      	adds	r7, #184	@ 0xb8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004800 	.word	0x40004800
 800112c:	40023800 	.word	0x40023800
 8001130:	40020c00 	.word	0x40020c00

08001134 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ae      	sub	sp, #184	@ 0xb8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2290      	movs	r2, #144	@ 0x90
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f005 fd74 	bl	8006c42 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001162:	d159      	bne.n	8001218 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001164:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001168:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f003 f843 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001180:	f7ff fd90 	bl	8000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001190:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800119c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011b6:	230a      	movs	r3, #10
 80011b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <HAL_PCD_MspInit+0xf0>)
 80011c4:	f001 ffe8 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4810      	ldr	r0, [pc, #64]	@ (8001224 <HAL_PCD_MspInit+0xf0>)
 80011e4:	f001 ffd8 	bl	8003198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 80011ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 80011ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 80011f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120a:	6453      	str	r3, [r2, #68]	@ 0x44
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001218:	bf00      	nop
 800121a:	37b8      	adds	r7, #184	@ 0xb8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <NMI_Handler+0x4>

08001230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <MemManage_Handler+0x4>

08001240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <UsageFault_Handler+0x4>

08001250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127e:	f000 f955 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <DMA1_Stream5_IRQHandler+0x10>)
 800128e:	f001 f9cb 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000424 	.word	0x20000424

0800129c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <DMA2_Stream0_IRQHandler+0x10>)
 80012a2:	f001 f9c1 	bl	8002628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200003b0 	.word	0x200003b0

080012b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_kill>:

int _kill(int pid, int sig)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ca:	f005 fd0d 	bl	8006ce8 <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2216      	movs	r2, #22
 80012d2:	601a      	str	r2, [r3, #0]
  return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_exit>:

void _exit (int status)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffe7 	bl	80012c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f2:	bf00      	nop
 80012f4:	e7fd      	b.n	80012f2 <_exit+0x12>

080012f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e00a      	b.n	800131e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001308:	f3af 8000 	nop.w
 800130c:	4601      	mov	r1, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60ba      	str	r2, [r7, #8]
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbf0      	blt.n	8001308 <_read+0x12>
  }

  return len;
 8001326:	687b      	ldr	r3, [r7, #4]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e009      	b.n	8001356 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f966 	bl	800061c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbf1      	blt.n	8001342 <_write+0x12>
  }
  return len;
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_close>:

int _close(int file)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001390:	605a      	str	r2, [r3, #4]
  return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_isatty>:

int _isatty(int file)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	@ (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f005 fc72 	bl	8006ce8 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20080000 	.word	0x20080000
 8001430:	00000400 	.word	0x00000400
 8001434:	20000b70 	.word	0x20000b70
 8001438:	20000cc8 	.word	0x20000cc8

0800143c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001498 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001464:	f7ff ffea 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146a:	490d      	ldr	r1, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001480:	4c0a      	ldr	r4, [pc, #40]	@ (80014ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800148e:	f005 fc31 	bl	8006cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff f8d5 	bl	8000640 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014a4:	08008d74 	.word	0x08008d74
  ldr r2, =_sbss
 80014a8:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80014ac:	20000cc4 	.word	0x20000cc4

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>

080014b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b6:	2003      	movs	r0, #3
 80014b8:	f000 fd82 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 f805 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c2:	f7ff fbf5 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fd9d 	bl	800202a <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 fd65 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	20000b74 	.word	0x20000b74

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000b74 	.word	0x20000b74

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e031      	b.n	800162e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fb90 	bl	8000cf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_ADC_Init+0x84>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	f043 0202 	orr.w	r2, r3, #2
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fa90 	bl	8001b28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f023 0303 	bic.w	r3, r3, #3
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40
 800161e:	e001      	b.n	8001624 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	ffffeefd 	.word	0xffffeefd

0800163c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_ADC_Start_DMA+0x22>
 800165a:	2302      	movs	r3, #2
 800165c:	e0d6      	b.n	800180c <HAL_ADC_Start_DMA+0x1d0>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d018      	beq.n	80016a6 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001684:	4b63      	ldr	r3, [pc, #396]	@ (8001814 <HAL_ADC_Start_DMA+0x1d8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a63      	ldr	r2, [pc, #396]	@ (8001818 <HAL_ADC_Start_DMA+0x1dc>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9a      	lsrs	r2, r3, #18
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8001698:	e002      	b.n	80016a0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	3b01      	subs	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f9      	bne.n	800169a <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	f040 809e 	bne.w	80017f2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016ba:	4b58      	ldr	r3, [pc, #352]	@ (800181c <HAL_ADC_Start_DMA+0x1e0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d007      	beq.n	80016e4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f0:	d106      	bne.n	8001700 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f023 0206 	bic.w	r2, r3, #6
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80016fe:	e002      	b.n	8001706 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001712:	4a43      	ldr	r2, [pc, #268]	@ (8001820 <HAL_ADC_Start_DMA+0x1e4>)
 8001714:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171a:	4a42      	ldr	r2, [pc, #264]	@ (8001824 <HAL_ADC_Start_DMA+0x1e8>)
 800171c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001722:	4a41      	ldr	r2, [pc, #260]	@ (8001828 <HAL_ADC_Start_DMA+0x1ec>)
 8001724:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800172e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800173e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	334c      	adds	r3, #76	@ 0x4c
 800175a:	4619      	mov	r1, r3
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f000 ff02 	bl	8002568 <HAL_DMA_Start_IT>
 8001764:	4603      	mov	r3, r0
 8001766:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001768:	4b30      	ldr	r3, [pc, #192]	@ (800182c <HAL_ADC_Start_DMA+0x1f0>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10f      	bne.n	8001794 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d143      	bne.n	800180a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	e03a      	b.n	800180a <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a25      	ldr	r2, [pc, #148]	@ (8001830 <HAL_ADC_Start_DMA+0x1f4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10e      	bne.n	80017bc <HAL_ADC_Start_DMA+0x180>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ba:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_ADC_Start_DMA+0x1f0>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d120      	bne.n	800180a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a19      	ldr	r2, [pc, #100]	@ (8001834 <HAL_ADC_Start_DMA+0x1f8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d11b      	bne.n	800180a <HAL_ADC_Start_DMA+0x1ce>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d114      	bne.n	800180a <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e00b      	b.n	800180a <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f043 0201 	orr.w	r2, r3, #1
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800180a:	7dfb      	ldrb	r3, [r7, #23]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	431bde83 	.word	0x431bde83
 800181c:	fffff8fe 	.word	0xfffff8fe
 8001820:	08001d1d 	.word	0x08001d1d
 8001824:	08001dd7 	.word	0x08001dd7
 8001828:	08001df3 	.word	0x08001df3
 800182c:	40012300 	.word	0x40012300
 8001830:	40012000 	.word	0x40012000
 8001834:	40012200 	.word	0x40012200

08001838 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1c>
 800188c:	2302      	movs	r3, #2
 800188e:	e13a      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x292>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b09      	cmp	r3, #9
 800189e:	d93a      	bls.n	8001916 <HAL_ADC_ConfigChannel+0xa2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018a8:	d035      	beq.n	8001916 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68d9      	ldr	r1, [r3, #12]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	3b1e      	subs	r3, #30
 80018c0:	2207      	movs	r2, #7
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	400a      	ands	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a8f      	ldr	r2, [pc, #572]	@ (8001b14 <HAL_ADC_ConfigChannel+0x2a0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10a      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68d9      	ldr	r1, [r3, #12]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	061a      	lsls	r2, r3, #24
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ee:	e039      	b.n	8001964 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68d9      	ldr	r1, [r3, #12]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	4603      	mov	r3, r0
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4403      	add	r3, r0
 8001908:	3b1e      	subs	r3, #30
 800190a:	409a      	lsls	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001914:	e026      	b.n	8001964 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6919      	ldr	r1, [r3, #16]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	2207      	movs	r2, #7
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43da      	mvns	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	400a      	ands	r2, r1
 800193c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6919      	ldr	r1, [r3, #16]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	4603      	mov	r3, r0
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4403      	add	r3, r0
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	409a      	lsls	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b06      	cmp	r3, #6
 800196a:	d824      	bhi.n	80019b6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b05      	subs	r3, #5
 800197e:	221f      	movs	r2, #31
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43da      	mvns	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	400a      	ands	r2, r1
 800198c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	4618      	mov	r0, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	3b05      	subs	r3, #5
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019b4:	e04c      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d824      	bhi.n	8001a08 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3b23      	subs	r3, #35	@ 0x23
 80019d0:	221f      	movs	r2, #31
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	400a      	ands	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	3b23      	subs	r3, #35	@ 0x23
 80019fa:	fa00 f203 	lsl.w	r2, r0, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a06:	e023      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	3b41      	subs	r3, #65	@ 0x41
 8001a1a:	221f      	movs	r2, #31
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43da      	mvns	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	400a      	ands	r2, r1
 8001a28:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	3b41      	subs	r3, #65	@ 0x41
 8001a44:	fa00 f203 	lsl.w	r2, r0, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10a      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1fc>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a64:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a2c      	ldr	r2, [pc, #176]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a6a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10f      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x226>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d10b      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a25      	ldr	r2, [pc, #148]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a8c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a8e:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a22      	ldr	r2, [pc, #136]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a98:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <HAL_ADC_ConfigChannel+0x2a4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d12b      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x288>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b14 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x242>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b11      	cmp	r3, #17
 8001ab4:	d122      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001abc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ac0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a15      	ldr	r2, [pc, #84]	@ (8001b1c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001acc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d111      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_ADC_ConfigChannel+0x2ac>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a11      	ldr	r2, [pc, #68]	@ (8001b24 <HAL_ADC_ConfigChannel+0x2b0>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9a      	lsrs	r2, r3, #18
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001aee:	e002      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f9      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	10000012 	.word	0x10000012
 8001b18:	40012000 	.word	0x40012000
 8001b1c:	40012300 	.word	0x40012300
 8001b20:	20000000 	.word	0x20000000
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b30:	4b78      	ldr	r3, [pc, #480]	@ (8001d14 <ADC_Init+0x1ec>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4a77      	ldr	r2, [pc, #476]	@ (8001d14 <ADC_Init+0x1ec>)
 8001b36:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b3a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b3c:	4b75      	ldr	r3, [pc, #468]	@ (8001d14 <ADC_Init+0x1ec>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4973      	ldr	r1, [pc, #460]	@ (8001d14 <ADC_Init+0x1ec>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	021a      	lsls	r2, r3, #8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	4a58      	ldr	r2, [pc, #352]	@ (8001d18 <ADC_Init+0x1f0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d022      	beq.n	8001c02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6899      	ldr	r1, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6899      	ldr	r1, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	e00f      	b.n	8001c22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0202 	bic.w	r2, r2, #2
 8001c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6899      	ldr	r1, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	005a      	lsls	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6859      	ldr	r1, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	035a      	lsls	r2, r3, #13
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	e007      	b.n	8001c98 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	051a      	lsls	r2, r3, #20
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cda:	025a      	lsls	r2, r3, #9
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	029a      	lsls	r2, r3, #10
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40012300 	.word	0x40012300
 8001d18:	0f000001 	.word	0x0f000001

08001d1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13c      	bne.n	8001db0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d127      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d119      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0220 	bic.w	r2, r2, #32
 8001d82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff fd45 	bl	8001838 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dae:	e00e      	b.n	8001dce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff fd4f 	bl	8001860 <HAL_ADC_ErrorCallback>
}
 8001dc2:	e004      	b.n	8001dce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff fd31 	bl	800184c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fd24 	bl	8001860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	05fa0000 	.word	0x05fa0000

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	@ (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e014      	b.n	800207e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d105      	bne.n	800206a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe febb 	bl	8000de0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0a2      	b.n	80021e6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	795b      	ldrb	r3, [r3, #5]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_DAC_Start_DMA+0x24>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e09c      	b.n	80021e6 <HAL_DAC_Start_DMA+0x15e>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2202      	movs	r2, #2
 80020b6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d129      	bne.n	8002112 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4a4b      	ldr	r2, [pc, #300]	@ (80021f0 <HAL_DAC_Start_DMA+0x168>)
 80020c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4a4a      	ldr	r2, [pc, #296]	@ (80021f4 <HAL_DAC_Start_DMA+0x16c>)
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4a49      	ldr	r2, [pc, #292]	@ (80021f8 <HAL_DAC_Start_DMA+0x170>)
 80020d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_DAC_Start_DMA+0x6c>
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d005      	beq.n	80020fe <HAL_DAC_Start_DMA+0x76>
 80020f2:	e009      	b.n	8002108 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3308      	adds	r3, #8
 80020fa:	613b      	str	r3, [r7, #16]
        break;
 80020fc:	e033      	b.n	8002166 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	330c      	adds	r3, #12
 8002104:	613b      	str	r3, [r7, #16]
        break;
 8002106:	e02e      	b.n	8002166 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3310      	adds	r3, #16
 800210e:	613b      	str	r3, [r7, #16]
        break;
 8002110:	e029      	b.n	8002166 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a39      	ldr	r2, [pc, #228]	@ (80021fc <HAL_DAC_Start_DMA+0x174>)
 8002118:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a38      	ldr	r2, [pc, #224]	@ (8002200 <HAL_DAC_Start_DMA+0x178>)
 8002120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4a37      	ldr	r2, [pc, #220]	@ (8002204 <HAL_DAC_Start_DMA+0x17c>)
 8002128:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002138:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_DAC_Start_DMA+0xc0>
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	2b04      	cmp	r3, #4
 8002144:	d005      	beq.n	8002152 <HAL_DAC_Start_DMA+0xca>
 8002146:	e009      	b.n	800215c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3314      	adds	r3, #20
 800214e:	613b      	str	r3, [r7, #16]
        break;
 8002150:	e009      	b.n	8002166 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3318      	adds	r3, #24
 8002158:	613b      	str	r3, [r7, #16]
        break;
 800215a:	e004      	b.n	8002166 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	331c      	adds	r3, #28
 8002162:	613b      	str	r3, [r7, #16]
        break;
 8002164:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800217a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6898      	ldr	r0, [r3, #8]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	f000 f9ef 	bl	8002568 <HAL_DMA_Start_IT>
 800218a:	4603      	mov	r3, r0
 800218c:	75fb      	strb	r3, [r7, #23]
 800218e:	e010      	b.n	80021b2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800219e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68d8      	ldr	r0, [r3, #12]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	f000 f9dd 	bl	8002568 <HAL_DMA_Start_IT>
 80021ae:	4603      	mov	r3, r0
 80021b0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2201      	movs	r2, #1
 80021cc:	409a      	lsls	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e005      	b.n	80021e4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	080022f7 	.word	0x080022f7
 80021f4:	08002319 	.word	0x08002319
 80021f8:	08002335 	.word	0x08002335
 80021fc:	0800239f 	.word	0x0800239f
 8002200:	080023c1 	.word	0x080023c1
 8002204:	080023dd 	.word	0x080023dd

08002208 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_DAC_ConfigChannel+0x1c>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e042      	b.n	80022ea <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	795b      	ldrb	r3, [r3, #5]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_DAC_ConfigChannel+0x2c>
 800226c:	2302      	movs	r3, #2
 800226e:	e03c      	b.n	80022ea <HAL_DAC_ConfigChannel+0xa6>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2202      	movs	r2, #2
 800227a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	22c0      	movs	r2, #192	@ 0xc0
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	400a      	ands	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff ff7f 	bl	8002208 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	711a      	strb	r2, [r3, #4]
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002324:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff ff78 	bl	800221c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002340:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f043 0204 	orr.w	r2, r3, #4
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ff6e 	bl	8002230 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	711a      	strb	r2, [r3, #4]
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023aa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff ffd8 	bl	8002362 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	711a      	strb	r2, [r3, #4]
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023cc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7ff ffd1 	bl	8002376 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f043 0204 	orr.w	r2, r3, #4
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7ff ffc7 	bl	800238a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	711a      	strb	r2, [r3, #4]
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff f89c 	bl	8001554 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e099      	b.n	800255c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002448:	e00f      	b.n	800246a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800244a:	f7ff f883 	bl	8001554 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b05      	cmp	r3, #5
 8002456:	d908      	bls.n	800246a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2203      	movs	r2, #3
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e078      	b.n	800255c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e8      	bne.n	800244a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <HAL_DMA_Init+0x158>)
 8002484:	4013      	ands	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d107      	bne.n	80024d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	4313      	orrs	r3, r2
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f023 0307 	bic.w	r3, r3, #7
 80024ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d117      	bne.n	800252e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00e      	beq.n	800252e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa77 	bl	8002a04 <DMA_CheckFifoParam>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2240      	movs	r2, #64	@ 0x40
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800252a:	2301      	movs	r3, #1
 800252c:	e016      	b.n	800255c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fa2e 	bl	8002998 <DMA_CalcBaseAndBitshift>
 800253c:	4603      	mov	r3, r0
 800253e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002544:	223f      	movs	r2, #63	@ 0x3f
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	e010803f 	.word	0xe010803f

08002568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_DMA_Start_IT+0x26>
 800258a:	2302      	movs	r3, #2
 800258c:	e048      	b.n	8002620 <HAL_DMA_Start_IT+0xb8>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d137      	bne.n	8002612 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f9c0 	bl	800293c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	223f      	movs	r2, #63	@ 0x3f
 80025c2:	409a      	lsls	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0216 	orr.w	r2, r2, #22
 80025d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e005      	b.n	800261e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002634:	4b8e      	ldr	r3, [pc, #568]	@ (8002870 <HAL_DMA_IRQHandler+0x248>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a8e      	ldr	r2, [pc, #568]	@ (8002874 <HAL_DMA_IRQHandler+0x24c>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0a9b      	lsrs	r3, r3, #10
 8002640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	2208      	movs	r2, #8
 8002654:	409a      	lsls	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01a      	beq.n	8002694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0204 	bic.w	r2, r2, #4
 800267a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	2208      	movs	r2, #8
 8002682:	409a      	lsls	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002698:	2201      	movs	r2, #1
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d012      	beq.n	80026ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	2201      	movs	r2, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	f043 0202 	orr.w	r2, r3, #2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ce:	2204      	movs	r2, #4
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ec:	2204      	movs	r2, #4
 80026ee:	409a      	lsls	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	f043 0204 	orr.w	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	2210      	movs	r2, #16
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d043      	beq.n	8002798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d03c      	beq.n	8002798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	2210      	movs	r2, #16
 8002724:	409a      	lsls	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d018      	beq.n	800276a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d024      	beq.n	8002798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
 8002756:	e01f      	b.n	8002798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
 8002768:	e016      	b.n	8002798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0208 	bic.w	r2, r2, #8
 8002786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	2220      	movs	r2, #32
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 808f 	beq.w	80028c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8087 	beq.w	80028c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	2220      	movs	r2, #32
 80027c0:	409a      	lsls	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d136      	bne.n	8002840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0216 	bic.w	r2, r2, #22
 80027e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <HAL_DMA_IRQHandler+0x1da>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0208 	bic.w	r2, r2, #8
 8002810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	223f      	movs	r2, #63	@ 0x3f
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002832:	2b00      	cmp	r3, #0
 8002834:	d07e      	beq.n	8002934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
        }
        return;
 800283e:	e079      	b.n	8002934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01d      	beq.n	800288a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10d      	bne.n	8002878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	2b00      	cmp	r3, #0
 8002862:	d031      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	e02c      	b.n	80028c8 <HAL_DMA_IRQHandler+0x2a0>
 800286e:	bf00      	nop
 8002870:	20000000 	.word	0x20000000
 8002874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d023      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
 8002888:	e01e      	b.n	80028c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10f      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0210 	bic.w	r2, r2, #16
 80028a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d032      	beq.n	8002936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d022      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2205      	movs	r2, #5
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d307      	bcc.n	8002910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f2      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x2cc>
 800290e:	e000      	b.n	8002912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e000      	b.n	8002936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002934:	bf00      	nop
    }
  }
}
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b40      	cmp	r3, #64	@ 0x40
 8002968:	d108      	bne.n	800297c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800297a:	e007      	b.n	800298c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	3b10      	subs	r3, #16
 80029a8:	4a13      	ldr	r2, [pc, #76]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x60>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029b2:	4a12      	ldr	r2, [pc, #72]	@ (80029fc <DMA_CalcBaseAndBitshift+0x64>)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d908      	bls.n	80029d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <DMA_CalcBaseAndBitshift+0x68>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	1d1a      	adds	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d6:	e006      	b.n	80029e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <DMA_CalcBaseAndBitshift+0x68>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	aaaaaaab 	.word	0xaaaaaaab
 80029fc:	080089e8 	.word	0x080089e8
 8002a00:	fffffc00 	.word	0xfffffc00

08002a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11f      	bne.n	8002a5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d856      	bhi.n	8002ad2 <DMA_CheckFifoParam+0xce>
 8002a24:	a201      	add	r2, pc, #4	@ (adr r2, 8002a2c <DMA_CheckFifoParam+0x28>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a4f 	.word	0x08002a4f
 8002a34:	08002a3d 	.word	0x08002a3d
 8002a38:	08002ad3 	.word	0x08002ad3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d046      	beq.n	8002ad6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a4c:	e043      	b.n	8002ad6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a56:	d140      	bne.n	8002ada <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5c:	e03d      	b.n	8002ada <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a66:	d121      	bne.n	8002aac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d837      	bhi.n	8002ade <DMA_CheckFifoParam+0xda>
 8002a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <DMA_CheckFifoParam+0x70>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a8b 	.word	0x08002a8b
 8002a7c:	08002a85 	.word	0x08002a85
 8002a80:	08002a9d 	.word	0x08002a9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      break;
 8002a88:	e030      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d025      	beq.n	8002ae2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9a:	e022      	b.n	8002ae2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa4:	d11f      	bne.n	8002ae6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aaa:	e01c      	b.n	8002ae6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d903      	bls.n	8002aba <DMA_CheckFifoParam+0xb6>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d003      	beq.n	8002ac0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab8:	e018      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      break;
 8002abe:	e015      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad0:	e00b      	b.n	8002aea <DMA_CheckFifoParam+0xe6>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e00a      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e008      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e006      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e004      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      break;   
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
    }
  } 
  
  return status; 
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e086      	b.n	8002c1c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fe f9d1 	bl	8000ec8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	4b3f      	ldr	r3, [pc, #252]	@ (8002c24 <HAL_ETH_Init+0x128>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c24 <HAL_ETH_Init+0x128>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b32:	4b3c      	ldr	r3, [pc, #240]	@ (8002c24 <HAL_ETH_Init+0x128>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <HAL_ETH_Init+0x12c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a39      	ldr	r2, [pc, #228]	@ (8002c28 <HAL_ETH_Init+0x12c>)
 8002b44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b48:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b4a:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <HAL_ETH_Init+0x12c>)
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4935      	ldr	r1, [pc, #212]	@ (8002c28 <HAL_ETH_Init+0x12c>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b58:	4b33      	ldr	r3, [pc, #204]	@ (8002c28 <HAL_ETH_Init+0x12c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b74:	f7fe fcee 	bl	8001554 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002b7a:	e011      	b.n	8002ba0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b7c:	f7fe fcea 	bl	8001554 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b8a:	d909      	bls.n	8002ba0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	22e0      	movs	r2, #224	@ 0xe0
 8002b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e03d      	b.n	8002c1c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e4      	bne.n	8002b7c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f97a 	bl	8002eac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fa25 	bl	8003008 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa7b 	bl	80030ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2100      	movs	r1, #0
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f9e3 	bl	8002f98 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002be0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <HAL_ETH_Init+0x130>)
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002c06:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2210      	movs	r2, #16
 8002c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40013800 	.word	0x40013800
 8002c2c:	00020060 	.word	0x00020060

08002c30 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <ETH_SetMACConfig+0x164>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	7b9b      	ldrb	r3, [r3, #14]
 8002c4e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	7c12      	ldrb	r2, [r2, #16]
 8002c54:	2a00      	cmp	r2, #0
 8002c56:	d102      	bne.n	8002c5e <ETH_SetMACConfig+0x2e>
 8002c58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c5c:	e000      	b.n	8002c60 <ETH_SetMACConfig+0x30>
 8002c5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002c60:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	7c52      	ldrb	r2, [r2, #17]
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	d102      	bne.n	8002c70 <ETH_SetMACConfig+0x40>
 8002c6a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c6e:	e000      	b.n	8002c72 <ETH_SetMACConfig+0x42>
 8002c70:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c72:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	7fdb      	ldrb	r3, [r3, #31]
 8002c7e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c80:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	7f92      	ldrb	r2, [r2, #30]
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	d102      	bne.n	8002c96 <ETH_SetMACConfig+0x66>
 8002c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c94:	e000      	b.n	8002c98 <ETH_SetMACConfig+0x68>
 8002c96:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	7f1b      	ldrb	r3, [r3, #28]
 8002c9e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ca0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ca6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	791b      	ldrb	r3, [r3, #4]
 8002cac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002cae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	d102      	bne.n	8002cc0 <ETH_SetMACConfig+0x90>
 8002cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cbe:	e000      	b.n	8002cc2 <ETH_SetMACConfig+0x92>
 8002cc0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002cc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	7bdb      	ldrb	r3, [r3, #15]
 8002cc8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002cd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002cd8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f7fe fc3a 	bl	800156c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d16:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002d1e:	2a00      	cmp	r2, #0
 8002d20:	d101      	bne.n	8002d26 <ETH_SetMACConfig+0xf6>
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	e000      	b.n	8002d28 <ETH_SetMACConfig+0xf8>
 8002d26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d28:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002d36:	2a01      	cmp	r2, #1
 8002d38:	d101      	bne.n	8002d3e <ETH_SetMACConfig+0x10e>
 8002d3a:	2208      	movs	r2, #8
 8002d3c:	e000      	b.n	8002d40 <ETH_SetMACConfig+0x110>
 8002d3e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002d48:	2a01      	cmp	r2, #1
 8002d4a:	d101      	bne.n	8002d50 <ETH_SetMACConfig+0x120>
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	e000      	b.n	8002d52 <ETH_SetMACConfig+0x122>
 8002d50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002d5a:	2a01      	cmp	r2, #1
 8002d5c:	d101      	bne.n	8002d62 <ETH_SetMACConfig+0x132>
 8002d5e:	2202      	movs	r2, #2
 8002d60:	e000      	b.n	8002d64 <ETH_SetMACConfig+0x134>
 8002d62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d64:	4313      	orrs	r3, r2
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f7fe fbf5 	bl	800156c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	619a      	str	r2, [r3, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	fd20810f 	.word	0xfd20810f

08002d98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <ETH_SetDMAConfig+0x110>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7b1b      	ldrb	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <ETH_SetDMAConfig+0x2c>
 8002dbe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002dc2:	e000      	b.n	8002dc6 <ETH_SetDMAConfig+0x2e>
 8002dc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	7b5b      	ldrb	r3, [r3, #13]
 8002dca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002dcc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	7f52      	ldrb	r2, [r2, #29]
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	d102      	bne.n	8002ddc <ETH_SetDMAConfig+0x44>
 8002dd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dda:	e000      	b.n	8002dde <ETH_SetDMAConfig+0x46>
 8002ddc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002dde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7b9b      	ldrb	r3, [r3, #14]
 8002de4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002de6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002dec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	7f1b      	ldrb	r3, [r3, #28]
 8002df2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002df4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	7f9b      	ldrb	r3, [r3, #30]
 8002dfa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002dfc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e0a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7fe fb9c 	bl	800156c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	791b      	ldrb	r3, [r3, #4]
 8002e46:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e4c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e52:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e58:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e60:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002e62:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e6a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e70:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e7e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fe fb6d 	bl	800156c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	f8de3f23 	.word	0xf8de3f23

08002eac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0a6      	sub	sp, #152	@ 0x98
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fe7f 	bl	8002c30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f32:	2301      	movs	r3, #1
 8002f34:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f66:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f6c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f72:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f82:	f107 0308 	add.w	r3, r7, #8
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff05 	bl	8002d98 <ETH_SetDMAConfig>
}
 8002f8e:	bf00      	nop
 8002f90:	3798      	adds	r7, #152	@ 0x98
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3305      	adds	r3, #5
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	021b      	lsls	r3, r3, #8
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	3204      	adds	r2, #4
 8002fb0:	7812      	ldrb	r2, [r2, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <ETH_MACAddressConfig+0x68>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3303      	adds	r3, #3
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	061a      	lsls	r2, r3, #24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <ETH_MACAddressConfig+0x6c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40028040 	.word	0x40028040
 8003004:	40028044 	.word	0x40028044

08003008 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e03e      	b.n	8003094 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68d9      	ldr	r1, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	3206      	adds	r2, #6
 8003048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d80c      	bhi.n	8003078 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68d9      	ldr	r1, [r3, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	e004      	b.n	8003082 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d9bd      	bls.n	8003016 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ac:	611a      	str	r2, [r3, #16]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e048      	b.n	800315a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6919      	ldr	r1, [r3, #16]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	440b      	add	r3, r1
 80030d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2200      	movs	r2, #0
 80030f6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003104:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	3212      	adds	r2, #18
 8003126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d80c      	bhi.n	800314a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6919      	ldr	r1, [r3, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	e004      	b.n	8003154 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	461a      	mov	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d9b3      	bls.n	80030c8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800318a:	60da      	str	r2, [r3, #12]
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e175      	b.n	80034a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f040 8164 	bne.w	800349e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d005      	beq.n	80031ee <HAL_GPIO_Init+0x56>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d130      	bne.n	8003250 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003224:	2201      	movs	r2, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 0201 	and.w	r2, r3, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b03      	cmp	r3, #3
 800325a:	d017      	beq.n	800328c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d123      	bne.n	80032e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	08da      	lsrs	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3208      	adds	r2, #8
 80032a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	220f      	movs	r2, #15
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0203 	and.w	r2, r3, #3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80be 	beq.w	800349e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	4b66      	ldr	r3, [pc, #408]	@ (80034bc <HAL_GPIO_Init+0x324>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	4a65      	ldr	r2, [pc, #404]	@ (80034bc <HAL_GPIO_Init+0x324>)
 8003328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800332c:	6453      	str	r3, [r2, #68]	@ 0x44
 800332e:	4b63      	ldr	r3, [pc, #396]	@ (80034bc <HAL_GPIO_Init+0x324>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800333a:	4a61      	ldr	r2, [pc, #388]	@ (80034c0 <HAL_GPIO_Init+0x328>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a58      	ldr	r2, [pc, #352]	@ (80034c4 <HAL_GPIO_Init+0x32c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d037      	beq.n	80033d6 <HAL_GPIO_Init+0x23e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a57      	ldr	r2, [pc, #348]	@ (80034c8 <HAL_GPIO_Init+0x330>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_GPIO_Init+0x23a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a56      	ldr	r2, [pc, #344]	@ (80034cc <HAL_GPIO_Init+0x334>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x236>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a55      	ldr	r2, [pc, #340]	@ (80034d0 <HAL_GPIO_Init+0x338>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x232>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a54      	ldr	r2, [pc, #336]	@ (80034d4 <HAL_GPIO_Init+0x33c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x22e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a53      	ldr	r2, [pc, #332]	@ (80034d8 <HAL_GPIO_Init+0x340>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x22a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a52      	ldr	r2, [pc, #328]	@ (80034dc <HAL_GPIO_Init+0x344>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x226>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a51      	ldr	r2, [pc, #324]	@ (80034e0 <HAL_GPIO_Init+0x348>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x222>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a50      	ldr	r2, [pc, #320]	@ (80034e4 <HAL_GPIO_Init+0x34c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x21e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4f      	ldr	r2, [pc, #316]	@ (80034e8 <HAL_GPIO_Init+0x350>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x21a>
 80033ae:	2309      	movs	r3, #9
 80033b0:	e012      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033b2:	230a      	movs	r3, #10
 80033b4:	e010      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e00e      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ba:	2307      	movs	r3, #7
 80033bc:	e00c      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033be:	2306      	movs	r3, #6
 80033c0:	e00a      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	@ (80034c0 <HAL_GPIO_Init+0x328>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ec <HAL_GPIO_Init+0x354>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a34      	ldr	r2, [pc, #208]	@ (80034ec <HAL_GPIO_Init+0x354>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b32      	ldr	r3, [pc, #200]	@ (80034ec <HAL_GPIO_Init+0x354>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a29      	ldr	r2, [pc, #164]	@ (80034ec <HAL_GPIO_Init+0x354>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b28      	ldr	r3, [pc, #160]	@ (80034ec <HAL_GPIO_Init+0x354>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <HAL_GPIO_Init+0x354>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <HAL_GPIO_Init+0x354>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <HAL_GPIO_Init+0x354>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f ae86 	bls.w	80031b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40021400 	.word	0x40021400
 80034dc:	40021800 	.word	0x40021800
 80034e0:	40021c00 	.word	0x40021c00
 80034e4:	40022000 	.word	0x40022000
 80034e8:	40022400 	.word	0x40022400
 80034ec:	40013c00 	.word	0x40013c00

080034f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
 80034fc:	4613      	mov	r3, r2
 80034fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800350c:	e003      	b.n	8003516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	041a      	lsls	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af02      	add	r7, sp, #8
 8003528:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e108      	b.n	8003746 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fdf0 	bl	8001134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2203      	movs	r2, #3
 8003558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003562:	d102      	bne.n	800356a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f002 fb80 	bl	8005c74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7c1a      	ldrb	r2, [r3, #16]
 800357c:	f88d 2000 	strb.w	r2, [sp]
 8003580:	3304      	adds	r3, #4
 8003582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003584:	f002 fb1c 	bl	8005bc0 <USB_CoreInit>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0d5      	b.n	8003746 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 fb78 	bl	8005c96 <USB_SetCurrentMode>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0c6      	b.n	8003746 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e04a      	b.n	8003654 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3315      	adds	r3, #21
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3314      	adds	r3, #20
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	b298      	uxth	r0, r3
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	332e      	adds	r3, #46	@ 0x2e
 80035fa:	4602      	mov	r2, r0
 80035fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3318      	adds	r3, #24
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	331c      	adds	r3, #28
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3320      	adds	r3, #32
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800363a:	7bfa      	ldrb	r2, [r7, #15]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3324      	adds	r3, #36	@ 0x24
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	3301      	adds	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	791b      	ldrb	r3, [r3, #4]
 8003658:	7bfa      	ldrb	r2, [r7, #15]
 800365a:	429a      	cmp	r2, r3
 800365c:	d3af      	bcc.n	80035be <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	e044      	b.n	80036ee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	3301      	adds	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	791b      	ldrb	r3, [r3, #4]
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d3b5      	bcc.n	8003664 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7c1a      	ldrb	r2, [r3, #16]
 8003700:	f88d 2000 	strb.w	r2, [sp]
 8003704:	3304      	adds	r3, #4
 8003706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003708:	f002 fb12 	bl	8005d30 <USB_DevInit>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e013      	b.n	8003746 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7b1b      	ldrb	r3, [r3, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d102      	bne.n	800373a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f80b 	bl	8003750 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f002 fccd 	bl	80060de <USB_DevDisconnect>

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800377e:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_PCDEx_ActivateLPM+0x44>)
 8003780:	4313      	orrs	r3, r2
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	10000003 	.word	0x10000003

08003798 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40007000 	.word	0x40007000

080037b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	4b23      	ldr	r3, [pc, #140]	@ (8003850 <HAL_PWREx_EnableOverDrive+0x98>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <HAL_PWREx_EnableOverDrive+0x98>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_PWREx_EnableOverDrive+0x98>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037da:	4b1e      	ldr	r3, [pc, #120]	@ (8003854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1d      	ldr	r2, [pc, #116]	@ (8003854 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037e6:	f7fd feb5 	bl	8001554 <HAL_GetTick>
 80037ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ec:	e009      	b.n	8003802 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037ee:	f7fd feb1 	bl	8001554 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037fc:	d901      	bls.n	8003802 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e022      	b.n	8003848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003802:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800380e:	d1ee      	bne.n	80037ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003810:	4b10      	ldr	r3, [pc, #64]	@ (8003854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0f      	ldr	r2, [pc, #60]	@ (8003854 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800381c:	f7fd fe9a 	bl	8001554 <HAL_GetTick>
 8003820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003822:	e009      	b.n	8003838 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003824:	f7fd fe96 	bl	8001554 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003832:	d901      	bls.n	8003838 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e007      	b.n	8003848 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_PWREx_EnableOverDrive+0x9c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003844:	d1ee      	bne.n	8003824 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40023800 	.word	0x40023800
 8003854:	40007000 	.word	0x40007000

08003858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003860:	2300      	movs	r3, #0
 8003862:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e29b      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8087 	beq.w	800398a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800387c:	4b96      	ldr	r3, [pc, #600]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b04      	cmp	r3, #4
 8003886:	d00c      	beq.n	80038a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003888:	4b93      	ldr	r3, [pc, #588]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d112      	bne.n	80038ba <HAL_RCC_OscConfig+0x62>
 8003894:	4b90      	ldr	r3, [pc, #576]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038a0:	d10b      	bne.n	80038ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d06c      	beq.n	8003988 <HAL_RCC_OscConfig+0x130>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d168      	bne.n	8003988 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e275      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x7a>
 80038c4:	4b84      	ldr	r3, [pc, #528]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a83      	ldr	r2, [pc, #524]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	e02e      	b.n	8003930 <HAL_RCC_OscConfig+0xd8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x9c>
 80038da:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7e      	ldr	r2, [pc, #504]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80038e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7b      	ldr	r2, [pc, #492]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80038ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e01d      	b.n	8003930 <HAL_RCC_OscConfig+0xd8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0xc0>
 80038fe:	4b76      	ldr	r3, [pc, #472]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a75      	ldr	r2, [pc, #468]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b73      	ldr	r3, [pc, #460]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a72      	ldr	r2, [pc, #456]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e00b      	b.n	8003930 <HAL_RCC_OscConfig+0xd8>
 8003918:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 800391e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6b      	ldr	r2, [pc, #428]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800392e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd fe0c 	bl	8001554 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fd fe08 	bl	8001554 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	@ 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e229      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	4b61      	ldr	r3, [pc, #388]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0xe8>
 800395e:	e014      	b.n	800398a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fdf8 	bl	8001554 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fd fdf4 	bl	8001554 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	@ 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e215      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	4b57      	ldr	r3, [pc, #348]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x110>
 8003986:	e000      	b.n	800398a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d069      	beq.n	8003a6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003996:	4b50      	ldr	r3, [pc, #320]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d11c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x190>
 80039ae:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d116      	bne.n	80039e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ba:	4b47      	ldr	r3, [pc, #284]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_RCC_OscConfig+0x17a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e1e9      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b41      	ldr	r3, [pc, #260]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	493d      	ldr	r1, [pc, #244]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	e040      	b.n	8003a6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d023      	beq.n	8003a38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f0:	4b39      	ldr	r3, [pc, #228]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a38      	ldr	r2, [pc, #224]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fd fdaa 	bl	8001554 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fd fda6 	bl	8001554 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1c7      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a16:	4b30      	ldr	r3, [pc, #192]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a22:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4929      	ldr	r1, [pc, #164]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
 8003a36:	e018      	b.n	8003a6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a38:	4b27      	ldr	r3, [pc, #156]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd fd86 	bl	8001554 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fd fd82 	bl	8001554 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e1a3      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d038      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d019      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a82:	4a15      	ldr	r2, [pc, #84]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fd fd63 	bl	8001554 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a92:	f7fd fd5f 	bl	8001554 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e180      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x23a>
 8003ab0:	e01a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab2:	4b09      	ldr	r3, [pc, #36]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab6:	4a08      	ldr	r2, [pc, #32]	@ (8003ad8 <HAL_RCC_OscConfig+0x280>)
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fd fd49 	bl	8001554 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac6:	f7fd fd45 	bl	8001554 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d903      	bls.n	8003adc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e166      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
 8003ad8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003adc:	4b92      	ldr	r3, [pc, #584]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ee      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80a4 	beq.w	8003c3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af6:	4b8c      	ldr	r3, [pc, #560]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10d      	bne.n	8003b1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b89      	ldr	r3, [pc, #548]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a88      	ldr	r2, [pc, #544]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b86      	ldr	r3, [pc, #536]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1e:	4b83      	ldr	r3, [pc, #524]	@ (8003d2c <HAL_RCC_OscConfig+0x4d4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b2a:	4b80      	ldr	r3, [pc, #512]	@ (8003d2c <HAL_RCC_OscConfig+0x4d4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d2c <HAL_RCC_OscConfig+0x4d4>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fd fd0d 	bl	8001554 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fd fd09 	bl	8001554 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	@ 0x64
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e12a      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b50:	4b76      	ldr	r3, [pc, #472]	@ (8003d2c <HAL_RCC_OscConfig+0x4d4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x31a>
 8003b64:	4b70      	ldr	r3, [pc, #448]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b68:	4a6f      	ldr	r2, [pc, #444]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b70:	e02d      	b.n	8003bce <HAL_RCC_OscConfig+0x376>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x33c>
 8003b7a:	4b6b      	ldr	r3, [pc, #428]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b86:	4b68      	ldr	r3, [pc, #416]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	4a67      	ldr	r2, [pc, #412]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b8c:	f023 0304 	bic.w	r3, r3, #4
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b92:	e01c      	b.n	8003bce <HAL_RCC_OscConfig+0x376>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x35e>
 8003b9c:	4b62      	ldr	r3, [pc, #392]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	4a61      	ldr	r2, [pc, #388]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003ba2:	f043 0304 	orr.w	r3, r3, #4
 8003ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4a5e      	ldr	r2, [pc, #376]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb4:	e00b      	b.n	8003bce <HAL_RCC_OscConfig+0x376>
 8003bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a5b      	ldr	r2, [pc, #364]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc2:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	4a58      	ldr	r2, [pc, #352]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fcbd 	bl	8001554 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fd fcb9 	bl	8001554 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0d8      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ee      	beq.n	8003bde <HAL_RCC_OscConfig+0x386>
 8003c00:	e014      	b.n	8003c2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c02:	f7fd fca7 	bl	8001554 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fd fca3 	bl	8001554 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0c2      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b3d      	ldr	r3, [pc, #244]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	4a3c      	ldr	r2, [pc, #240]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80ae 	beq.w	8003da4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c48:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d06d      	beq.n	8003d30 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d14b      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b32      	ldr	r3, [pc, #200]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a31      	ldr	r2, [pc, #196]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fc74 	bl	8001554 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fd fc70 	bl	8001554 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e091      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	4b29      	ldr	r3, [pc, #164]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	019b      	lsls	r3, r3, #6
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	491b      	ldr	r1, [pc, #108]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc0:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a18      	ldr	r2, [pc, #96]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fc42 	bl	8001554 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fd fc3e 	bl	8001554 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e05f      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x47c>
 8003cf2:	e057      	b.n	8003da4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fc28 	bl	8001554 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd fc24 	bl	8001554 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e045      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b03      	ldr	r3, [pc, #12]	@ (8003d28 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4b0>
 8003d26:	e03d      	b.n	8003da4 <HAL_RCC_OscConfig+0x54c>
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d30:	4b1f      	ldr	r3, [pc, #124]	@ (8003db0 <HAL_RCC_OscConfig+0x558>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d030      	beq.n	8003da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d129      	bne.n	8003da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d122      	bne.n	8003da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d119      	bne.n	8003da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d10f      	bne.n	8003da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d0      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d910      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b67      	ldr	r3, [pc, #412]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 020f 	bic.w	r2, r3, #15
 8003de2:	4965      	ldr	r1, [pc, #404]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b63      	ldr	r3, [pc, #396]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b8      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b59      	ldr	r3, [pc, #356]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a58      	ldr	r2, [pc, #352]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e2c:	4b53      	ldr	r3, [pc, #332]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a52      	ldr	r2, [pc, #328]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b50      	ldr	r3, [pc, #320]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	494d      	ldr	r1, [pc, #308]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d040      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d115      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e07f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b41      	ldr	r3, [pc, #260]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e073      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3d      	ldr	r3, [pc, #244]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b39      	ldr	r3, [pc, #228]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4936      	ldr	r1, [pc, #216]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea8:	f7fd fb54 	bl	8001554 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd fb50 	bl	8001554 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e053      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d210      	bcs.n	8003f08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 020f 	bic.w	r2, r3, #15
 8003eee:	4922      	ldr	r1, [pc, #136]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b20      	ldr	r3, [pc, #128]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e032      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f14:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4916      	ldr	r1, [pc, #88]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f32:	4b12      	ldr	r3, [pc, #72]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	490e      	ldr	r1, [pc, #56]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f46:	f000 f821 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	490a      	ldr	r1, [pc, #40]	@ (8003f80 <HAL_RCC_ClockConfig+0x1cc>)
 8003f58:	5ccb      	ldrb	r3, [r1, r3]
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	4a09      	ldr	r2, [pc, #36]	@ (8003f84 <HAL_RCC_ClockConfig+0x1d0>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f62:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <HAL_RCC_ClockConfig+0x1d4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fd fab0 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023c00 	.word	0x40023c00
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	080089d0 	.word	0x080089d0
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000004 	.word	0x20000004

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f90:	b094      	sub	sp, #80	@ 0x50
 8003f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f98:	2300      	movs	r3, #0
 8003f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fa4:	4b79      	ldr	r3, [pc, #484]	@ (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d00d      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x40>
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	f200 80e1 	bhi.w	8004178 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fbe:	e0db      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b73      	ldr	r3, [pc, #460]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc4:	e0db      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fc6:	4b73      	ldr	r3, [pc, #460]	@ (8004194 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fca:	e0d8      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d063      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	2200      	movs	r2, #0
 8003fea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ffa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	0159      	lsls	r1, r3, #5
 800400c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004010:	0150      	lsls	r0, r2, #5
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4621      	mov	r1, r4
 8004018:	1a51      	subs	r1, r2, r1
 800401a:	6139      	str	r1, [r7, #16]
 800401c:	4629      	mov	r1, r5
 800401e:	eb63 0301 	sbc.w	r3, r3, r1
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004030:	4659      	mov	r1, fp
 8004032:	018b      	lsls	r3, r1, #6
 8004034:	4651      	mov	r1, sl
 8004036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800403a:	4651      	mov	r1, sl
 800403c:	018a      	lsls	r2, r1, #6
 800403e:	4651      	mov	r1, sl
 8004040:	ebb2 0801 	subs.w	r8, r2, r1
 8004044:	4659      	mov	r1, fp
 8004046:	eb63 0901 	sbc.w	r9, r3, r1
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800405a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800405e:	4690      	mov	r8, r2
 8004060:	4699      	mov	r9, r3
 8004062:	4623      	mov	r3, r4
 8004064:	eb18 0303 	adds.w	r3, r8, r3
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	462b      	mov	r3, r5
 800406c:	eb49 0303 	adc.w	r3, r9, r3
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800407e:	4629      	mov	r1, r5
 8004080:	024b      	lsls	r3, r1, #9
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004088:	4621      	mov	r1, r4
 800408a:	024a      	lsls	r2, r1, #9
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004092:	2200      	movs	r2, #0
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800409c:	f7fc f928 	bl	80002f0 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4613      	mov	r3, r2
 80040a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a8:	e058      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040aa:	4b38      	ldr	r3, [pc, #224]	@ (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	099b      	lsrs	r3, r3, #6
 80040b0:	2200      	movs	r2, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	4611      	mov	r1, r2
 80040b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	0159      	lsls	r1, r3, #5
 80040d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d6:	0150      	lsls	r0, r2, #5
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4641      	mov	r1, r8
 80040de:	ebb2 0a01 	subs.w	sl, r2, r1
 80040e2:	4649      	mov	r1, r9
 80040e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004100:	eb63 050b 	sbc.w	r5, r3, fp
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	00eb      	lsls	r3, r5, #3
 800410e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004112:	00e2      	lsls	r2, r4, #3
 8004114:	4614      	mov	r4, r2
 8004116:	461d      	mov	r5, r3
 8004118:	4643      	mov	r3, r8
 800411a:	18e3      	adds	r3, r4, r3
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	464b      	mov	r3, r9
 8004120:	eb45 0303 	adc.w	r3, r5, r3
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004132:	4629      	mov	r1, r5
 8004134:	028b      	lsls	r3, r1, #10
 8004136:	4621      	mov	r1, r4
 8004138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800413c:	4621      	mov	r1, r4
 800413e:	028a      	lsls	r2, r1, #10
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004146:	2200      	movs	r2, #0
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	61fa      	str	r2, [r7, #28]
 800414c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004150:	f7fc f8ce 	bl	80002f0 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4613      	mov	r3, r2
 800415a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_RCC_GetSysClockFreq+0x200>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	3301      	adds	r3, #1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800416c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800416e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004176:	e002      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004178:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x204>)
 800417a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800417c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004180:	4618      	mov	r0, r3
 8004182:	3750      	adds	r7, #80	@ 0x50
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	00f42400 	.word	0x00f42400
 8004194:	007a1200 	.word	0x007a1200

08004198 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b03      	ldr	r3, [pc, #12]	@ (80041ac <HAL_RCC_GetHCLKFreq+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000000 	.word	0x20000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b4:	f7ff fff0 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0a9b      	lsrs	r3, r3, #10
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	@ (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	080089e0 	.word	0x080089e0

080041d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041dc:	f7ff ffdc 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	@ (80041f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0b5b      	lsrs	r3, r3, #13
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4903      	ldr	r1, [pc, #12]	@ (80041fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	080089e0 	.word	0x080089e0

08004200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004228:	4b69      	ldr	r3, [pc, #420]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4a68      	ldr	r2, [pc, #416]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004232:	6093      	str	r3, [r2, #8]
 8004234:	4b66      	ldr	r3, [pc, #408]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423c:	4964      	ldr	r1, [pc, #400]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d017      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800425a:	4b5d      	ldr	r3, [pc, #372]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004260:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004268:	4959      	ldr	r1, [pc, #356]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004278:	d101      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004296:	4b4e      	ldr	r3, [pc, #312]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004298:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800429c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	494a      	ldr	r1, [pc, #296]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042c2:	2301      	movs	r3, #1
 80042c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042d2:	2301      	movs	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 808b 	beq.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b3a      	ldr	r3, [pc, #232]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	4a39      	ldr	r2, [pc, #228]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f0:	4b37      	ldr	r3, [pc, #220]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042fc:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a34      	ldr	r2, [pc, #208]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004308:	f7fd f924 	bl	8001554 <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004310:	f7fd f920 	bl	8001554 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	@ 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e38f      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004322:	4b2c      	ldr	r3, [pc, #176]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800432e:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004336:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d035      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	429a      	cmp	r2, r3
 800434a:	d02e      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800434c:	4b20      	ldr	r3, [pc, #128]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004354:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004356:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435a:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004362:	4b1b      	ldr	r3, [pc, #108]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	4a1a      	ldr	r2, [pc, #104]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800436e:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004374:	4b16      	ldr	r3, [pc, #88]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b01      	cmp	r3, #1
 800437e:	d114      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd f8e8 	bl	8001554 <HAL_GetTick>
 8004384:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004386:	e00a      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fd f8e4 	bl	8001554 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e351      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ee      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b6:	d111      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043c6:	400b      	ands	r3, r1
 80043c8:	4901      	ldr	r1, [pc, #4]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40007000 	.word	0x40007000
 80043d8:	0ffffcff 	.word	0x0ffffcff
 80043dc:	4bac      	ldr	r3, [pc, #688]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4aab      	ldr	r2, [pc, #684]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80043e6:	6093      	str	r3, [r2, #8]
 80043e8:	4ba9      	ldr	r3, [pc, #676]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f4:	49a6      	ldr	r1, [pc, #664]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	d010      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004406:	4ba2      	ldr	r3, [pc, #648]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800440c:	4aa0      	ldr	r2, [pc, #640]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004412:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004416:	4b9e      	ldr	r3, [pc, #632]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004418:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004420:	499b      	ldr	r1, [pc, #620]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004434:	4b96      	ldr	r3, [pc, #600]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004442:	4993      	ldr	r1, [pc, #588]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004456:	4b8e      	ldr	r3, [pc, #568]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004464:	498a      	ldr	r1, [pc, #552]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004478:	4b85      	ldr	r3, [pc, #532]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004486:	4982      	ldr	r1, [pc, #520]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800449a:	4b7d      	ldr	r3, [pc, #500]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4979      	ldr	r1, [pc, #484]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044bc:	4b74      	ldr	r3, [pc, #464]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	4971      	ldr	r1, [pc, #452]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044de:	4b6c      	ldr	r3, [pc, #432]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	f023 020c 	bic.w	r2, r3, #12
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ec:	4968      	ldr	r1, [pc, #416]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004500:	4b63      	ldr	r3, [pc, #396]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	4960      	ldr	r1, [pc, #384]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004522:	4b5b      	ldr	r3, [pc, #364]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004528:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004530:	4957      	ldr	r1, [pc, #348]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004544:	4b52      	ldr	r3, [pc, #328]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004552:	494f      	ldr	r1, [pc, #316]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004566:	4b4a      	ldr	r3, [pc, #296]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004574:	4946      	ldr	r1, [pc, #280]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004588:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004596:	493e      	ldr	r1, [pc, #248]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045aa:	4b39      	ldr	r3, [pc, #228]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b8:	4935      	ldr	r1, [pc, #212]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045cc:	4b30      	ldr	r3, [pc, #192]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045da:	492d      	ldr	r1, [pc, #180]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d011      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045ee:	4b28      	ldr	r3, [pc, #160]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045fc:	4924      	ldr	r1, [pc, #144]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800462e:	4b18      	ldr	r3, [pc, #96]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004634:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800463c:	4914      	ldr	r1, [pc, #80]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004656:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004660:	490b      	ldr	r1, [pc, #44]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00f      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004674:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004684:	4902      	ldr	r1, [pc, #8]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a0:	4b8a      	ldr	r3, [pc, #552]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	4986      	ldr	r1, [pc, #536]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046c4:	4b81      	ldr	r3, [pc, #516]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046d4:	497d      	ldr	r1, [pc, #500]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d006      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80d6 	beq.w	800489c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f0:	4b76      	ldr	r3, [pc, #472]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a75      	ldr	r2, [pc, #468]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fc ff2a 	bl	8001554 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004704:	f7fc ff26 	bl	8001554 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e195      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004716:	4b6d      	ldr	r3, [pc, #436]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d021      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11d      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004736:	4b65      	ldr	r3, [pc, #404]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004744:	4b61      	ldr	r3, [pc, #388]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800474a:	0e1b      	lsrs	r3, r3, #24
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	019a      	lsls	r2, r3, #6
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	041b      	lsls	r3, r3, #16
 800475c:	431a      	orrs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	071b      	lsls	r3, r3, #28
 800476a:	4958      	ldr	r1, [pc, #352]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02e      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800479c:	d129      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800479e:	4b4b      	ldr	r3, [pc, #300]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ac:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b2:	0f1b      	lsrs	r3, r3, #28
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	019a      	lsls	r2, r3, #6
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	061b      	lsls	r3, r3, #24
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	071b      	lsls	r3, r3, #28
 80047d2:	493e      	ldr	r1, [pc, #248]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047da:	4b3c      	ldr	r3, [pc, #240]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e0:	f023 021f 	bic.w	r2, r3, #31
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	3b01      	subs	r3, #1
 80047ea:	4938      	ldr	r1, [pc, #224]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01d      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047fe:	4b33      	ldr	r3, [pc, #204]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004804:	0e1b      	lsrs	r3, r3, #24
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800480c:	4b2f      	ldr	r3, [pc, #188]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004812:	0f1b      	lsrs	r3, r3, #28
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	019a      	lsls	r2, r3, #6
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	431a      	orrs	r2, r3
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	061b      	lsls	r3, r3, #24
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	4926      	ldr	r1, [pc, #152]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	019a      	lsls	r2, r3, #6
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	071b      	lsls	r3, r3, #28
 8004862:	491a      	ldr	r1, [pc, #104]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800486a:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a17      	ldr	r2, [pc, #92]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004870:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004876:	f7fc fe6d 	bl	8001554 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800487e:	f7fc fe69 	bl	8001554 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b64      	cmp	r3, #100	@ 0x64
 800488a:	d901      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e0d8      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004890:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	f040 80ce 	bne.w	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048a4:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fc fe50 	bl	8001554 <HAL_GetTick>
 80048b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048b6:	e00b      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048b8:	f7fc fe4c 	bl	8001554 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	@ 0x64
 80048c4:	d904      	bls.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0bb      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048d0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048dc:	d0ec      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02e      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d12a      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004906:	4b51      	ldr	r3, [pc, #324]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004914:	4b4d      	ldr	r3, [pc, #308]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491a:	0f1b      	lsrs	r3, r3, #28
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	019a      	lsls	r2, r3, #6
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	4944      	ldr	r1, [pc, #272]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004942:	4b42      	ldr	r3, [pc, #264]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004948:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	3b01      	subs	r3, #1
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	493d      	ldr	r1, [pc, #244]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d022      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800496c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004970:	d11d      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004972:	4b36      	ldr	r3, [pc, #216]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004978:	0e1b      	lsrs	r3, r3, #24
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004980:	4b32      	ldr	r3, [pc, #200]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004986:	0f1b      	lsrs	r3, r3, #28
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	019a      	lsls	r2, r3, #6
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	431a      	orrs	r2, r3
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	071b      	lsls	r3, r3, #28
 80049a6:	4929      	ldr	r1, [pc, #164]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d028      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049ba:	4b24      	ldr	r3, [pc, #144]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c0:	0e1b      	lsrs	r3, r3, #24
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049c8:	4b20      	ldr	r3, [pc, #128]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	019a      	lsls	r2, r3, #6
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	431a      	orrs	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	071b      	lsls	r3, r3, #28
 80049ee:	4917      	ldr	r1, [pc, #92]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	4911      	ldr	r1, [pc, #68]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0e      	ldr	r2, [pc, #56]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a18:	f7fc fd9c 	bl	8001554 <HAL_GetTick>
 8004a1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a20:	f7fc fd98 	bl	8001554 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	@ 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e007      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a3e:	d1ef      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800

08004a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e049      	b.n	8004af6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc fade 	bl	8001038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 f970 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e04c      	b.n	8004bb2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a26      	ldr	r2, [pc, #152]	@ (8004bc0 <HAL_TIM_Base_Start+0xc0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d022      	beq.n	8004b70 <HAL_TIM_Base_Start+0x70>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b32:	d01d      	beq.n	8004b70 <HAL_TIM_Base_Start+0x70>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a22      	ldr	r2, [pc, #136]	@ (8004bc4 <HAL_TIM_Base_Start+0xc4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d018      	beq.n	8004b70 <HAL_TIM_Base_Start+0x70>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a21      	ldr	r2, [pc, #132]	@ (8004bc8 <HAL_TIM_Base_Start+0xc8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d013      	beq.n	8004b70 <HAL_TIM_Base_Start+0x70>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <HAL_TIM_Base_Start+0xcc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00e      	beq.n	8004b70 <HAL_TIM_Base_Start+0x70>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd0 <HAL_TIM_Base_Start+0xd0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d009      	beq.n	8004b70 <HAL_TIM_Base_Start+0x70>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd4 <HAL_TIM_Base_Start+0xd4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIM_Base_Start+0x70>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd8 <HAL_TIM_Base_Start+0xd8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d115      	bne.n	8004b9c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_TIM_Base_Start+0xdc>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d015      	beq.n	8004bae <HAL_TIM_Base_Start+0xae>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b88:	d011      	beq.n	8004bae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	e008      	b.n	8004bae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e000      	b.n	8004bb0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40010400 	.word	0x40010400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40001800 	.word	0x40001800
 8004bdc:	00010007 	.word	0x00010007

08004be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_ConfigClockSource+0x1c>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0b4      	b.n	8004d66 <HAL_TIM_ConfigClockSource+0x186>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	4b56      	ldr	r3, [pc, #344]	@ (8004d70 <HAL_TIM_ConfigClockSource+0x190>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c34:	d03e      	beq.n	8004cb4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3a:	f200 8087 	bhi.w	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c42:	f000 8086 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x172>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	d87f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c4c:	2b70      	cmp	r3, #112	@ 0x70
 8004c4e:	d01a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0xa6>
 8004c50:	2b70      	cmp	r3, #112	@ 0x70
 8004c52:	d87b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b60      	cmp	r3, #96	@ 0x60
 8004c56:	d050      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0x11a>
 8004c58:	2b60      	cmp	r3, #96	@ 0x60
 8004c5a:	d877      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b50      	cmp	r3, #80	@ 0x50
 8004c5e:	d03c      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0xfa>
 8004c60:	2b50      	cmp	r3, #80	@ 0x50
 8004c62:	d873      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d058      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0x13a>
 8004c68:	2b40      	cmp	r3, #64	@ 0x40
 8004c6a:	d86f      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b30      	cmp	r3, #48	@ 0x30
 8004c6e:	d064      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	2b30      	cmp	r3, #48	@ 0x30
 8004c72:	d86b      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d060      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d867      	bhi.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d05c      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d05a      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	e062      	b.n	8004d4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c96:	f000 f98d 	bl	8004fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
      break;
 8004cb2:	e04f      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	f000 f976 	bl	8004fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cd6:	609a      	str	r2, [r3, #8]
      break;
 8004cd8:	e03c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f000 f8ea 	bl	8004ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2150      	movs	r1, #80	@ 0x50
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f943 	bl	8004f7e <TIM_ITRx_SetConfig>
      break;
 8004cf8:	e02c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d06:	461a      	mov	r2, r3
 8004d08:	f000 f909 	bl	8004f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2160      	movs	r1, #96	@ 0x60
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f933 	bl	8004f7e <TIM_ITRx_SetConfig>
      break;
 8004d18:	e01c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 f8ca 	bl	8004ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2140      	movs	r1, #64	@ 0x40
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f923 	bl	8004f7e <TIM_ITRx_SetConfig>
      break;
 8004d38:	e00c      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f000 f91a 	bl	8004f7e <TIM_ITRx_SetConfig>
      break;
 8004d4a:	e003      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d50:	e000      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	fffeff88 	.word	0xfffeff88

08004d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a43      	ldr	r2, [pc, #268]	@ (8004e94 <TIM_Base_SetConfig+0x120>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d92:	d00f      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a40      	ldr	r2, [pc, #256]	@ (8004e98 <TIM_Base_SetConfig+0x124>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e9c <TIM_Base_SetConfig+0x128>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea0 <TIM_Base_SetConfig+0x12c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea4 <TIM_Base_SetConfig+0x130>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d108      	bne.n	8004dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a32      	ldr	r2, [pc, #200]	@ (8004e94 <TIM_Base_SetConfig+0x120>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd4:	d027      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e98 <TIM_Base_SetConfig+0x124>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d023      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e9c <TIM_Base_SetConfig+0x128>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d01f      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea0 <TIM_Base_SetConfig+0x12c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea4 <TIM_Base_SetConfig+0x130>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea8 <TIM_Base_SetConfig+0x134>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2a      	ldr	r2, [pc, #168]	@ (8004eac <TIM_Base_SetConfig+0x138>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a29      	ldr	r2, [pc, #164]	@ (8004eb0 <TIM_Base_SetConfig+0x13c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a28      	ldr	r2, [pc, #160]	@ (8004eb4 <TIM_Base_SetConfig+0x140>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a27      	ldr	r2, [pc, #156]	@ (8004eb8 <TIM_Base_SetConfig+0x144>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <TIM_Base_SetConfig+0x148>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a0e      	ldr	r2, [pc, #56]	@ (8004e94 <TIM_Base_SetConfig+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_Base_SetConfig+0xf2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a10      	ldr	r2, [pc, #64]	@ (8004ea4 <TIM_Base_SetConfig+0x130>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d103      	bne.n	8004e6e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f043 0204 	orr.w	r2, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	601a      	str	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40010400 	.word	0x40010400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800
 8004eb4:	40001800 	.word	0x40001800
 8004eb8:	40001c00 	.word	0x40001c00
 8004ebc:	40002000 	.word	0x40002000

08004ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f023 0201 	bic.w	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 030a 	bic.w	r3, r3, #10
 8004efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b087      	sub	sp, #28
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f023 0210 	bic.w	r2, r3, #16
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	031b      	lsls	r3, r3, #12
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b085      	sub	sp, #20
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f043 0307 	orr.w	r3, r3, #7
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005008:	2302      	movs	r3, #2
 800500a:	e06d      	b.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a30      	ldr	r2, [pc, #192]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a2f      	ldr	r2, [pc, #188]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d108      	bne.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a20      	ldr	r2, [pc, #128]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507e:	d01d      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1d      	ldr	r2, [pc, #116]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1a      	ldr	r2, [pc, #104]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a15      	ldr	r2, [pc, #84]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a15      	ldr	r2, [pc, #84]	@ (800510c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10c      	bne.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40010400 	.word	0x40010400
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40014000 	.word	0x40014000
 800510c:	40001800 	.word	0x40001800

08005110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e040      	b.n	80051a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fb ff9e 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	@ 0x24
 800513c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fb16 	bl	8005788 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8af 	bl	80052c0 <UART_SetConfig>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e01b      	b.n	80051a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800517a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800518a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fb95 	bl	80058cc <UART_CheckIdleState>
 80051a2:	4603      	mov	r3, r0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	@ 0x28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	4613      	mov	r3, r2
 80051ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d177      	bne.n	80052b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_UART_Transmit+0x24>
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e070      	b.n	80052b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2221      	movs	r2, #33	@ 0x21
 80051e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e2:	f7fc f9b7 	bl	8001554 <HAL_GetTick>
 80051e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	88fa      	ldrh	r2, [r7, #6]
 80051ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005200:	d108      	bne.n	8005214 <HAL_UART_Transmit+0x68>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	e003      	b.n	800521c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800521c:	e02f      	b.n	800527e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	2180      	movs	r1, #128	@ 0x80
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fbf7 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e03b      	b.n	80052b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005252:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	3302      	adds	r3, #2
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	e007      	b.n	800526c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	781a      	ldrb	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3301      	adds	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1c9      	bne.n	800521e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	2140      	movs	r1, #64	@ 0x40
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fbc1 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e005      	b.n	80052b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4ba6      	ldr	r3, [pc, #664]	@ (8005584 <UART_SetConfig+0x2c4>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	430b      	orrs	r3, r1
 80052f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a94      	ldr	r2, [pc, #592]	@ (8005588 <UART_SetConfig+0x2c8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d120      	bne.n	800537e <UART_SetConfig+0xbe>
 800533c:	4b93      	ldr	r3, [pc, #588]	@ (800558c <UART_SetConfig+0x2cc>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b03      	cmp	r3, #3
 8005348:	d816      	bhi.n	8005378 <UART_SetConfig+0xb8>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x90>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005361 	.word	0x08005361
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005367 	.word	0x08005367
 800535c:	08005373 	.word	0x08005373
 8005360:	2301      	movs	r3, #1
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e150      	b.n	8005608 <UART_SetConfig+0x348>
 8005366:	2302      	movs	r3, #2
 8005368:	77fb      	strb	r3, [r7, #31]
 800536a:	e14d      	b.n	8005608 <UART_SetConfig+0x348>
 800536c:	2304      	movs	r3, #4
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e14a      	b.n	8005608 <UART_SetConfig+0x348>
 8005372:	2308      	movs	r3, #8
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e147      	b.n	8005608 <UART_SetConfig+0x348>
 8005378:	2310      	movs	r3, #16
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e144      	b.n	8005608 <UART_SetConfig+0x348>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a83      	ldr	r2, [pc, #524]	@ (8005590 <UART_SetConfig+0x2d0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d132      	bne.n	80053ee <UART_SetConfig+0x12e>
 8005388:	4b80      	ldr	r3, [pc, #512]	@ (800558c <UART_SetConfig+0x2cc>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	f003 030c 	and.w	r3, r3, #12
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d828      	bhi.n	80053e8 <UART_SetConfig+0x128>
 8005396:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <UART_SetConfig+0xdc>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053e9 	.word	0x080053e9
 80053a4:	080053e9 	.word	0x080053e9
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053dd 	.word	0x080053dd
 80053b0:	080053e9 	.word	0x080053e9
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	080053e9 	.word	0x080053e9
 80053bc:	080053d7 	.word	0x080053d7
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053e9 	.word	0x080053e9
 80053cc:	080053e3 	.word	0x080053e3
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e118      	b.n	8005608 <UART_SetConfig+0x348>
 80053d6:	2302      	movs	r3, #2
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e115      	b.n	8005608 <UART_SetConfig+0x348>
 80053dc:	2304      	movs	r3, #4
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e112      	b.n	8005608 <UART_SetConfig+0x348>
 80053e2:	2308      	movs	r3, #8
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e10f      	b.n	8005608 <UART_SetConfig+0x348>
 80053e8:	2310      	movs	r3, #16
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e10c      	b.n	8005608 <UART_SetConfig+0x348>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a68      	ldr	r2, [pc, #416]	@ (8005594 <UART_SetConfig+0x2d4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d120      	bne.n	800543a <UART_SetConfig+0x17a>
 80053f8:	4b64      	ldr	r3, [pc, #400]	@ (800558c <UART_SetConfig+0x2cc>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005402:	2b30      	cmp	r3, #48	@ 0x30
 8005404:	d013      	beq.n	800542e <UART_SetConfig+0x16e>
 8005406:	2b30      	cmp	r3, #48	@ 0x30
 8005408:	d814      	bhi.n	8005434 <UART_SetConfig+0x174>
 800540a:	2b20      	cmp	r3, #32
 800540c:	d009      	beq.n	8005422 <UART_SetConfig+0x162>
 800540e:	2b20      	cmp	r3, #32
 8005410:	d810      	bhi.n	8005434 <UART_SetConfig+0x174>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <UART_SetConfig+0x15c>
 8005416:	2b10      	cmp	r3, #16
 8005418:	d006      	beq.n	8005428 <UART_SetConfig+0x168>
 800541a:	e00b      	b.n	8005434 <UART_SetConfig+0x174>
 800541c:	2300      	movs	r3, #0
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e0f2      	b.n	8005608 <UART_SetConfig+0x348>
 8005422:	2302      	movs	r3, #2
 8005424:	77fb      	strb	r3, [r7, #31]
 8005426:	e0ef      	b.n	8005608 <UART_SetConfig+0x348>
 8005428:	2304      	movs	r3, #4
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e0ec      	b.n	8005608 <UART_SetConfig+0x348>
 800542e:	2308      	movs	r3, #8
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e0e9      	b.n	8005608 <UART_SetConfig+0x348>
 8005434:	2310      	movs	r3, #16
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e0e6      	b.n	8005608 <UART_SetConfig+0x348>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a56      	ldr	r2, [pc, #344]	@ (8005598 <UART_SetConfig+0x2d8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d120      	bne.n	8005486 <UART_SetConfig+0x1c6>
 8005444:	4b51      	ldr	r3, [pc, #324]	@ (800558c <UART_SetConfig+0x2cc>)
 8005446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800544e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005450:	d013      	beq.n	800547a <UART_SetConfig+0x1ba>
 8005452:	2bc0      	cmp	r3, #192	@ 0xc0
 8005454:	d814      	bhi.n	8005480 <UART_SetConfig+0x1c0>
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d009      	beq.n	800546e <UART_SetConfig+0x1ae>
 800545a:	2b80      	cmp	r3, #128	@ 0x80
 800545c:	d810      	bhi.n	8005480 <UART_SetConfig+0x1c0>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <UART_SetConfig+0x1a8>
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d006      	beq.n	8005474 <UART_SetConfig+0x1b4>
 8005466:	e00b      	b.n	8005480 <UART_SetConfig+0x1c0>
 8005468:	2300      	movs	r3, #0
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e0cc      	b.n	8005608 <UART_SetConfig+0x348>
 800546e:	2302      	movs	r3, #2
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e0c9      	b.n	8005608 <UART_SetConfig+0x348>
 8005474:	2304      	movs	r3, #4
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e0c6      	b.n	8005608 <UART_SetConfig+0x348>
 800547a:	2308      	movs	r3, #8
 800547c:	77fb      	strb	r3, [r7, #31]
 800547e:	e0c3      	b.n	8005608 <UART_SetConfig+0x348>
 8005480:	2310      	movs	r3, #16
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e0c0      	b.n	8005608 <UART_SetConfig+0x348>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a44      	ldr	r2, [pc, #272]	@ (800559c <UART_SetConfig+0x2dc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d125      	bne.n	80054dc <UART_SetConfig+0x21c>
 8005490:	4b3e      	ldr	r3, [pc, #248]	@ (800558c <UART_SetConfig+0x2cc>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549e:	d017      	beq.n	80054d0 <UART_SetConfig+0x210>
 80054a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054a4:	d817      	bhi.n	80054d6 <UART_SetConfig+0x216>
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054aa:	d00b      	beq.n	80054c4 <UART_SetConfig+0x204>
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b0:	d811      	bhi.n	80054d6 <UART_SetConfig+0x216>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <UART_SetConfig+0x1fe>
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ba:	d006      	beq.n	80054ca <UART_SetConfig+0x20a>
 80054bc:	e00b      	b.n	80054d6 <UART_SetConfig+0x216>
 80054be:	2300      	movs	r3, #0
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e0a1      	b.n	8005608 <UART_SetConfig+0x348>
 80054c4:	2302      	movs	r3, #2
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e09e      	b.n	8005608 <UART_SetConfig+0x348>
 80054ca:	2304      	movs	r3, #4
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e09b      	b.n	8005608 <UART_SetConfig+0x348>
 80054d0:	2308      	movs	r3, #8
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e098      	b.n	8005608 <UART_SetConfig+0x348>
 80054d6:	2310      	movs	r3, #16
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e095      	b.n	8005608 <UART_SetConfig+0x348>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2f      	ldr	r2, [pc, #188]	@ (80055a0 <UART_SetConfig+0x2e0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d125      	bne.n	8005532 <UART_SetConfig+0x272>
 80054e6:	4b29      	ldr	r3, [pc, #164]	@ (800558c <UART_SetConfig+0x2cc>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054f4:	d017      	beq.n	8005526 <UART_SetConfig+0x266>
 80054f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054fa:	d817      	bhi.n	800552c <UART_SetConfig+0x26c>
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005500:	d00b      	beq.n	800551a <UART_SetConfig+0x25a>
 8005502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005506:	d811      	bhi.n	800552c <UART_SetConfig+0x26c>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <UART_SetConfig+0x254>
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005510:	d006      	beq.n	8005520 <UART_SetConfig+0x260>
 8005512:	e00b      	b.n	800552c <UART_SetConfig+0x26c>
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e076      	b.n	8005608 <UART_SetConfig+0x348>
 800551a:	2302      	movs	r3, #2
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e073      	b.n	8005608 <UART_SetConfig+0x348>
 8005520:	2304      	movs	r3, #4
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e070      	b.n	8005608 <UART_SetConfig+0x348>
 8005526:	2308      	movs	r3, #8
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e06d      	b.n	8005608 <UART_SetConfig+0x348>
 800552c:	2310      	movs	r3, #16
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e06a      	b.n	8005608 <UART_SetConfig+0x348>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <UART_SetConfig+0x2e4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d138      	bne.n	80055ae <UART_SetConfig+0x2ee>
 800553c:	4b13      	ldr	r3, [pc, #76]	@ (800558c <UART_SetConfig+0x2cc>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005542:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005546:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800554a:	d017      	beq.n	800557c <UART_SetConfig+0x2bc>
 800554c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005550:	d82a      	bhi.n	80055a8 <UART_SetConfig+0x2e8>
 8005552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005556:	d00b      	beq.n	8005570 <UART_SetConfig+0x2b0>
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800555c:	d824      	bhi.n	80055a8 <UART_SetConfig+0x2e8>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <UART_SetConfig+0x2aa>
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005566:	d006      	beq.n	8005576 <UART_SetConfig+0x2b6>
 8005568:	e01e      	b.n	80055a8 <UART_SetConfig+0x2e8>
 800556a:	2300      	movs	r3, #0
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e04b      	b.n	8005608 <UART_SetConfig+0x348>
 8005570:	2302      	movs	r3, #2
 8005572:	77fb      	strb	r3, [r7, #31]
 8005574:	e048      	b.n	8005608 <UART_SetConfig+0x348>
 8005576:	2304      	movs	r3, #4
 8005578:	77fb      	strb	r3, [r7, #31]
 800557a:	e045      	b.n	8005608 <UART_SetConfig+0x348>
 800557c:	2308      	movs	r3, #8
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e042      	b.n	8005608 <UART_SetConfig+0x348>
 8005582:	bf00      	nop
 8005584:	efff69f3 	.word	0xefff69f3
 8005588:	40011000 	.word	0x40011000
 800558c:	40023800 	.word	0x40023800
 8005590:	40004400 	.word	0x40004400
 8005594:	40004800 	.word	0x40004800
 8005598:	40004c00 	.word	0x40004c00
 800559c:	40005000 	.word	0x40005000
 80055a0:	40011400 	.word	0x40011400
 80055a4:	40007800 	.word	0x40007800
 80055a8:	2310      	movs	r3, #16
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e02c      	b.n	8005608 <UART_SetConfig+0x348>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a72      	ldr	r2, [pc, #456]	@ (800577c <UART_SetConfig+0x4bc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d125      	bne.n	8005604 <UART_SetConfig+0x344>
 80055b8:	4b71      	ldr	r3, [pc, #452]	@ (8005780 <UART_SetConfig+0x4c0>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80055c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80055c6:	d017      	beq.n	80055f8 <UART_SetConfig+0x338>
 80055c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80055cc:	d817      	bhi.n	80055fe <UART_SetConfig+0x33e>
 80055ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d2:	d00b      	beq.n	80055ec <UART_SetConfig+0x32c>
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d8:	d811      	bhi.n	80055fe <UART_SetConfig+0x33e>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <UART_SetConfig+0x326>
 80055de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e2:	d006      	beq.n	80055f2 <UART_SetConfig+0x332>
 80055e4:	e00b      	b.n	80055fe <UART_SetConfig+0x33e>
 80055e6:	2300      	movs	r3, #0
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e00d      	b.n	8005608 <UART_SetConfig+0x348>
 80055ec:	2302      	movs	r3, #2
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e00a      	b.n	8005608 <UART_SetConfig+0x348>
 80055f2:	2304      	movs	r3, #4
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e007      	b.n	8005608 <UART_SetConfig+0x348>
 80055f8:	2308      	movs	r3, #8
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e004      	b.n	8005608 <UART_SetConfig+0x348>
 80055fe:	2310      	movs	r3, #16
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e001      	b.n	8005608 <UART_SetConfig+0x348>
 8005604:	2310      	movs	r3, #16
 8005606:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005610:	d15b      	bne.n	80056ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005612:	7ffb      	ldrb	r3, [r7, #31]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d828      	bhi.n	800566a <UART_SetConfig+0x3aa>
 8005618:	a201      	add	r2, pc, #4	@ (adr r2, 8005620 <UART_SetConfig+0x360>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005645 	.word	0x08005645
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005655 	.word	0x08005655
 800562c:	0800566b 	.word	0x0800566b
 8005630:	0800565b 	.word	0x0800565b
 8005634:	0800566b 	.word	0x0800566b
 8005638:	0800566b 	.word	0x0800566b
 800563c:	0800566b 	.word	0x0800566b
 8005640:	08005663 	.word	0x08005663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7fe fdb4 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005648:	61b8      	str	r0, [r7, #24]
        break;
 800564a:	e013      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800564c:	f7fe fdc4 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 8005650:	61b8      	str	r0, [r7, #24]
        break;
 8005652:	e00f      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005654:	4b4b      	ldr	r3, [pc, #300]	@ (8005784 <UART_SetConfig+0x4c4>)
 8005656:	61bb      	str	r3, [r7, #24]
        break;
 8005658:	e00c      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565a:	f7fe fc97 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 800565e:	61b8      	str	r0, [r7, #24]
        break;
 8005660:	e008      	b.n	8005674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005666:	61bb      	str	r3, [r7, #24]
        break;
 8005668:	e004      	b.n	8005674 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	77bb      	strb	r3, [r7, #30]
        break;
 8005672:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d074      	beq.n	8005764 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	005a      	lsls	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	441a      	add	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b0f      	cmp	r3, #15
 8005694:	d916      	bls.n	80056c4 <UART_SetConfig+0x404>
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569c:	d212      	bcs.n	80056c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f023 030f 	bic.w	r3, r3, #15
 80056a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	89fa      	ldrh	r2, [r7, #14]
 80056c0:	60da      	str	r2, [r3, #12]
 80056c2:	e04f      	b.n	8005764 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	77bb      	strb	r3, [r7, #30]
 80056c8:	e04c      	b.n	8005764 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d828      	bhi.n	8005722 <UART_SetConfig+0x462>
 80056d0:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <UART_SetConfig+0x418>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005705 	.word	0x08005705
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	08005723 	.word	0x08005723
 80056e8:	08005713 	.word	0x08005713
 80056ec:	08005723 	.word	0x08005723
 80056f0:	08005723 	.word	0x08005723
 80056f4:	08005723 	.word	0x08005723
 80056f8:	0800571b 	.word	0x0800571b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056fc:	f7fe fd58 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005700:	61b8      	str	r0, [r7, #24]
        break;
 8005702:	e013      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005704:	f7fe fd68 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 8005708:	61b8      	str	r0, [r7, #24]
        break;
 800570a:	e00f      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800570c:	4b1d      	ldr	r3, [pc, #116]	@ (8005784 <UART_SetConfig+0x4c4>)
 800570e:	61bb      	str	r3, [r7, #24]
        break;
 8005710:	e00c      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005712:	f7fe fc3b 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8005716:	61b8      	str	r0, [r7, #24]
        break;
 8005718:	e008      	b.n	800572c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800571a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571e:	61bb      	str	r3, [r7, #24]
        break;
 8005720:	e004      	b.n	800572c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	77bb      	strb	r3, [r7, #30]
        break;
 800572a:	bf00      	nop
    }

    if (pclk != 0U)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d018      	beq.n	8005764 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	085a      	lsrs	r2, r3, #1
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	441a      	add	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b0f      	cmp	r3, #15
 800574a:	d909      	bls.n	8005760 <UART_SetConfig+0x4a0>
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005752:	d205      	bcs.n	8005760 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	e001      	b.n	8005764 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005770:	7fbb      	ldrb	r3, [r7, #30]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40007c00 	.word	0x40007c00
 8005780:	40023800 	.word	0x40023800
 8005784:	00f42400 	.word	0x00f42400

08005788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01a      	beq.n	800589e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005886:	d10a      	bne.n	800589e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b098      	sub	sp, #96	@ 0x60
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058dc:	f7fb fe3a 	bl	8001554 <HAL_GetTick>
 80058e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d12e      	bne.n	800594e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f8:	2200      	movs	r2, #0
 80058fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f88c 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d021      	beq.n	800594e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800591e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005928:	647b      	str	r3, [r7, #68]	@ 0x44
 800592a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800592e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e6      	bne.n	800590a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e062      	b.n	8005a14 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d149      	bne.n	80059f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005964:	2200      	movs	r2, #0
 8005966:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f856 	bl	8005a1c <UART_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03c      	beq.n	80059f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	623b      	str	r3, [r7, #32]
   return(result);
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800598a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
 8005996:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800599a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059c8:	61fa      	str	r2, [r7, #28]
 80059ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	617b      	str	r3, [r7, #20]
   return(result);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e011      	b.n	8005a14 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3758      	adds	r7, #88	@ 0x58
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	e04f      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d04b      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fb fd8d 	bl	8001554 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e04e      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d037      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b80      	cmp	r3, #128	@ 0x80
 8005a62:	d034      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d031      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d110      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f838 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e029      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aa8:	d111      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f81e 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d0a0      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b095      	sub	sp, #84	@ 0x54
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e6      	bne.n	8005afe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d118      	bne.n	8005b9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	613b      	str	r3, [r7, #16]
   return(result);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e6      	bne.n	8005b6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bb2:	bf00      	nop
 8005bb4:	3754      	adds	r7, #84	@ 0x54
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	f107 001c 	add.w	r0, r7, #28
 8005bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d121      	bne.n	8005c1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <USB_CoreInit+0xb0>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d105      	bne.n	8005c12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa92 	bl	800613c <USB_CoreReset>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	e010      	b.n	8005c40 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa86 	bl	800613c <USB_CoreReset>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c40:	7fbb      	ldrb	r3, [r7, #30]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10b      	bne.n	8005c5e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f043 0206 	orr.w	r2, r3, #6
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f043 0220 	orr.w	r2, r3, #32
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c6a:	b004      	add	sp, #16
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	ffbdffbf 	.word	0xffbdffbf

08005c74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f023 0201 	bic.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d115      	bne.n	8005ce4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cc4:	200a      	movs	r0, #10
 8005cc6:	f7fb fc51 	bl	800156c <HAL_Delay>
      ms += 10U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	330a      	adds	r3, #10
 8005cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fa25 	bl	8006120 <USB_GetMode>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d01e      	beq.n	8005d1a <USB_SetCurrentMode+0x84>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ce0:	d9f0      	bls.n	8005cc4 <USB_SetCurrentMode+0x2e>
 8005ce2:	e01a      	b.n	8005d1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d115      	bne.n	8005d16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005cf6:	200a      	movs	r0, #10
 8005cf8:	f7fb fc38 	bl	800156c <HAL_Delay>
      ms += 10U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	330a      	adds	r3, #10
 8005d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa0c 	bl	8006120 <USB_GetMode>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <USB_SetCurrentMode+0x84>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d12:	d9f0      	bls.n	8005cf6 <USB_SetCurrentMode+0x60>
 8005d14:	e001      	b.n	8005d1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e005      	b.n	8005d26 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d1e:	d101      	bne.n	8005d24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d30:	b084      	sub	sp, #16
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	e009      	b.n	8005d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3340      	adds	r3, #64	@ 0x40
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3301      	adds	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b0e      	cmp	r3, #14
 8005d68:	d9f2      	bls.n	8005d50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11c      	bne.n	8005dac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d80:	f043 0302 	orr.w	r3, r3, #2
 8005d84:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e005      	b.n	8005db8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dc4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10d      	bne.n	8005de8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f968 	bl	80060ac <USB_SetDevSpeed>
 8005ddc:	e008      	b.n	8005df0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dde:	2101      	movs	r1, #1
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f963 	bl	80060ac <USB_SetDevSpeed>
 8005de6:	e003      	b.n	8005df0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005de8:	2103      	movs	r1, #3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f95e 	bl	80060ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005df0:	2110      	movs	r1, #16
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8fa 	bl	8005fec <USB_FlushTxFifo>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f924 	bl	8006050 <USB_FlushRxFifo>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	461a      	mov	r2, r3
 8005e26:	2300      	movs	r3, #0
 8005e28:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e043      	b.n	8005ec4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e52:	d118      	bne.n	8005e86 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e66:	461a      	mov	r2, r3
 8005e68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e013      	b.n	8005e98 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	e008      	b.n	8005e98 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e92:	461a      	mov	r2, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ec8:	461a      	mov	r2, r3
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d3b5      	bcc.n	8005e3c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	e043      	b.n	8005f5e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005eec:	d118      	bne.n	8005f20 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f00:	461a      	mov	r2, r3
 8005f02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e013      	b.n	8005f32 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f16:	461a      	mov	r2, r3
 8005f18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e008      	b.n	8005f32 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2300      	movs	r3, #0
 8005f42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f62:	461a      	mov	r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d3b5      	bcc.n	8005ed6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f7c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f8a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f043 0210 	orr.w	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe4 <USB_DevInit+0x2b4>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f043 0208 	orr.w	r2, r3, #8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d105      	bne.n	8005fd4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <USB_DevInit+0x2b8>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fe0:	b004      	add	sp, #16
 8005fe2:	4770      	bx	lr
 8005fe4:	803c3800 	.word	0x803c3800
 8005fe8:	40000004 	.word	0x40000004

08005fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006006:	d901      	bls.n	800600c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e01b      	b.n	8006044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	daf2      	bge.n	8005ffa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	019b      	lsls	r3, r3, #6
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3301      	adds	r3, #1
 8006028:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006030:	d901      	bls.n	8006036 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e006      	b.n	8006044 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b20      	cmp	r3, #32
 8006040:	d0f0      	beq.n	8006024 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006068:	d901      	bls.n	800606e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e018      	b.n	80060a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	daf2      	bge.n	800605c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2210      	movs	r2, #16
 800607e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800608c:	d901      	bls.n	8006092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e006      	b.n	80060a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d0f0      	beq.n	8006080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80060f8:	f023 0303 	bic.w	r3, r3, #3
 80060fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800610c:	f043 0302 	orr.w	r3, r3, #2
 8006110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	f003 0301 	and.w	r3, r3, #1
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006154:	d901      	bls.n	800615a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e022      	b.n	80061a0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	daf2      	bge.n	8006148 <USB_CoreReset+0xc>

  count = 10U;
 8006162:	230a      	movs	r3, #10
 8006164:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006166:	e002      	b.n	800616e <USB_CoreReset+0x32>
  {
    count--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3b01      	subs	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f9      	bne.n	8006168 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f043 0201 	orr.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3301      	adds	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800618c:	d901      	bls.n	8006192 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e006      	b.n	80061a0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b01      	cmp	r3, #1
 800619c:	d0f0      	beq.n	8006180 <USB_CoreReset+0x44>

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <__cvt>:
 80061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ae:	ed2d 8b02 	vpush	{d8}
 80061b2:	eeb0 8b40 	vmov.f64	d8, d0
 80061b6:	b085      	sub	sp, #20
 80061b8:	4617      	mov	r7, r2
 80061ba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80061bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061be:	ee18 2a90 	vmov	r2, s17
 80061c2:	f025 0520 	bic.w	r5, r5, #32
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	bfb6      	itet	lt
 80061ca:	222d      	movlt	r2, #45	@ 0x2d
 80061cc:	2200      	movge	r2, #0
 80061ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80061d2:	2d46      	cmp	r5, #70	@ 0x46
 80061d4:	460c      	mov	r4, r1
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	d004      	beq.n	80061e4 <__cvt+0x38>
 80061da:	2d45      	cmp	r5, #69	@ 0x45
 80061dc:	d100      	bne.n	80061e0 <__cvt+0x34>
 80061de:	3401      	adds	r4, #1
 80061e0:	2102      	movs	r1, #2
 80061e2:	e000      	b.n	80061e6 <__cvt+0x3a>
 80061e4:	2103      	movs	r1, #3
 80061e6:	ab03      	add	r3, sp, #12
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	ab02      	add	r3, sp, #8
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4622      	mov	r2, r4
 80061f0:	4633      	mov	r3, r6
 80061f2:	eeb0 0b48 	vmov.f64	d0, d8
 80061f6:	f000 fe2f 	bl	8006e58 <_dtoa_r>
 80061fa:	2d47      	cmp	r5, #71	@ 0x47
 80061fc:	d114      	bne.n	8006228 <__cvt+0x7c>
 80061fe:	07fb      	lsls	r3, r7, #31
 8006200:	d50a      	bpl.n	8006218 <__cvt+0x6c>
 8006202:	1902      	adds	r2, r0, r4
 8006204:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	bf08      	it	eq
 800620e:	9203      	streq	r2, [sp, #12]
 8006210:	2130      	movs	r1, #48	@ 0x30
 8006212:	9b03      	ldr	r3, [sp, #12]
 8006214:	4293      	cmp	r3, r2
 8006216:	d319      	bcc.n	800624c <__cvt+0xa0>
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800621c:	1a1b      	subs	r3, r3, r0
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	b005      	add	sp, #20
 8006222:	ecbd 8b02 	vpop	{d8}
 8006226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006228:	2d46      	cmp	r5, #70	@ 0x46
 800622a:	eb00 0204 	add.w	r2, r0, r4
 800622e:	d1e9      	bne.n	8006204 <__cvt+0x58>
 8006230:	7803      	ldrb	r3, [r0, #0]
 8006232:	2b30      	cmp	r3, #48	@ 0x30
 8006234:	d107      	bne.n	8006246 <__cvt+0x9a>
 8006236:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	bf1c      	itt	ne
 8006240:	f1c4 0401 	rsbne	r4, r4, #1
 8006244:	6034      	strne	r4, [r6, #0]
 8006246:	6833      	ldr	r3, [r6, #0]
 8006248:	441a      	add	r2, r3
 800624a:	e7db      	b.n	8006204 <__cvt+0x58>
 800624c:	1c5c      	adds	r4, r3, #1
 800624e:	9403      	str	r4, [sp, #12]
 8006250:	7019      	strb	r1, [r3, #0]
 8006252:	e7de      	b.n	8006212 <__cvt+0x66>

08006254 <__exponent>:
 8006254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006256:	2900      	cmp	r1, #0
 8006258:	bfba      	itte	lt
 800625a:	4249      	neglt	r1, r1
 800625c:	232d      	movlt	r3, #45	@ 0x2d
 800625e:	232b      	movge	r3, #43	@ 0x2b
 8006260:	2909      	cmp	r1, #9
 8006262:	7002      	strb	r2, [r0, #0]
 8006264:	7043      	strb	r3, [r0, #1]
 8006266:	dd29      	ble.n	80062bc <__exponent+0x68>
 8006268:	f10d 0307 	add.w	r3, sp, #7
 800626c:	461d      	mov	r5, r3
 800626e:	270a      	movs	r7, #10
 8006270:	461a      	mov	r2, r3
 8006272:	fbb1 f6f7 	udiv	r6, r1, r7
 8006276:	fb07 1416 	mls	r4, r7, r6, r1
 800627a:	3430      	adds	r4, #48	@ 0x30
 800627c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006280:	460c      	mov	r4, r1
 8006282:	2c63      	cmp	r4, #99	@ 0x63
 8006284:	f103 33ff 	add.w	r3, r3, #4294967295
 8006288:	4631      	mov	r1, r6
 800628a:	dcf1      	bgt.n	8006270 <__exponent+0x1c>
 800628c:	3130      	adds	r1, #48	@ 0x30
 800628e:	1e94      	subs	r4, r2, #2
 8006290:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006294:	1c41      	adds	r1, r0, #1
 8006296:	4623      	mov	r3, r4
 8006298:	42ab      	cmp	r3, r5
 800629a:	d30a      	bcc.n	80062b2 <__exponent+0x5e>
 800629c:	f10d 0309 	add.w	r3, sp, #9
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	42ac      	cmp	r4, r5
 80062a4:	bf88      	it	hi
 80062a6:	2300      	movhi	r3, #0
 80062a8:	3302      	adds	r3, #2
 80062aa:	4403      	add	r3, r0
 80062ac:	1a18      	subs	r0, r3, r0
 80062ae:	b003      	add	sp, #12
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062ba:	e7ed      	b.n	8006298 <__exponent+0x44>
 80062bc:	2330      	movs	r3, #48	@ 0x30
 80062be:	3130      	adds	r1, #48	@ 0x30
 80062c0:	7083      	strb	r3, [r0, #2]
 80062c2:	70c1      	strb	r1, [r0, #3]
 80062c4:	1d03      	adds	r3, r0, #4
 80062c6:	e7f1      	b.n	80062ac <__exponent+0x58>

080062c8 <_printf_float>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	b08d      	sub	sp, #52	@ 0x34
 80062ce:	460c      	mov	r4, r1
 80062d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80062d4:	4616      	mov	r6, r2
 80062d6:	461f      	mov	r7, r3
 80062d8:	4605      	mov	r5, r0
 80062da:	f000 fcbb 	bl	8006c54 <_localeconv_r>
 80062de:	f8d0 b000 	ldr.w	fp, [r0]
 80062e2:	4658      	mov	r0, fp
 80062e4:	f7f9 fffc 	bl	80002e0 <strlen>
 80062e8:	2300      	movs	r3, #0
 80062ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ec:	f8d8 3000 	ldr.w	r3, [r8]
 80062f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	9005      	str	r0, [sp, #20]
 80062f8:	3307      	adds	r3, #7
 80062fa:	f023 0307 	bic.w	r3, r3, #7
 80062fe:	f103 0108 	add.w	r1, r3, #8
 8006302:	f8c8 1000 	str.w	r1, [r8]
 8006306:	ed93 0b00 	vldr	d0, [r3]
 800630a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006568 <_printf_float+0x2a0>
 800630e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006312:	eeb4 7b46 	vcmp.f64	d7, d6
 8006316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800631e:	dd24      	ble.n	800636a <_printf_float+0xa2>
 8006320:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006328:	d502      	bpl.n	8006330 <_printf_float+0x68>
 800632a:	232d      	movs	r3, #45	@ 0x2d
 800632c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006330:	498f      	ldr	r1, [pc, #572]	@ (8006570 <_printf_float+0x2a8>)
 8006332:	4b90      	ldr	r3, [pc, #576]	@ (8006574 <_printf_float+0x2ac>)
 8006334:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006338:	bf8c      	ite	hi
 800633a:	4688      	movhi	r8, r1
 800633c:	4698      	movls	r8, r3
 800633e:	f022 0204 	bic.w	r2, r2, #4
 8006342:	2303      	movs	r3, #3
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	6022      	str	r2, [r4, #0]
 8006348:	f04f 0a00 	mov.w	sl, #0
 800634c:	9700      	str	r7, [sp, #0]
 800634e:	4633      	mov	r3, r6
 8006350:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006352:	4621      	mov	r1, r4
 8006354:	4628      	mov	r0, r5
 8006356:	f000 f9d1 	bl	80066fc <_printf_common>
 800635a:	3001      	adds	r0, #1
 800635c:	f040 8089 	bne.w	8006472 <_printf_float+0x1aa>
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	b00d      	add	sp, #52	@ 0x34
 8006366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636a:	eeb4 0b40 	vcmp.f64	d0, d0
 800636e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006372:	d709      	bvc.n	8006388 <_printf_float+0xc0>
 8006374:	ee10 3a90 	vmov	r3, s1
 8006378:	2b00      	cmp	r3, #0
 800637a:	bfbc      	itt	lt
 800637c:	232d      	movlt	r3, #45	@ 0x2d
 800637e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006382:	497d      	ldr	r1, [pc, #500]	@ (8006578 <_printf_float+0x2b0>)
 8006384:	4b7d      	ldr	r3, [pc, #500]	@ (800657c <_printf_float+0x2b4>)
 8006386:	e7d5      	b.n	8006334 <_printf_float+0x6c>
 8006388:	6863      	ldr	r3, [r4, #4]
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006390:	d139      	bne.n	8006406 <_printf_float+0x13e>
 8006392:	2306      	movs	r3, #6
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800639a:	2300      	movs	r3, #0
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80063a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80063a6:	ab09      	add	r3, sp, #36	@ 0x24
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	6861      	ldr	r1, [r4, #4]
 80063ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063b0:	4628      	mov	r0, r5
 80063b2:	f7ff fefb 	bl	80061ac <__cvt>
 80063b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063bc:	4680      	mov	r8, r0
 80063be:	d129      	bne.n	8006414 <_printf_float+0x14c>
 80063c0:	1cc8      	adds	r0, r1, #3
 80063c2:	db02      	blt.n	80063ca <_printf_float+0x102>
 80063c4:	6863      	ldr	r3, [r4, #4]
 80063c6:	4299      	cmp	r1, r3
 80063c8:	dd41      	ble.n	800644e <_printf_float+0x186>
 80063ca:	f1a9 0902 	sub.w	r9, r9, #2
 80063ce:	fa5f f989 	uxtb.w	r9, r9
 80063d2:	3901      	subs	r1, #1
 80063d4:	464a      	mov	r2, r9
 80063d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063da:	9109      	str	r1, [sp, #36]	@ 0x24
 80063dc:	f7ff ff3a 	bl	8006254 <__exponent>
 80063e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063e2:	1813      	adds	r3, r2, r0
 80063e4:	2a01      	cmp	r2, #1
 80063e6:	4682      	mov	sl, r0
 80063e8:	6123      	str	r3, [r4, #16]
 80063ea:	dc02      	bgt.n	80063f2 <_printf_float+0x12a>
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	07d2      	lsls	r2, r2, #31
 80063f0:	d501      	bpl.n	80063f6 <_printf_float+0x12e>
 80063f2:	3301      	adds	r3, #1
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0a6      	beq.n	800634c <_printf_float+0x84>
 80063fe:	232d      	movs	r3, #45	@ 0x2d
 8006400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006404:	e7a2      	b.n	800634c <_printf_float+0x84>
 8006406:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800640a:	d1c4      	bne.n	8006396 <_printf_float+0xce>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1c2      	bne.n	8006396 <_printf_float+0xce>
 8006410:	2301      	movs	r3, #1
 8006412:	e7bf      	b.n	8006394 <_printf_float+0xcc>
 8006414:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006418:	d9db      	bls.n	80063d2 <_printf_float+0x10a>
 800641a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800641e:	d118      	bne.n	8006452 <_printf_float+0x18a>
 8006420:	2900      	cmp	r1, #0
 8006422:	6863      	ldr	r3, [r4, #4]
 8006424:	dd0b      	ble.n	800643e <_printf_float+0x176>
 8006426:	6121      	str	r1, [r4, #16]
 8006428:	b913      	cbnz	r3, 8006430 <_printf_float+0x168>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	07d0      	lsls	r0, r2, #31
 800642e:	d502      	bpl.n	8006436 <_printf_float+0x16e>
 8006430:	3301      	adds	r3, #1
 8006432:	440b      	add	r3, r1
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006438:	f04f 0a00 	mov.w	sl, #0
 800643c:	e7db      	b.n	80063f6 <_printf_float+0x12e>
 800643e:	b913      	cbnz	r3, 8006446 <_printf_float+0x17e>
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	07d2      	lsls	r2, r2, #31
 8006444:	d501      	bpl.n	800644a <_printf_float+0x182>
 8006446:	3302      	adds	r3, #2
 8006448:	e7f4      	b.n	8006434 <_printf_float+0x16c>
 800644a:	2301      	movs	r3, #1
 800644c:	e7f2      	b.n	8006434 <_printf_float+0x16c>
 800644e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006454:	4299      	cmp	r1, r3
 8006456:	db05      	blt.n	8006464 <_printf_float+0x19c>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	6121      	str	r1, [r4, #16]
 800645c:	07d8      	lsls	r0, r3, #31
 800645e:	d5ea      	bpl.n	8006436 <_printf_float+0x16e>
 8006460:	1c4b      	adds	r3, r1, #1
 8006462:	e7e7      	b.n	8006434 <_printf_float+0x16c>
 8006464:	2900      	cmp	r1, #0
 8006466:	bfd4      	ite	le
 8006468:	f1c1 0202 	rsble	r2, r1, #2
 800646c:	2201      	movgt	r2, #1
 800646e:	4413      	add	r3, r2
 8006470:	e7e0      	b.n	8006434 <_printf_float+0x16c>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	055a      	lsls	r2, r3, #21
 8006476:	d407      	bmi.n	8006488 <_printf_float+0x1c0>
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	4642      	mov	r2, r8
 800647c:	4631      	mov	r1, r6
 800647e:	4628      	mov	r0, r5
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	d12a      	bne.n	80064dc <_printf_float+0x214>
 8006486:	e76b      	b.n	8006360 <_printf_float+0x98>
 8006488:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800648c:	f240 80e0 	bls.w	8006650 <_printf_float+0x388>
 8006490:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006494:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649c:	d133      	bne.n	8006506 <_printf_float+0x23e>
 800649e:	4a38      	ldr	r2, [pc, #224]	@ (8006580 <_printf_float+0x2b8>)
 80064a0:	2301      	movs	r3, #1
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	f43f af59 	beq.w	8006360 <_printf_float+0x98>
 80064ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064b2:	4543      	cmp	r3, r8
 80064b4:	db02      	blt.n	80064bc <_printf_float+0x1f4>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	07d8      	lsls	r0, r3, #31
 80064ba:	d50f      	bpl.n	80064dc <_printf_float+0x214>
 80064bc:	9b05      	ldr	r3, [sp, #20]
 80064be:	465a      	mov	r2, fp
 80064c0:	4631      	mov	r1, r6
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b8      	blx	r7
 80064c6:	3001      	adds	r0, #1
 80064c8:	f43f af4a 	beq.w	8006360 <_printf_float+0x98>
 80064cc:	f04f 0900 	mov.w	r9, #0
 80064d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80064d4:	f104 0a1a 	add.w	sl, r4, #26
 80064d8:	45c8      	cmp	r8, r9
 80064da:	dc09      	bgt.n	80064f0 <_printf_float+0x228>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	079b      	lsls	r3, r3, #30
 80064e0:	f100 8107 	bmi.w	80066f2 <_printf_float+0x42a>
 80064e4:	68e0      	ldr	r0, [r4, #12]
 80064e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064e8:	4298      	cmp	r0, r3
 80064ea:	bfb8      	it	lt
 80064ec:	4618      	movlt	r0, r3
 80064ee:	e739      	b.n	8006364 <_printf_float+0x9c>
 80064f0:	2301      	movs	r3, #1
 80064f2:	4652      	mov	r2, sl
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b8      	blx	r7
 80064fa:	3001      	adds	r0, #1
 80064fc:	f43f af30 	beq.w	8006360 <_printf_float+0x98>
 8006500:	f109 0901 	add.w	r9, r9, #1
 8006504:	e7e8      	b.n	80064d8 <_printf_float+0x210>
 8006506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	dc3b      	bgt.n	8006584 <_printf_float+0x2bc>
 800650c:	4a1c      	ldr	r2, [pc, #112]	@ (8006580 <_printf_float+0x2b8>)
 800650e:	2301      	movs	r3, #1
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af22 	beq.w	8006360 <_printf_float+0x98>
 800651c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006520:	ea59 0303 	orrs.w	r3, r9, r3
 8006524:	d102      	bne.n	800652c <_printf_float+0x264>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	07d9      	lsls	r1, r3, #31
 800652a:	d5d7      	bpl.n	80064dc <_printf_float+0x214>
 800652c:	9b05      	ldr	r3, [sp, #20]
 800652e:	465a      	mov	r2, fp
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f af12 	beq.w	8006360 <_printf_float+0x98>
 800653c:	f04f 0a00 	mov.w	sl, #0
 8006540:	f104 0b1a 	add.w	fp, r4, #26
 8006544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006546:	425b      	negs	r3, r3
 8006548:	4553      	cmp	r3, sl
 800654a:	dc01      	bgt.n	8006550 <_printf_float+0x288>
 800654c:	464b      	mov	r3, r9
 800654e:	e794      	b.n	800647a <_printf_float+0x1b2>
 8006550:	2301      	movs	r3, #1
 8006552:	465a      	mov	r2, fp
 8006554:	4631      	mov	r1, r6
 8006556:	4628      	mov	r0, r5
 8006558:	47b8      	blx	r7
 800655a:	3001      	adds	r0, #1
 800655c:	f43f af00 	beq.w	8006360 <_printf_float+0x98>
 8006560:	f10a 0a01 	add.w	sl, sl, #1
 8006564:	e7ee      	b.n	8006544 <_printf_float+0x27c>
 8006566:	bf00      	nop
 8006568:	ffffffff 	.word	0xffffffff
 800656c:	7fefffff 	.word	0x7fefffff
 8006570:	080089f4 	.word	0x080089f4
 8006574:	080089f0 	.word	0x080089f0
 8006578:	080089fc 	.word	0x080089fc
 800657c:	080089f8 	.word	0x080089f8
 8006580:	08008a00 	.word	0x08008a00
 8006584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006586:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800658a:	4553      	cmp	r3, sl
 800658c:	bfa8      	it	ge
 800658e:	4653      	movge	r3, sl
 8006590:	2b00      	cmp	r3, #0
 8006592:	4699      	mov	r9, r3
 8006594:	dc37      	bgt.n	8006606 <_printf_float+0x33e>
 8006596:	2300      	movs	r3, #0
 8006598:	9307      	str	r3, [sp, #28]
 800659a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800659e:	f104 021a 	add.w	r2, r4, #26
 80065a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065a4:	9907      	ldr	r1, [sp, #28]
 80065a6:	9306      	str	r3, [sp, #24]
 80065a8:	eba3 0309 	sub.w	r3, r3, r9
 80065ac:	428b      	cmp	r3, r1
 80065ae:	dc31      	bgt.n	8006614 <_printf_float+0x34c>
 80065b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b2:	459a      	cmp	sl, r3
 80065b4:	dc3b      	bgt.n	800662e <_printf_float+0x366>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	07da      	lsls	r2, r3, #31
 80065ba:	d438      	bmi.n	800662e <_printf_float+0x366>
 80065bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065be:	ebaa 0903 	sub.w	r9, sl, r3
 80065c2:	9b06      	ldr	r3, [sp, #24]
 80065c4:	ebaa 0303 	sub.w	r3, sl, r3
 80065c8:	4599      	cmp	r9, r3
 80065ca:	bfa8      	it	ge
 80065cc:	4699      	movge	r9, r3
 80065ce:	f1b9 0f00 	cmp.w	r9, #0
 80065d2:	dc34      	bgt.n	800663e <_printf_float+0x376>
 80065d4:	f04f 0800 	mov.w	r8, #0
 80065d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065dc:	f104 0b1a 	add.w	fp, r4, #26
 80065e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e2:	ebaa 0303 	sub.w	r3, sl, r3
 80065e6:	eba3 0309 	sub.w	r3, r3, r9
 80065ea:	4543      	cmp	r3, r8
 80065ec:	f77f af76 	ble.w	80064dc <_printf_float+0x214>
 80065f0:	2301      	movs	r3, #1
 80065f2:	465a      	mov	r2, fp
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f aeb0 	beq.w	8006360 <_printf_float+0x98>
 8006600:	f108 0801 	add.w	r8, r8, #1
 8006604:	e7ec      	b.n	80065e0 <_printf_float+0x318>
 8006606:	4642      	mov	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	d1c1      	bne.n	8006596 <_printf_float+0x2ce>
 8006612:	e6a5      	b.n	8006360 <_printf_float+0x98>
 8006614:	2301      	movs	r3, #1
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	9206      	str	r2, [sp, #24]
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f ae9e 	beq.w	8006360 <_printf_float+0x98>
 8006624:	9b07      	ldr	r3, [sp, #28]
 8006626:	9a06      	ldr	r2, [sp, #24]
 8006628:	3301      	adds	r3, #1
 800662a:	9307      	str	r3, [sp, #28]
 800662c:	e7b9      	b.n	80065a2 <_printf_float+0x2da>
 800662e:	9b05      	ldr	r3, [sp, #20]
 8006630:	465a      	mov	r2, fp
 8006632:	4631      	mov	r1, r6
 8006634:	4628      	mov	r0, r5
 8006636:	47b8      	blx	r7
 8006638:	3001      	adds	r0, #1
 800663a:	d1bf      	bne.n	80065bc <_printf_float+0x2f4>
 800663c:	e690      	b.n	8006360 <_printf_float+0x98>
 800663e:	9a06      	ldr	r2, [sp, #24]
 8006640:	464b      	mov	r3, r9
 8006642:	4442      	add	r2, r8
 8006644:	4631      	mov	r1, r6
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	d1c2      	bne.n	80065d4 <_printf_float+0x30c>
 800664e:	e687      	b.n	8006360 <_printf_float+0x98>
 8006650:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006654:	f1b9 0f01 	cmp.w	r9, #1
 8006658:	dc01      	bgt.n	800665e <_printf_float+0x396>
 800665a:	07db      	lsls	r3, r3, #31
 800665c:	d536      	bpl.n	80066cc <_printf_float+0x404>
 800665e:	2301      	movs	r3, #1
 8006660:	4642      	mov	r2, r8
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f ae79 	beq.w	8006360 <_printf_float+0x98>
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	465a      	mov	r2, fp
 8006672:	4631      	mov	r1, r6
 8006674:	4628      	mov	r0, r5
 8006676:	47b8      	blx	r7
 8006678:	3001      	adds	r0, #1
 800667a:	f43f ae71 	beq.w	8006360 <_printf_float+0x98>
 800667e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006682:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	f109 39ff 	add.w	r9, r9, #4294967295
 800668e:	d018      	beq.n	80066c2 <_printf_float+0x3fa>
 8006690:	464b      	mov	r3, r9
 8006692:	f108 0201 	add.w	r2, r8, #1
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	d10c      	bne.n	80066ba <_printf_float+0x3f2>
 80066a0:	e65e      	b.n	8006360 <_printf_float+0x98>
 80066a2:	2301      	movs	r3, #1
 80066a4:	465a      	mov	r2, fp
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	f43f ae57 	beq.w	8006360 <_printf_float+0x98>
 80066b2:	f108 0801 	add.w	r8, r8, #1
 80066b6:	45c8      	cmp	r8, r9
 80066b8:	dbf3      	blt.n	80066a2 <_printf_float+0x3da>
 80066ba:	4653      	mov	r3, sl
 80066bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066c0:	e6dc      	b.n	800647c <_printf_float+0x1b4>
 80066c2:	f04f 0800 	mov.w	r8, #0
 80066c6:	f104 0b1a 	add.w	fp, r4, #26
 80066ca:	e7f4      	b.n	80066b6 <_printf_float+0x3ee>
 80066cc:	2301      	movs	r3, #1
 80066ce:	4642      	mov	r2, r8
 80066d0:	e7e1      	b.n	8006696 <_printf_float+0x3ce>
 80066d2:	2301      	movs	r3, #1
 80066d4:	464a      	mov	r2, r9
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	f43f ae3f 	beq.w	8006360 <_printf_float+0x98>
 80066e2:	f108 0801 	add.w	r8, r8, #1
 80066e6:	68e3      	ldr	r3, [r4, #12]
 80066e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066ea:	1a5b      	subs	r3, r3, r1
 80066ec:	4543      	cmp	r3, r8
 80066ee:	dcf0      	bgt.n	80066d2 <_printf_float+0x40a>
 80066f0:	e6f8      	b.n	80064e4 <_printf_float+0x21c>
 80066f2:	f04f 0800 	mov.w	r8, #0
 80066f6:	f104 0919 	add.w	r9, r4, #25
 80066fa:	e7f4      	b.n	80066e6 <_printf_float+0x41e>

080066fc <_printf_common>:
 80066fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	4616      	mov	r6, r2
 8006702:	4698      	mov	r8, r3
 8006704:	688a      	ldr	r2, [r1, #8]
 8006706:	690b      	ldr	r3, [r1, #16]
 8006708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800670c:	4293      	cmp	r3, r2
 800670e:	bfb8      	it	lt
 8006710:	4613      	movlt	r3, r2
 8006712:	6033      	str	r3, [r6, #0]
 8006714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006718:	4607      	mov	r7, r0
 800671a:	460c      	mov	r4, r1
 800671c:	b10a      	cbz	r2, 8006722 <_printf_common+0x26>
 800671e:	3301      	adds	r3, #1
 8006720:	6033      	str	r3, [r6, #0]
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	0699      	lsls	r1, r3, #26
 8006726:	bf42      	ittt	mi
 8006728:	6833      	ldrmi	r3, [r6, #0]
 800672a:	3302      	addmi	r3, #2
 800672c:	6033      	strmi	r3, [r6, #0]
 800672e:	6825      	ldr	r5, [r4, #0]
 8006730:	f015 0506 	ands.w	r5, r5, #6
 8006734:	d106      	bne.n	8006744 <_printf_common+0x48>
 8006736:	f104 0a19 	add.w	sl, r4, #25
 800673a:	68e3      	ldr	r3, [r4, #12]
 800673c:	6832      	ldr	r2, [r6, #0]
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	42ab      	cmp	r3, r5
 8006742:	dc26      	bgt.n	8006792 <_printf_common+0x96>
 8006744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006748:	6822      	ldr	r2, [r4, #0]
 800674a:	3b00      	subs	r3, #0
 800674c:	bf18      	it	ne
 800674e:	2301      	movne	r3, #1
 8006750:	0692      	lsls	r2, r2, #26
 8006752:	d42b      	bmi.n	80067ac <_printf_common+0xb0>
 8006754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006758:	4641      	mov	r1, r8
 800675a:	4638      	mov	r0, r7
 800675c:	47c8      	blx	r9
 800675e:	3001      	adds	r0, #1
 8006760:	d01e      	beq.n	80067a0 <_printf_common+0xa4>
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	6922      	ldr	r2, [r4, #16]
 8006766:	f003 0306 	and.w	r3, r3, #6
 800676a:	2b04      	cmp	r3, #4
 800676c:	bf02      	ittt	eq
 800676e:	68e5      	ldreq	r5, [r4, #12]
 8006770:	6833      	ldreq	r3, [r6, #0]
 8006772:	1aed      	subeq	r5, r5, r3
 8006774:	68a3      	ldr	r3, [r4, #8]
 8006776:	bf0c      	ite	eq
 8006778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800677c:	2500      	movne	r5, #0
 800677e:	4293      	cmp	r3, r2
 8006780:	bfc4      	itt	gt
 8006782:	1a9b      	subgt	r3, r3, r2
 8006784:	18ed      	addgt	r5, r5, r3
 8006786:	2600      	movs	r6, #0
 8006788:	341a      	adds	r4, #26
 800678a:	42b5      	cmp	r5, r6
 800678c:	d11a      	bne.n	80067c4 <_printf_common+0xc8>
 800678e:	2000      	movs	r0, #0
 8006790:	e008      	b.n	80067a4 <_printf_common+0xa8>
 8006792:	2301      	movs	r3, #1
 8006794:	4652      	mov	r2, sl
 8006796:	4641      	mov	r1, r8
 8006798:	4638      	mov	r0, r7
 800679a:	47c8      	blx	r9
 800679c:	3001      	adds	r0, #1
 800679e:	d103      	bne.n	80067a8 <_printf_common+0xac>
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a8:	3501      	adds	r5, #1
 80067aa:	e7c6      	b.n	800673a <_printf_common+0x3e>
 80067ac:	18e1      	adds	r1, r4, r3
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	2030      	movs	r0, #48	@ 0x30
 80067b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067b6:	4422      	add	r2, r4
 80067b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067c0:	3302      	adds	r3, #2
 80067c2:	e7c7      	b.n	8006754 <_printf_common+0x58>
 80067c4:	2301      	movs	r3, #1
 80067c6:	4622      	mov	r2, r4
 80067c8:	4641      	mov	r1, r8
 80067ca:	4638      	mov	r0, r7
 80067cc:	47c8      	blx	r9
 80067ce:	3001      	adds	r0, #1
 80067d0:	d0e6      	beq.n	80067a0 <_printf_common+0xa4>
 80067d2:	3601      	adds	r6, #1
 80067d4:	e7d9      	b.n	800678a <_printf_common+0x8e>
	...

080067d8 <_printf_i>:
 80067d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	7e0f      	ldrb	r7, [r1, #24]
 80067de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067e0:	2f78      	cmp	r7, #120	@ 0x78
 80067e2:	4691      	mov	r9, r2
 80067e4:	4680      	mov	r8, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	469a      	mov	sl, r3
 80067ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ee:	d807      	bhi.n	8006800 <_printf_i+0x28>
 80067f0:	2f62      	cmp	r7, #98	@ 0x62
 80067f2:	d80a      	bhi.n	800680a <_printf_i+0x32>
 80067f4:	2f00      	cmp	r7, #0
 80067f6:	f000 80d1 	beq.w	800699c <_printf_i+0x1c4>
 80067fa:	2f58      	cmp	r7, #88	@ 0x58
 80067fc:	f000 80b8 	beq.w	8006970 <_printf_i+0x198>
 8006800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006808:	e03a      	b.n	8006880 <_printf_i+0xa8>
 800680a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800680e:	2b15      	cmp	r3, #21
 8006810:	d8f6      	bhi.n	8006800 <_printf_i+0x28>
 8006812:	a101      	add	r1, pc, #4	@ (adr r1, 8006818 <_printf_i+0x40>)
 8006814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006818:	08006871 	.word	0x08006871
 800681c:	08006885 	.word	0x08006885
 8006820:	08006801 	.word	0x08006801
 8006824:	08006801 	.word	0x08006801
 8006828:	08006801 	.word	0x08006801
 800682c:	08006801 	.word	0x08006801
 8006830:	08006885 	.word	0x08006885
 8006834:	08006801 	.word	0x08006801
 8006838:	08006801 	.word	0x08006801
 800683c:	08006801 	.word	0x08006801
 8006840:	08006801 	.word	0x08006801
 8006844:	08006983 	.word	0x08006983
 8006848:	080068af 	.word	0x080068af
 800684c:	0800693d 	.word	0x0800693d
 8006850:	08006801 	.word	0x08006801
 8006854:	08006801 	.word	0x08006801
 8006858:	080069a5 	.word	0x080069a5
 800685c:	08006801 	.word	0x08006801
 8006860:	080068af 	.word	0x080068af
 8006864:	08006801 	.word	0x08006801
 8006868:	08006801 	.word	0x08006801
 800686c:	08006945 	.word	0x08006945
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	1d1a      	adds	r2, r3, #4
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6032      	str	r2, [r6, #0]
 8006878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800687c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006880:	2301      	movs	r3, #1
 8006882:	e09c      	b.n	80069be <_printf_i+0x1e6>
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	6820      	ldr	r0, [r4, #0]
 8006888:	1d19      	adds	r1, r3, #4
 800688a:	6031      	str	r1, [r6, #0]
 800688c:	0606      	lsls	r6, r0, #24
 800688e:	d501      	bpl.n	8006894 <_printf_i+0xbc>
 8006890:	681d      	ldr	r5, [r3, #0]
 8006892:	e003      	b.n	800689c <_printf_i+0xc4>
 8006894:	0645      	lsls	r5, r0, #25
 8006896:	d5fb      	bpl.n	8006890 <_printf_i+0xb8>
 8006898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800689c:	2d00      	cmp	r5, #0
 800689e:	da03      	bge.n	80068a8 <_printf_i+0xd0>
 80068a0:	232d      	movs	r3, #45	@ 0x2d
 80068a2:	426d      	negs	r5, r5
 80068a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068a8:	4858      	ldr	r0, [pc, #352]	@ (8006a0c <_printf_i+0x234>)
 80068aa:	230a      	movs	r3, #10
 80068ac:	e011      	b.n	80068d2 <_printf_i+0xfa>
 80068ae:	6821      	ldr	r1, [r4, #0]
 80068b0:	6833      	ldr	r3, [r6, #0]
 80068b2:	0608      	lsls	r0, r1, #24
 80068b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068b8:	d402      	bmi.n	80068c0 <_printf_i+0xe8>
 80068ba:	0649      	lsls	r1, r1, #25
 80068bc:	bf48      	it	mi
 80068be:	b2ad      	uxthmi	r5, r5
 80068c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068c2:	4852      	ldr	r0, [pc, #328]	@ (8006a0c <_printf_i+0x234>)
 80068c4:	6033      	str	r3, [r6, #0]
 80068c6:	bf14      	ite	ne
 80068c8:	230a      	movne	r3, #10
 80068ca:	2308      	moveq	r3, #8
 80068cc:	2100      	movs	r1, #0
 80068ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068d2:	6866      	ldr	r6, [r4, #4]
 80068d4:	60a6      	str	r6, [r4, #8]
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	db05      	blt.n	80068e6 <_printf_i+0x10e>
 80068da:	6821      	ldr	r1, [r4, #0]
 80068dc:	432e      	orrs	r6, r5
 80068de:	f021 0104 	bic.w	r1, r1, #4
 80068e2:	6021      	str	r1, [r4, #0]
 80068e4:	d04b      	beq.n	800697e <_printf_i+0x1a6>
 80068e6:	4616      	mov	r6, r2
 80068e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80068ec:	fb03 5711 	mls	r7, r3, r1, r5
 80068f0:	5dc7      	ldrb	r7, [r0, r7]
 80068f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068f6:	462f      	mov	r7, r5
 80068f8:	42bb      	cmp	r3, r7
 80068fa:	460d      	mov	r5, r1
 80068fc:	d9f4      	bls.n	80068e8 <_printf_i+0x110>
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d10b      	bne.n	800691a <_printf_i+0x142>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	07df      	lsls	r7, r3, #31
 8006906:	d508      	bpl.n	800691a <_printf_i+0x142>
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	6861      	ldr	r1, [r4, #4]
 800690c:	4299      	cmp	r1, r3
 800690e:	bfde      	ittt	le
 8006910:	2330      	movle	r3, #48	@ 0x30
 8006912:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006916:	f106 36ff 	addle.w	r6, r6, #4294967295
 800691a:	1b92      	subs	r2, r2, r6
 800691c:	6122      	str	r2, [r4, #16]
 800691e:	f8cd a000 	str.w	sl, [sp]
 8006922:	464b      	mov	r3, r9
 8006924:	aa03      	add	r2, sp, #12
 8006926:	4621      	mov	r1, r4
 8006928:	4640      	mov	r0, r8
 800692a:	f7ff fee7 	bl	80066fc <_printf_common>
 800692e:	3001      	adds	r0, #1
 8006930:	d14a      	bne.n	80069c8 <_printf_i+0x1f0>
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	b004      	add	sp, #16
 8006938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	f043 0320 	orr.w	r3, r3, #32
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	4832      	ldr	r0, [pc, #200]	@ (8006a10 <_printf_i+0x238>)
 8006946:	2778      	movs	r7, #120	@ 0x78
 8006948:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	6831      	ldr	r1, [r6, #0]
 8006950:	061f      	lsls	r7, r3, #24
 8006952:	f851 5b04 	ldr.w	r5, [r1], #4
 8006956:	d402      	bmi.n	800695e <_printf_i+0x186>
 8006958:	065f      	lsls	r7, r3, #25
 800695a:	bf48      	it	mi
 800695c:	b2ad      	uxthmi	r5, r5
 800695e:	6031      	str	r1, [r6, #0]
 8006960:	07d9      	lsls	r1, r3, #31
 8006962:	bf44      	itt	mi
 8006964:	f043 0320 	orrmi.w	r3, r3, #32
 8006968:	6023      	strmi	r3, [r4, #0]
 800696a:	b11d      	cbz	r5, 8006974 <_printf_i+0x19c>
 800696c:	2310      	movs	r3, #16
 800696e:	e7ad      	b.n	80068cc <_printf_i+0xf4>
 8006970:	4826      	ldr	r0, [pc, #152]	@ (8006a0c <_printf_i+0x234>)
 8006972:	e7e9      	b.n	8006948 <_printf_i+0x170>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	f023 0320 	bic.w	r3, r3, #32
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	e7f6      	b.n	800696c <_printf_i+0x194>
 800697e:	4616      	mov	r6, r2
 8006980:	e7bd      	b.n	80068fe <_printf_i+0x126>
 8006982:	6833      	ldr	r3, [r6, #0]
 8006984:	6825      	ldr	r5, [r4, #0]
 8006986:	6961      	ldr	r1, [r4, #20]
 8006988:	1d18      	adds	r0, r3, #4
 800698a:	6030      	str	r0, [r6, #0]
 800698c:	062e      	lsls	r6, r5, #24
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	d501      	bpl.n	8006996 <_printf_i+0x1be>
 8006992:	6019      	str	r1, [r3, #0]
 8006994:	e002      	b.n	800699c <_printf_i+0x1c4>
 8006996:	0668      	lsls	r0, r5, #25
 8006998:	d5fb      	bpl.n	8006992 <_printf_i+0x1ba>
 800699a:	8019      	strh	r1, [r3, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	6123      	str	r3, [r4, #16]
 80069a0:	4616      	mov	r6, r2
 80069a2:	e7bc      	b.n	800691e <_printf_i+0x146>
 80069a4:	6833      	ldr	r3, [r6, #0]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	6032      	str	r2, [r6, #0]
 80069aa:	681e      	ldr	r6, [r3, #0]
 80069ac:	6862      	ldr	r2, [r4, #4]
 80069ae:	2100      	movs	r1, #0
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7f9 fc45 	bl	8000240 <memchr>
 80069b6:	b108      	cbz	r0, 80069bc <_printf_i+0x1e4>
 80069b8:	1b80      	subs	r0, r0, r6
 80069ba:	6060      	str	r0, [r4, #4]
 80069bc:	6863      	ldr	r3, [r4, #4]
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	2300      	movs	r3, #0
 80069c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c6:	e7aa      	b.n	800691e <_printf_i+0x146>
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	4632      	mov	r2, r6
 80069cc:	4649      	mov	r1, r9
 80069ce:	4640      	mov	r0, r8
 80069d0:	47d0      	blx	sl
 80069d2:	3001      	adds	r0, #1
 80069d4:	d0ad      	beq.n	8006932 <_printf_i+0x15a>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	079b      	lsls	r3, r3, #30
 80069da:	d413      	bmi.n	8006a04 <_printf_i+0x22c>
 80069dc:	68e0      	ldr	r0, [r4, #12]
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	4298      	cmp	r0, r3
 80069e2:	bfb8      	it	lt
 80069e4:	4618      	movlt	r0, r3
 80069e6:	e7a6      	b.n	8006936 <_printf_i+0x15e>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4632      	mov	r2, r6
 80069ec:	4649      	mov	r1, r9
 80069ee:	4640      	mov	r0, r8
 80069f0:	47d0      	blx	sl
 80069f2:	3001      	adds	r0, #1
 80069f4:	d09d      	beq.n	8006932 <_printf_i+0x15a>
 80069f6:	3501      	adds	r5, #1
 80069f8:	68e3      	ldr	r3, [r4, #12]
 80069fa:	9903      	ldr	r1, [sp, #12]
 80069fc:	1a5b      	subs	r3, r3, r1
 80069fe:	42ab      	cmp	r3, r5
 8006a00:	dcf2      	bgt.n	80069e8 <_printf_i+0x210>
 8006a02:	e7eb      	b.n	80069dc <_printf_i+0x204>
 8006a04:	2500      	movs	r5, #0
 8006a06:	f104 0619 	add.w	r6, r4, #25
 8006a0a:	e7f5      	b.n	80069f8 <_printf_i+0x220>
 8006a0c:	08008a02 	.word	0x08008a02
 8006a10:	08008a13 	.word	0x08008a13

08006a14 <std>:
 8006a14:	2300      	movs	r3, #0
 8006a16:	b510      	push	{r4, lr}
 8006a18:	4604      	mov	r4, r0
 8006a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a22:	6083      	str	r3, [r0, #8]
 8006a24:	8181      	strh	r1, [r0, #12]
 8006a26:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a28:	81c2      	strh	r2, [r0, #14]
 8006a2a:	6183      	str	r3, [r0, #24]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	2208      	movs	r2, #8
 8006a30:	305c      	adds	r0, #92	@ 0x5c
 8006a32:	f000 f906 	bl	8006c42 <memset>
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <std+0x58>)
 8006a38:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a70 <std+0x5c>)
 8006a3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <std+0x60>)
 8006a40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a42:	4b0d      	ldr	r3, [pc, #52]	@ (8006a78 <std+0x64>)
 8006a44:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a46:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <std+0x68>)
 8006a48:	6224      	str	r4, [r4, #32]
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d006      	beq.n	8006a5c <std+0x48>
 8006a4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a52:	4294      	cmp	r4, r2
 8006a54:	d002      	beq.n	8006a5c <std+0x48>
 8006a56:	33d0      	adds	r3, #208	@ 0xd0
 8006a58:	429c      	cmp	r4, r3
 8006a5a:	d105      	bne.n	8006a68 <std+0x54>
 8006a5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f000 b96a 	b.w	8006d3c <__retarget_lock_init_recursive>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	08006bbd 	.word	0x08006bbd
 8006a70:	08006bdf 	.word	0x08006bdf
 8006a74:	08006c17 	.word	0x08006c17
 8006a78:	08006c3b 	.word	0x08006c3b
 8006a7c:	20000b78 	.word	0x20000b78

08006a80 <stdio_exit_handler>:
 8006a80:	4a02      	ldr	r2, [pc, #8]	@ (8006a8c <stdio_exit_handler+0xc>)
 8006a82:	4903      	ldr	r1, [pc, #12]	@ (8006a90 <stdio_exit_handler+0x10>)
 8006a84:	4803      	ldr	r0, [pc, #12]	@ (8006a94 <stdio_exit_handler+0x14>)
 8006a86:	f000 b869 	b.w	8006b5c <_fwalk_sglue>
 8006a8a:	bf00      	nop
 8006a8c:	2000000c 	.word	0x2000000c
 8006a90:	08008595 	.word	0x08008595
 8006a94:	2000001c 	.word	0x2000001c

08006a98 <cleanup_stdio>:
 8006a98:	6841      	ldr	r1, [r0, #4]
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006acc <cleanup_stdio+0x34>)
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	d001      	beq.n	8006aa8 <cleanup_stdio+0x10>
 8006aa4:	f001 fd76 	bl	8008594 <_fflush_r>
 8006aa8:	68a1      	ldr	r1, [r4, #8]
 8006aaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <cleanup_stdio+0x38>)
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d002      	beq.n	8006ab6 <cleanup_stdio+0x1e>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f001 fd6f 	bl	8008594 <_fflush_r>
 8006ab6:	68e1      	ldr	r1, [r4, #12]
 8006ab8:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <cleanup_stdio+0x3c>)
 8006aba:	4299      	cmp	r1, r3
 8006abc:	d004      	beq.n	8006ac8 <cleanup_stdio+0x30>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f001 bd66 	b.w	8008594 <_fflush_r>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	20000b78 	.word	0x20000b78
 8006ad0:	20000be0 	.word	0x20000be0
 8006ad4:	20000c48 	.word	0x20000c48

08006ad8 <global_stdio_init.part.0>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	4b0b      	ldr	r3, [pc, #44]	@ (8006b08 <global_stdio_init.part.0+0x30>)
 8006adc:	4c0b      	ldr	r4, [pc, #44]	@ (8006b0c <global_stdio_init.part.0+0x34>)
 8006ade:	4a0c      	ldr	r2, [pc, #48]	@ (8006b10 <global_stdio_init.part.0+0x38>)
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	f7ff ff94 	bl	8006a14 <std>
 8006aec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006af0:	2201      	movs	r2, #1
 8006af2:	2109      	movs	r1, #9
 8006af4:	f7ff ff8e 	bl	8006a14 <std>
 8006af8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006afc:	2202      	movs	r2, #2
 8006afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b02:	2112      	movs	r1, #18
 8006b04:	f7ff bf86 	b.w	8006a14 <std>
 8006b08:	20000cb0 	.word	0x20000cb0
 8006b0c:	20000b78 	.word	0x20000b78
 8006b10:	08006a81 	.word	0x08006a81

08006b14 <__sfp_lock_acquire>:
 8006b14:	4801      	ldr	r0, [pc, #4]	@ (8006b1c <__sfp_lock_acquire+0x8>)
 8006b16:	f000 b912 	b.w	8006d3e <__retarget_lock_acquire_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20000cb9 	.word	0x20000cb9

08006b20 <__sfp_lock_release>:
 8006b20:	4801      	ldr	r0, [pc, #4]	@ (8006b28 <__sfp_lock_release+0x8>)
 8006b22:	f000 b90d 	b.w	8006d40 <__retarget_lock_release_recursive>
 8006b26:	bf00      	nop
 8006b28:	20000cb9 	.word	0x20000cb9

08006b2c <__sinit>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	f7ff fff0 	bl	8006b14 <__sfp_lock_acquire>
 8006b34:	6a23      	ldr	r3, [r4, #32]
 8006b36:	b11b      	cbz	r3, 8006b40 <__sinit+0x14>
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3c:	f7ff bff0 	b.w	8006b20 <__sfp_lock_release>
 8006b40:	4b04      	ldr	r3, [pc, #16]	@ (8006b54 <__sinit+0x28>)
 8006b42:	6223      	str	r3, [r4, #32]
 8006b44:	4b04      	ldr	r3, [pc, #16]	@ (8006b58 <__sinit+0x2c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f5      	bne.n	8006b38 <__sinit+0xc>
 8006b4c:	f7ff ffc4 	bl	8006ad8 <global_stdio_init.part.0>
 8006b50:	e7f2      	b.n	8006b38 <__sinit+0xc>
 8006b52:	bf00      	nop
 8006b54:	08006a99 	.word	0x08006a99
 8006b58:	20000cb0 	.word	0x20000cb0

08006b5c <_fwalk_sglue>:
 8006b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b60:	4607      	mov	r7, r0
 8006b62:	4688      	mov	r8, r1
 8006b64:	4614      	mov	r4, r2
 8006b66:	2600      	movs	r6, #0
 8006b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b70:	d505      	bpl.n	8006b7e <_fwalk_sglue+0x22>
 8006b72:	6824      	ldr	r4, [r4, #0]
 8006b74:	2c00      	cmp	r4, #0
 8006b76:	d1f7      	bne.n	8006b68 <_fwalk_sglue+0xc>
 8006b78:	4630      	mov	r0, r6
 8006b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	89ab      	ldrh	r3, [r5, #12]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d907      	bls.n	8006b94 <_fwalk_sglue+0x38>
 8006b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	d003      	beq.n	8006b94 <_fwalk_sglue+0x38>
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4638      	mov	r0, r7
 8006b90:	47c0      	blx	r8
 8006b92:	4306      	orrs	r6, r0
 8006b94:	3568      	adds	r5, #104	@ 0x68
 8006b96:	e7e9      	b.n	8006b6c <_fwalk_sglue+0x10>

08006b98 <iprintf>:
 8006b98:	b40f      	push	{r0, r1, r2, r3}
 8006b9a:	b507      	push	{r0, r1, r2, lr}
 8006b9c:	4906      	ldr	r1, [pc, #24]	@ (8006bb8 <iprintf+0x20>)
 8006b9e:	ab04      	add	r3, sp, #16
 8006ba0:	6808      	ldr	r0, [r1, #0]
 8006ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba6:	6881      	ldr	r1, [r0, #8]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	f001 fb57 	bl	800825c <_vfiprintf_r>
 8006bae:	b003      	add	sp, #12
 8006bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb4:	b004      	add	sp, #16
 8006bb6:	4770      	bx	lr
 8006bb8:	20000018 	.word	0x20000018

08006bbc <__sread>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc4:	f000 f86c 	bl	8006ca0 <_read_r>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	bfab      	itete	ge
 8006bcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bce:	89a3      	ldrhlt	r3, [r4, #12]
 8006bd0:	181b      	addge	r3, r3, r0
 8006bd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bd6:	bfac      	ite	ge
 8006bd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bda:	81a3      	strhlt	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__swrite>:
 8006bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be2:	461f      	mov	r7, r3
 8006be4:	898b      	ldrh	r3, [r1, #12]
 8006be6:	05db      	lsls	r3, r3, #23
 8006be8:	4605      	mov	r5, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	4616      	mov	r6, r2
 8006bee:	d505      	bpl.n	8006bfc <__swrite+0x1e>
 8006bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f000 f840 	bl	8006c7c <_lseek_r>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c12:	f000 b857 	b.w	8006cc4 <_write_r>

08006c16 <__sseek>:
 8006c16:	b510      	push	{r4, lr}
 8006c18:	460c      	mov	r4, r1
 8006c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1e:	f000 f82d 	bl	8006c7c <_lseek_r>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	bf15      	itete	ne
 8006c28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c32:	81a3      	strheq	r3, [r4, #12]
 8006c34:	bf18      	it	ne
 8006c36:	81a3      	strhne	r3, [r4, #12]
 8006c38:	bd10      	pop	{r4, pc}

08006c3a <__sclose>:
 8006c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3e:	f000 b80d 	b.w	8006c5c <_close_r>

08006c42 <memset>:
 8006c42:	4402      	add	r2, r0
 8006c44:	4603      	mov	r3, r0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d100      	bne.n	8006c4c <memset+0xa>
 8006c4a:	4770      	bx	lr
 8006c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c50:	e7f9      	b.n	8006c46 <memset+0x4>
	...

08006c54 <_localeconv_r>:
 8006c54:	4800      	ldr	r0, [pc, #0]	@ (8006c58 <_localeconv_r+0x4>)
 8006c56:	4770      	bx	lr
 8006c58:	20000158 	.word	0x20000158

08006c5c <_close_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d06      	ldr	r5, [pc, #24]	@ (8006c78 <_close_r+0x1c>)
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	f7fa fb7e 	bl	8001368 <_close>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_close_r+0x1a>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_close_r+0x1a>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	20000cb4 	.word	0x20000cb4

08006c7c <_lseek_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d07      	ldr	r5, [pc, #28]	@ (8006c9c <_lseek_r+0x20>)
 8006c80:	4604      	mov	r4, r0
 8006c82:	4608      	mov	r0, r1
 8006c84:	4611      	mov	r1, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	602a      	str	r2, [r5, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f7fa fb93 	bl	80013b6 <_lseek>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_lseek_r+0x1e>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_lseek_r+0x1e>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20000cb4 	.word	0x20000cb4

08006ca0 <_read_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d07      	ldr	r5, [pc, #28]	@ (8006cc0 <_read_r+0x20>)
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	4611      	mov	r1, r2
 8006caa:	2200      	movs	r2, #0
 8006cac:	602a      	str	r2, [r5, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f7fa fb21 	bl	80012f6 <_read>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_read_r+0x1e>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_read_r+0x1e>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	20000cb4 	.word	0x20000cb4

08006cc4 <_write_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d07      	ldr	r5, [pc, #28]	@ (8006ce4 <_write_r+0x20>)
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4608      	mov	r0, r1
 8006ccc:	4611      	mov	r1, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f7fa fb2c 	bl	8001330 <_write>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_write_r+0x1e>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_write_r+0x1e>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000cb4 	.word	0x20000cb4

08006ce8 <__errno>:
 8006ce8:	4b01      	ldr	r3, [pc, #4]	@ (8006cf0 <__errno+0x8>)
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	20000018 	.word	0x20000018

08006cf4 <__libc_init_array>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8006d2c <__libc_init_array+0x38>)
 8006cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8006d30 <__libc_init_array+0x3c>)
 8006cfa:	1b64      	subs	r4, r4, r5
 8006cfc:	10a4      	asrs	r4, r4, #2
 8006cfe:	2600      	movs	r6, #0
 8006d00:	42a6      	cmp	r6, r4
 8006d02:	d109      	bne.n	8006d18 <__libc_init_array+0x24>
 8006d04:	4d0b      	ldr	r5, [pc, #44]	@ (8006d34 <__libc_init_array+0x40>)
 8006d06:	4c0c      	ldr	r4, [pc, #48]	@ (8006d38 <__libc_init_array+0x44>)
 8006d08:	f001 fe52 	bl	80089b0 <_init>
 8006d0c:	1b64      	subs	r4, r4, r5
 8006d0e:	10a4      	asrs	r4, r4, #2
 8006d10:	2600      	movs	r6, #0
 8006d12:	42a6      	cmp	r6, r4
 8006d14:	d105      	bne.n	8006d22 <__libc_init_array+0x2e>
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1c:	4798      	blx	r3
 8006d1e:	3601      	adds	r6, #1
 8006d20:	e7ee      	b.n	8006d00 <__libc_init_array+0xc>
 8006d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d26:	4798      	blx	r3
 8006d28:	3601      	adds	r6, #1
 8006d2a:	e7f2      	b.n	8006d12 <__libc_init_array+0x1e>
 8006d2c:	08008d6c 	.word	0x08008d6c
 8006d30:	08008d6c 	.word	0x08008d6c
 8006d34:	08008d6c 	.word	0x08008d6c
 8006d38:	08008d70 	.word	0x08008d70

08006d3c <__retarget_lock_init_recursive>:
 8006d3c:	4770      	bx	lr

08006d3e <__retarget_lock_acquire_recursive>:
 8006d3e:	4770      	bx	lr

08006d40 <__retarget_lock_release_recursive>:
 8006d40:	4770      	bx	lr

08006d42 <quorem>:
 8006d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d46:	6903      	ldr	r3, [r0, #16]
 8006d48:	690c      	ldr	r4, [r1, #16]
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	db7e      	blt.n	8006e4e <quorem+0x10c>
 8006d50:	3c01      	subs	r4, #1
 8006d52:	f101 0814 	add.w	r8, r1, #20
 8006d56:	00a3      	lsls	r3, r4, #2
 8006d58:	f100 0514 	add.w	r5, r0, #20
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d78:	d32e      	bcc.n	8006dd8 <quorem+0x96>
 8006d7a:	f04f 0a00 	mov.w	sl, #0
 8006d7e:	46c4      	mov	ip, r8
 8006d80:	46ae      	mov	lr, r5
 8006d82:	46d3      	mov	fp, sl
 8006d84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d88:	b298      	uxth	r0, r3
 8006d8a:	fb06 a000 	mla	r0, r6, r0, sl
 8006d8e:	0c02      	lsrs	r2, r0, #16
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	fb06 2303 	mla	r3, r6, r3, r2
 8006d96:	f8de 2000 	ldr.w	r2, [lr]
 8006d9a:	b280      	uxth	r0, r0
 8006d9c:	b292      	uxth	r2, r2
 8006d9e:	1a12      	subs	r2, r2, r0
 8006da0:	445a      	add	r2, fp
 8006da2:	f8de 0000 	ldr.w	r0, [lr]
 8006da6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006db0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006db4:	b292      	uxth	r2, r2
 8006db6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dba:	45e1      	cmp	r9, ip
 8006dbc:	f84e 2b04 	str.w	r2, [lr], #4
 8006dc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006dc4:	d2de      	bcs.n	8006d84 <quorem+0x42>
 8006dc6:	9b00      	ldr	r3, [sp, #0]
 8006dc8:	58eb      	ldr	r3, [r5, r3]
 8006dca:	b92b      	cbnz	r3, 8006dd8 <quorem+0x96>
 8006dcc:	9b01      	ldr	r3, [sp, #4]
 8006dce:	3b04      	subs	r3, #4
 8006dd0:	429d      	cmp	r5, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	d32f      	bcc.n	8006e36 <quorem+0xf4>
 8006dd6:	613c      	str	r4, [r7, #16]
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f001 f90d 	bl	8007ff8 <__mcmp>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	db25      	blt.n	8006e2e <quorem+0xec>
 8006de2:	4629      	mov	r1, r5
 8006de4:	2000      	movs	r0, #0
 8006de6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dea:	f8d1 c000 	ldr.w	ip, [r1]
 8006dee:	fa1f fe82 	uxth.w	lr, r2
 8006df2:	fa1f f38c 	uxth.w	r3, ip
 8006df6:	eba3 030e 	sub.w	r3, r3, lr
 8006dfa:	4403      	add	r3, r0
 8006dfc:	0c12      	lsrs	r2, r2, #16
 8006dfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e0c:	45c1      	cmp	r9, r8
 8006e0e:	f841 3b04 	str.w	r3, [r1], #4
 8006e12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e16:	d2e6      	bcs.n	8006de6 <quorem+0xa4>
 8006e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e20:	b922      	cbnz	r2, 8006e2c <quorem+0xea>
 8006e22:	3b04      	subs	r3, #4
 8006e24:	429d      	cmp	r5, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	d30b      	bcc.n	8006e42 <quorem+0x100>
 8006e2a:	613c      	str	r4, [r7, #16]
 8006e2c:	3601      	adds	r6, #1
 8006e2e:	4630      	mov	r0, r6
 8006e30:	b003      	add	sp, #12
 8006e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1cb      	bne.n	8006dd6 <quorem+0x94>
 8006e3e:	3c01      	subs	r4, #1
 8006e40:	e7c6      	b.n	8006dd0 <quorem+0x8e>
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	3b04      	subs	r3, #4
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	d1ef      	bne.n	8006e2a <quorem+0xe8>
 8006e4a:	3c01      	subs	r4, #1
 8006e4c:	e7ea      	b.n	8006e24 <quorem+0xe2>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e7ee      	b.n	8006e30 <quorem+0xee>
 8006e52:	0000      	movs	r0, r0
 8006e54:	0000      	movs	r0, r0
	...

08006e58 <_dtoa_r>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	ed2d 8b02 	vpush	{d8}
 8006e60:	69c7      	ldr	r7, [r0, #28]
 8006e62:	b091      	sub	sp, #68	@ 0x44
 8006e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e68:	ec55 4b10 	vmov	r4, r5, d0
 8006e6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006e6e:	9107      	str	r1, [sp, #28]
 8006e70:	4681      	mov	r9, r0
 8006e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e74:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e76:	b97f      	cbnz	r7, 8006e98 <_dtoa_r+0x40>
 8006e78:	2010      	movs	r0, #16
 8006e7a:	f000 fd95 	bl	80079a8 <malloc>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	f8c9 001c 	str.w	r0, [r9, #28]
 8006e84:	b920      	cbnz	r0, 8006e90 <_dtoa_r+0x38>
 8006e86:	4ba0      	ldr	r3, [pc, #640]	@ (8007108 <_dtoa_r+0x2b0>)
 8006e88:	21ef      	movs	r1, #239	@ 0xef
 8006e8a:	48a0      	ldr	r0, [pc, #640]	@ (800710c <_dtoa_r+0x2b4>)
 8006e8c:	f001 fc5c 	bl	8008748 <__assert_func>
 8006e90:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e94:	6007      	str	r7, [r0, #0]
 8006e96:	60c7      	str	r7, [r0, #12]
 8006e98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e9c:	6819      	ldr	r1, [r3, #0]
 8006e9e:	b159      	cbz	r1, 8006eb8 <_dtoa_r+0x60>
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	604a      	str	r2, [r1, #4]
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4093      	lsls	r3, r2
 8006ea8:	608b      	str	r3, [r1, #8]
 8006eaa:	4648      	mov	r0, r9
 8006eac:	f000 fe72 	bl	8007b94 <_Bfree>
 8006eb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	1e2b      	subs	r3, r5, #0
 8006eba:	bfbb      	ittet	lt
 8006ebc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ec0:	9303      	strlt	r3, [sp, #12]
 8006ec2:	2300      	movge	r3, #0
 8006ec4:	2201      	movlt	r2, #1
 8006ec6:	bfac      	ite	ge
 8006ec8:	6033      	strge	r3, [r6, #0]
 8006eca:	6032      	strlt	r2, [r6, #0]
 8006ecc:	4b90      	ldr	r3, [pc, #576]	@ (8007110 <_dtoa_r+0x2b8>)
 8006ece:	9e03      	ldr	r6, [sp, #12]
 8006ed0:	43b3      	bics	r3, r6
 8006ed2:	d110      	bne.n	8006ef6 <_dtoa_r+0x9e>
 8006ed4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ed6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006ee0:	4323      	orrs	r3, r4
 8006ee2:	f000 84e6 	beq.w	80078b2 <_dtoa_r+0xa5a>
 8006ee6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006ee8:	4f8a      	ldr	r7, [pc, #552]	@ (8007114 <_dtoa_r+0x2bc>)
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 84e8 	beq.w	80078c0 <_dtoa_r+0xa68>
 8006ef0:	1cfb      	adds	r3, r7, #3
 8006ef2:	f000 bce3 	b.w	80078bc <_dtoa_r+0xa64>
 8006ef6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006efa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f02:	d10a      	bne.n	8006f1a <_dtoa_r+0xc2>
 8006f04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f06:	2301      	movs	r3, #1
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006f0c:	b113      	cbz	r3, 8006f14 <_dtoa_r+0xbc>
 8006f0e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006f10:	4b81      	ldr	r3, [pc, #516]	@ (8007118 <_dtoa_r+0x2c0>)
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	4f81      	ldr	r7, [pc, #516]	@ (800711c <_dtoa_r+0x2c4>)
 8006f16:	f000 bcd3 	b.w	80078c0 <_dtoa_r+0xa68>
 8006f1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006f1c:	a90f      	add	r1, sp, #60	@ 0x3c
 8006f1e:	4648      	mov	r0, r9
 8006f20:	eeb0 0b48 	vmov.f64	d0, d8
 8006f24:	f001 f918 	bl	8008158 <__d2b>
 8006f28:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8006f2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f2e:	9001      	str	r0, [sp, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d045      	beq.n	8006fc0 <_dtoa_r+0x168>
 8006f34:	eeb0 7b48 	vmov.f64	d7, d8
 8006f38:	ee18 1a90 	vmov	r1, s17
 8006f3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006f40:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8006f44:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006f48:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	ee07 1a90 	vmov	s15, r1
 8006f52:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8006f56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80070f0 <_dtoa_r+0x298>
 8006f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f5e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80070f8 <_dtoa_r+0x2a0>
 8006f62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006f66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007100 <_dtoa_r+0x2a8>
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006f72:	eeb0 7b46 	vmov.f64	d7, d6
 8006f76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006f7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006f7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f86:	ee16 8a90 	vmov	r8, s13
 8006f8a:	d508      	bpl.n	8006f9e <_dtoa_r+0x146>
 8006f8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006f90:	eeb4 6b47 	vcmp.f64	d6, d7
 8006f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f98:	bf18      	it	ne
 8006f9a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8006f9e:	f1b8 0f16 	cmp.w	r8, #22
 8006fa2:	d82b      	bhi.n	8006ffc <_dtoa_r+0x1a4>
 8006fa4:	495e      	ldr	r1, [pc, #376]	@ (8007120 <_dtoa_r+0x2c8>)
 8006fa6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8006faa:	ed91 7b00 	vldr	d7, [r1]
 8006fae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb6:	d501      	bpl.n	8006fbc <_dtoa_r+0x164>
 8006fb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	e01e      	b.n	8006ffe <_dtoa_r+0x1a6>
 8006fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006fc8:	2920      	cmp	r1, #32
 8006fca:	bfc1      	itttt	gt
 8006fcc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006fd0:	408e      	lslgt	r6, r1
 8006fd2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8006fd6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8006fda:	bfd6      	itet	le
 8006fdc:	f1c1 0120 	rsble	r1, r1, #32
 8006fe0:	4331      	orrgt	r1, r6
 8006fe2:	fa04 f101 	lslle.w	r1, r4, r1
 8006fe6:	ee07 1a90 	vmov	s15, r1
 8006fea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	ee17 1a90 	vmov	r1, s15
 8006ff4:	2501      	movs	r5, #1
 8006ff6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8006ffa:	e7a8      	b.n	8006f4e <_dtoa_r+0xf6>
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	1e53      	subs	r3, r2, #1
 8007002:	9306      	str	r3, [sp, #24]
 8007004:	bf45      	ittet	mi
 8007006:	f1c2 0301 	rsbmi	r3, r2, #1
 800700a:	9304      	strmi	r3, [sp, #16]
 800700c:	2300      	movpl	r3, #0
 800700e:	2300      	movmi	r3, #0
 8007010:	bf4c      	ite	mi
 8007012:	9306      	strmi	r3, [sp, #24]
 8007014:	9304      	strpl	r3, [sp, #16]
 8007016:	f1b8 0f00 	cmp.w	r8, #0
 800701a:	910c      	str	r1, [sp, #48]	@ 0x30
 800701c:	db18      	blt.n	8007050 <_dtoa_r+0x1f8>
 800701e:	9b06      	ldr	r3, [sp, #24]
 8007020:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007024:	4443      	add	r3, r8
 8007026:	9306      	str	r3, [sp, #24]
 8007028:	2300      	movs	r3, #0
 800702a:	9a07      	ldr	r2, [sp, #28]
 800702c:	2a09      	cmp	r2, #9
 800702e:	d845      	bhi.n	80070bc <_dtoa_r+0x264>
 8007030:	2a05      	cmp	r2, #5
 8007032:	bfc4      	itt	gt
 8007034:	3a04      	subgt	r2, #4
 8007036:	9207      	strgt	r2, [sp, #28]
 8007038:	9a07      	ldr	r2, [sp, #28]
 800703a:	f1a2 0202 	sub.w	r2, r2, #2
 800703e:	bfcc      	ite	gt
 8007040:	2400      	movgt	r4, #0
 8007042:	2401      	movle	r4, #1
 8007044:	2a03      	cmp	r2, #3
 8007046:	d844      	bhi.n	80070d2 <_dtoa_r+0x27a>
 8007048:	e8df f002 	tbb	[pc, r2]
 800704c:	0b173634 	.word	0x0b173634
 8007050:	9b04      	ldr	r3, [sp, #16]
 8007052:	2200      	movs	r2, #0
 8007054:	eba3 0308 	sub.w	r3, r3, r8
 8007058:	9304      	str	r3, [sp, #16]
 800705a:	920a      	str	r2, [sp, #40]	@ 0x28
 800705c:	f1c8 0300 	rsb	r3, r8, #0
 8007060:	e7e3      	b.n	800702a <_dtoa_r+0x1d2>
 8007062:	2201      	movs	r2, #1
 8007064:	9208      	str	r2, [sp, #32]
 8007066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007068:	eb08 0b02 	add.w	fp, r8, r2
 800706c:	f10b 0a01 	add.w	sl, fp, #1
 8007070:	4652      	mov	r2, sl
 8007072:	2a01      	cmp	r2, #1
 8007074:	bfb8      	it	lt
 8007076:	2201      	movlt	r2, #1
 8007078:	e006      	b.n	8007088 <_dtoa_r+0x230>
 800707a:	2201      	movs	r2, #1
 800707c:	9208      	str	r2, [sp, #32]
 800707e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007080:	2a00      	cmp	r2, #0
 8007082:	dd29      	ble.n	80070d8 <_dtoa_r+0x280>
 8007084:	4693      	mov	fp, r2
 8007086:	4692      	mov	sl, r2
 8007088:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800708c:	2100      	movs	r1, #0
 800708e:	2004      	movs	r0, #4
 8007090:	f100 0614 	add.w	r6, r0, #20
 8007094:	4296      	cmp	r6, r2
 8007096:	d926      	bls.n	80070e6 <_dtoa_r+0x28e>
 8007098:	6079      	str	r1, [r7, #4]
 800709a:	4648      	mov	r0, r9
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	f000 fd39 	bl	8007b14 <_Balloc>
 80070a2:	9b05      	ldr	r3, [sp, #20]
 80070a4:	4607      	mov	r7, r0
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d13e      	bne.n	8007128 <_dtoa_r+0x2d0>
 80070aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007124 <_dtoa_r+0x2cc>)
 80070ac:	4602      	mov	r2, r0
 80070ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80070b2:	e6ea      	b.n	8006e8a <_dtoa_r+0x32>
 80070b4:	2200      	movs	r2, #0
 80070b6:	e7e1      	b.n	800707c <_dtoa_r+0x224>
 80070b8:	2200      	movs	r2, #0
 80070ba:	e7d3      	b.n	8007064 <_dtoa_r+0x20c>
 80070bc:	2401      	movs	r4, #1
 80070be:	2200      	movs	r2, #0
 80070c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80070c4:	f04f 3bff 	mov.w	fp, #4294967295
 80070c8:	2100      	movs	r1, #0
 80070ca:	46da      	mov	sl, fp
 80070cc:	2212      	movs	r2, #18
 80070ce:	9109      	str	r1, [sp, #36]	@ 0x24
 80070d0:	e7da      	b.n	8007088 <_dtoa_r+0x230>
 80070d2:	2201      	movs	r2, #1
 80070d4:	9208      	str	r2, [sp, #32]
 80070d6:	e7f5      	b.n	80070c4 <_dtoa_r+0x26c>
 80070d8:	f04f 0b01 	mov.w	fp, #1
 80070dc:	46da      	mov	sl, fp
 80070de:	465a      	mov	r2, fp
 80070e0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80070e4:	e7d0      	b.n	8007088 <_dtoa_r+0x230>
 80070e6:	3101      	adds	r1, #1
 80070e8:	0040      	lsls	r0, r0, #1
 80070ea:	e7d1      	b.n	8007090 <_dtoa_r+0x238>
 80070ec:	f3af 8000 	nop.w
 80070f0:	636f4361 	.word	0x636f4361
 80070f4:	3fd287a7 	.word	0x3fd287a7
 80070f8:	8b60c8b3 	.word	0x8b60c8b3
 80070fc:	3fc68a28 	.word	0x3fc68a28
 8007100:	509f79fb 	.word	0x509f79fb
 8007104:	3fd34413 	.word	0x3fd34413
 8007108:	08008a31 	.word	0x08008a31
 800710c:	08008a48 	.word	0x08008a48
 8007110:	7ff00000 	.word	0x7ff00000
 8007114:	08008a2d 	.word	0x08008a2d
 8007118:	08008a01 	.word	0x08008a01
 800711c:	08008a00 	.word	0x08008a00
 8007120:	08008b98 	.word	0x08008b98
 8007124:	08008aa0 	.word	0x08008aa0
 8007128:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800712c:	f1ba 0f0e 	cmp.w	sl, #14
 8007130:	6010      	str	r0, [r2, #0]
 8007132:	d86e      	bhi.n	8007212 <_dtoa_r+0x3ba>
 8007134:	2c00      	cmp	r4, #0
 8007136:	d06c      	beq.n	8007212 <_dtoa_r+0x3ba>
 8007138:	f1b8 0f00 	cmp.w	r8, #0
 800713c:	f340 80b4 	ble.w	80072a8 <_dtoa_r+0x450>
 8007140:	4ac8      	ldr	r2, [pc, #800]	@ (8007464 <_dtoa_r+0x60c>)
 8007142:	f008 010f 	and.w	r1, r8, #15
 8007146:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800714a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800714e:	ed92 7b00 	vldr	d7, [r2]
 8007152:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007156:	f000 809b 	beq.w	8007290 <_dtoa_r+0x438>
 800715a:	4ac3      	ldr	r2, [pc, #780]	@ (8007468 <_dtoa_r+0x610>)
 800715c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007160:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007164:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007168:	f001 010f 	and.w	r1, r1, #15
 800716c:	2203      	movs	r2, #3
 800716e:	48be      	ldr	r0, [pc, #760]	@ (8007468 <_dtoa_r+0x610>)
 8007170:	2900      	cmp	r1, #0
 8007172:	f040 808f 	bne.w	8007294 <_dtoa_r+0x43c>
 8007176:	ed9d 6b02 	vldr	d6, [sp, #8]
 800717a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800717e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007182:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007184:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007188:	2900      	cmp	r1, #0
 800718a:	f000 80b3 	beq.w	80072f4 <_dtoa_r+0x49c>
 800718e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007192:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719a:	f140 80ab 	bpl.w	80072f4 <_dtoa_r+0x49c>
 800719e:	f1ba 0f00 	cmp.w	sl, #0
 80071a2:	f000 80a7 	beq.w	80072f4 <_dtoa_r+0x49c>
 80071a6:	f1bb 0f00 	cmp.w	fp, #0
 80071aa:	dd30      	ble.n	800720e <_dtoa_r+0x3b6>
 80071ac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80071b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071b8:	f108 31ff 	add.w	r1, r8, #4294967295
 80071bc:	9105      	str	r1, [sp, #20]
 80071be:	3201      	adds	r2, #1
 80071c0:	465c      	mov	r4, fp
 80071c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071c6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80071ca:	ee07 2a90 	vmov	s15, r2
 80071ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80071d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80071d6:	ee15 2a90 	vmov	r2, s11
 80071da:	ec51 0b15 	vmov	r0, r1, d5
 80071de:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	f040 808a 	bne.w	80072fc <_dtoa_r+0x4a4>
 80071e8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80071ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80071f0:	ec41 0b17 	vmov	d7, r0, r1
 80071f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80071f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fc:	f300 826a 	bgt.w	80076d4 <_dtoa_r+0x87c>
 8007200:	eeb1 7b47 	vneg.f64	d7, d7
 8007204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720c:	d423      	bmi.n	8007256 <_dtoa_r+0x3fe>
 800720e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007212:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007214:	2a00      	cmp	r2, #0
 8007216:	f2c0 8129 	blt.w	800746c <_dtoa_r+0x614>
 800721a:	f1b8 0f0e 	cmp.w	r8, #14
 800721e:	f300 8125 	bgt.w	800746c <_dtoa_r+0x614>
 8007222:	4b90      	ldr	r3, [pc, #576]	@ (8007464 <_dtoa_r+0x60c>)
 8007224:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007228:	ed93 6b00 	vldr	d6, [r3]
 800722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	f280 80c8 	bge.w	80073c4 <_dtoa_r+0x56c>
 8007234:	f1ba 0f00 	cmp.w	sl, #0
 8007238:	f300 80c4 	bgt.w	80073c4 <_dtoa_r+0x56c>
 800723c:	d10b      	bne.n	8007256 <_dtoa_r+0x3fe>
 800723e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007242:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007246:	ed9d 7b02 	vldr	d7, [sp, #8]
 800724a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007252:	f2c0 823c 	blt.w	80076ce <_dtoa_r+0x876>
 8007256:	2400      	movs	r4, #0
 8007258:	4625      	mov	r5, r4
 800725a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800725c:	43db      	mvns	r3, r3
 800725e:	9305      	str	r3, [sp, #20]
 8007260:	463e      	mov	r6, r7
 8007262:	f04f 0800 	mov.w	r8, #0
 8007266:	4621      	mov	r1, r4
 8007268:	4648      	mov	r0, r9
 800726a:	f000 fc93 	bl	8007b94 <_Bfree>
 800726e:	2d00      	cmp	r5, #0
 8007270:	f000 80a2 	beq.w	80073b8 <_dtoa_r+0x560>
 8007274:	f1b8 0f00 	cmp.w	r8, #0
 8007278:	d005      	beq.n	8007286 <_dtoa_r+0x42e>
 800727a:	45a8      	cmp	r8, r5
 800727c:	d003      	beq.n	8007286 <_dtoa_r+0x42e>
 800727e:	4641      	mov	r1, r8
 8007280:	4648      	mov	r0, r9
 8007282:	f000 fc87 	bl	8007b94 <_Bfree>
 8007286:	4629      	mov	r1, r5
 8007288:	4648      	mov	r0, r9
 800728a:	f000 fc83 	bl	8007b94 <_Bfree>
 800728e:	e093      	b.n	80073b8 <_dtoa_r+0x560>
 8007290:	2202      	movs	r2, #2
 8007292:	e76c      	b.n	800716e <_dtoa_r+0x316>
 8007294:	07cc      	lsls	r4, r1, #31
 8007296:	d504      	bpl.n	80072a2 <_dtoa_r+0x44a>
 8007298:	ed90 6b00 	vldr	d6, [r0]
 800729c:	3201      	adds	r2, #1
 800729e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072a2:	1049      	asrs	r1, r1, #1
 80072a4:	3008      	adds	r0, #8
 80072a6:	e763      	b.n	8007170 <_dtoa_r+0x318>
 80072a8:	d022      	beq.n	80072f0 <_dtoa_r+0x498>
 80072aa:	f1c8 0100 	rsb	r1, r8, #0
 80072ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007464 <_dtoa_r+0x60c>)
 80072b0:	f001 000f 	and.w	r0, r1, #15
 80072b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80072b8:	ed92 7b00 	vldr	d7, [r2]
 80072bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80072c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072c4:	4868      	ldr	r0, [pc, #416]	@ (8007468 <_dtoa_r+0x610>)
 80072c6:	1109      	asrs	r1, r1, #4
 80072c8:	2400      	movs	r4, #0
 80072ca:	2202      	movs	r2, #2
 80072cc:	b929      	cbnz	r1, 80072da <_dtoa_r+0x482>
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	f43f af57 	beq.w	8007182 <_dtoa_r+0x32a>
 80072d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072d8:	e753      	b.n	8007182 <_dtoa_r+0x32a>
 80072da:	07ce      	lsls	r6, r1, #31
 80072dc:	d505      	bpl.n	80072ea <_dtoa_r+0x492>
 80072de:	ed90 6b00 	vldr	d6, [r0]
 80072e2:	3201      	adds	r2, #1
 80072e4:	2401      	movs	r4, #1
 80072e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072ea:	1049      	asrs	r1, r1, #1
 80072ec:	3008      	adds	r0, #8
 80072ee:	e7ed      	b.n	80072cc <_dtoa_r+0x474>
 80072f0:	2202      	movs	r2, #2
 80072f2:	e746      	b.n	8007182 <_dtoa_r+0x32a>
 80072f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80072f8:	4654      	mov	r4, sl
 80072fa:	e762      	b.n	80071c2 <_dtoa_r+0x36a>
 80072fc:	4a59      	ldr	r2, [pc, #356]	@ (8007464 <_dtoa_r+0x60c>)
 80072fe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007302:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007306:	9a08      	ldr	r2, [sp, #32]
 8007308:	ec41 0b17 	vmov	d7, r0, r1
 800730c:	443c      	add	r4, r7
 800730e:	b34a      	cbz	r2, 8007364 <_dtoa_r+0x50c>
 8007310:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007314:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007318:	463e      	mov	r6, r7
 800731a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800731e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007322:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007326:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800732a:	ee14 2a90 	vmov	r2, s9
 800732e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007332:	3230      	adds	r2, #48	@ 0x30
 8007334:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007338:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800733c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007340:	f806 2b01 	strb.w	r2, [r6], #1
 8007344:	d438      	bmi.n	80073b8 <_dtoa_r+0x560>
 8007346:	ee32 5b46 	vsub.f64	d5, d2, d6
 800734a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800734e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007352:	d46e      	bmi.n	8007432 <_dtoa_r+0x5da>
 8007354:	42a6      	cmp	r6, r4
 8007356:	f43f af5a 	beq.w	800720e <_dtoa_r+0x3b6>
 800735a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800735e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007362:	e7e0      	b.n	8007326 <_dtoa_r+0x4ce>
 8007364:	4621      	mov	r1, r4
 8007366:	463e      	mov	r6, r7
 8007368:	ee27 7b04 	vmul.f64	d7, d7, d4
 800736c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007370:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007374:	ee14 2a90 	vmov	r2, s9
 8007378:	3230      	adds	r2, #48	@ 0x30
 800737a:	f806 2b01 	strb.w	r2, [r6], #1
 800737e:	42a6      	cmp	r6, r4
 8007380:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007384:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007388:	d119      	bne.n	80073be <_dtoa_r+0x566>
 800738a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800738e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007392:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739a:	dc4a      	bgt.n	8007432 <_dtoa_r+0x5da>
 800739c:	ee35 5b47 	vsub.f64	d5, d5, d7
 80073a0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80073a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a8:	f57f af31 	bpl.w	800720e <_dtoa_r+0x3b6>
 80073ac:	460e      	mov	r6, r1
 80073ae:	3901      	subs	r1, #1
 80073b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073b4:	2b30      	cmp	r3, #48	@ 0x30
 80073b6:	d0f9      	beq.n	80073ac <_dtoa_r+0x554>
 80073b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80073bc:	e027      	b.n	800740e <_dtoa_r+0x5b6>
 80073be:	ee26 6b03 	vmul.f64	d6, d6, d3
 80073c2:	e7d5      	b.n	8007370 <_dtoa_r+0x518>
 80073c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073c8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80073cc:	463e      	mov	r6, r7
 80073ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80073d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80073d6:	ee15 3a10 	vmov	r3, s10
 80073da:	3330      	adds	r3, #48	@ 0x30
 80073dc:	f806 3b01 	strb.w	r3, [r6], #1
 80073e0:	1bf3      	subs	r3, r6, r7
 80073e2:	459a      	cmp	sl, r3
 80073e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80073e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80073ec:	d132      	bne.n	8007454 <_dtoa_r+0x5fc>
 80073ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80073f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80073f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fa:	dc18      	bgt.n	800742e <_dtoa_r+0x5d6>
 80073fc:	eeb4 7b46 	vcmp.f64	d7, d6
 8007400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007404:	d103      	bne.n	800740e <_dtoa_r+0x5b6>
 8007406:	ee15 3a10 	vmov	r3, s10
 800740a:	07db      	lsls	r3, r3, #31
 800740c:	d40f      	bmi.n	800742e <_dtoa_r+0x5d6>
 800740e:	9901      	ldr	r1, [sp, #4]
 8007410:	4648      	mov	r0, r9
 8007412:	f000 fbbf 	bl	8007b94 <_Bfree>
 8007416:	2300      	movs	r3, #0
 8007418:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800741a:	7033      	strb	r3, [r6, #0]
 800741c:	f108 0301 	add.w	r3, r8, #1
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 824b 	beq.w	80078c0 <_dtoa_r+0xa68>
 800742a:	601e      	str	r6, [r3, #0]
 800742c:	e248      	b.n	80078c0 <_dtoa_r+0xa68>
 800742e:	f8cd 8014 	str.w	r8, [sp, #20]
 8007432:	4633      	mov	r3, r6
 8007434:	461e      	mov	r6, r3
 8007436:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800743a:	2a39      	cmp	r2, #57	@ 0x39
 800743c:	d106      	bne.n	800744c <_dtoa_r+0x5f4>
 800743e:	429f      	cmp	r7, r3
 8007440:	d1f8      	bne.n	8007434 <_dtoa_r+0x5dc>
 8007442:	9a05      	ldr	r2, [sp, #20]
 8007444:	3201      	adds	r2, #1
 8007446:	9205      	str	r2, [sp, #20]
 8007448:	2230      	movs	r2, #48	@ 0x30
 800744a:	703a      	strb	r2, [r7, #0]
 800744c:	781a      	ldrb	r2, [r3, #0]
 800744e:	3201      	adds	r2, #1
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	e7b1      	b.n	80073b8 <_dtoa_r+0x560>
 8007454:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007458:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800745c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007460:	d1b5      	bne.n	80073ce <_dtoa_r+0x576>
 8007462:	e7d4      	b.n	800740e <_dtoa_r+0x5b6>
 8007464:	08008b98 	.word	0x08008b98
 8007468:	08008b70 	.word	0x08008b70
 800746c:	9908      	ldr	r1, [sp, #32]
 800746e:	2900      	cmp	r1, #0
 8007470:	f000 80e9 	beq.w	8007646 <_dtoa_r+0x7ee>
 8007474:	9907      	ldr	r1, [sp, #28]
 8007476:	2901      	cmp	r1, #1
 8007478:	f300 80cb 	bgt.w	8007612 <_dtoa_r+0x7ba>
 800747c:	2d00      	cmp	r5, #0
 800747e:	f000 80c4 	beq.w	800760a <_dtoa_r+0x7b2>
 8007482:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007486:	9e04      	ldr	r6, [sp, #16]
 8007488:	461c      	mov	r4, r3
 800748a:	9305      	str	r3, [sp, #20]
 800748c:	9b04      	ldr	r3, [sp, #16]
 800748e:	4413      	add	r3, r2
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	2101      	movs	r1, #1
 8007496:	4413      	add	r3, r2
 8007498:	4648      	mov	r0, r9
 800749a:	9306      	str	r3, [sp, #24]
 800749c:	f000 fc2e 	bl	8007cfc <__i2b>
 80074a0:	9b05      	ldr	r3, [sp, #20]
 80074a2:	4605      	mov	r5, r0
 80074a4:	b166      	cbz	r6, 80074c0 <_dtoa_r+0x668>
 80074a6:	9a06      	ldr	r2, [sp, #24]
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	dd09      	ble.n	80074c0 <_dtoa_r+0x668>
 80074ac:	42b2      	cmp	r2, r6
 80074ae:	9904      	ldr	r1, [sp, #16]
 80074b0:	bfa8      	it	ge
 80074b2:	4632      	movge	r2, r6
 80074b4:	1a89      	subs	r1, r1, r2
 80074b6:	9104      	str	r1, [sp, #16]
 80074b8:	9906      	ldr	r1, [sp, #24]
 80074ba:	1ab6      	subs	r6, r6, r2
 80074bc:	1a8a      	subs	r2, r1, r2
 80074be:	9206      	str	r2, [sp, #24]
 80074c0:	b30b      	cbz	r3, 8007506 <_dtoa_r+0x6ae>
 80074c2:	9a08      	ldr	r2, [sp, #32]
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	f000 80c5 	beq.w	8007654 <_dtoa_r+0x7fc>
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	f000 80bf 	beq.w	800764e <_dtoa_r+0x7f6>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4622      	mov	r2, r4
 80074d4:	4648      	mov	r0, r9
 80074d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074d8:	f000 fcc8 	bl	8007e6c <__pow5mult>
 80074dc:	9a01      	ldr	r2, [sp, #4]
 80074de:	4601      	mov	r1, r0
 80074e0:	4605      	mov	r5, r0
 80074e2:	4648      	mov	r0, r9
 80074e4:	f000 fc20 	bl	8007d28 <__multiply>
 80074e8:	9901      	ldr	r1, [sp, #4]
 80074ea:	9005      	str	r0, [sp, #20]
 80074ec:	4648      	mov	r0, r9
 80074ee:	f000 fb51 	bl	8007b94 <_Bfree>
 80074f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f4:	1b1b      	subs	r3, r3, r4
 80074f6:	f000 80b0 	beq.w	800765a <_dtoa_r+0x802>
 80074fa:	9905      	ldr	r1, [sp, #20]
 80074fc:	461a      	mov	r2, r3
 80074fe:	4648      	mov	r0, r9
 8007500:	f000 fcb4 	bl	8007e6c <__pow5mult>
 8007504:	9001      	str	r0, [sp, #4]
 8007506:	2101      	movs	r1, #1
 8007508:	4648      	mov	r0, r9
 800750a:	f000 fbf7 	bl	8007cfc <__i2b>
 800750e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007510:	4604      	mov	r4, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 81da 	beq.w	80078cc <_dtoa_r+0xa74>
 8007518:	461a      	mov	r2, r3
 800751a:	4601      	mov	r1, r0
 800751c:	4648      	mov	r0, r9
 800751e:	f000 fca5 	bl	8007e6c <__pow5mult>
 8007522:	9b07      	ldr	r3, [sp, #28]
 8007524:	2b01      	cmp	r3, #1
 8007526:	4604      	mov	r4, r0
 8007528:	f300 80a0 	bgt.w	800766c <_dtoa_r+0x814>
 800752c:	9b02      	ldr	r3, [sp, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 8096 	bne.w	8007660 <_dtoa_r+0x808>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800753a:	2a00      	cmp	r2, #0
 800753c:	f040 8092 	bne.w	8007664 <_dtoa_r+0x80c>
 8007540:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007544:	0d12      	lsrs	r2, r2, #20
 8007546:	0512      	lsls	r2, r2, #20
 8007548:	2a00      	cmp	r2, #0
 800754a:	f000 808d 	beq.w	8007668 <_dtoa_r+0x810>
 800754e:	9b04      	ldr	r3, [sp, #16]
 8007550:	3301      	adds	r3, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	9b06      	ldr	r3, [sp, #24]
 8007556:	3301      	adds	r3, #1
 8007558:	9306      	str	r3, [sp, #24]
 800755a:	2301      	movs	r3, #1
 800755c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800755e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 81b9 	beq.w	80078d8 <_dtoa_r+0xa80>
 8007566:	6922      	ldr	r2, [r4, #16]
 8007568:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800756c:	6910      	ldr	r0, [r2, #16]
 800756e:	f000 fb79 	bl	8007c64 <__hi0bits>
 8007572:	f1c0 0020 	rsb	r0, r0, #32
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	4418      	add	r0, r3
 800757a:	f010 001f 	ands.w	r0, r0, #31
 800757e:	f000 8081 	beq.w	8007684 <_dtoa_r+0x82c>
 8007582:	f1c0 0220 	rsb	r2, r0, #32
 8007586:	2a04      	cmp	r2, #4
 8007588:	dd73      	ble.n	8007672 <_dtoa_r+0x81a>
 800758a:	9b04      	ldr	r3, [sp, #16]
 800758c:	f1c0 001c 	rsb	r0, r0, #28
 8007590:	4403      	add	r3, r0
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	9b06      	ldr	r3, [sp, #24]
 8007596:	4406      	add	r6, r0
 8007598:	4403      	add	r3, r0
 800759a:	9306      	str	r3, [sp, #24]
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dd05      	ble.n	80075ae <_dtoa_r+0x756>
 80075a2:	9901      	ldr	r1, [sp, #4]
 80075a4:	461a      	mov	r2, r3
 80075a6:	4648      	mov	r0, r9
 80075a8:	f000 fcba 	bl	8007f20 <__lshift>
 80075ac:	9001      	str	r0, [sp, #4]
 80075ae:	9b06      	ldr	r3, [sp, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	dd05      	ble.n	80075c0 <_dtoa_r+0x768>
 80075b4:	4621      	mov	r1, r4
 80075b6:	461a      	mov	r2, r3
 80075b8:	4648      	mov	r0, r9
 80075ba:	f000 fcb1 	bl	8007f20 <__lshift>
 80075be:	4604      	mov	r4, r0
 80075c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d060      	beq.n	8007688 <_dtoa_r+0x830>
 80075c6:	9801      	ldr	r0, [sp, #4]
 80075c8:	4621      	mov	r1, r4
 80075ca:	f000 fd15 	bl	8007ff8 <__mcmp>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	da5a      	bge.n	8007688 <_dtoa_r+0x830>
 80075d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	9901      	ldr	r1, [sp, #4]
 80075da:	2300      	movs	r3, #0
 80075dc:	220a      	movs	r2, #10
 80075de:	4648      	mov	r0, r9
 80075e0:	f000 fafa 	bl	8007bd8 <__multadd>
 80075e4:	9b08      	ldr	r3, [sp, #32]
 80075e6:	9001      	str	r0, [sp, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8177 	beq.w	80078dc <_dtoa_r+0xa84>
 80075ee:	4629      	mov	r1, r5
 80075f0:	2300      	movs	r3, #0
 80075f2:	220a      	movs	r2, #10
 80075f4:	4648      	mov	r0, r9
 80075f6:	f000 faef 	bl	8007bd8 <__multadd>
 80075fa:	f1bb 0f00 	cmp.w	fp, #0
 80075fe:	4605      	mov	r5, r0
 8007600:	dc6e      	bgt.n	80076e0 <_dtoa_r+0x888>
 8007602:	9b07      	ldr	r3, [sp, #28]
 8007604:	2b02      	cmp	r3, #2
 8007606:	dc48      	bgt.n	800769a <_dtoa_r+0x842>
 8007608:	e06a      	b.n	80076e0 <_dtoa_r+0x888>
 800760a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800760c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007610:	e739      	b.n	8007486 <_dtoa_r+0x62e>
 8007612:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007616:	42a3      	cmp	r3, r4
 8007618:	db07      	blt.n	800762a <_dtoa_r+0x7d2>
 800761a:	f1ba 0f00 	cmp.w	sl, #0
 800761e:	eba3 0404 	sub.w	r4, r3, r4
 8007622:	db0b      	blt.n	800763c <_dtoa_r+0x7e4>
 8007624:	9e04      	ldr	r6, [sp, #16]
 8007626:	4652      	mov	r2, sl
 8007628:	e72f      	b.n	800748a <_dtoa_r+0x632>
 800762a:	1ae2      	subs	r2, r4, r3
 800762c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800762e:	9e04      	ldr	r6, [sp, #16]
 8007630:	4413      	add	r3, r2
 8007632:	930a      	str	r3, [sp, #40]	@ 0x28
 8007634:	4652      	mov	r2, sl
 8007636:	4623      	mov	r3, r4
 8007638:	2400      	movs	r4, #0
 800763a:	e726      	b.n	800748a <_dtoa_r+0x632>
 800763c:	9a04      	ldr	r2, [sp, #16]
 800763e:	eba2 060a 	sub.w	r6, r2, sl
 8007642:	2200      	movs	r2, #0
 8007644:	e721      	b.n	800748a <_dtoa_r+0x632>
 8007646:	9e04      	ldr	r6, [sp, #16]
 8007648:	9d08      	ldr	r5, [sp, #32]
 800764a:	461c      	mov	r4, r3
 800764c:	e72a      	b.n	80074a4 <_dtoa_r+0x64c>
 800764e:	9a01      	ldr	r2, [sp, #4]
 8007650:	9205      	str	r2, [sp, #20]
 8007652:	e752      	b.n	80074fa <_dtoa_r+0x6a2>
 8007654:	9901      	ldr	r1, [sp, #4]
 8007656:	461a      	mov	r2, r3
 8007658:	e751      	b.n	80074fe <_dtoa_r+0x6a6>
 800765a:	9b05      	ldr	r3, [sp, #20]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	e752      	b.n	8007506 <_dtoa_r+0x6ae>
 8007660:	2300      	movs	r3, #0
 8007662:	e77b      	b.n	800755c <_dtoa_r+0x704>
 8007664:	9b02      	ldr	r3, [sp, #8]
 8007666:	e779      	b.n	800755c <_dtoa_r+0x704>
 8007668:	920b      	str	r2, [sp, #44]	@ 0x2c
 800766a:	e778      	b.n	800755e <_dtoa_r+0x706>
 800766c:	2300      	movs	r3, #0
 800766e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007670:	e779      	b.n	8007566 <_dtoa_r+0x70e>
 8007672:	d093      	beq.n	800759c <_dtoa_r+0x744>
 8007674:	9b04      	ldr	r3, [sp, #16]
 8007676:	321c      	adds	r2, #28
 8007678:	4413      	add	r3, r2
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	9b06      	ldr	r3, [sp, #24]
 800767e:	4416      	add	r6, r2
 8007680:	4413      	add	r3, r2
 8007682:	e78a      	b.n	800759a <_dtoa_r+0x742>
 8007684:	4602      	mov	r2, r0
 8007686:	e7f5      	b.n	8007674 <_dtoa_r+0x81c>
 8007688:	f1ba 0f00 	cmp.w	sl, #0
 800768c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007690:	46d3      	mov	fp, sl
 8007692:	dc21      	bgt.n	80076d8 <_dtoa_r+0x880>
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	2b02      	cmp	r3, #2
 8007698:	dd1e      	ble.n	80076d8 <_dtoa_r+0x880>
 800769a:	f1bb 0f00 	cmp.w	fp, #0
 800769e:	f47f addc 	bne.w	800725a <_dtoa_r+0x402>
 80076a2:	4621      	mov	r1, r4
 80076a4:	465b      	mov	r3, fp
 80076a6:	2205      	movs	r2, #5
 80076a8:	4648      	mov	r0, r9
 80076aa:	f000 fa95 	bl	8007bd8 <__multadd>
 80076ae:	4601      	mov	r1, r0
 80076b0:	4604      	mov	r4, r0
 80076b2:	9801      	ldr	r0, [sp, #4]
 80076b4:	f000 fca0 	bl	8007ff8 <__mcmp>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	f77f adce 	ble.w	800725a <_dtoa_r+0x402>
 80076be:	463e      	mov	r6, r7
 80076c0:	2331      	movs	r3, #49	@ 0x31
 80076c2:	f806 3b01 	strb.w	r3, [r6], #1
 80076c6:	9b05      	ldr	r3, [sp, #20]
 80076c8:	3301      	adds	r3, #1
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	e5c9      	b.n	8007262 <_dtoa_r+0x40a>
 80076ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80076d2:	4654      	mov	r4, sl
 80076d4:	4625      	mov	r5, r4
 80076d6:	e7f2      	b.n	80076be <_dtoa_r+0x866>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8102 	beq.w	80078e4 <_dtoa_r+0xa8c>
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	dd05      	ble.n	80076f0 <_dtoa_r+0x898>
 80076e4:	4629      	mov	r1, r5
 80076e6:	4632      	mov	r2, r6
 80076e8:	4648      	mov	r0, r9
 80076ea:	f000 fc19 	bl	8007f20 <__lshift>
 80076ee:	4605      	mov	r5, r0
 80076f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d058      	beq.n	80077a8 <_dtoa_r+0x950>
 80076f6:	6869      	ldr	r1, [r5, #4]
 80076f8:	4648      	mov	r0, r9
 80076fa:	f000 fa0b 	bl	8007b14 <_Balloc>
 80076fe:	4606      	mov	r6, r0
 8007700:	b928      	cbnz	r0, 800770e <_dtoa_r+0x8b6>
 8007702:	4b82      	ldr	r3, [pc, #520]	@ (800790c <_dtoa_r+0xab4>)
 8007704:	4602      	mov	r2, r0
 8007706:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800770a:	f7ff bbbe 	b.w	8006e8a <_dtoa_r+0x32>
 800770e:	692a      	ldr	r2, [r5, #16]
 8007710:	3202      	adds	r2, #2
 8007712:	0092      	lsls	r2, r2, #2
 8007714:	f105 010c 	add.w	r1, r5, #12
 8007718:	300c      	adds	r0, #12
 800771a:	f001 f807 	bl	800872c <memcpy>
 800771e:	2201      	movs	r2, #1
 8007720:	4631      	mov	r1, r6
 8007722:	4648      	mov	r0, r9
 8007724:	f000 fbfc 	bl	8007f20 <__lshift>
 8007728:	1c7b      	adds	r3, r7, #1
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	eb07 030b 	add.w	r3, r7, fp
 8007730:	9309      	str	r3, [sp, #36]	@ 0x24
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	46a8      	mov	r8, r5
 800773a:	9308      	str	r3, [sp, #32]
 800773c:	4605      	mov	r5, r0
 800773e:	9b04      	ldr	r3, [sp, #16]
 8007740:	9801      	ldr	r0, [sp, #4]
 8007742:	4621      	mov	r1, r4
 8007744:	f103 3bff 	add.w	fp, r3, #4294967295
 8007748:	f7ff fafb 	bl	8006d42 <quorem>
 800774c:	4641      	mov	r1, r8
 800774e:	9002      	str	r0, [sp, #8]
 8007750:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007754:	9801      	ldr	r0, [sp, #4]
 8007756:	f000 fc4f 	bl	8007ff8 <__mcmp>
 800775a:	462a      	mov	r2, r5
 800775c:	9006      	str	r0, [sp, #24]
 800775e:	4621      	mov	r1, r4
 8007760:	4648      	mov	r0, r9
 8007762:	f000 fc65 	bl	8008030 <__mdiff>
 8007766:	68c2      	ldr	r2, [r0, #12]
 8007768:	4606      	mov	r6, r0
 800776a:	b9fa      	cbnz	r2, 80077ac <_dtoa_r+0x954>
 800776c:	4601      	mov	r1, r0
 800776e:	9801      	ldr	r0, [sp, #4]
 8007770:	f000 fc42 	bl	8007ff8 <__mcmp>
 8007774:	4602      	mov	r2, r0
 8007776:	4631      	mov	r1, r6
 8007778:	4648      	mov	r0, r9
 800777a:	920a      	str	r2, [sp, #40]	@ 0x28
 800777c:	f000 fa0a 	bl	8007b94 <_Bfree>
 8007780:	9b07      	ldr	r3, [sp, #28]
 8007782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007784:	9e04      	ldr	r6, [sp, #16]
 8007786:	ea42 0103 	orr.w	r1, r2, r3
 800778a:	9b08      	ldr	r3, [sp, #32]
 800778c:	4319      	orrs	r1, r3
 800778e:	d10f      	bne.n	80077b0 <_dtoa_r+0x958>
 8007790:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007794:	d028      	beq.n	80077e8 <_dtoa_r+0x990>
 8007796:	9b06      	ldr	r3, [sp, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	dd02      	ble.n	80077a2 <_dtoa_r+0x94a>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80077a2:	f88b a000 	strb.w	sl, [fp]
 80077a6:	e55e      	b.n	8007266 <_dtoa_r+0x40e>
 80077a8:	4628      	mov	r0, r5
 80077aa:	e7bd      	b.n	8007728 <_dtoa_r+0x8d0>
 80077ac:	2201      	movs	r2, #1
 80077ae:	e7e2      	b.n	8007776 <_dtoa_r+0x91e>
 80077b0:	9b06      	ldr	r3, [sp, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	db04      	blt.n	80077c0 <_dtoa_r+0x968>
 80077b6:	9907      	ldr	r1, [sp, #28]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	9908      	ldr	r1, [sp, #32]
 80077bc:	430b      	orrs	r3, r1
 80077be:	d120      	bne.n	8007802 <_dtoa_r+0x9aa>
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	ddee      	ble.n	80077a2 <_dtoa_r+0x94a>
 80077c4:	9901      	ldr	r1, [sp, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	4648      	mov	r0, r9
 80077ca:	f000 fba9 	bl	8007f20 <__lshift>
 80077ce:	4621      	mov	r1, r4
 80077d0:	9001      	str	r0, [sp, #4]
 80077d2:	f000 fc11 	bl	8007ff8 <__mcmp>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	dc03      	bgt.n	80077e2 <_dtoa_r+0x98a>
 80077da:	d1e2      	bne.n	80077a2 <_dtoa_r+0x94a>
 80077dc:	f01a 0f01 	tst.w	sl, #1
 80077e0:	d0df      	beq.n	80077a2 <_dtoa_r+0x94a>
 80077e2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80077e6:	d1d9      	bne.n	800779c <_dtoa_r+0x944>
 80077e8:	2339      	movs	r3, #57	@ 0x39
 80077ea:	f88b 3000 	strb.w	r3, [fp]
 80077ee:	4633      	mov	r3, r6
 80077f0:	461e      	mov	r6, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80077f8:	2a39      	cmp	r2, #57	@ 0x39
 80077fa:	d052      	beq.n	80078a2 <_dtoa_r+0xa4a>
 80077fc:	3201      	adds	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e531      	b.n	8007266 <_dtoa_r+0x40e>
 8007802:	2a00      	cmp	r2, #0
 8007804:	dd07      	ble.n	8007816 <_dtoa_r+0x9be>
 8007806:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800780a:	d0ed      	beq.n	80077e8 <_dtoa_r+0x990>
 800780c:	f10a 0301 	add.w	r3, sl, #1
 8007810:	f88b 3000 	strb.w	r3, [fp]
 8007814:	e527      	b.n	8007266 <_dtoa_r+0x40e>
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800781a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800781e:	4293      	cmp	r3, r2
 8007820:	d029      	beq.n	8007876 <_dtoa_r+0xa1e>
 8007822:	9901      	ldr	r1, [sp, #4]
 8007824:	2300      	movs	r3, #0
 8007826:	220a      	movs	r2, #10
 8007828:	4648      	mov	r0, r9
 800782a:	f000 f9d5 	bl	8007bd8 <__multadd>
 800782e:	45a8      	cmp	r8, r5
 8007830:	9001      	str	r0, [sp, #4]
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	f04f 020a 	mov.w	r2, #10
 800783a:	4641      	mov	r1, r8
 800783c:	4648      	mov	r0, r9
 800783e:	d107      	bne.n	8007850 <_dtoa_r+0x9f8>
 8007840:	f000 f9ca 	bl	8007bd8 <__multadd>
 8007844:	4680      	mov	r8, r0
 8007846:	4605      	mov	r5, r0
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	3301      	adds	r3, #1
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	e776      	b.n	800773e <_dtoa_r+0x8e6>
 8007850:	f000 f9c2 	bl	8007bd8 <__multadd>
 8007854:	4629      	mov	r1, r5
 8007856:	4680      	mov	r8, r0
 8007858:	2300      	movs	r3, #0
 800785a:	220a      	movs	r2, #10
 800785c:	4648      	mov	r0, r9
 800785e:	f000 f9bb 	bl	8007bd8 <__multadd>
 8007862:	4605      	mov	r5, r0
 8007864:	e7f0      	b.n	8007848 <_dtoa_r+0x9f0>
 8007866:	f1bb 0f00 	cmp.w	fp, #0
 800786a:	bfcc      	ite	gt
 800786c:	465e      	movgt	r6, fp
 800786e:	2601      	movle	r6, #1
 8007870:	443e      	add	r6, r7
 8007872:	f04f 0800 	mov.w	r8, #0
 8007876:	9901      	ldr	r1, [sp, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	4648      	mov	r0, r9
 800787c:	f000 fb50 	bl	8007f20 <__lshift>
 8007880:	4621      	mov	r1, r4
 8007882:	9001      	str	r0, [sp, #4]
 8007884:	f000 fbb8 	bl	8007ff8 <__mcmp>
 8007888:	2800      	cmp	r0, #0
 800788a:	dcb0      	bgt.n	80077ee <_dtoa_r+0x996>
 800788c:	d102      	bne.n	8007894 <_dtoa_r+0xa3c>
 800788e:	f01a 0f01 	tst.w	sl, #1
 8007892:	d1ac      	bne.n	80077ee <_dtoa_r+0x996>
 8007894:	4633      	mov	r3, r6
 8007896:	461e      	mov	r6, r3
 8007898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800789c:	2a30      	cmp	r2, #48	@ 0x30
 800789e:	d0fa      	beq.n	8007896 <_dtoa_r+0xa3e>
 80078a0:	e4e1      	b.n	8007266 <_dtoa_r+0x40e>
 80078a2:	429f      	cmp	r7, r3
 80078a4:	d1a4      	bne.n	80077f0 <_dtoa_r+0x998>
 80078a6:	9b05      	ldr	r3, [sp, #20]
 80078a8:	3301      	adds	r3, #1
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	2331      	movs	r3, #49	@ 0x31
 80078ae:	703b      	strb	r3, [r7, #0]
 80078b0:	e4d9      	b.n	8007266 <_dtoa_r+0x40e>
 80078b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078b4:	4f16      	ldr	r7, [pc, #88]	@ (8007910 <_dtoa_r+0xab8>)
 80078b6:	b11b      	cbz	r3, 80078c0 <_dtoa_r+0xa68>
 80078b8:	f107 0308 	add.w	r3, r7, #8
 80078bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	4638      	mov	r0, r7
 80078c2:	b011      	add	sp, #68	@ 0x44
 80078c4:	ecbd 8b02 	vpop	{d8}
 80078c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078cc:	9b07      	ldr	r3, [sp, #28]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	f77f ae2c 	ble.w	800752c <_dtoa_r+0x6d4>
 80078d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078d8:	2001      	movs	r0, #1
 80078da:	e64c      	b.n	8007576 <_dtoa_r+0x71e>
 80078dc:	f1bb 0f00 	cmp.w	fp, #0
 80078e0:	f77f aed8 	ble.w	8007694 <_dtoa_r+0x83c>
 80078e4:	463e      	mov	r6, r7
 80078e6:	9801      	ldr	r0, [sp, #4]
 80078e8:	4621      	mov	r1, r4
 80078ea:	f7ff fa2a 	bl	8006d42 <quorem>
 80078ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80078f2:	f806 ab01 	strb.w	sl, [r6], #1
 80078f6:	1bf2      	subs	r2, r6, r7
 80078f8:	4593      	cmp	fp, r2
 80078fa:	ddb4      	ble.n	8007866 <_dtoa_r+0xa0e>
 80078fc:	9901      	ldr	r1, [sp, #4]
 80078fe:	2300      	movs	r3, #0
 8007900:	220a      	movs	r2, #10
 8007902:	4648      	mov	r0, r9
 8007904:	f000 f968 	bl	8007bd8 <__multadd>
 8007908:	9001      	str	r0, [sp, #4]
 800790a:	e7ec      	b.n	80078e6 <_dtoa_r+0xa8e>
 800790c:	08008aa0 	.word	0x08008aa0
 8007910:	08008a24 	.word	0x08008a24

08007914 <_free_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4605      	mov	r5, r0
 8007918:	2900      	cmp	r1, #0
 800791a:	d041      	beq.n	80079a0 <_free_r+0x8c>
 800791c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007920:	1f0c      	subs	r4, r1, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	bfb8      	it	lt
 8007926:	18e4      	addlt	r4, r4, r3
 8007928:	f000 f8e8 	bl	8007afc <__malloc_lock>
 800792c:	4a1d      	ldr	r2, [pc, #116]	@ (80079a4 <_free_r+0x90>)
 800792e:	6813      	ldr	r3, [r2, #0]
 8007930:	b933      	cbnz	r3, 8007940 <_free_r+0x2c>
 8007932:	6063      	str	r3, [r4, #4]
 8007934:	6014      	str	r4, [r2, #0]
 8007936:	4628      	mov	r0, r5
 8007938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800793c:	f000 b8e4 	b.w	8007b08 <__malloc_unlock>
 8007940:	42a3      	cmp	r3, r4
 8007942:	d908      	bls.n	8007956 <_free_r+0x42>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	1821      	adds	r1, r4, r0
 8007948:	428b      	cmp	r3, r1
 800794a:	bf01      	itttt	eq
 800794c:	6819      	ldreq	r1, [r3, #0]
 800794e:	685b      	ldreq	r3, [r3, #4]
 8007950:	1809      	addeq	r1, r1, r0
 8007952:	6021      	streq	r1, [r4, #0]
 8007954:	e7ed      	b.n	8007932 <_free_r+0x1e>
 8007956:	461a      	mov	r2, r3
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	b10b      	cbz	r3, 8007960 <_free_r+0x4c>
 800795c:	42a3      	cmp	r3, r4
 800795e:	d9fa      	bls.n	8007956 <_free_r+0x42>
 8007960:	6811      	ldr	r1, [r2, #0]
 8007962:	1850      	adds	r0, r2, r1
 8007964:	42a0      	cmp	r0, r4
 8007966:	d10b      	bne.n	8007980 <_free_r+0x6c>
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	4401      	add	r1, r0
 800796c:	1850      	adds	r0, r2, r1
 800796e:	4283      	cmp	r3, r0
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	d1e0      	bne.n	8007936 <_free_r+0x22>
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	6053      	str	r3, [r2, #4]
 800797a:	4408      	add	r0, r1
 800797c:	6010      	str	r0, [r2, #0]
 800797e:	e7da      	b.n	8007936 <_free_r+0x22>
 8007980:	d902      	bls.n	8007988 <_free_r+0x74>
 8007982:	230c      	movs	r3, #12
 8007984:	602b      	str	r3, [r5, #0]
 8007986:	e7d6      	b.n	8007936 <_free_r+0x22>
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	1821      	adds	r1, r4, r0
 800798c:	428b      	cmp	r3, r1
 800798e:	bf04      	itt	eq
 8007990:	6819      	ldreq	r1, [r3, #0]
 8007992:	685b      	ldreq	r3, [r3, #4]
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	bf04      	itt	eq
 8007998:	1809      	addeq	r1, r1, r0
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	6054      	str	r4, [r2, #4]
 800799e:	e7ca      	b.n	8007936 <_free_r+0x22>
 80079a0:	bd38      	pop	{r3, r4, r5, pc}
 80079a2:	bf00      	nop
 80079a4:	20000cc0 	.word	0x20000cc0

080079a8 <malloc>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	@ (80079b4 <malloc+0xc>)
 80079aa:	4601      	mov	r1, r0
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f000 b825 	b.w	80079fc <_malloc_r>
 80079b2:	bf00      	nop
 80079b4:	20000018 	.word	0x20000018

080079b8 <sbrk_aligned>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	4e0f      	ldr	r6, [pc, #60]	@ (80079f8 <sbrk_aligned+0x40>)
 80079bc:	460c      	mov	r4, r1
 80079be:	6831      	ldr	r1, [r6, #0]
 80079c0:	4605      	mov	r5, r0
 80079c2:	b911      	cbnz	r1, 80079ca <sbrk_aligned+0x12>
 80079c4:	f000 fea2 	bl	800870c <_sbrk_r>
 80079c8:	6030      	str	r0, [r6, #0]
 80079ca:	4621      	mov	r1, r4
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 fe9d 	bl	800870c <_sbrk_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d103      	bne.n	80079de <sbrk_aligned+0x26>
 80079d6:	f04f 34ff 	mov.w	r4, #4294967295
 80079da:	4620      	mov	r0, r4
 80079dc:	bd70      	pop	{r4, r5, r6, pc}
 80079de:	1cc4      	adds	r4, r0, #3
 80079e0:	f024 0403 	bic.w	r4, r4, #3
 80079e4:	42a0      	cmp	r0, r4
 80079e6:	d0f8      	beq.n	80079da <sbrk_aligned+0x22>
 80079e8:	1a21      	subs	r1, r4, r0
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 fe8e 	bl	800870c <_sbrk_r>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d1f2      	bne.n	80079da <sbrk_aligned+0x22>
 80079f4:	e7ef      	b.n	80079d6 <sbrk_aligned+0x1e>
 80079f6:	bf00      	nop
 80079f8:	20000cbc 	.word	0x20000cbc

080079fc <_malloc_r>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	1ccd      	adds	r5, r1, #3
 8007a02:	f025 0503 	bic.w	r5, r5, #3
 8007a06:	3508      	adds	r5, #8
 8007a08:	2d0c      	cmp	r5, #12
 8007a0a:	bf38      	it	cc
 8007a0c:	250c      	movcc	r5, #12
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	4606      	mov	r6, r0
 8007a12:	db01      	blt.n	8007a18 <_malloc_r+0x1c>
 8007a14:	42a9      	cmp	r1, r5
 8007a16:	d904      	bls.n	8007a22 <_malloc_r+0x26>
 8007a18:	230c      	movs	r3, #12
 8007a1a:	6033      	str	r3, [r6, #0]
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007af8 <_malloc_r+0xfc>
 8007a26:	f000 f869 	bl	8007afc <__malloc_lock>
 8007a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a2e:	461c      	mov	r4, r3
 8007a30:	bb44      	cbnz	r4, 8007a84 <_malloc_r+0x88>
 8007a32:	4629      	mov	r1, r5
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ffbf 	bl	80079b8 <sbrk_aligned>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	d158      	bne.n	8007af2 <_malloc_r+0xf6>
 8007a40:	f8d8 4000 	ldr.w	r4, [r8]
 8007a44:	4627      	mov	r7, r4
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	d143      	bne.n	8007ad2 <_malloc_r+0xd6>
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	d04b      	beq.n	8007ae6 <_malloc_r+0xea>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	4639      	mov	r1, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	eb04 0903 	add.w	r9, r4, r3
 8007a58:	f000 fe58 	bl	800870c <_sbrk_r>
 8007a5c:	4581      	cmp	r9, r0
 8007a5e:	d142      	bne.n	8007ae6 <_malloc_r+0xea>
 8007a60:	6821      	ldr	r1, [r4, #0]
 8007a62:	1a6d      	subs	r5, r5, r1
 8007a64:	4629      	mov	r1, r5
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ffa6 	bl	80079b8 <sbrk_aligned>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d03a      	beq.n	8007ae6 <_malloc_r+0xea>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	442b      	add	r3, r5
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	bb62      	cbnz	r2, 8007ad8 <_malloc_r+0xdc>
 8007a7e:	f8c8 7000 	str.w	r7, [r8]
 8007a82:	e00f      	b.n	8007aa4 <_malloc_r+0xa8>
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	1b52      	subs	r2, r2, r5
 8007a88:	d420      	bmi.n	8007acc <_malloc_r+0xd0>
 8007a8a:	2a0b      	cmp	r2, #11
 8007a8c:	d917      	bls.n	8007abe <_malloc_r+0xc2>
 8007a8e:	1961      	adds	r1, r4, r5
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	6025      	str	r5, [r4, #0]
 8007a94:	bf18      	it	ne
 8007a96:	6059      	strne	r1, [r3, #4]
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	bf08      	it	eq
 8007a9c:	f8c8 1000 	streq.w	r1, [r8]
 8007aa0:	5162      	str	r2, [r4, r5]
 8007aa2:	604b      	str	r3, [r1, #4]
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 f82f 	bl	8007b08 <__malloc_unlock>
 8007aaa:	f104 000b 	add.w	r0, r4, #11
 8007aae:	1d23      	adds	r3, r4, #4
 8007ab0:	f020 0007 	bic.w	r0, r0, #7
 8007ab4:	1ac2      	subs	r2, r0, r3
 8007ab6:	bf1c      	itt	ne
 8007ab8:	1a1b      	subne	r3, r3, r0
 8007aba:	50a3      	strne	r3, [r4, r2]
 8007abc:	e7af      	b.n	8007a1e <_malloc_r+0x22>
 8007abe:	6862      	ldr	r2, [r4, #4]
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	bf0c      	ite	eq
 8007ac4:	f8c8 2000 	streq.w	r2, [r8]
 8007ac8:	605a      	strne	r2, [r3, #4]
 8007aca:	e7eb      	b.n	8007aa4 <_malloc_r+0xa8>
 8007acc:	4623      	mov	r3, r4
 8007ace:	6864      	ldr	r4, [r4, #4]
 8007ad0:	e7ae      	b.n	8007a30 <_malloc_r+0x34>
 8007ad2:	463c      	mov	r4, r7
 8007ad4:	687f      	ldr	r7, [r7, #4]
 8007ad6:	e7b6      	b.n	8007a46 <_malloc_r+0x4a>
 8007ad8:	461a      	mov	r2, r3
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d1fb      	bne.n	8007ad8 <_malloc_r+0xdc>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	6053      	str	r3, [r2, #4]
 8007ae4:	e7de      	b.n	8007aa4 <_malloc_r+0xa8>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	6033      	str	r3, [r6, #0]
 8007aea:	4630      	mov	r0, r6
 8007aec:	f000 f80c 	bl	8007b08 <__malloc_unlock>
 8007af0:	e794      	b.n	8007a1c <_malloc_r+0x20>
 8007af2:	6005      	str	r5, [r0, #0]
 8007af4:	e7d6      	b.n	8007aa4 <_malloc_r+0xa8>
 8007af6:	bf00      	nop
 8007af8:	20000cc0 	.word	0x20000cc0

08007afc <__malloc_lock>:
 8007afc:	4801      	ldr	r0, [pc, #4]	@ (8007b04 <__malloc_lock+0x8>)
 8007afe:	f7ff b91e 	b.w	8006d3e <__retarget_lock_acquire_recursive>
 8007b02:	bf00      	nop
 8007b04:	20000cb8 	.word	0x20000cb8

08007b08 <__malloc_unlock>:
 8007b08:	4801      	ldr	r0, [pc, #4]	@ (8007b10 <__malloc_unlock+0x8>)
 8007b0a:	f7ff b919 	b.w	8006d40 <__retarget_lock_release_recursive>
 8007b0e:	bf00      	nop
 8007b10:	20000cb8 	.word	0x20000cb8

08007b14 <_Balloc>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	69c6      	ldr	r6, [r0, #28]
 8007b18:	4604      	mov	r4, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	b976      	cbnz	r6, 8007b3c <_Balloc+0x28>
 8007b1e:	2010      	movs	r0, #16
 8007b20:	f7ff ff42 	bl	80079a8 <malloc>
 8007b24:	4602      	mov	r2, r0
 8007b26:	61e0      	str	r0, [r4, #28]
 8007b28:	b920      	cbnz	r0, 8007b34 <_Balloc+0x20>
 8007b2a:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <_Balloc+0x78>)
 8007b2c:	4818      	ldr	r0, [pc, #96]	@ (8007b90 <_Balloc+0x7c>)
 8007b2e:	216b      	movs	r1, #107	@ 0x6b
 8007b30:	f000 fe0a 	bl	8008748 <__assert_func>
 8007b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b38:	6006      	str	r6, [r0, #0]
 8007b3a:	60c6      	str	r6, [r0, #12]
 8007b3c:	69e6      	ldr	r6, [r4, #28]
 8007b3e:	68f3      	ldr	r3, [r6, #12]
 8007b40:	b183      	cbz	r3, 8007b64 <_Balloc+0x50>
 8007b42:	69e3      	ldr	r3, [r4, #28]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b4a:	b9b8      	cbnz	r0, 8007b7c <_Balloc+0x68>
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	fa01 f605 	lsl.w	r6, r1, r5
 8007b52:	1d72      	adds	r2, r6, #5
 8007b54:	0092      	lsls	r2, r2, #2
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fe14 	bl	8008784 <_calloc_r>
 8007b5c:	b160      	cbz	r0, 8007b78 <_Balloc+0x64>
 8007b5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b62:	e00e      	b.n	8007b82 <_Balloc+0x6e>
 8007b64:	2221      	movs	r2, #33	@ 0x21
 8007b66:	2104      	movs	r1, #4
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fe0b 	bl	8008784 <_calloc_r>
 8007b6e:	69e3      	ldr	r3, [r4, #28]
 8007b70:	60f0      	str	r0, [r6, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e4      	bne.n	8007b42 <_Balloc+0x2e>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	6802      	ldr	r2, [r0, #0]
 8007b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b82:	2300      	movs	r3, #0
 8007b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b88:	e7f7      	b.n	8007b7a <_Balloc+0x66>
 8007b8a:	bf00      	nop
 8007b8c:	08008a31 	.word	0x08008a31
 8007b90:	08008ab1 	.word	0x08008ab1

08007b94 <_Bfree>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	69c6      	ldr	r6, [r0, #28]
 8007b98:	4605      	mov	r5, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	b976      	cbnz	r6, 8007bbc <_Bfree+0x28>
 8007b9e:	2010      	movs	r0, #16
 8007ba0:	f7ff ff02 	bl	80079a8 <malloc>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	61e8      	str	r0, [r5, #28]
 8007ba8:	b920      	cbnz	r0, 8007bb4 <_Bfree+0x20>
 8007baa:	4b09      	ldr	r3, [pc, #36]	@ (8007bd0 <_Bfree+0x3c>)
 8007bac:	4809      	ldr	r0, [pc, #36]	@ (8007bd4 <_Bfree+0x40>)
 8007bae:	218f      	movs	r1, #143	@ 0x8f
 8007bb0:	f000 fdca 	bl	8008748 <__assert_func>
 8007bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bb8:	6006      	str	r6, [r0, #0]
 8007bba:	60c6      	str	r6, [r0, #12]
 8007bbc:	b13c      	cbz	r4, 8007bce <_Bfree+0x3a>
 8007bbe:	69eb      	ldr	r3, [r5, #28]
 8007bc0:	6862      	ldr	r2, [r4, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc8:	6021      	str	r1, [r4, #0]
 8007bca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	08008a31 	.word	0x08008a31
 8007bd4:	08008ab1 	.word	0x08008ab1

08007bd8 <__multadd>:
 8007bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bdc:	690d      	ldr	r5, [r1, #16]
 8007bde:	4607      	mov	r7, r0
 8007be0:	460c      	mov	r4, r1
 8007be2:	461e      	mov	r6, r3
 8007be4:	f101 0c14 	add.w	ip, r1, #20
 8007be8:	2000      	movs	r0, #0
 8007bea:	f8dc 3000 	ldr.w	r3, [ip]
 8007bee:	b299      	uxth	r1, r3
 8007bf0:	fb02 6101 	mla	r1, r2, r1, r6
 8007bf4:	0c1e      	lsrs	r6, r3, #16
 8007bf6:	0c0b      	lsrs	r3, r1, #16
 8007bf8:	fb02 3306 	mla	r3, r2, r6, r3
 8007bfc:	b289      	uxth	r1, r1
 8007bfe:	3001      	adds	r0, #1
 8007c00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c04:	4285      	cmp	r5, r0
 8007c06:	f84c 1b04 	str.w	r1, [ip], #4
 8007c0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c0e:	dcec      	bgt.n	8007bea <__multadd+0x12>
 8007c10:	b30e      	cbz	r6, 8007c56 <__multadd+0x7e>
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dc19      	bgt.n	8007c4c <__multadd+0x74>
 8007c18:	6861      	ldr	r1, [r4, #4]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	3101      	adds	r1, #1
 8007c1e:	f7ff ff79 	bl	8007b14 <_Balloc>
 8007c22:	4680      	mov	r8, r0
 8007c24:	b928      	cbnz	r0, 8007c32 <__multadd+0x5a>
 8007c26:	4602      	mov	r2, r0
 8007c28:	4b0c      	ldr	r3, [pc, #48]	@ (8007c5c <__multadd+0x84>)
 8007c2a:	480d      	ldr	r0, [pc, #52]	@ (8007c60 <__multadd+0x88>)
 8007c2c:	21ba      	movs	r1, #186	@ 0xba
 8007c2e:	f000 fd8b 	bl	8008748 <__assert_func>
 8007c32:	6922      	ldr	r2, [r4, #16]
 8007c34:	3202      	adds	r2, #2
 8007c36:	f104 010c 	add.w	r1, r4, #12
 8007c3a:	0092      	lsls	r2, r2, #2
 8007c3c:	300c      	adds	r0, #12
 8007c3e:	f000 fd75 	bl	800872c <memcpy>
 8007c42:	4621      	mov	r1, r4
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ffa5 	bl	8007b94 <_Bfree>
 8007c4a:	4644      	mov	r4, r8
 8007c4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c50:	3501      	adds	r5, #1
 8007c52:	615e      	str	r6, [r3, #20]
 8007c54:	6125      	str	r5, [r4, #16]
 8007c56:	4620      	mov	r0, r4
 8007c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c5c:	08008aa0 	.word	0x08008aa0
 8007c60:	08008ab1 	.word	0x08008ab1

08007c64 <__hi0bits>:
 8007c64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c68:	4603      	mov	r3, r0
 8007c6a:	bf36      	itet	cc
 8007c6c:	0403      	lslcc	r3, r0, #16
 8007c6e:	2000      	movcs	r0, #0
 8007c70:	2010      	movcc	r0, #16
 8007c72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c76:	bf3c      	itt	cc
 8007c78:	021b      	lslcc	r3, r3, #8
 8007c7a:	3008      	addcc	r0, #8
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c80:	bf3c      	itt	cc
 8007c82:	011b      	lslcc	r3, r3, #4
 8007c84:	3004      	addcc	r0, #4
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8a:	bf3c      	itt	cc
 8007c8c:	009b      	lslcc	r3, r3, #2
 8007c8e:	3002      	addcc	r0, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	db05      	blt.n	8007ca0 <__hi0bits+0x3c>
 8007c94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c98:	f100 0001 	add.w	r0, r0, #1
 8007c9c:	bf08      	it	eq
 8007c9e:	2020      	moveq	r0, #32
 8007ca0:	4770      	bx	lr

08007ca2 <__lo0bits>:
 8007ca2:	6803      	ldr	r3, [r0, #0]
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	f013 0007 	ands.w	r0, r3, #7
 8007caa:	d00b      	beq.n	8007cc4 <__lo0bits+0x22>
 8007cac:	07d9      	lsls	r1, r3, #31
 8007cae:	d421      	bmi.n	8007cf4 <__lo0bits+0x52>
 8007cb0:	0798      	lsls	r0, r3, #30
 8007cb2:	bf49      	itett	mi
 8007cb4:	085b      	lsrmi	r3, r3, #1
 8007cb6:	089b      	lsrpl	r3, r3, #2
 8007cb8:	2001      	movmi	r0, #1
 8007cba:	6013      	strmi	r3, [r2, #0]
 8007cbc:	bf5c      	itt	pl
 8007cbe:	6013      	strpl	r3, [r2, #0]
 8007cc0:	2002      	movpl	r0, #2
 8007cc2:	4770      	bx	lr
 8007cc4:	b299      	uxth	r1, r3
 8007cc6:	b909      	cbnz	r1, 8007ccc <__lo0bits+0x2a>
 8007cc8:	0c1b      	lsrs	r3, r3, #16
 8007cca:	2010      	movs	r0, #16
 8007ccc:	b2d9      	uxtb	r1, r3
 8007cce:	b909      	cbnz	r1, 8007cd4 <__lo0bits+0x32>
 8007cd0:	3008      	adds	r0, #8
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	0719      	lsls	r1, r3, #28
 8007cd6:	bf04      	itt	eq
 8007cd8:	091b      	lsreq	r3, r3, #4
 8007cda:	3004      	addeq	r0, #4
 8007cdc:	0799      	lsls	r1, r3, #30
 8007cde:	bf04      	itt	eq
 8007ce0:	089b      	lsreq	r3, r3, #2
 8007ce2:	3002      	addeq	r0, #2
 8007ce4:	07d9      	lsls	r1, r3, #31
 8007ce6:	d403      	bmi.n	8007cf0 <__lo0bits+0x4e>
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	f100 0001 	add.w	r0, r0, #1
 8007cee:	d003      	beq.n	8007cf8 <__lo0bits+0x56>
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	4770      	bx	lr
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	4770      	bx	lr
 8007cf8:	2020      	movs	r0, #32
 8007cfa:	4770      	bx	lr

08007cfc <__i2b>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	460c      	mov	r4, r1
 8007d00:	2101      	movs	r1, #1
 8007d02:	f7ff ff07 	bl	8007b14 <_Balloc>
 8007d06:	4602      	mov	r2, r0
 8007d08:	b928      	cbnz	r0, 8007d16 <__i2b+0x1a>
 8007d0a:	4b05      	ldr	r3, [pc, #20]	@ (8007d20 <__i2b+0x24>)
 8007d0c:	4805      	ldr	r0, [pc, #20]	@ (8007d24 <__i2b+0x28>)
 8007d0e:	f240 1145 	movw	r1, #325	@ 0x145
 8007d12:	f000 fd19 	bl	8008748 <__assert_func>
 8007d16:	2301      	movs	r3, #1
 8007d18:	6144      	str	r4, [r0, #20]
 8007d1a:	6103      	str	r3, [r0, #16]
 8007d1c:	bd10      	pop	{r4, pc}
 8007d1e:	bf00      	nop
 8007d20:	08008aa0 	.word	0x08008aa0
 8007d24:	08008ab1 	.word	0x08008ab1

08007d28 <__multiply>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	4617      	mov	r7, r2
 8007d2e:	690a      	ldr	r2, [r1, #16]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bfa8      	it	ge
 8007d36:	463b      	movge	r3, r7
 8007d38:	4689      	mov	r9, r1
 8007d3a:	bfa4      	itt	ge
 8007d3c:	460f      	movge	r7, r1
 8007d3e:	4699      	movge	r9, r3
 8007d40:	693d      	ldr	r5, [r7, #16]
 8007d42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	eb05 060a 	add.w	r6, r5, sl
 8007d4e:	42b3      	cmp	r3, r6
 8007d50:	b085      	sub	sp, #20
 8007d52:	bfb8      	it	lt
 8007d54:	3101      	addlt	r1, #1
 8007d56:	f7ff fedd 	bl	8007b14 <_Balloc>
 8007d5a:	b930      	cbnz	r0, 8007d6a <__multiply+0x42>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4b41      	ldr	r3, [pc, #260]	@ (8007e64 <__multiply+0x13c>)
 8007d60:	4841      	ldr	r0, [pc, #260]	@ (8007e68 <__multiply+0x140>)
 8007d62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d66:	f000 fcef 	bl	8008748 <__assert_func>
 8007d6a:	f100 0414 	add.w	r4, r0, #20
 8007d6e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007d72:	4623      	mov	r3, r4
 8007d74:	2200      	movs	r2, #0
 8007d76:	4573      	cmp	r3, lr
 8007d78:	d320      	bcc.n	8007dbc <__multiply+0x94>
 8007d7a:	f107 0814 	add.w	r8, r7, #20
 8007d7e:	f109 0114 	add.w	r1, r9, #20
 8007d82:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007d86:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007d8a:	9302      	str	r3, [sp, #8]
 8007d8c:	1beb      	subs	r3, r5, r7
 8007d8e:	3b15      	subs	r3, #21
 8007d90:	f023 0303 	bic.w	r3, r3, #3
 8007d94:	3304      	adds	r3, #4
 8007d96:	3715      	adds	r7, #21
 8007d98:	42bd      	cmp	r5, r7
 8007d9a:	bf38      	it	cc
 8007d9c:	2304      	movcc	r3, #4
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	9b02      	ldr	r3, [sp, #8]
 8007da2:	9103      	str	r1, [sp, #12]
 8007da4:	428b      	cmp	r3, r1
 8007da6:	d80c      	bhi.n	8007dc2 <__multiply+0x9a>
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	dd03      	ble.n	8007db4 <__multiply+0x8c>
 8007dac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d055      	beq.n	8007e60 <__multiply+0x138>
 8007db4:	6106      	str	r6, [r0, #16]
 8007db6:	b005      	add	sp, #20
 8007db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbc:	f843 2b04 	str.w	r2, [r3], #4
 8007dc0:	e7d9      	b.n	8007d76 <__multiply+0x4e>
 8007dc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dc6:	f1ba 0f00 	cmp.w	sl, #0
 8007dca:	d01f      	beq.n	8007e0c <__multiply+0xe4>
 8007dcc:	46c4      	mov	ip, r8
 8007dce:	46a1      	mov	r9, r4
 8007dd0:	2700      	movs	r7, #0
 8007dd2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007dd6:	f8d9 3000 	ldr.w	r3, [r9]
 8007dda:	fa1f fb82 	uxth.w	fp, r2
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007de4:	443b      	add	r3, r7
 8007de6:	f8d9 7000 	ldr.w	r7, [r9]
 8007dea:	0c12      	lsrs	r2, r2, #16
 8007dec:	0c3f      	lsrs	r7, r7, #16
 8007dee:	fb0a 7202 	mla	r2, sl, r2, r7
 8007df2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dfc:	4565      	cmp	r5, ip
 8007dfe:	f849 3b04 	str.w	r3, [r9], #4
 8007e02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007e06:	d8e4      	bhi.n	8007dd2 <__multiply+0xaa>
 8007e08:	9b01      	ldr	r3, [sp, #4]
 8007e0a:	50e7      	str	r7, [r4, r3]
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e12:	3104      	adds	r1, #4
 8007e14:	f1b9 0f00 	cmp.w	r9, #0
 8007e18:	d020      	beq.n	8007e5c <__multiply+0x134>
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	4647      	mov	r7, r8
 8007e1e:	46a4      	mov	ip, r4
 8007e20:	f04f 0a00 	mov.w	sl, #0
 8007e24:	f8b7 b000 	ldrh.w	fp, [r7]
 8007e28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007e2c:	fb09 220b 	mla	r2, r9, fp, r2
 8007e30:	4452      	add	r2, sl
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e38:	f84c 3b04 	str.w	r3, [ip], #4
 8007e3c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007e40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e44:	f8bc 3000 	ldrh.w	r3, [ip]
 8007e48:	fb09 330a 	mla	r3, r9, sl, r3
 8007e4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007e50:	42bd      	cmp	r5, r7
 8007e52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e56:	d8e5      	bhi.n	8007e24 <__multiply+0xfc>
 8007e58:	9a01      	ldr	r2, [sp, #4]
 8007e5a:	50a3      	str	r3, [r4, r2]
 8007e5c:	3404      	adds	r4, #4
 8007e5e:	e79f      	b.n	8007da0 <__multiply+0x78>
 8007e60:	3e01      	subs	r6, #1
 8007e62:	e7a1      	b.n	8007da8 <__multiply+0x80>
 8007e64:	08008aa0 	.word	0x08008aa0
 8007e68:	08008ab1 	.word	0x08008ab1

08007e6c <__pow5mult>:
 8007e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e70:	4615      	mov	r5, r2
 8007e72:	f012 0203 	ands.w	r2, r2, #3
 8007e76:	4607      	mov	r7, r0
 8007e78:	460e      	mov	r6, r1
 8007e7a:	d007      	beq.n	8007e8c <__pow5mult+0x20>
 8007e7c:	4c25      	ldr	r4, [pc, #148]	@ (8007f14 <__pow5mult+0xa8>)
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	2300      	movs	r3, #0
 8007e82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e86:	f7ff fea7 	bl	8007bd8 <__multadd>
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	10ad      	asrs	r5, r5, #2
 8007e8e:	d03d      	beq.n	8007f0c <__pow5mult+0xa0>
 8007e90:	69fc      	ldr	r4, [r7, #28]
 8007e92:	b97c      	cbnz	r4, 8007eb4 <__pow5mult+0x48>
 8007e94:	2010      	movs	r0, #16
 8007e96:	f7ff fd87 	bl	80079a8 <malloc>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	61f8      	str	r0, [r7, #28]
 8007e9e:	b928      	cbnz	r0, 8007eac <__pow5mult+0x40>
 8007ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f18 <__pow5mult+0xac>)
 8007ea2:	481e      	ldr	r0, [pc, #120]	@ (8007f1c <__pow5mult+0xb0>)
 8007ea4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ea8:	f000 fc4e 	bl	8008748 <__assert_func>
 8007eac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007eb0:	6004      	str	r4, [r0, #0]
 8007eb2:	60c4      	str	r4, [r0, #12]
 8007eb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007eb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ebc:	b94c      	cbnz	r4, 8007ed2 <__pow5mult+0x66>
 8007ebe:	f240 2171 	movw	r1, #625	@ 0x271
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f7ff ff1a 	bl	8007cfc <__i2b>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ece:	4604      	mov	r4, r0
 8007ed0:	6003      	str	r3, [r0, #0]
 8007ed2:	f04f 0900 	mov.w	r9, #0
 8007ed6:	07eb      	lsls	r3, r5, #31
 8007ed8:	d50a      	bpl.n	8007ef0 <__pow5mult+0x84>
 8007eda:	4631      	mov	r1, r6
 8007edc:	4622      	mov	r2, r4
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff ff22 	bl	8007d28 <__multiply>
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f7ff fe53 	bl	8007b94 <_Bfree>
 8007eee:	4646      	mov	r6, r8
 8007ef0:	106d      	asrs	r5, r5, #1
 8007ef2:	d00b      	beq.n	8007f0c <__pow5mult+0xa0>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	b938      	cbnz	r0, 8007f08 <__pow5mult+0x9c>
 8007ef8:	4622      	mov	r2, r4
 8007efa:	4621      	mov	r1, r4
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff ff13 	bl	8007d28 <__multiply>
 8007f02:	6020      	str	r0, [r4, #0]
 8007f04:	f8c0 9000 	str.w	r9, [r0]
 8007f08:	4604      	mov	r4, r0
 8007f0a:	e7e4      	b.n	8007ed6 <__pow5mult+0x6a>
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f12:	bf00      	nop
 8007f14:	08008b64 	.word	0x08008b64
 8007f18:	08008a31 	.word	0x08008a31
 8007f1c:	08008ab1 	.word	0x08008ab1

08007f20 <__lshift>:
 8007f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	460c      	mov	r4, r1
 8007f26:	6849      	ldr	r1, [r1, #4]
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f2e:	68a3      	ldr	r3, [r4, #8]
 8007f30:	4607      	mov	r7, r0
 8007f32:	4691      	mov	r9, r2
 8007f34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f38:	f108 0601 	add.w	r6, r8, #1
 8007f3c:	42b3      	cmp	r3, r6
 8007f3e:	db0b      	blt.n	8007f58 <__lshift+0x38>
 8007f40:	4638      	mov	r0, r7
 8007f42:	f7ff fde7 	bl	8007b14 <_Balloc>
 8007f46:	4605      	mov	r5, r0
 8007f48:	b948      	cbnz	r0, 8007f5e <__lshift+0x3e>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	4b28      	ldr	r3, [pc, #160]	@ (8007ff0 <__lshift+0xd0>)
 8007f4e:	4829      	ldr	r0, [pc, #164]	@ (8007ff4 <__lshift+0xd4>)
 8007f50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f54:	f000 fbf8 	bl	8008748 <__assert_func>
 8007f58:	3101      	adds	r1, #1
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	e7ee      	b.n	8007f3c <__lshift+0x1c>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f100 0114 	add.w	r1, r0, #20
 8007f64:	f100 0210 	add.w	r2, r0, #16
 8007f68:	4618      	mov	r0, r3
 8007f6a:	4553      	cmp	r3, sl
 8007f6c:	db33      	blt.n	8007fd6 <__lshift+0xb6>
 8007f6e:	6920      	ldr	r0, [r4, #16]
 8007f70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f74:	f104 0314 	add.w	r3, r4, #20
 8007f78:	f019 091f 	ands.w	r9, r9, #31
 8007f7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f84:	d02b      	beq.n	8007fde <__lshift+0xbe>
 8007f86:	f1c9 0e20 	rsb	lr, r9, #32
 8007f8a:	468a      	mov	sl, r1
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	fa00 f009 	lsl.w	r0, r0, r9
 8007f94:	4310      	orrs	r0, r2
 8007f96:	f84a 0b04 	str.w	r0, [sl], #4
 8007f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9e:	459c      	cmp	ip, r3
 8007fa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fa4:	d8f3      	bhi.n	8007f8e <__lshift+0x6e>
 8007fa6:	ebac 0304 	sub.w	r3, ip, r4
 8007faa:	3b15      	subs	r3, #21
 8007fac:	f023 0303 	bic.w	r3, r3, #3
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	f104 0015 	add.w	r0, r4, #21
 8007fb6:	4560      	cmp	r0, ip
 8007fb8:	bf88      	it	hi
 8007fba:	2304      	movhi	r3, #4
 8007fbc:	50ca      	str	r2, [r1, r3]
 8007fbe:	b10a      	cbz	r2, 8007fc4 <__lshift+0xa4>
 8007fc0:	f108 0602 	add.w	r6, r8, #2
 8007fc4:	3e01      	subs	r6, #1
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	612e      	str	r6, [r5, #16]
 8007fca:	4621      	mov	r1, r4
 8007fcc:	f7ff fde2 	bl	8007b94 <_Bfree>
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fda:	3301      	adds	r3, #1
 8007fdc:	e7c5      	b.n	8007f6a <__lshift+0x4a>
 8007fde:	3904      	subs	r1, #4
 8007fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fe8:	459c      	cmp	ip, r3
 8007fea:	d8f9      	bhi.n	8007fe0 <__lshift+0xc0>
 8007fec:	e7ea      	b.n	8007fc4 <__lshift+0xa4>
 8007fee:	bf00      	nop
 8007ff0:	08008aa0 	.word	0x08008aa0
 8007ff4:	08008ab1 	.word	0x08008ab1

08007ff8 <__mcmp>:
 8007ff8:	690a      	ldr	r2, [r1, #16]
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	6900      	ldr	r0, [r0, #16]
 8007ffe:	1a80      	subs	r0, r0, r2
 8008000:	b530      	push	{r4, r5, lr}
 8008002:	d10e      	bne.n	8008022 <__mcmp+0x2a>
 8008004:	3314      	adds	r3, #20
 8008006:	3114      	adds	r1, #20
 8008008:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800800c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008010:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008014:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008018:	4295      	cmp	r5, r2
 800801a:	d003      	beq.n	8008024 <__mcmp+0x2c>
 800801c:	d205      	bcs.n	800802a <__mcmp+0x32>
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	bd30      	pop	{r4, r5, pc}
 8008024:	42a3      	cmp	r3, r4
 8008026:	d3f3      	bcc.n	8008010 <__mcmp+0x18>
 8008028:	e7fb      	b.n	8008022 <__mcmp+0x2a>
 800802a:	2001      	movs	r0, #1
 800802c:	e7f9      	b.n	8008022 <__mcmp+0x2a>
	...

08008030 <__mdiff>:
 8008030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	4689      	mov	r9, r1
 8008036:	4606      	mov	r6, r0
 8008038:	4611      	mov	r1, r2
 800803a:	4648      	mov	r0, r9
 800803c:	4614      	mov	r4, r2
 800803e:	f7ff ffdb 	bl	8007ff8 <__mcmp>
 8008042:	1e05      	subs	r5, r0, #0
 8008044:	d112      	bne.n	800806c <__mdiff+0x3c>
 8008046:	4629      	mov	r1, r5
 8008048:	4630      	mov	r0, r6
 800804a:	f7ff fd63 	bl	8007b14 <_Balloc>
 800804e:	4602      	mov	r2, r0
 8008050:	b928      	cbnz	r0, 800805e <__mdiff+0x2e>
 8008052:	4b3f      	ldr	r3, [pc, #252]	@ (8008150 <__mdiff+0x120>)
 8008054:	f240 2137 	movw	r1, #567	@ 0x237
 8008058:	483e      	ldr	r0, [pc, #248]	@ (8008154 <__mdiff+0x124>)
 800805a:	f000 fb75 	bl	8008748 <__assert_func>
 800805e:	2301      	movs	r3, #1
 8008060:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008064:	4610      	mov	r0, r2
 8008066:	b003      	add	sp, #12
 8008068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806c:	bfbc      	itt	lt
 800806e:	464b      	movlt	r3, r9
 8008070:	46a1      	movlt	r9, r4
 8008072:	4630      	mov	r0, r6
 8008074:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008078:	bfba      	itte	lt
 800807a:	461c      	movlt	r4, r3
 800807c:	2501      	movlt	r5, #1
 800807e:	2500      	movge	r5, #0
 8008080:	f7ff fd48 	bl	8007b14 <_Balloc>
 8008084:	4602      	mov	r2, r0
 8008086:	b918      	cbnz	r0, 8008090 <__mdiff+0x60>
 8008088:	4b31      	ldr	r3, [pc, #196]	@ (8008150 <__mdiff+0x120>)
 800808a:	f240 2145 	movw	r1, #581	@ 0x245
 800808e:	e7e3      	b.n	8008058 <__mdiff+0x28>
 8008090:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008094:	6926      	ldr	r6, [r4, #16]
 8008096:	60c5      	str	r5, [r0, #12]
 8008098:	f109 0310 	add.w	r3, r9, #16
 800809c:	f109 0514 	add.w	r5, r9, #20
 80080a0:	f104 0e14 	add.w	lr, r4, #20
 80080a4:	f100 0b14 	add.w	fp, r0, #20
 80080a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	46d9      	mov	r9, fp
 80080b4:	f04f 0c00 	mov.w	ip, #0
 80080b8:	9b01      	ldr	r3, [sp, #4]
 80080ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	fa1f f38a 	uxth.w	r3, sl
 80080c8:	4619      	mov	r1, r3
 80080ca:	b283      	uxth	r3, r0
 80080cc:	1acb      	subs	r3, r1, r3
 80080ce:	0c00      	lsrs	r0, r0, #16
 80080d0:	4463      	add	r3, ip
 80080d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080da:	b29b      	uxth	r3, r3
 80080dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080e0:	4576      	cmp	r6, lr
 80080e2:	f849 3b04 	str.w	r3, [r9], #4
 80080e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080ea:	d8e5      	bhi.n	80080b8 <__mdiff+0x88>
 80080ec:	1b33      	subs	r3, r6, r4
 80080ee:	3b15      	subs	r3, #21
 80080f0:	f023 0303 	bic.w	r3, r3, #3
 80080f4:	3415      	adds	r4, #21
 80080f6:	3304      	adds	r3, #4
 80080f8:	42a6      	cmp	r6, r4
 80080fa:	bf38      	it	cc
 80080fc:	2304      	movcc	r3, #4
 80080fe:	441d      	add	r5, r3
 8008100:	445b      	add	r3, fp
 8008102:	461e      	mov	r6, r3
 8008104:	462c      	mov	r4, r5
 8008106:	4544      	cmp	r4, r8
 8008108:	d30e      	bcc.n	8008128 <__mdiff+0xf8>
 800810a:	f108 0103 	add.w	r1, r8, #3
 800810e:	1b49      	subs	r1, r1, r5
 8008110:	f021 0103 	bic.w	r1, r1, #3
 8008114:	3d03      	subs	r5, #3
 8008116:	45a8      	cmp	r8, r5
 8008118:	bf38      	it	cc
 800811a:	2100      	movcc	r1, #0
 800811c:	440b      	add	r3, r1
 800811e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008122:	b191      	cbz	r1, 800814a <__mdiff+0x11a>
 8008124:	6117      	str	r7, [r2, #16]
 8008126:	e79d      	b.n	8008064 <__mdiff+0x34>
 8008128:	f854 1b04 	ldr.w	r1, [r4], #4
 800812c:	46e6      	mov	lr, ip
 800812e:	0c08      	lsrs	r0, r1, #16
 8008130:	fa1c fc81 	uxtah	ip, ip, r1
 8008134:	4471      	add	r1, lr
 8008136:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800813a:	b289      	uxth	r1, r1
 800813c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008140:	f846 1b04 	str.w	r1, [r6], #4
 8008144:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008148:	e7dd      	b.n	8008106 <__mdiff+0xd6>
 800814a:	3f01      	subs	r7, #1
 800814c:	e7e7      	b.n	800811e <__mdiff+0xee>
 800814e:	bf00      	nop
 8008150:	08008aa0 	.word	0x08008aa0
 8008154:	08008ab1 	.word	0x08008ab1

08008158 <__d2b>:
 8008158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800815c:	460f      	mov	r7, r1
 800815e:	2101      	movs	r1, #1
 8008160:	ec59 8b10 	vmov	r8, r9, d0
 8008164:	4616      	mov	r6, r2
 8008166:	f7ff fcd5 	bl	8007b14 <_Balloc>
 800816a:	4604      	mov	r4, r0
 800816c:	b930      	cbnz	r0, 800817c <__d2b+0x24>
 800816e:	4602      	mov	r2, r0
 8008170:	4b23      	ldr	r3, [pc, #140]	@ (8008200 <__d2b+0xa8>)
 8008172:	4824      	ldr	r0, [pc, #144]	@ (8008204 <__d2b+0xac>)
 8008174:	f240 310f 	movw	r1, #783	@ 0x30f
 8008178:	f000 fae6 	bl	8008748 <__assert_func>
 800817c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008184:	b10d      	cbz	r5, 800818a <__d2b+0x32>
 8008186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	f1b8 0300 	subs.w	r3, r8, #0
 8008190:	d023      	beq.n	80081da <__d2b+0x82>
 8008192:	4668      	mov	r0, sp
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	f7ff fd84 	bl	8007ca2 <__lo0bits>
 800819a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800819e:	b1d0      	cbz	r0, 80081d6 <__d2b+0x7e>
 80081a0:	f1c0 0320 	rsb	r3, r0, #32
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	430b      	orrs	r3, r1
 80081aa:	40c2      	lsrs	r2, r0
 80081ac:	6163      	str	r3, [r4, #20]
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	61a3      	str	r3, [r4, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bf0c      	ite	eq
 80081b8:	2201      	moveq	r2, #1
 80081ba:	2202      	movne	r2, #2
 80081bc:	6122      	str	r2, [r4, #16]
 80081be:	b1a5      	cbz	r5, 80081ea <__d2b+0x92>
 80081c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081c4:	4405      	add	r5, r0
 80081c6:	603d      	str	r5, [r7, #0]
 80081c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081cc:	6030      	str	r0, [r6, #0]
 80081ce:	4620      	mov	r0, r4
 80081d0:	b003      	add	sp, #12
 80081d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081d6:	6161      	str	r1, [r4, #20]
 80081d8:	e7ea      	b.n	80081b0 <__d2b+0x58>
 80081da:	a801      	add	r0, sp, #4
 80081dc:	f7ff fd61 	bl	8007ca2 <__lo0bits>
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	6163      	str	r3, [r4, #20]
 80081e4:	3020      	adds	r0, #32
 80081e6:	2201      	movs	r2, #1
 80081e8:	e7e8      	b.n	80081bc <__d2b+0x64>
 80081ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081f2:	6038      	str	r0, [r7, #0]
 80081f4:	6918      	ldr	r0, [r3, #16]
 80081f6:	f7ff fd35 	bl	8007c64 <__hi0bits>
 80081fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081fe:	e7e5      	b.n	80081cc <__d2b+0x74>
 8008200:	08008aa0 	.word	0x08008aa0
 8008204:	08008ab1 	.word	0x08008ab1

08008208 <__sfputc_r>:
 8008208:	6893      	ldr	r3, [r2, #8]
 800820a:	3b01      	subs	r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	b410      	push	{r4}
 8008210:	6093      	str	r3, [r2, #8]
 8008212:	da08      	bge.n	8008226 <__sfputc_r+0x1e>
 8008214:	6994      	ldr	r4, [r2, #24]
 8008216:	42a3      	cmp	r3, r4
 8008218:	db01      	blt.n	800821e <__sfputc_r+0x16>
 800821a:	290a      	cmp	r1, #10
 800821c:	d103      	bne.n	8008226 <__sfputc_r+0x1e>
 800821e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008222:	f000 b9df 	b.w	80085e4 <__swbuf_r>
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	1c58      	adds	r0, r3, #1
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	7019      	strb	r1, [r3, #0]
 800822e:	4608      	mov	r0, r1
 8008230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008234:	4770      	bx	lr

08008236 <__sfputs_r>:
 8008236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008238:	4606      	mov	r6, r0
 800823a:	460f      	mov	r7, r1
 800823c:	4614      	mov	r4, r2
 800823e:	18d5      	adds	r5, r2, r3
 8008240:	42ac      	cmp	r4, r5
 8008242:	d101      	bne.n	8008248 <__sfputs_r+0x12>
 8008244:	2000      	movs	r0, #0
 8008246:	e007      	b.n	8008258 <__sfputs_r+0x22>
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	463a      	mov	r2, r7
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ffda 	bl	8008208 <__sfputc_r>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d1f3      	bne.n	8008240 <__sfputs_r+0xa>
 8008258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800825c <_vfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	460d      	mov	r5, r1
 8008262:	b09d      	sub	sp, #116	@ 0x74
 8008264:	4614      	mov	r4, r2
 8008266:	4698      	mov	r8, r3
 8008268:	4606      	mov	r6, r0
 800826a:	b118      	cbz	r0, 8008274 <_vfiprintf_r+0x18>
 800826c:	6a03      	ldr	r3, [r0, #32]
 800826e:	b90b      	cbnz	r3, 8008274 <_vfiprintf_r+0x18>
 8008270:	f7fe fc5c 	bl	8006b2c <__sinit>
 8008274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008276:	07d9      	lsls	r1, r3, #31
 8008278:	d405      	bmi.n	8008286 <_vfiprintf_r+0x2a>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	059a      	lsls	r2, r3, #22
 800827e:	d402      	bmi.n	8008286 <_vfiprintf_r+0x2a>
 8008280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008282:	f7fe fd5c 	bl	8006d3e <__retarget_lock_acquire_recursive>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	071b      	lsls	r3, r3, #28
 800828a:	d501      	bpl.n	8008290 <_vfiprintf_r+0x34>
 800828c:	692b      	ldr	r3, [r5, #16]
 800828e:	b99b      	cbnz	r3, 80082b8 <_vfiprintf_r+0x5c>
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f000 f9e4 	bl	8008660 <__swsetup_r>
 8008298:	b170      	cbz	r0, 80082b8 <_vfiprintf_r+0x5c>
 800829a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800829c:	07dc      	lsls	r4, r3, #31
 800829e:	d504      	bpl.n	80082aa <_vfiprintf_r+0x4e>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	b01d      	add	sp, #116	@ 0x74
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	0598      	lsls	r0, r3, #22
 80082ae:	d4f7      	bmi.n	80082a0 <_vfiprintf_r+0x44>
 80082b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082b2:	f7fe fd45 	bl	8006d40 <__retarget_lock_release_recursive>
 80082b6:	e7f3      	b.n	80082a0 <_vfiprintf_r+0x44>
 80082b8:	2300      	movs	r3, #0
 80082ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80082bc:	2320      	movs	r3, #32
 80082be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80082c6:	2330      	movs	r3, #48	@ 0x30
 80082c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008478 <_vfiprintf_r+0x21c>
 80082cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082d0:	f04f 0901 	mov.w	r9, #1
 80082d4:	4623      	mov	r3, r4
 80082d6:	469a      	mov	sl, r3
 80082d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082dc:	b10a      	cbz	r2, 80082e2 <_vfiprintf_r+0x86>
 80082de:	2a25      	cmp	r2, #37	@ 0x25
 80082e0:	d1f9      	bne.n	80082d6 <_vfiprintf_r+0x7a>
 80082e2:	ebba 0b04 	subs.w	fp, sl, r4
 80082e6:	d00b      	beq.n	8008300 <_vfiprintf_r+0xa4>
 80082e8:	465b      	mov	r3, fp
 80082ea:	4622      	mov	r2, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ffa1 	bl	8008236 <__sfputs_r>
 80082f4:	3001      	adds	r0, #1
 80082f6:	f000 80a7 	beq.w	8008448 <_vfiprintf_r+0x1ec>
 80082fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082fc:	445a      	add	r2, fp
 80082fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008300:	f89a 3000 	ldrb.w	r3, [sl]
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 809f 	beq.w	8008448 <_vfiprintf_r+0x1ec>
 800830a:	2300      	movs	r3, #0
 800830c:	f04f 32ff 	mov.w	r2, #4294967295
 8008310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008314:	f10a 0a01 	add.w	sl, sl, #1
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008320:	931a      	str	r3, [sp, #104]	@ 0x68
 8008322:	4654      	mov	r4, sl
 8008324:	2205      	movs	r2, #5
 8008326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832a:	4853      	ldr	r0, [pc, #332]	@ (8008478 <_vfiprintf_r+0x21c>)
 800832c:	f7f7 ff88 	bl	8000240 <memchr>
 8008330:	9a04      	ldr	r2, [sp, #16]
 8008332:	b9d8      	cbnz	r0, 800836c <_vfiprintf_r+0x110>
 8008334:	06d1      	lsls	r1, r2, #27
 8008336:	bf44      	itt	mi
 8008338:	2320      	movmi	r3, #32
 800833a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800833e:	0713      	lsls	r3, r2, #28
 8008340:	bf44      	itt	mi
 8008342:	232b      	movmi	r3, #43	@ 0x2b
 8008344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008348:	f89a 3000 	ldrb.w	r3, [sl]
 800834c:	2b2a      	cmp	r3, #42	@ 0x2a
 800834e:	d015      	beq.n	800837c <_vfiprintf_r+0x120>
 8008350:	9a07      	ldr	r2, [sp, #28]
 8008352:	4654      	mov	r4, sl
 8008354:	2000      	movs	r0, #0
 8008356:	f04f 0c0a 	mov.w	ip, #10
 800835a:	4621      	mov	r1, r4
 800835c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008360:	3b30      	subs	r3, #48	@ 0x30
 8008362:	2b09      	cmp	r3, #9
 8008364:	d94b      	bls.n	80083fe <_vfiprintf_r+0x1a2>
 8008366:	b1b0      	cbz	r0, 8008396 <_vfiprintf_r+0x13a>
 8008368:	9207      	str	r2, [sp, #28]
 800836a:	e014      	b.n	8008396 <_vfiprintf_r+0x13a>
 800836c:	eba0 0308 	sub.w	r3, r0, r8
 8008370:	fa09 f303 	lsl.w	r3, r9, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	9304      	str	r3, [sp, #16]
 8008378:	46a2      	mov	sl, r4
 800837a:	e7d2      	b.n	8008322 <_vfiprintf_r+0xc6>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	1d19      	adds	r1, r3, #4
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	9103      	str	r1, [sp, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	bfbb      	ittet	lt
 8008388:	425b      	neglt	r3, r3
 800838a:	f042 0202 	orrlt.w	r2, r2, #2
 800838e:	9307      	strge	r3, [sp, #28]
 8008390:	9307      	strlt	r3, [sp, #28]
 8008392:	bfb8      	it	lt
 8008394:	9204      	strlt	r2, [sp, #16]
 8008396:	7823      	ldrb	r3, [r4, #0]
 8008398:	2b2e      	cmp	r3, #46	@ 0x2e
 800839a:	d10a      	bne.n	80083b2 <_vfiprintf_r+0x156>
 800839c:	7863      	ldrb	r3, [r4, #1]
 800839e:	2b2a      	cmp	r3, #42	@ 0x2a
 80083a0:	d132      	bne.n	8008408 <_vfiprintf_r+0x1ac>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	1d1a      	adds	r2, r3, #4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	9203      	str	r2, [sp, #12]
 80083aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ae:	3402      	adds	r4, #2
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008488 <_vfiprintf_r+0x22c>
 80083b6:	7821      	ldrb	r1, [r4, #0]
 80083b8:	2203      	movs	r2, #3
 80083ba:	4650      	mov	r0, sl
 80083bc:	f7f7 ff40 	bl	8000240 <memchr>
 80083c0:	b138      	cbz	r0, 80083d2 <_vfiprintf_r+0x176>
 80083c2:	9b04      	ldr	r3, [sp, #16]
 80083c4:	eba0 000a 	sub.w	r0, r0, sl
 80083c8:	2240      	movs	r2, #64	@ 0x40
 80083ca:	4082      	lsls	r2, r0
 80083cc:	4313      	orrs	r3, r2
 80083ce:	3401      	adds	r4, #1
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083d6:	4829      	ldr	r0, [pc, #164]	@ (800847c <_vfiprintf_r+0x220>)
 80083d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083dc:	2206      	movs	r2, #6
 80083de:	f7f7 ff2f 	bl	8000240 <memchr>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d03f      	beq.n	8008466 <_vfiprintf_r+0x20a>
 80083e6:	4b26      	ldr	r3, [pc, #152]	@ (8008480 <_vfiprintf_r+0x224>)
 80083e8:	bb1b      	cbnz	r3, 8008432 <_vfiprintf_r+0x1d6>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	3307      	adds	r3, #7
 80083ee:	f023 0307 	bic.w	r3, r3, #7
 80083f2:	3308      	adds	r3, #8
 80083f4:	9303      	str	r3, [sp, #12]
 80083f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f8:	443b      	add	r3, r7
 80083fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fc:	e76a      	b.n	80082d4 <_vfiprintf_r+0x78>
 80083fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008402:	460c      	mov	r4, r1
 8008404:	2001      	movs	r0, #1
 8008406:	e7a8      	b.n	800835a <_vfiprintf_r+0xfe>
 8008408:	2300      	movs	r3, #0
 800840a:	3401      	adds	r4, #1
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	4619      	mov	r1, r3
 8008410:	f04f 0c0a 	mov.w	ip, #10
 8008414:	4620      	mov	r0, r4
 8008416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800841a:	3a30      	subs	r2, #48	@ 0x30
 800841c:	2a09      	cmp	r2, #9
 800841e:	d903      	bls.n	8008428 <_vfiprintf_r+0x1cc>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0c6      	beq.n	80083b2 <_vfiprintf_r+0x156>
 8008424:	9105      	str	r1, [sp, #20]
 8008426:	e7c4      	b.n	80083b2 <_vfiprintf_r+0x156>
 8008428:	fb0c 2101 	mla	r1, ip, r1, r2
 800842c:	4604      	mov	r4, r0
 800842e:	2301      	movs	r3, #1
 8008430:	e7f0      	b.n	8008414 <_vfiprintf_r+0x1b8>
 8008432:	ab03      	add	r3, sp, #12
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	462a      	mov	r2, r5
 8008438:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <_vfiprintf_r+0x228>)
 800843a:	a904      	add	r1, sp, #16
 800843c:	4630      	mov	r0, r6
 800843e:	f7fd ff43 	bl	80062c8 <_printf_float>
 8008442:	4607      	mov	r7, r0
 8008444:	1c78      	adds	r0, r7, #1
 8008446:	d1d6      	bne.n	80083f6 <_vfiprintf_r+0x19a>
 8008448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800844a:	07d9      	lsls	r1, r3, #31
 800844c:	d405      	bmi.n	800845a <_vfiprintf_r+0x1fe>
 800844e:	89ab      	ldrh	r3, [r5, #12]
 8008450:	059a      	lsls	r2, r3, #22
 8008452:	d402      	bmi.n	800845a <_vfiprintf_r+0x1fe>
 8008454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008456:	f7fe fc73 	bl	8006d40 <__retarget_lock_release_recursive>
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	065b      	lsls	r3, r3, #25
 800845e:	f53f af1f 	bmi.w	80082a0 <_vfiprintf_r+0x44>
 8008462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008464:	e71e      	b.n	80082a4 <_vfiprintf_r+0x48>
 8008466:	ab03      	add	r3, sp, #12
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	462a      	mov	r2, r5
 800846c:	4b05      	ldr	r3, [pc, #20]	@ (8008484 <_vfiprintf_r+0x228>)
 800846e:	a904      	add	r1, sp, #16
 8008470:	4630      	mov	r0, r6
 8008472:	f7fe f9b1 	bl	80067d8 <_printf_i>
 8008476:	e7e4      	b.n	8008442 <_vfiprintf_r+0x1e6>
 8008478:	08008b0a 	.word	0x08008b0a
 800847c:	08008b14 	.word	0x08008b14
 8008480:	080062c9 	.word	0x080062c9
 8008484:	08008237 	.word	0x08008237
 8008488:	08008b10 	.word	0x08008b10

0800848c <__sflush_r>:
 800848c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008494:	0716      	lsls	r6, r2, #28
 8008496:	4605      	mov	r5, r0
 8008498:	460c      	mov	r4, r1
 800849a:	d454      	bmi.n	8008546 <__sflush_r+0xba>
 800849c:	684b      	ldr	r3, [r1, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dc02      	bgt.n	80084a8 <__sflush_r+0x1c>
 80084a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dd48      	ble.n	800853a <__sflush_r+0xae>
 80084a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084aa:	2e00      	cmp	r6, #0
 80084ac:	d045      	beq.n	800853a <__sflush_r+0xae>
 80084ae:	2300      	movs	r3, #0
 80084b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084b4:	682f      	ldr	r7, [r5, #0]
 80084b6:	6a21      	ldr	r1, [r4, #32]
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	d030      	beq.n	800851e <__sflush_r+0x92>
 80084bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	0759      	lsls	r1, r3, #29
 80084c2:	d505      	bpl.n	80084d0 <__sflush_r+0x44>
 80084c4:	6863      	ldr	r3, [r4, #4]
 80084c6:	1ad2      	subs	r2, r2, r3
 80084c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084ca:	b10b      	cbz	r3, 80084d0 <__sflush_r+0x44>
 80084cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	2300      	movs	r3, #0
 80084d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084d4:	6a21      	ldr	r1, [r4, #32]
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b0      	blx	r6
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	d106      	bne.n	80084ee <__sflush_r+0x62>
 80084e0:	6829      	ldr	r1, [r5, #0]
 80084e2:	291d      	cmp	r1, #29
 80084e4:	d82b      	bhi.n	800853e <__sflush_r+0xb2>
 80084e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008590 <__sflush_r+0x104>)
 80084e8:	40ca      	lsrs	r2, r1
 80084ea:	07d6      	lsls	r6, r2, #31
 80084ec:	d527      	bpl.n	800853e <__sflush_r+0xb2>
 80084ee:	2200      	movs	r2, #0
 80084f0:	6062      	str	r2, [r4, #4]
 80084f2:	04d9      	lsls	r1, r3, #19
 80084f4:	6922      	ldr	r2, [r4, #16]
 80084f6:	6022      	str	r2, [r4, #0]
 80084f8:	d504      	bpl.n	8008504 <__sflush_r+0x78>
 80084fa:	1c42      	adds	r2, r0, #1
 80084fc:	d101      	bne.n	8008502 <__sflush_r+0x76>
 80084fe:	682b      	ldr	r3, [r5, #0]
 8008500:	b903      	cbnz	r3, 8008504 <__sflush_r+0x78>
 8008502:	6560      	str	r0, [r4, #84]	@ 0x54
 8008504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008506:	602f      	str	r7, [r5, #0]
 8008508:	b1b9      	cbz	r1, 800853a <__sflush_r+0xae>
 800850a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800850e:	4299      	cmp	r1, r3
 8008510:	d002      	beq.n	8008518 <__sflush_r+0x8c>
 8008512:	4628      	mov	r0, r5
 8008514:	f7ff f9fe 	bl	8007914 <_free_r>
 8008518:	2300      	movs	r3, #0
 800851a:	6363      	str	r3, [r4, #52]	@ 0x34
 800851c:	e00d      	b.n	800853a <__sflush_r+0xae>
 800851e:	2301      	movs	r3, #1
 8008520:	4628      	mov	r0, r5
 8008522:	47b0      	blx	r6
 8008524:	4602      	mov	r2, r0
 8008526:	1c50      	adds	r0, r2, #1
 8008528:	d1c9      	bne.n	80084be <__sflush_r+0x32>
 800852a:	682b      	ldr	r3, [r5, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d0c6      	beq.n	80084be <__sflush_r+0x32>
 8008530:	2b1d      	cmp	r3, #29
 8008532:	d001      	beq.n	8008538 <__sflush_r+0xac>
 8008534:	2b16      	cmp	r3, #22
 8008536:	d11e      	bne.n	8008576 <__sflush_r+0xea>
 8008538:	602f      	str	r7, [r5, #0]
 800853a:	2000      	movs	r0, #0
 800853c:	e022      	b.n	8008584 <__sflush_r+0xf8>
 800853e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008542:	b21b      	sxth	r3, r3
 8008544:	e01b      	b.n	800857e <__sflush_r+0xf2>
 8008546:	690f      	ldr	r7, [r1, #16]
 8008548:	2f00      	cmp	r7, #0
 800854a:	d0f6      	beq.n	800853a <__sflush_r+0xae>
 800854c:	0793      	lsls	r3, r2, #30
 800854e:	680e      	ldr	r6, [r1, #0]
 8008550:	bf08      	it	eq
 8008552:	694b      	ldreq	r3, [r1, #20]
 8008554:	600f      	str	r7, [r1, #0]
 8008556:	bf18      	it	ne
 8008558:	2300      	movne	r3, #0
 800855a:	eba6 0807 	sub.w	r8, r6, r7
 800855e:	608b      	str	r3, [r1, #8]
 8008560:	f1b8 0f00 	cmp.w	r8, #0
 8008564:	dde9      	ble.n	800853a <__sflush_r+0xae>
 8008566:	6a21      	ldr	r1, [r4, #32]
 8008568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800856a:	4643      	mov	r3, r8
 800856c:	463a      	mov	r2, r7
 800856e:	4628      	mov	r0, r5
 8008570:	47b0      	blx	r6
 8008572:	2800      	cmp	r0, #0
 8008574:	dc08      	bgt.n	8008588 <__sflush_r+0xfc>
 8008576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	f04f 30ff 	mov.w	r0, #4294967295
 8008584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008588:	4407      	add	r7, r0
 800858a:	eba8 0800 	sub.w	r8, r8, r0
 800858e:	e7e7      	b.n	8008560 <__sflush_r+0xd4>
 8008590:	20400001 	.word	0x20400001

08008594 <_fflush_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	690b      	ldr	r3, [r1, #16]
 8008598:	4605      	mov	r5, r0
 800859a:	460c      	mov	r4, r1
 800859c:	b913      	cbnz	r3, 80085a4 <_fflush_r+0x10>
 800859e:	2500      	movs	r5, #0
 80085a0:	4628      	mov	r0, r5
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	b118      	cbz	r0, 80085ae <_fflush_r+0x1a>
 80085a6:	6a03      	ldr	r3, [r0, #32]
 80085a8:	b90b      	cbnz	r3, 80085ae <_fflush_r+0x1a>
 80085aa:	f7fe fabf 	bl	8006b2c <__sinit>
 80085ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f3      	beq.n	800859e <_fflush_r+0xa>
 80085b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085b8:	07d0      	lsls	r0, r2, #31
 80085ba:	d404      	bmi.n	80085c6 <_fflush_r+0x32>
 80085bc:	0599      	lsls	r1, r3, #22
 80085be:	d402      	bmi.n	80085c6 <_fflush_r+0x32>
 80085c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085c2:	f7fe fbbc 	bl	8006d3e <__retarget_lock_acquire_recursive>
 80085c6:	4628      	mov	r0, r5
 80085c8:	4621      	mov	r1, r4
 80085ca:	f7ff ff5f 	bl	800848c <__sflush_r>
 80085ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085d0:	07da      	lsls	r2, r3, #31
 80085d2:	4605      	mov	r5, r0
 80085d4:	d4e4      	bmi.n	80085a0 <_fflush_r+0xc>
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	059b      	lsls	r3, r3, #22
 80085da:	d4e1      	bmi.n	80085a0 <_fflush_r+0xc>
 80085dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085de:	f7fe fbaf 	bl	8006d40 <__retarget_lock_release_recursive>
 80085e2:	e7dd      	b.n	80085a0 <_fflush_r+0xc>

080085e4 <__swbuf_r>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	460e      	mov	r6, r1
 80085e8:	4614      	mov	r4, r2
 80085ea:	4605      	mov	r5, r0
 80085ec:	b118      	cbz	r0, 80085f6 <__swbuf_r+0x12>
 80085ee:	6a03      	ldr	r3, [r0, #32]
 80085f0:	b90b      	cbnz	r3, 80085f6 <__swbuf_r+0x12>
 80085f2:	f7fe fa9b 	bl	8006b2c <__sinit>
 80085f6:	69a3      	ldr	r3, [r4, #24]
 80085f8:	60a3      	str	r3, [r4, #8]
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	071a      	lsls	r2, r3, #28
 80085fe:	d501      	bpl.n	8008604 <__swbuf_r+0x20>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	b943      	cbnz	r3, 8008616 <__swbuf_r+0x32>
 8008604:	4621      	mov	r1, r4
 8008606:	4628      	mov	r0, r5
 8008608:	f000 f82a 	bl	8008660 <__swsetup_r>
 800860c:	b118      	cbz	r0, 8008616 <__swbuf_r+0x32>
 800860e:	f04f 37ff 	mov.w	r7, #4294967295
 8008612:	4638      	mov	r0, r7
 8008614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	6922      	ldr	r2, [r4, #16]
 800861a:	1a98      	subs	r0, r3, r2
 800861c:	6963      	ldr	r3, [r4, #20]
 800861e:	b2f6      	uxtb	r6, r6
 8008620:	4283      	cmp	r3, r0
 8008622:	4637      	mov	r7, r6
 8008624:	dc05      	bgt.n	8008632 <__swbuf_r+0x4e>
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f7ff ffb3 	bl	8008594 <_fflush_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	d1ed      	bne.n	800860e <__swbuf_r+0x2a>
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	3b01      	subs	r3, #1
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	701e      	strb	r6, [r3, #0]
 8008640:	6962      	ldr	r2, [r4, #20]
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	429a      	cmp	r2, r3
 8008646:	d004      	beq.n	8008652 <__swbuf_r+0x6e>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	07db      	lsls	r3, r3, #31
 800864c:	d5e1      	bpl.n	8008612 <__swbuf_r+0x2e>
 800864e:	2e0a      	cmp	r6, #10
 8008650:	d1df      	bne.n	8008612 <__swbuf_r+0x2e>
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	f7ff ff9d 	bl	8008594 <_fflush_r>
 800865a:	2800      	cmp	r0, #0
 800865c:	d0d9      	beq.n	8008612 <__swbuf_r+0x2e>
 800865e:	e7d6      	b.n	800860e <__swbuf_r+0x2a>

08008660 <__swsetup_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4b29      	ldr	r3, [pc, #164]	@ (8008708 <__swsetup_r+0xa8>)
 8008664:	4605      	mov	r5, r0
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	460c      	mov	r4, r1
 800866a:	b118      	cbz	r0, 8008674 <__swsetup_r+0x14>
 800866c:	6a03      	ldr	r3, [r0, #32]
 800866e:	b90b      	cbnz	r3, 8008674 <__swsetup_r+0x14>
 8008670:	f7fe fa5c 	bl	8006b2c <__sinit>
 8008674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008678:	0719      	lsls	r1, r3, #28
 800867a:	d422      	bmi.n	80086c2 <__swsetup_r+0x62>
 800867c:	06da      	lsls	r2, r3, #27
 800867e:	d407      	bmi.n	8008690 <__swsetup_r+0x30>
 8008680:	2209      	movs	r2, #9
 8008682:	602a      	str	r2, [r5, #0]
 8008684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295
 800868e:	e033      	b.n	80086f8 <__swsetup_r+0x98>
 8008690:	0758      	lsls	r0, r3, #29
 8008692:	d512      	bpl.n	80086ba <__swsetup_r+0x5a>
 8008694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008696:	b141      	cbz	r1, 80086aa <__swsetup_r+0x4a>
 8008698:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800869c:	4299      	cmp	r1, r3
 800869e:	d002      	beq.n	80086a6 <__swsetup_r+0x46>
 80086a0:	4628      	mov	r0, r5
 80086a2:	f7ff f937 	bl	8007914 <_free_r>
 80086a6:	2300      	movs	r3, #0
 80086a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	2300      	movs	r3, #0
 80086b4:	6063      	str	r3, [r4, #4]
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f043 0308 	orr.w	r3, r3, #8
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	b94b      	cbnz	r3, 80086da <__swsetup_r+0x7a>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d0:	d003      	beq.n	80086da <__swsetup_r+0x7a>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 f8c1 	bl	800885c <__smakebuf_r>
 80086da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086de:	f013 0201 	ands.w	r2, r3, #1
 80086e2:	d00a      	beq.n	80086fa <__swsetup_r+0x9a>
 80086e4:	2200      	movs	r2, #0
 80086e6:	60a2      	str	r2, [r4, #8]
 80086e8:	6962      	ldr	r2, [r4, #20]
 80086ea:	4252      	negs	r2, r2
 80086ec:	61a2      	str	r2, [r4, #24]
 80086ee:	6922      	ldr	r2, [r4, #16]
 80086f0:	b942      	cbnz	r2, 8008704 <__swsetup_r+0xa4>
 80086f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086f6:	d1c5      	bne.n	8008684 <__swsetup_r+0x24>
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
 80086fa:	0799      	lsls	r1, r3, #30
 80086fc:	bf58      	it	pl
 80086fe:	6962      	ldrpl	r2, [r4, #20]
 8008700:	60a2      	str	r2, [r4, #8]
 8008702:	e7f4      	b.n	80086ee <__swsetup_r+0x8e>
 8008704:	2000      	movs	r0, #0
 8008706:	e7f7      	b.n	80086f8 <__swsetup_r+0x98>
 8008708:	20000018 	.word	0x20000018

0800870c <_sbrk_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d06      	ldr	r5, [pc, #24]	@ (8008728 <_sbrk_r+0x1c>)
 8008710:	2300      	movs	r3, #0
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	602b      	str	r3, [r5, #0]
 8008718:	f7f8 fe5a 	bl	80013d0 <_sbrk>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_sbrk_r+0x1a>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_sbrk_r+0x1a>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	20000cb4 	.word	0x20000cb4

0800872c <memcpy>:
 800872c:	440a      	add	r2, r1
 800872e:	4291      	cmp	r1, r2
 8008730:	f100 33ff 	add.w	r3, r0, #4294967295
 8008734:	d100      	bne.n	8008738 <memcpy+0xc>
 8008736:	4770      	bx	lr
 8008738:	b510      	push	{r4, lr}
 800873a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800873e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008742:	4291      	cmp	r1, r2
 8008744:	d1f9      	bne.n	800873a <memcpy+0xe>
 8008746:	bd10      	pop	{r4, pc}

08008748 <__assert_func>:
 8008748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800874a:	4614      	mov	r4, r2
 800874c:	461a      	mov	r2, r3
 800874e:	4b09      	ldr	r3, [pc, #36]	@ (8008774 <__assert_func+0x2c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4605      	mov	r5, r0
 8008754:	68d8      	ldr	r0, [r3, #12]
 8008756:	b14c      	cbz	r4, 800876c <__assert_func+0x24>
 8008758:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <__assert_func+0x30>)
 800875a:	9100      	str	r1, [sp, #0]
 800875c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008760:	4906      	ldr	r1, [pc, #24]	@ (800877c <__assert_func+0x34>)
 8008762:	462b      	mov	r3, r5
 8008764:	f000 f842 	bl	80087ec <fiprintf>
 8008768:	f000 f8d6 	bl	8008918 <abort>
 800876c:	4b04      	ldr	r3, [pc, #16]	@ (8008780 <__assert_func+0x38>)
 800876e:	461c      	mov	r4, r3
 8008770:	e7f3      	b.n	800875a <__assert_func+0x12>
 8008772:	bf00      	nop
 8008774:	20000018 	.word	0x20000018
 8008778:	08008b25 	.word	0x08008b25
 800877c:	08008b32 	.word	0x08008b32
 8008780:	08008b60 	.word	0x08008b60

08008784 <_calloc_r>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	fba1 5402 	umull	r5, r4, r1, r2
 800878a:	b934      	cbnz	r4, 800879a <_calloc_r+0x16>
 800878c:	4629      	mov	r1, r5
 800878e:	f7ff f935 	bl	80079fc <_malloc_r>
 8008792:	4606      	mov	r6, r0
 8008794:	b928      	cbnz	r0, 80087a2 <_calloc_r+0x1e>
 8008796:	4630      	mov	r0, r6
 8008798:	bd70      	pop	{r4, r5, r6, pc}
 800879a:	220c      	movs	r2, #12
 800879c:	6002      	str	r2, [r0, #0]
 800879e:	2600      	movs	r6, #0
 80087a0:	e7f9      	b.n	8008796 <_calloc_r+0x12>
 80087a2:	462a      	mov	r2, r5
 80087a4:	4621      	mov	r1, r4
 80087a6:	f7fe fa4c 	bl	8006c42 <memset>
 80087aa:	e7f4      	b.n	8008796 <_calloc_r+0x12>

080087ac <__ascii_mbtowc>:
 80087ac:	b082      	sub	sp, #8
 80087ae:	b901      	cbnz	r1, 80087b2 <__ascii_mbtowc+0x6>
 80087b0:	a901      	add	r1, sp, #4
 80087b2:	b142      	cbz	r2, 80087c6 <__ascii_mbtowc+0x1a>
 80087b4:	b14b      	cbz	r3, 80087ca <__ascii_mbtowc+0x1e>
 80087b6:	7813      	ldrb	r3, [r2, #0]
 80087b8:	600b      	str	r3, [r1, #0]
 80087ba:	7812      	ldrb	r2, [r2, #0]
 80087bc:	1e10      	subs	r0, r2, #0
 80087be:	bf18      	it	ne
 80087c0:	2001      	movne	r0, #1
 80087c2:	b002      	add	sp, #8
 80087c4:	4770      	bx	lr
 80087c6:	4610      	mov	r0, r2
 80087c8:	e7fb      	b.n	80087c2 <__ascii_mbtowc+0x16>
 80087ca:	f06f 0001 	mvn.w	r0, #1
 80087ce:	e7f8      	b.n	80087c2 <__ascii_mbtowc+0x16>

080087d0 <__ascii_wctomb>:
 80087d0:	4603      	mov	r3, r0
 80087d2:	4608      	mov	r0, r1
 80087d4:	b141      	cbz	r1, 80087e8 <__ascii_wctomb+0x18>
 80087d6:	2aff      	cmp	r2, #255	@ 0xff
 80087d8:	d904      	bls.n	80087e4 <__ascii_wctomb+0x14>
 80087da:	228a      	movs	r2, #138	@ 0x8a
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	f04f 30ff 	mov.w	r0, #4294967295
 80087e2:	4770      	bx	lr
 80087e4:	700a      	strb	r2, [r1, #0]
 80087e6:	2001      	movs	r0, #1
 80087e8:	4770      	bx	lr
	...

080087ec <fiprintf>:
 80087ec:	b40e      	push	{r1, r2, r3}
 80087ee:	b503      	push	{r0, r1, lr}
 80087f0:	4601      	mov	r1, r0
 80087f2:	ab03      	add	r3, sp, #12
 80087f4:	4805      	ldr	r0, [pc, #20]	@ (800880c <fiprintf+0x20>)
 80087f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087fa:	6800      	ldr	r0, [r0, #0]
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	f7ff fd2d 	bl	800825c <_vfiprintf_r>
 8008802:	b002      	add	sp, #8
 8008804:	f85d eb04 	ldr.w	lr, [sp], #4
 8008808:	b003      	add	sp, #12
 800880a:	4770      	bx	lr
 800880c:	20000018 	.word	0x20000018

08008810 <__swhatbuf_r>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	460c      	mov	r4, r1
 8008814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008818:	2900      	cmp	r1, #0
 800881a:	b096      	sub	sp, #88	@ 0x58
 800881c:	4615      	mov	r5, r2
 800881e:	461e      	mov	r6, r3
 8008820:	da0d      	bge.n	800883e <__swhatbuf_r+0x2e>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008828:	f04f 0100 	mov.w	r1, #0
 800882c:	bf14      	ite	ne
 800882e:	2340      	movne	r3, #64	@ 0x40
 8008830:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008834:	2000      	movs	r0, #0
 8008836:	6031      	str	r1, [r6, #0]
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	b016      	add	sp, #88	@ 0x58
 800883c:	bd70      	pop	{r4, r5, r6, pc}
 800883e:	466a      	mov	r2, sp
 8008840:	f000 f848 	bl	80088d4 <_fstat_r>
 8008844:	2800      	cmp	r0, #0
 8008846:	dbec      	blt.n	8008822 <__swhatbuf_r+0x12>
 8008848:	9901      	ldr	r1, [sp, #4]
 800884a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800884e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008852:	4259      	negs	r1, r3
 8008854:	4159      	adcs	r1, r3
 8008856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800885a:	e7eb      	b.n	8008834 <__swhatbuf_r+0x24>

0800885c <__smakebuf_r>:
 800885c:	898b      	ldrh	r3, [r1, #12]
 800885e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008860:	079d      	lsls	r5, r3, #30
 8008862:	4606      	mov	r6, r0
 8008864:	460c      	mov	r4, r1
 8008866:	d507      	bpl.n	8008878 <__smakebuf_r+0x1c>
 8008868:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	6123      	str	r3, [r4, #16]
 8008870:	2301      	movs	r3, #1
 8008872:	6163      	str	r3, [r4, #20]
 8008874:	b003      	add	sp, #12
 8008876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008878:	ab01      	add	r3, sp, #4
 800887a:	466a      	mov	r2, sp
 800887c:	f7ff ffc8 	bl	8008810 <__swhatbuf_r>
 8008880:	9f00      	ldr	r7, [sp, #0]
 8008882:	4605      	mov	r5, r0
 8008884:	4639      	mov	r1, r7
 8008886:	4630      	mov	r0, r6
 8008888:	f7ff f8b8 	bl	80079fc <_malloc_r>
 800888c:	b948      	cbnz	r0, 80088a2 <__smakebuf_r+0x46>
 800888e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008892:	059a      	lsls	r2, r3, #22
 8008894:	d4ee      	bmi.n	8008874 <__smakebuf_r+0x18>
 8008896:	f023 0303 	bic.w	r3, r3, #3
 800889a:	f043 0302 	orr.w	r3, r3, #2
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	e7e2      	b.n	8008868 <__smakebuf_r+0xc>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	6020      	str	r0, [r4, #0]
 80088a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	9b01      	ldr	r3, [sp, #4]
 80088ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088b2:	b15b      	cbz	r3, 80088cc <__smakebuf_r+0x70>
 80088b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088b8:	4630      	mov	r0, r6
 80088ba:	f000 f81d 	bl	80088f8 <_isatty_r>
 80088be:	b128      	cbz	r0, 80088cc <__smakebuf_r+0x70>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f023 0303 	bic.w	r3, r3, #3
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	431d      	orrs	r5, r3
 80088d0:	81a5      	strh	r5, [r4, #12]
 80088d2:	e7cf      	b.n	8008874 <__smakebuf_r+0x18>

080088d4 <_fstat_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	@ (80088f4 <_fstat_r+0x20>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	4611      	mov	r1, r2
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	f7f8 fd4d 	bl	8001380 <_fstat>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d102      	bne.n	80088f0 <_fstat_r+0x1c>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	b103      	cbz	r3, 80088f0 <_fstat_r+0x1c>
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	bd38      	pop	{r3, r4, r5, pc}
 80088f2:	bf00      	nop
 80088f4:	20000cb4 	.word	0x20000cb4

080088f8 <_isatty_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d06      	ldr	r5, [pc, #24]	@ (8008914 <_isatty_r+0x1c>)
 80088fc:	2300      	movs	r3, #0
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f8 fd4c 	bl	80013a0 <_isatty>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_isatty_r+0x1a>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_isatty_r+0x1a>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000cb4 	.word	0x20000cb4

08008918 <abort>:
 8008918:	b508      	push	{r3, lr}
 800891a:	2006      	movs	r0, #6
 800891c:	f000 f82c 	bl	8008978 <raise>
 8008920:	2001      	movs	r0, #1
 8008922:	f7f8 fcdd 	bl	80012e0 <_exit>

08008926 <_raise_r>:
 8008926:	291f      	cmp	r1, #31
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4605      	mov	r5, r0
 800892c:	460c      	mov	r4, r1
 800892e:	d904      	bls.n	800893a <_raise_r+0x14>
 8008930:	2316      	movs	r3, #22
 8008932:	6003      	str	r3, [r0, #0]
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	bd38      	pop	{r3, r4, r5, pc}
 800893a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800893c:	b112      	cbz	r2, 8008944 <_raise_r+0x1e>
 800893e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008942:	b94b      	cbnz	r3, 8008958 <_raise_r+0x32>
 8008944:	4628      	mov	r0, r5
 8008946:	f000 f831 	bl	80089ac <_getpid_r>
 800894a:	4622      	mov	r2, r4
 800894c:	4601      	mov	r1, r0
 800894e:	4628      	mov	r0, r5
 8008950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008954:	f000 b818 	b.w	8008988 <_kill_r>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d00a      	beq.n	8008972 <_raise_r+0x4c>
 800895c:	1c59      	adds	r1, r3, #1
 800895e:	d103      	bne.n	8008968 <_raise_r+0x42>
 8008960:	2316      	movs	r3, #22
 8008962:	6003      	str	r3, [r0, #0]
 8008964:	2001      	movs	r0, #1
 8008966:	e7e7      	b.n	8008938 <_raise_r+0x12>
 8008968:	2100      	movs	r1, #0
 800896a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800896e:	4620      	mov	r0, r4
 8008970:	4798      	blx	r3
 8008972:	2000      	movs	r0, #0
 8008974:	e7e0      	b.n	8008938 <_raise_r+0x12>
	...

08008978 <raise>:
 8008978:	4b02      	ldr	r3, [pc, #8]	@ (8008984 <raise+0xc>)
 800897a:	4601      	mov	r1, r0
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	f7ff bfd2 	b.w	8008926 <_raise_r>
 8008982:	bf00      	nop
 8008984:	20000018 	.word	0x20000018

08008988 <_kill_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	@ (80089a8 <_kill_r+0x20>)
 800898c:	2300      	movs	r3, #0
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	4611      	mov	r1, r2
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	f7f8 fc93 	bl	80012c0 <_kill>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d102      	bne.n	80089a4 <_kill_r+0x1c>
 800899e:	682b      	ldr	r3, [r5, #0]
 80089a0:	b103      	cbz	r3, 80089a4 <_kill_r+0x1c>
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
 80089a6:	bf00      	nop
 80089a8:	20000cb4 	.word	0x20000cb4

080089ac <_getpid_r>:
 80089ac:	f7f8 bc80 	b.w	80012b0 <_getpid>

080089b0 <_init>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr

080089bc <_fini>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr
