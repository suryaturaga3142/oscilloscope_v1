
oscilloscope_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008808  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08008a08  08008a08  00009a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da4  08008da4  0000a314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008da4  08008da4  00009da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dac  08008dac  0000a314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dac  08008dac  00009dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008db0  08008db0  00009db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008db4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08008f88  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009028  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009b0  20000314  080090c8  0000a314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000cc4  080090c8  0000acc4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a268  00000000  00000000  0000a342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035aa  00000000  00000000  000245aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001668  00000000  00000000  00027b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001166  00000000  00000000  000291c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bd7c  00000000  00000000  0002a326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b6bb  00000000  00000000  000560a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010cbea  00000000  00000000  0007175d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017e347  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006dfc  00000000  00000000  0017e38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  00185188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	080089f0 	.word	0x080089f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	080089f0 	.word	0x080089f0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <__io_putchar+0x20>)
 800062e:	f004 fddd 	bl	80051ec <HAL_UART_Transmit>
  return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000580 	.word	0x20000580

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e028      	b.n	800069e <main+0x5e>
		dac_buf[i] = 1.3f * i * (i - 15) * (i - 31) + 1970;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000656:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000714 <main+0xd4>
 800065a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3b0f      	subs	r3, #15
 8000662:	ee07 3a90 	vmov	s15, r3
 8000666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3b1f      	subs	r3, #31
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000718 <main+0xd8>
 8000682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068a:	ee17 3a90 	vmov	r3, s15
 800068e:	b299      	uxth	r1, r3
 8000690:	4a22      	ldr	r2, [pc, #136]	@ (800071c <main+0xdc>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b1f      	cmp	r3, #31
 80006a2:	ddd3      	ble.n	800064c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 ff25 	bl	80014f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f844 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 fa5c 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b0:	f000 fa28 	bl	8000b04 <MX_DMA_Init>
  MX_ETH_Init();
 80006b4:	f000 f92c 	bl	8000910 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006b8:	f000 f9c6 	bl	8000a48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006bc:	f000 f9f4 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006c0:	f000 f8aa 	bl	8000818 <MX_ADC1_Init>
  MX_DAC_Init();
 80006c4:	f000 f8fa 	bl	80008bc <MX_DAC_Init>
  MX_TIM2_Init();
 80006c8:	f000 f970 	bl	80009ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80006cc:	4814      	ldr	r0, [pc, #80]	@ (8000720 <main+0xe0>)
 80006ce:	f004 fa37 	bl	8004b40 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dac_buf, DAC_BUF_LEN, DAC_ALIGN_12B_R);
 80006d2:	2300      	movs	r3, #0
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2320      	movs	r3, #32
 80006d8:	4a10      	ldr	r2, [pc, #64]	@ (800071c <main+0xdc>)
 80006da:	2100      	movs	r1, #0
 80006dc:	4811      	ldr	r0, [pc, #68]	@ (8000724 <main+0xe4>)
 80006de:	f001 fcf3 	bl	80020c8 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80006e2:	2220      	movs	r2, #32
 80006e4:	4910      	ldr	r1, [pc, #64]	@ (8000728 <main+0xe8>)
 80006e6:	4811      	ldr	r0, [pc, #68]	@ (800072c <main+0xec>)
 80006e8:	f000 ffc8 	bl	800167c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_Delay(10);
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	e00b      	b.n	800070a <main+0xca>
		  printf("%u\r\n", adc_buf[i]);
 80006f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <main+0xe8>)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <main+0xf0>)
 8000700:	f006 fa6a 	bl	8006bd8 <iprintf>
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	2b1f      	cmp	r3, #31
 800070e:	ddf0      	ble.n	80006f2 <main+0xb2>
 8000710:	e7ec      	b.n	80006ec <main+0xac>
 8000712:	bf00      	nop
 8000714:	3fa66666 	.word	0x3fa66666
 8000718:	44f64000 	.word	0x44f64000
 800071c:	20000b28 	.word	0x20000b28
 8000720:	20000534 	.word	0x20000534
 8000724:	20000410 	.word	0x20000410
 8000728:	20000ae8 	.word	0x20000ae8
 800072c:	20000368 	.word	0x20000368
 8000730:	08008a08 	.word	0x08008a08

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	@ 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f006 fa9d 	bl	8006c82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000758:	f003 f83e 	bl	80037d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <SystemClock_Config+0xdc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a2b      	ldr	r2, [pc, #172]	@ (8000810 <SystemClock_Config+0xdc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemClock_Config+0xdc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000774:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <SystemClock_Config+0xe0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800077c:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <SystemClock_Config+0xe0>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000794:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007a8:	2360      	movs	r3, #96	@ 0x60
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 f86b 	bl	8003898 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 fa8c 	bl	8000ce4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f003 f814 	bl	80037f8 <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007d6:	f000 fa85 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	2103      	movs	r1, #3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fafc 	bl	8003df4 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000802:	f000 fa6f 	bl	8000ce4 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	@ 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800082c:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <MX_ADC1_Init+0xa0>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 8000832:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000836:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 8000846:	2201      	movs	r2, #1
 8000848:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 8000854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800085c:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800086a:	2201      	movs	r2, #1
 800086c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 8000870:	2201      	movs	r2, #1
 8000872:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 8000878:	2201      	movs	r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800087e:	f000 feb9 	bl	80015f4 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000888:	f000 fa2c 	bl	8000ce4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_ADC1_Init+0x9c>)
 800089e:	f001 f809 	bl	80018b4 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008a8:	f000 fa1c 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000368 	.word	0x20000368
 80008b8:	40012000 	.word	0x40012000

080008bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_DAC_Init+0x4c>)
 80008cc:	4a0f      	ldr	r2, [pc, #60]	@ (800090c <MX_DAC_Init+0x50>)
 80008ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_DAC_Init+0x4c>)
 80008d2:	f001 fbd6 	bl	8002082 <HAL_DAC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008dc:	f000 fa02 	bl	8000ce4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80008e0:	2324      	movs	r3, #36	@ 0x24
 80008e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_DAC_Init+0x4c>)
 80008f0:	f001 fcc8 	bl	8002284 <HAL_DAC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008fa:	f000 f9f3 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000410 	.word	0x20000410
 800090c:	40007400 	.word	0x40007400

08000910 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_ETH_Init+0x84>)
 8000916:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <MX_ETH_Init+0x88>)
 8000918:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <MX_ETH_Init+0x8c>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <MX_ETH_Init+0x8c>)
 8000922:	2280      	movs	r2, #128	@ 0x80
 8000924:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_ETH_Init+0x8c>)
 8000928:	22e1      	movs	r2, #225	@ 0xe1
 800092a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_ETH_Init+0x8c>)
 800092e:	2200      	movs	r2, #0
 8000930:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_ETH_Init+0x8c>)
 8000934:	2200      	movs	r2, #0
 8000936:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_ETH_Init+0x8c>)
 800093a:	2200      	movs	r2, #0
 800093c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_ETH_Init+0x84>)
 8000940:	4a16      	ldr	r2, [pc, #88]	@ (800099c <MX_ETH_Init+0x8c>)
 8000942:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_ETH_Init+0x84>)
 8000946:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800094a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_ETH_Init+0x84>)
 800094e:	4a14      	ldr	r2, [pc, #80]	@ (80009a0 <MX_ETH_Init+0x90>)
 8000950:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_ETH_Init+0x84>)
 8000954:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <MX_ETH_Init+0x94>)
 8000956:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_ETH_Init+0x84>)
 800095a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800095e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <MX_ETH_Init+0x84>)
 8000962:	f002 f8eb 	bl	8002b3c <HAL_ETH_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800096c:	f000 f9ba 	bl	8000ce4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000970:	2238      	movs	r2, #56	@ 0x38
 8000972:	2100      	movs	r1, #0
 8000974:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <MX_ETH_Init+0x98>)
 8000976:	f006 f984 	bl	8006c82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_ETH_Init+0x98>)
 800097c:	2221      	movs	r2, #33	@ 0x21
 800097e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_ETH_Init+0x98>)
 8000982:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000986:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_ETH_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000484 	.word	0x20000484
 8000998:	40028000 	.word	0x40028000
 800099c:	20000b68 	.word	0x20000b68
 80009a0:	20000274 	.word	0x20000274
 80009a4:	200001d4 	.word	0x200001d4
 80009a8:	20000330 	.word	0x20000330

080009ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 95;
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009e2:	225f      	movs	r2, #95	@ 0x5f
 80009e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <MX_TIM2_Init+0x98>)
 80009f4:	f004 f84c 	bl	8004a90 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009fe:	f000 f971 	bl	8000ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <MX_TIM2_Init+0x98>)
 8000a10:	f004 f906 	bl	8004c20 <HAL_TIM_ConfigClockSource>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a1a:	f000 f963 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <MX_TIM2_Init+0x98>)
 8000a2c:	f004 fb02 	bl	8005034 <HAL_TIMEx_MasterConfigSynchronization>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a36:	f000 f955 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000534 	.word	0x20000534

08000a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <MX_USART3_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a8c:	f004 fb60 	bl	8005150 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f925 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000580 	.word	0x20000580
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	f002 fd39 	bl	8003562 <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f8f5 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000608 	.word	0x20000608

08000b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <MX_DMA_Init+0x60>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a15      	ldr	r2, [pc, #84]	@ (8000b64 <MX_DMA_Init+0x60>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_DMA_Init+0x60>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_DMA_Init+0x60>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a0f      	ldr	r2, [pc, #60]	@ (8000b64 <MX_DMA_Init+0x60>)
 8000b28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <MX_DMA_Init+0x60>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2010      	movs	r0, #16
 8000b40:	f001 fa69 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b44:	2010      	movs	r0, #16
 8000b46:	f001 fa82 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2038      	movs	r0, #56	@ 0x38
 8000b50:	f001 fa61 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b54:	2038      	movs	r0, #56	@ 0x38
 8000b56:	f001 fa7a 	bl	800204e <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	@ 0x30
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b54      	ldr	r3, [pc, #336]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a53      	ldr	r2, [pc, #332]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b51      	ldr	r3, [pc, #324]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	4b48      	ldr	r3, [pc, #288]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a47      	ldr	r2, [pc, #284]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b45      	ldr	r3, [pc, #276]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b42      	ldr	r3, [pc, #264]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a41      	ldr	r2, [pc, #260]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a3b      	ldr	r2, [pc, #236]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b39      	ldr	r3, [pc, #228]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a35      	ldr	r2, [pc, #212]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b33      	ldr	r3, [pc, #204]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c0e:	4b30      	ldr	r3, [pc, #192]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd0 <MX_GPIO_Init+0x168>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c2c:	4829      	ldr	r0, [pc, #164]	@ (8000cd4 <MX_GPIO_Init+0x16c>)
 8000c2e:	f002 fc7f 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4828      	ldr	r0, [pc, #160]	@ (8000cd8 <MX_GPIO_Init+0x170>)
 8000c38:	f002 fc7a 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4822      	ldr	r0, [pc, #136]	@ (8000cdc <MX_GPIO_Init+0x174>)
 8000c54:	f002 fac0 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481c      	ldr	r0, [pc, #112]	@ (8000ce0 <MX_GPIO_Init+0x178>)
 8000c70:	f002 fab2 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c74:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4811      	ldr	r0, [pc, #68]	@ (8000cd4 <MX_GPIO_Init+0x16c>)
 8000c8e:	f002 faa3 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c92:	2340      	movs	r3, #64	@ 0x40
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <MX_GPIO_Init+0x170>)
 8000caa:	f002 fa95 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cae:	2380      	movs	r3, #128	@ 0x80
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_GPIO_Init+0x170>)
 8000cc2:	f002 fa89 	bl	80031d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	@ 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40021800 	.word	0x40021800
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40021400 	.word	0x40021400

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <HAL_MspInit+0x44>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000d34 <HAL_MspInit+0x44>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_MspInit+0x44>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a2d      	ldr	r2, [pc, #180]	@ (8000e0c <HAL_ADC_MspInit+0xd4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d153      	bne.n	8000e02 <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b2a      	ldr	r3, [pc, #168]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a26      	ldr	r2, [pc, #152]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <HAL_ADC_MspInit+0xd8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481d      	ldr	r0, [pc, #116]	@ (8000e14 <HAL_ADC_MspInit+0xdc>)
 8000d9e:	f002 fa1b 	bl	80031d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000da4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <HAL_ADC_MspInit+0xe4>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000dc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de6:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000de8:	f001 fb30 	bl	800244c <HAL_DMA_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000df2:	f7ff ff77 	bl	8000ce4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000dfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dfc:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <HAL_ADC_MspInit+0xe0>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40012000 	.word	0x40012000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000
 8000e18:	200003b0 	.word	0x200003b0
 8000e1c:	40026410 	.word	0x40026410

08000e20 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef4 <HAL_DAC_MspInit+0xd4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d154      	bne.n	8000eec <HAL_DAC_MspInit+0xcc>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <HAL_DAC_MspInit+0xd8>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a2c      	ldr	r2, [pc, #176]	@ (8000ef8 <HAL_DAC_MspInit+0xd8>)
 8000e48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <HAL_DAC_MspInit+0xd8>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <HAL_DAC_MspInit+0xd8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a26      	ldr	r2, [pc, #152]	@ (8000ef8 <HAL_DAC_MspInit+0xd8>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <HAL_DAC_MspInit+0xd8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e72:	2310      	movs	r3, #16
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	481d      	ldr	r0, [pc, #116]	@ (8000efc <HAL_DAC_MspInit+0xdc>)
 8000e86:	f002 f9a7 	bl	80031d8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <HAL_DAC_MspInit+0xe4>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000e92:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000e96:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e98:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000e9a:	2240      	movs	r2, #64	@ 0x40
 8000e9c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eaa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eb2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000eb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ebe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ec2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000ed0:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ed2:	f001 fabb 	bl	800244c <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000edc:	f7ff ff02 	bl	8000ce4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <HAL_DAC_MspInit+0xe0>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	@ 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40007400 	.word	0x40007400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	20000424 	.word	0x20000424
 8000f04:	40026088 	.word	0x40026088

08000f08 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	@ 0x38
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a4e      	ldr	r2, [pc, #312]	@ (8001060 <HAL_ETH_MspInit+0x158>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	f040 8096 	bne.w	8001058 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a4c      	ldr	r2, [pc, #304]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b4a      	ldr	r3, [pc, #296]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f40:	623b      	str	r3, [r7, #32]
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	4b47      	ldr	r3, [pc, #284]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a46      	ldr	r2, [pc, #280]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b44      	ldr	r3, [pc, #272]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4b41      	ldr	r3, [pc, #260]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a40      	ldr	r2, [pc, #256]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f68:	4b3e      	ldr	r3, [pc, #248]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f70:	61bb      	str	r3, [r7, #24]
 8000f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b3b      	ldr	r3, [pc, #236]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	4a3a      	ldr	r2, [pc, #232]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f80:	4b38      	ldr	r3, [pc, #224]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b35      	ldr	r3, [pc, #212]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	4a34      	ldr	r2, [pc, #208]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f98:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	4a28      	ldr	r2, [pc, #160]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc8:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <HAL_ETH_MspInit+0x15c>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fd4:	2332      	movs	r3, #50	@ 0x32
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	481e      	ldr	r0, [pc, #120]	@ (8001068 <HAL_ETH_MspInit+0x160>)
 8000ff0:	f002 f8f2 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ff4:	2386      	movs	r3, #134	@ 0x86
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001004:	230b      	movs	r3, #11
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	4817      	ldr	r0, [pc, #92]	@ (800106c <HAL_ETH_MspInit+0x164>)
 8001010:	f002 f8e2 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001026:	230b      	movs	r3, #11
 8001028:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	@ (8001070 <HAL_ETH_MspInit+0x168>)
 8001032:	f002 f8d1 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001036:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001048:	230b      	movs	r3, #11
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	4808      	ldr	r0, [pc, #32]	@ (8001074 <HAL_ETH_MspInit+0x16c>)
 8001054:	f002 f8c0 	bl	80031d8 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001058:	bf00      	nop
 800105a:	3738      	adds	r7, #56	@ 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40028000 	.word	0x40028000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40021800 	.word	0x40021800

08001078 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001088:	d10b      	bne.n	80010a2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_TIM_Base_MspInit+0x38>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <HAL_TIM_Base_MspInit+0x38>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_TIM_Base_MspInit+0x38>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0ae      	sub	sp, #184	@ 0xb8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2290      	movs	r2, #144	@ 0x90
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f005 fdd4 	bl	8006c82 <memset>
  if(huart->Instance==USART3)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a22      	ldr	r2, [pc, #136]	@ (8001168 <HAL_UART_MspInit+0xb4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d13c      	bne.n	800115e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 f8a4 	bl	8004240 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010fe:	f7ff fdf1 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001102:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <HAL_UART_MspInit+0xb8>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a19      	ldr	r2, [pc, #100]	@ (800116c <HAL_UART_MspInit+0xb8>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_UART_MspInit+0xb8>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_UART_MspInit+0xb8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <HAL_UART_MspInit+0xb8>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_UART_MspInit+0xb8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001132:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114c:	2307      	movs	r3, #7
 800114e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <HAL_UART_MspInit+0xbc>)
 800115a:	f002 f83d 	bl	80031d8 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800115e:	bf00      	nop
 8001160:	37b8      	adds	r7, #184	@ 0xb8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004800 	.word	0x40004800
 800116c:	40023800 	.word	0x40023800
 8001170:	40020c00 	.word	0x40020c00

08001174 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0ae      	sub	sp, #184	@ 0xb8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2290      	movs	r2, #144	@ 0x90
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f005 fd74 	bl	8006c82 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011a2:	d159      	bne.n	8001258 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 f843 	bl	8004240 <HAL_RCCEx_PeriphCLKConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011c0:	f7ff fd90 	bl	8000ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a25      	ldr	r2, [pc, #148]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011dc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011f6:	230a      	movs	r3, #10
 80011f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001200:	4619      	mov	r1, r3
 8001202:	4818      	ldr	r0, [pc, #96]	@ (8001264 <HAL_PCD_MspInit+0xf0>)
 8001204:	f001 ffe8 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800120c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001220:	4619      	mov	r1, r3
 8001222:	4810      	ldr	r0, [pc, #64]	@ (8001264 <HAL_PCD_MspInit+0xf0>)
 8001224:	f001 ffd8 	bl	80031d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 800122a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800122c:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 800122e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001232:	6353      	str	r3, [r2, #52]	@ 0x34
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124a:	6453      	str	r3, [r2, #68]	@ 0x44
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_PCD_MspInit+0xec>)
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001258:	bf00      	nop
 800125a:	37b8      	adds	r7, #184	@ 0xb8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <MemManage_Handler+0x4>

08001280 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <UsageFault_Handler+0x4>

08001290 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012be:	f000 f955 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA1_Stream5_IRQHandler+0x10>)
 80012ce:	f001 f9cb 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000424 	.word	0x20000424

080012dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA2_Stream0_IRQHandler+0x10>)
 80012e2:	f001 f9c1 	bl	8002668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200003b0 	.word	0x200003b0

080012f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_kill>:

int _kill(int pid, int sig)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800130a:	f005 fd0d 	bl	8006d28 <__errno>
 800130e:	4603      	mov	r3, r0
 8001310:	2216      	movs	r2, #22
 8001312:	601a      	str	r2, [r3, #0]
  return -1;
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_exit>:

void _exit (int status)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffe7 	bl	8001300 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001332:	bf00      	nop
 8001334:	e7fd      	b.n	8001332 <_exit+0x12>

08001336 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e00a      	b.n	800135e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001348:	f3af 8000 	nop.w
 800134c:	4601      	mov	r1, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	b2ca      	uxtb	r2, r1
 8001356:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbf0      	blt.n	8001348 <_read+0x12>
  }

  return len;
 8001366:	687b      	ldr	r3, [r7, #4]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e009      	b.n	8001396 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	60ba      	str	r2, [r7, #8]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f946 	bl	800061c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbf1      	blt.n	8001382 <_write+0x12>
  }
  return len;
 800139e:	687b      	ldr	r3, [r7, #4]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_close>:

int _close(int file)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d0:	605a      	str	r2, [r3, #4]
  return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_isatty>:

int _isatty(int file)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e8:	2301      	movs	r3, #1
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	@ (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f005 fc72 	bl	8006d28 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20080000 	.word	0x20080000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000b70 	.word	0x20000b70
 8001478:	20000cc8 	.word	0x20000cc8

0800147c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a4:	f7ff ffea 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f005 fc31 	bl	8006d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff f8b5 	bl	8000640 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014e4:	08008db4 	.word	0x08008db4
  ldr r2, =_sbss
 80014e8:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80014ec:	20000cc4 	.word	0x20000cc4

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>

080014f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f000 fd82 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 f805 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001502:	f7ff fbf5 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fd9d 	bl	800206a <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 fd65 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	@ (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	20000b74 	.word	0x20000b74

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	@ (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000b74 	.word	0x20000b74

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	@ (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e031      	b.n	800166e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fb90 	bl	8000d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <HAL_ADC_Init+0x84>)
 8001638:	4013      	ands	r3, r2
 800163a:	f043 0202 	orr.w	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fa90 	bl	8001b68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	@ 0x40
 800165e:	e001      	b.n	8001664 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	ffffeefd 	.word	0xffffeefd

0800167c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADC_Start_DMA+0x22>
 800169a:	2302      	movs	r3, #2
 800169c:	e0d6      	b.n	800184c <HAL_ADC_Start_DMA+0x1d0>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d018      	beq.n	80016e6 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80016c4:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_ADC_Start_DMA+0x1d8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a63      	ldr	r2, [pc, #396]	@ (8001858 <HAL_ADC_Start_DMA+0x1dc>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9a      	lsrs	r2, r3, #18
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	3b01      	subs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	f040 809e 	bne.w	8001832 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016fa:	4b58      	ldr	r3, [pc, #352]	@ (800185c <HAL_ADC_Start_DMA+0x1e0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800171c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800172c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001730:	d106      	bne.n	8001740 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f023 0206 	bic.w	r2, r3, #6
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44
 800173e:	e002      	b.n	8001746 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001752:	4a43      	ldr	r2, [pc, #268]	@ (8001860 <HAL_ADC_Start_DMA+0x1e4>)
 8001754:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175a:	4a42      	ldr	r2, [pc, #264]	@ (8001864 <HAL_ADC_Start_DMA+0x1e8>)
 800175c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	4a41      	ldr	r2, [pc, #260]	@ (8001868 <HAL_ADC_Start_DMA+0x1ec>)
 8001764:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800176e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800177e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800178e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	334c      	adds	r3, #76	@ 0x4c
 800179a:	4619      	mov	r1, r3
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f000 ff02 	bl	80025a8 <HAL_DMA_Start_IT>
 80017a4:	4603      	mov	r3, r0
 80017a6:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80017a8:	4b30      	ldr	r3, [pc, #192]	@ (800186c <HAL_ADC_Start_DMA+0x1f0>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10f      	bne.n	80017d4 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d143      	bne.n	800184a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	e03a      	b.n	800184a <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a25      	ldr	r2, [pc, #148]	@ (8001870 <HAL_ADC_Start_DMA+0x1f4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10e      	bne.n	80017fc <HAL_ADC_Start_DMA+0x180>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017fa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_ADC_Start_DMA+0x1f0>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d120      	bne.n	800184a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a19      	ldr	r2, [pc, #100]	@ (8001874 <HAL_ADC_Start_DMA+0x1f8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d11b      	bne.n	800184a <HAL_ADC_Start_DMA+0x1ce>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d114      	bne.n	800184a <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	e00b      	b.n	800184a <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800184a:	7dfb      	ldrb	r3, [r7, #23]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000000 	.word	0x20000000
 8001858:	431bde83 	.word	0x431bde83
 800185c:	fffff8fe 	.word	0xfffff8fe
 8001860:	08001d5d 	.word	0x08001d5d
 8001864:	08001e17 	.word	0x08001e17
 8001868:	08001e33 	.word	0x08001e33
 800186c:	40012300 	.word	0x40012300
 8001870:	40012000 	.word	0x40012000
 8001874:	40012200 	.word	0x40012200

08001878 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1c>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e13a      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x292>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d93a      	bls.n	8001956 <HAL_ADC_ConfigChannel+0xa2>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018e8:	d035      	beq.n	8001956 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	3b1e      	subs	r3, #30
 8001900:	2207      	movs	r2, #7
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a8f      	ldr	r2, [pc, #572]	@ (8001b54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10a      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68d9      	ldr	r1, [r3, #12]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	061a      	lsls	r2, r3, #24
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800192e:	e039      	b.n	80019a4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68d9      	ldr	r1, [r3, #12]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	4603      	mov	r3, r0
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4403      	add	r3, r0
 8001948:	3b1e      	subs	r3, #30
 800194a:	409a      	lsls	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001954:	e026      	b.n	80019a4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6919      	ldr	r1, [r3, #16]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2207      	movs	r2, #7
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43da      	mvns	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	400a      	ands	r2, r1
 800197c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	4618      	mov	r0, r3
 8001990:	4603      	mov	r3, r0
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4403      	add	r3, r0
 8001996:	f003 031f 	and.w	r3, r3, #31
 800199a:	409a      	lsls	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d824      	bhi.n	80019f6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b05      	subs	r3, #5
 80019be:	221f      	movs	r2, #31
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b05      	subs	r3, #5
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f4:	e04c      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d824      	bhi.n	8001a48 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b23      	subs	r3, #35	@ 0x23
 8001a10:	221f      	movs	r2, #31
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b23      	subs	r3, #35	@ 0x23
 8001a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a46:	e023      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b41      	subs	r3, #65	@ 0x41
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43da      	mvns	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	400a      	ands	r2, r1
 8001a68:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b41      	subs	r3, #65	@ 0x41
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a30      	ldr	r2, [pc, #192]	@ (8001b58 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10a      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1fc>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001aa2:	d105      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001aaa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001aae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	@ (8001b58 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10f      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x226>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d10b      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a25      	ldr	r2, [pc, #148]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ac8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001acc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ace:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a22      	ldr	r2, [pc, #136]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ad4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ad8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1e      	ldr	r2, [pc, #120]	@ (8001b58 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d12b      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x288>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_ADC_ConfigChannel+0x242>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b11      	cmp	r3, #17
 8001af4:	d122      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001afc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b00:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001b08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b0c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d111      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <HAL_ADC_ConfigChannel+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <HAL_ADC_ConfigChannel+0x2b0>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9a      	lsrs	r2, r3, #18
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b2e:	e002      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f9      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	10000012 	.word	0x10000012
 8001b58:	40012000 	.word	0x40012000
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	20000000 	.word	0x20000000
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b70:	4b78      	ldr	r3, [pc, #480]	@ (8001d54 <ADC_Init+0x1ec>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a77      	ldr	r2, [pc, #476]	@ (8001d54 <ADC_Init+0x1ec>)
 8001b76:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b7c:	4b75      	ldr	r3, [pc, #468]	@ (8001d54 <ADC_Init+0x1ec>)
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4973      	ldr	r1, [pc, #460]	@ (8001d54 <ADC_Init+0x1ec>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	021a      	lsls	r2, r3, #8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf6:	4a58      	ldr	r2, [pc, #352]	@ (8001d58 <ADC_Init+0x1f0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6899      	ldr	r1, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e00f      	b.n	8001c62 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0202 	bic.w	r2, r2, #2
 8001c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	005a      	lsls	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	035a      	lsls	r2, r3, #13
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	e007      	b.n	8001cd8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	051a      	lsls	r2, r3, #20
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d1a:	025a      	lsls	r2, r3, #9
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6899      	ldr	r1, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	029a      	lsls	r2, r3, #10
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	609a      	str	r2, [r3, #8]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40012300 	.word	0x40012300
 8001d58:	0f000001 	.word	0x0f000001

08001d5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d13c      	bne.n	8001df0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d12b      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d127      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d119      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0220 	bic.w	r2, r2, #32
 8001dc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fd45 	bl	8001878 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dee:	e00e      	b.n	8001e0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff fd4f 	bl	80018a0 <HAL_ADC_ErrorCallback>
}
 8001e02:	e004      	b.n	8001e0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fd31 	bl	800188c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2240      	movs	r2, #64	@ 0x40
 8001e44:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff fd24 	bl	80018a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60d3      	str	r3, [r2, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00
 8001ea4:	05fa0000 	.word	0x05fa0000

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	@ (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	@ (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	@ (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	@ 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	@ 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f7ff ff8e 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff29 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff3e 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff8e 	bl	8001f54 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5d 	bl	8001f00 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff31 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa2 	bl	8001fbc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e014      	b.n	80020be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	791b      	ldrb	r3, [r3, #4]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe febb 	bl	8000e20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0a2      	b.n	8002226 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	795b      	ldrb	r3, [r3, #5]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_DAC_Start_DMA+0x24>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e09c      	b.n	8002226 <HAL_DAC_Start_DMA+0x15e>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2202      	movs	r2, #2
 80020f6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d129      	bne.n	8002152 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	4a4b      	ldr	r2, [pc, #300]	@ (8002230 <HAL_DAC_Start_DMA+0x168>)
 8002104:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <HAL_DAC_Start_DMA+0x16c>)
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4a49      	ldr	r2, [pc, #292]	@ (8002238 <HAL_DAC_Start_DMA+0x170>)
 8002114:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002124:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_DAC_Start_DMA+0x6c>
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d005      	beq.n	800213e <HAL_DAC_Start_DMA+0x76>
 8002132:	e009      	b.n	8002148 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3308      	adds	r3, #8
 800213a:	613b      	str	r3, [r7, #16]
        break;
 800213c:	e033      	b.n	80021a6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	330c      	adds	r3, #12
 8002144:	613b      	str	r3, [r7, #16]
        break;
 8002146:	e02e      	b.n	80021a6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3310      	adds	r3, #16
 800214e:	613b      	str	r3, [r7, #16]
        break;
 8002150:	e029      	b.n	80021a6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	4a39      	ldr	r2, [pc, #228]	@ (800223c <HAL_DAC_Start_DMA+0x174>)
 8002158:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4a38      	ldr	r2, [pc, #224]	@ (8002240 <HAL_DAC_Start_DMA+0x178>)
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4a37      	ldr	r2, [pc, #220]	@ (8002244 <HAL_DAC_Start_DMA+0x17c>)
 8002168:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002178:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_DAC_Start_DMA+0xc0>
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	2b04      	cmp	r3, #4
 8002184:	d005      	beq.n	8002192 <HAL_DAC_Start_DMA+0xca>
 8002186:	e009      	b.n	800219c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3314      	adds	r3, #20
 800218e:	613b      	str	r3, [r7, #16]
        break;
 8002190:	e009      	b.n	80021a6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3318      	adds	r3, #24
 8002198:	613b      	str	r3, [r7, #16]
        break;
 800219a:	e004      	b.n	80021a6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	331c      	adds	r3, #28
 80021a2:	613b      	str	r3, [r7, #16]
        break;
 80021a4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6898      	ldr	r0, [r3, #8]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	f000 f9ef 	bl	80025a8 <HAL_DMA_Start_IT>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75fb      	strb	r3, [r7, #23]
 80021ce:	e010      	b.n	80021f2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80021de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68d8      	ldr	r0, [r3, #12]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	f000 f9dd 	bl	80025a8 <HAL_DMA_Start_IT>
 80021ee:	4603      	mov	r3, r0
 80021f0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2201      	movs	r2, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e005      	b.n	8002224 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f043 0204 	orr.w	r2, r3, #4
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002224:	7dfb      	ldrb	r3, [r7, #23]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	08002337 	.word	0x08002337
 8002234:	08002359 	.word	0x08002359
 8002238:	08002375 	.word	0x08002375
 800223c:	080023df 	.word	0x080023df
 8002240:	08002401 	.word	0x08002401
 8002244:	0800241d 	.word	0x0800241d

08002248 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	@ 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_DAC_ConfigChannel+0x1c>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e042      	b.n	800232a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	795b      	ldrb	r3, [r3, #5]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_DAC_ConfigChannel+0x2c>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e03c      	b.n	800232a <HAL_DAC_ConfigChannel+0xa6>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2202      	movs	r2, #2
 80022ba:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	22c0      	movs	r2, #192	@ 0xc0
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002328:	7ffb      	ldrb	r3, [r7, #31]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff ff7f 	bl	8002248 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	711a      	strb	r2, [r3, #4]
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002364:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f7ff ff78 	bl	800225c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002380:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f043 0204 	orr.w	r2, r3, #4
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff ff6e 	bl	8002270 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2201      	movs	r2, #1
 8002398:	711a      	strb	r2, [r3, #4]
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ea:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff ffd8 	bl	80023a2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	711a      	strb	r2, [r3, #4]
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ffd1 	bl	80023b6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002428:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ffc7 	bl	80023ca <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	711a      	strb	r2, [r3, #4]
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff f89c 	bl	8001594 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e099      	b.n	800259c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002488:	e00f      	b.n	80024aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248a:	f7ff f883 	bl	8001594 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b05      	cmp	r3, #5
 8002496:	d908      	bls.n	80024aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e078      	b.n	800259c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e8      	bne.n	800248a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_DMA_Init+0x158>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	2b04      	cmp	r3, #4
 8002502:	d107      	bne.n	8002514 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	4313      	orrs	r3, r2
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f023 0307 	bic.w	r3, r3, #7
 800252a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	2b04      	cmp	r3, #4
 800253c:	d117      	bne.n	800256e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa77 	bl	8002a44 <DMA_CheckFifoParam>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2240      	movs	r2, #64	@ 0x40
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800256a:	2301      	movs	r3, #1
 800256c:	e016      	b.n	800259c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa2e 	bl	80029d8 <DMA_CalcBaseAndBitshift>
 800257c:	4603      	mov	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	223f      	movs	r2, #63	@ 0x3f
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	e010803f 	.word	0xe010803f

080025a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_DMA_Start_IT+0x26>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e048      	b.n	8002660 <HAL_DMA_Start_IT+0xb8>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d137      	bne.n	8002652 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f9c0 	bl	800297c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002600:	223f      	movs	r2, #63	@ 0x3f
 8002602:	409a      	lsls	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0216 	orr.w	r2, r2, #22
 8002616:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002626:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e005      	b.n	800265e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800265e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002674:	4b8e      	ldr	r3, [pc, #568]	@ (80028b0 <HAL_DMA_IRQHandler+0x248>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a8e      	ldr	r2, [pc, #568]	@ (80028b4 <HAL_DMA_IRQHandler+0x24c>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0a9b      	lsrs	r3, r3, #10
 8002680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002692:	2208      	movs	r2, #8
 8002694:	409a      	lsls	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01a      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	2208      	movs	r2, #8
 80026c2:	409a      	lsls	r2, r3
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d8:	2201      	movs	r2, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d012      	beq.n	800270a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f6:	2201      	movs	r2, #1
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	f043 0202 	orr.w	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	2204      	movs	r2, #4
 8002710:	409a      	lsls	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	2204      	movs	r2, #4
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f043 0204 	orr.w	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	2210      	movs	r2, #16
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d043      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d03c      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	2210      	movs	r2, #16
 8002764:	409a      	lsls	r2, r3
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d018      	beq.n	80027aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d024      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
 8002796:	e01f      	b.n	80027d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	e016      	b.n	80027d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0208 	bic.w	r2, r2, #8
 80027c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027dc:	2220      	movs	r2, #32
 80027de:	409a      	lsls	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 808f 	beq.w	8002908 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8087 	beq.w	8002908 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fe:	2220      	movs	r2, #32
 8002800:	409a      	lsls	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b05      	cmp	r3, #5
 8002810:	d136      	bne.n	8002880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0216 	bic.w	r2, r2, #22
 8002820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_DMA_IRQHandler+0x1da>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0208 	bic.w	r2, r2, #8
 8002850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	223f      	movs	r2, #63	@ 0x3f
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002872:	2b00      	cmp	r3, #0
 8002874:	d07e      	beq.n	8002974 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
        }
        return;
 800287e:	e079      	b.n	8002974 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01d      	beq.n	80028ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10d      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d031      	beq.n	8002908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
 80028ac:	e02c      	b.n	8002908 <HAL_DMA_IRQHandler+0x2a0>
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000
 80028b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d023      	beq.n	8002908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e01e      	b.n	8002908 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10f      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0210 	bic.w	r2, r2, #16
 80028e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800290c:	2b00      	cmp	r3, #0
 800290e:	d032      	beq.n	8002976 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d022      	beq.n	8002962 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2205      	movs	r2, #5
 8002920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	3301      	adds	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	d307      	bcc.n	8002950 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f2      	bne.n	8002934 <HAL_DMA_IRQHandler+0x2cc>
 800294e:	e000      	b.n	8002952 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002950:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
 8002972:	e000      	b.n	8002976 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002974:	bf00      	nop
    }
  }
}
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b40      	cmp	r3, #64	@ 0x40
 80029a8:	d108      	bne.n	80029bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ba:	e007      	b.n	80029cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3b10      	subs	r3, #16
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <DMA_CalcBaseAndBitshift+0x60>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <DMA_CalcBaseAndBitshift+0x64>)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d908      	bls.n	8002a18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <DMA_CalcBaseAndBitshift+0x68>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	1d1a      	adds	r2, r3, #4
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a16:	e006      	b.n	8002a26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <DMA_CalcBaseAndBitshift+0x68>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	aaaaaaab 	.word	0xaaaaaaab
 8002a3c:	08008a28 	.word	0x08008a28
 8002a40:	fffffc00 	.word	0xfffffc00

08002a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d11f      	bne.n	8002a9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d856      	bhi.n	8002b12 <DMA_CheckFifoParam+0xce>
 8002a64:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <DMA_CheckFifoParam+0x28>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a8f 	.word	0x08002a8f
 8002a74:	08002a7d 	.word	0x08002a7d
 8002a78:	08002b13 	.word	0x08002b13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d046      	beq.n	8002b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8c:	e043      	b.n	8002b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a96:	d140      	bne.n	8002b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9c:	e03d      	b.n	8002b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aa6:	d121      	bne.n	8002aec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d837      	bhi.n	8002b1e <DMA_CheckFifoParam+0xda>
 8002aae:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <DMA_CheckFifoParam+0x70>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002acb 	.word	0x08002acb
 8002abc:	08002ac5 	.word	0x08002ac5
 8002ac0:	08002add 	.word	0x08002add
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e030      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d025      	beq.n	8002b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ada:	e022      	b.n	8002b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ae4:	d11f      	bne.n	8002b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aea:	e01c      	b.n	8002b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d903      	bls.n	8002afa <DMA_CheckFifoParam+0xb6>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d003      	beq.n	8002b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002af8:	e018      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
      break;
 8002afe:	e015      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	e00b      	b.n	8002b2a <DMA_CheckFifoParam+0xe6>
      break;
 8002b12:	bf00      	nop
 8002b14:	e00a      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e008      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e006      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e004      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b22:	bf00      	nop
 8002b24:	e002      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <DMA_CheckFifoParam+0xe8>
      break;
 8002b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop

08002b3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e086      	b.n	8002c5c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7fe f9d1 	bl	8000f08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	4b3f      	ldr	r3, [pc, #252]	@ (8002c64 <HAL_ETH_Init+0x128>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c64 <HAL_ETH_Init+0x128>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b72:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <HAL_ETH_Init+0x128>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c68 <HAL_ETH_Init+0x12c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4a39      	ldr	r2, [pc, #228]	@ (8002c68 <HAL_ETH_Init+0x12c>)
 8002b84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b8a:	4b37      	ldr	r3, [pc, #220]	@ (8002c68 <HAL_ETH_Init+0x12c>)
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4935      	ldr	r1, [pc, #212]	@ (8002c68 <HAL_ETH_Init+0x12c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002b98:	4b33      	ldr	r3, [pc, #204]	@ (8002c68 <HAL_ETH_Init+0x12c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb4:	f7fe fcee 	bl	8001594 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002bba:	e011      	b.n	8002be0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002bbc:	f7fe fcea 	bl	8001594 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bca:	d909      	bls.n	8002be0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	22e0      	movs	r2, #224	@ 0xe0
 8002bd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e03d      	b.n	8002c5c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e4      	bne.n	8002bbc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f97a 	bl	8002eec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa25 	bl	8003048 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa7b 	bl	80030fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f9e3 	bl	8002fd8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002c20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <HAL_ETH_Init+0x130>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002c46:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2210      	movs	r2, #16
 8002c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	00020060 	.word	0x00020060

08002c70 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <ETH_SetMACConfig+0x164>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	7b9b      	ldrb	r3, [r3, #14]
 8002c8e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	7c12      	ldrb	r2, [r2, #16]
 8002c94:	2a00      	cmp	r2, #0
 8002c96:	d102      	bne.n	8002c9e <ETH_SetMACConfig+0x2e>
 8002c98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c9c:	e000      	b.n	8002ca0 <ETH_SetMACConfig+0x30>
 8002c9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ca0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	7c52      	ldrb	r2, [r2, #17]
 8002ca6:	2a00      	cmp	r2, #0
 8002ca8:	d102      	bne.n	8002cb0 <ETH_SetMACConfig+0x40>
 8002caa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002cae:	e000      	b.n	8002cb2 <ETH_SetMACConfig+0x42>
 8002cb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cb2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cb8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	7fdb      	ldrb	r3, [r3, #31]
 8002cbe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002cc0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	7f92      	ldrb	r2, [r2, #30]
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	d102      	bne.n	8002cd6 <ETH_SetMACConfig+0x66>
 8002cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cd4:	e000      	b.n	8002cd8 <ETH_SetMACConfig+0x68>
 8002cd6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002cd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	7f1b      	ldrb	r3, [r3, #28]
 8002cde:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ce0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ce6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	791b      	ldrb	r3, [r3, #4]
 8002cec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002cee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002cf6:	2a00      	cmp	r2, #0
 8002cf8:	d102      	bne.n	8002d00 <ETH_SetMACConfig+0x90>
 8002cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cfe:	e000      	b.n	8002d02 <ETH_SetMACConfig+0x92>
 8002d00:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d02:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7bdb      	ldrb	r3, [r3, #15]
 8002d08:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d0a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d18:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe fc3a 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d56:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d101      	bne.n	8002d66 <ETH_SetMACConfig+0xf6>
 8002d62:	2280      	movs	r2, #128	@ 0x80
 8002d64:	e000      	b.n	8002d68 <ETH_SetMACConfig+0xf8>
 8002d66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d68:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002d76:	2a01      	cmp	r2, #1
 8002d78:	d101      	bne.n	8002d7e <ETH_SetMACConfig+0x10e>
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	e000      	b.n	8002d80 <ETH_SetMACConfig+0x110>
 8002d7e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d80:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002d88:	2a01      	cmp	r2, #1
 8002d8a:	d101      	bne.n	8002d90 <ETH_SetMACConfig+0x120>
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	e000      	b.n	8002d92 <ETH_SetMACConfig+0x122>
 8002d90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002d9a:	2a01      	cmp	r2, #1
 8002d9c:	d101      	bne.n	8002da2 <ETH_SetMACConfig+0x132>
 8002d9e:	2202      	movs	r2, #2
 8002da0:	e000      	b.n	8002da4 <ETH_SetMACConfig+0x134>
 8002da2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002da4:	4313      	orrs	r3, r2
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7fe fbf5 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	fd20810f 	.word	0xfd20810f

08002dd8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <ETH_SetDMAConfig+0x110>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	7b1b      	ldrb	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <ETH_SetDMAConfig+0x2c>
 8002dfe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e02:	e000      	b.n	8002e06 <ETH_SetDMAConfig+0x2e>
 8002e04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	7b5b      	ldrb	r3, [r3, #13]
 8002e0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	7f52      	ldrb	r2, [r2, #29]
 8002e12:	2a00      	cmp	r2, #0
 8002e14:	d102      	bne.n	8002e1c <ETH_SetDMAConfig+0x44>
 8002e16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e1a:	e000      	b.n	8002e1e <ETH_SetDMAConfig+0x46>
 8002e1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	7b9b      	ldrb	r3, [r3, #14]
 8002e24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	7f1b      	ldrb	r3, [r3, #28]
 8002e32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	7f9b      	ldrb	r3, [r3, #30]
 8002e3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fe fb9c 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ea0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ea2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eaa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002eb0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002eba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ebe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7fe fb6d 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6013      	str	r3, [r2, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	f8de3f23 	.word	0xf8de3f23

08002eec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b0a6      	sub	sp, #152	@ 0x98
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f00:	2300      	movs	r3, #0
 8002f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f58:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002f66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fe7f 	bl	8002c70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fa6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fa8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002fac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fb2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002fc2:	f107 0308 	add.w	r3, r7, #8
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff05 	bl	8002dd8 <ETH_SetDMAConfig>
}
 8002fce:	bf00      	nop
 8002fd0:	3798      	adds	r7, #152	@ 0x98
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3305      	adds	r3, #5
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	3204      	adds	r2, #4
 8002ff0:	7812      	ldrb	r2, [r2, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4b11      	ldr	r3, [pc, #68]	@ (8003040 <ETH_MACAddressConfig+0x68>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3303      	adds	r3, #3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	061a      	lsls	r2, r3, #24
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3302      	adds	r3, #2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3301      	adds	r3, #1
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4313      	orrs	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <ETH_MACAddressConfig+0x6c>)
 800302a:	4413      	add	r3, r2
 800302c:	461a      	mov	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6013      	str	r3, [r2, #0]
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40028040 	.word	0x40028040
 8003044:	40028044 	.word	0x40028044

08003048 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e03e      	b.n	80030d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	3206      	adds	r2, #6
 8003088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d80c      	bhi.n	80030b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68d9      	ldr	r1, [r3, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	e004      	b.n	80030c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	461a      	mov	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d9bd      	bls.n	8003056 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ec:	611a      	str	r2, [r3, #16]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e048      	b.n	800319a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6919      	ldr	r1, [r3, #16]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2200      	movs	r2, #0
 8003124:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003144:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	3212      	adds	r2, #18
 8003166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d80c      	bhi.n	800318a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6919      	ldr	r1, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	e004      	b.n	8003194 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	461a      	mov	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d9b3      	bls.n	8003108 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ca:	60da      	str	r2, [r3, #12]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e175      	b.n	80034e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 8164 	bne.w	80034de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_GPIO_Init+0x56>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d130      	bne.n	8003290 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d017      	beq.n	80032cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d123      	bne.n	8003320 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3208      	adds	r2, #8
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80be 	beq.w	80034de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	4b66      	ldr	r3, [pc, #408]	@ (80034fc <HAL_GPIO_Init+0x324>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003366:	4a65      	ldr	r2, [pc, #404]	@ (80034fc <HAL_GPIO_Init+0x324>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336c:	6453      	str	r3, [r2, #68]	@ 0x44
 800336e:	4b63      	ldr	r3, [pc, #396]	@ (80034fc <HAL_GPIO_Init+0x324>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800337a:	4a61      	ldr	r2, [pc, #388]	@ (8003500 <HAL_GPIO_Init+0x328>)
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a58      	ldr	r2, [pc, #352]	@ (8003504 <HAL_GPIO_Init+0x32c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d037      	beq.n	8003416 <HAL_GPIO_Init+0x23e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a57      	ldr	r2, [pc, #348]	@ (8003508 <HAL_GPIO_Init+0x330>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_GPIO_Init+0x23a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a56      	ldr	r2, [pc, #344]	@ (800350c <HAL_GPIO_Init+0x334>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <HAL_GPIO_Init+0x236>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a55      	ldr	r2, [pc, #340]	@ (8003510 <HAL_GPIO_Init+0x338>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d025      	beq.n	800340a <HAL_GPIO_Init+0x232>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a54      	ldr	r2, [pc, #336]	@ (8003514 <HAL_GPIO_Init+0x33c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <HAL_GPIO_Init+0x22e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a53      	ldr	r2, [pc, #332]	@ (8003518 <HAL_GPIO_Init+0x340>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d019      	beq.n	8003402 <HAL_GPIO_Init+0x22a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a52      	ldr	r2, [pc, #328]	@ (800351c <HAL_GPIO_Init+0x344>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0x226>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a51      	ldr	r2, [pc, #324]	@ (8003520 <HAL_GPIO_Init+0x348>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00d      	beq.n	80033fa <HAL_GPIO_Init+0x222>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a50      	ldr	r2, [pc, #320]	@ (8003524 <HAL_GPIO_Init+0x34c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d007      	beq.n	80033f6 <HAL_GPIO_Init+0x21e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003528 <HAL_GPIO_Init+0x350>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_GPIO_Init+0x21a>
 80033ee:	2309      	movs	r3, #9
 80033f0:	e012      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033f2:	230a      	movs	r3, #10
 80033f4:	e010      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033f6:	2308      	movs	r3, #8
 80033f8:	e00e      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033fa:	2307      	movs	r3, #7
 80033fc:	e00c      	b.n	8003418 <HAL_GPIO_Init+0x240>
 80033fe:	2306      	movs	r3, #6
 8003400:	e00a      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003402:	2305      	movs	r3, #5
 8003404:	e008      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003406:	2304      	movs	r3, #4
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x240>
 800340a:	2303      	movs	r3, #3
 800340c:	e004      	b.n	8003418 <HAL_GPIO_Init+0x240>
 800340e:	2302      	movs	r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_GPIO_Init+0x240>
 8003416:	2300      	movs	r3, #0
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	0092      	lsls	r2, r2, #2
 8003420:	4093      	lsls	r3, r2
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003428:	4935      	ldr	r1, [pc, #212]	@ (8003500 <HAL_GPIO_Init+0x328>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	3302      	adds	r3, #2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003436:	4b3d      	ldr	r3, [pc, #244]	@ (800352c <HAL_GPIO_Init+0x354>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345a:	4a34      	ldr	r2, [pc, #208]	@ (800352c <HAL_GPIO_Init+0x354>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003460:	4b32      	ldr	r3, [pc, #200]	@ (800352c <HAL_GPIO_Init+0x354>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003484:	4a29      	ldr	r2, [pc, #164]	@ (800352c <HAL_GPIO_Init+0x354>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800348a:	4b28      	ldr	r3, [pc, #160]	@ (800352c <HAL_GPIO_Init+0x354>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ae:	4a1f      	ldr	r2, [pc, #124]	@ (800352c <HAL_GPIO_Init+0x354>)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <HAL_GPIO_Init+0x354>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <HAL_GPIO_Init+0x354>)
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	f67f ae86 	bls.w	80031f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3724      	adds	r7, #36	@ 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40013800 	.word	0x40013800
 8003504:	40020000 	.word	0x40020000
 8003508:	40020400 	.word	0x40020400
 800350c:	40020800 	.word	0x40020800
 8003510:	40020c00 	.word	0x40020c00
 8003514:	40021000 	.word	0x40021000
 8003518:	40021400 	.word	0x40021400
 800351c:	40021800 	.word	0x40021800
 8003520:	40021c00 	.word	0x40021c00
 8003524:	40022000 	.word	0x40022000
 8003528:	40022400 	.word	0x40022400
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af02      	add	r7, sp, #8
 8003568:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e108      	b.n	8003786 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fd fdf0 	bl	8001174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a2:	d102      	bne.n	80035aa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 fb80 	bl	8005cb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7c1a      	ldrb	r2, [r3, #16]
 80035bc:	f88d 2000 	strb.w	r2, [sp]
 80035c0:	3304      	adds	r3, #4
 80035c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c4:	f002 fb1c 	bl	8005c00 <USB_CoreInit>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0d5      	b.n	8003786 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 fb78 	bl	8005cd6 <USB_SetCurrentMode>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0c6      	b.n	8003786 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e04a      	b.n	8003694 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3315      	adds	r3, #21
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3314      	adds	r3, #20
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	b298      	uxth	r0, r3
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	332e      	adds	r3, #46	@ 0x2e
 800363a:	4602      	mov	r2, r0
 800363c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3318      	adds	r3, #24
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	331c      	adds	r3, #28
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3320      	adds	r3, #32
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800367a:	7bfa      	ldrb	r2, [r7, #15]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3324      	adds	r3, #36	@ 0x24
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	3301      	adds	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	791b      	ldrb	r3, [r3, #4]
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	429a      	cmp	r2, r3
 800369c:	d3af      	bcc.n	80035fe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e044      	b.n	800372e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036fc:	7bfa      	ldrb	r2, [r7, #15]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3301      	adds	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	791b      	ldrb	r3, [r3, #4]
 8003732:	7bfa      	ldrb	r2, [r7, #15]
 8003734:	429a      	cmp	r2, r3
 8003736:	d3b5      	bcc.n	80036a4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7c1a      	ldrb	r2, [r3, #16]
 8003740:	f88d 2000 	strb.w	r2, [sp]
 8003744:	3304      	adds	r3, #4
 8003746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003748:	f002 fb12 	bl	8005d70 <USB_DevInit>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e013      	b.n	8003786 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7b1b      	ldrb	r3, [r3, #12]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d102      	bne.n	800377a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f80b 	bl	8003790 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f002 fccd 	bl	800611e <USB_DevDisconnect>

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	10000003 	.word	0x10000003

080037d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <HAL_PWREx_EnableOverDrive+0x98>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	4a22      	ldr	r2, [pc, #136]	@ (8003890 <HAL_PWREx_EnableOverDrive+0x98>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	@ 0x40
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <HAL_PWREx_EnableOverDrive+0x98>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800381a:	4b1e      	ldr	r3, [pc, #120]	@ (8003894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1d      	ldr	r2, [pc, #116]	@ (8003894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003824:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003826:	f7fd feb5 	bl	8001594 <HAL_GetTick>
 800382a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800382c:	e009      	b.n	8003842 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800382e:	f7fd feb1 	bl	8001594 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800383c:	d901      	bls.n	8003842 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e022      	b.n	8003888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003842:	4b14      	ldr	r3, [pc, #80]	@ (8003894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384e:	d1ee      	bne.n	800382e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003850:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0f      	ldr	r2, [pc, #60]	@ (8003894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800385a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800385c:	f7fd fe9a 	bl	8001594 <HAL_GetTick>
 8003860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003862:	e009      	b.n	8003878 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003864:	f7fd fe96 	bl	8001594 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003872:	d901      	bls.n	8003878 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e007      	b.n	8003888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003884:	d1ee      	bne.n	8003864 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	40007000 	.word	0x40007000

08003898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e29b      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8087 	beq.w	80039ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038bc:	4b96      	ldr	r3, [pc, #600]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d00c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c8:	4b93      	ldr	r3, [pc, #588]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d112      	bne.n	80038fa <HAL_RCC_OscConfig+0x62>
 80038d4:	4b90      	ldr	r3, [pc, #576]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e0:	d10b      	bne.n	80038fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d06c      	beq.n	80039c8 <HAL_RCC_OscConfig+0x130>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d168      	bne.n	80039c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e275      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x7a>
 8003904:	4b84      	ldr	r3, [pc, #528]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a83      	ldr	r2, [pc, #524]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 800390a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e02e      	b.n	8003970 <HAL_RCC_OscConfig+0xd8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x9c>
 800391a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b7c      	ldr	r3, [pc, #496]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 800392c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e01d      	b.n	8003970 <HAL_RCC_OscConfig+0xd8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0xc0>
 800393e:	4b76      	ldr	r3, [pc, #472]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a75      	ldr	r2, [pc, #468]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b73      	ldr	r3, [pc, #460]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a72      	ldr	r2, [pc, #456]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0xd8>
 8003958:	4b6f      	ldr	r3, [pc, #444]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b6c      	ldr	r3, [pc, #432]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6b      	ldr	r2, [pc, #428]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fd fe0c 	bl	8001594 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fd fe08 	bl	8001594 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e229      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b61      	ldr	r3, [pc, #388]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0xe8>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fdf8 	bl	8001594 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd fdf4 	bl	8001594 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e215      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	4b57      	ldr	r3, [pc, #348]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x110>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d069      	beq.n	8003aaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039d6:	4b50      	ldr	r3, [pc, #320]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b4d      	ldr	r3, [pc, #308]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d11c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x190>
 80039ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d116      	bne.n	8003a28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1e9      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a12:	4b41      	ldr	r3, [pc, #260]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	493d      	ldr	r1, [pc, #244]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	e040      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d023      	beq.n	8003a78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a30:	4b39      	ldr	r3, [pc, #228]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a38      	ldr	r2, [pc, #224]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fdaa 	bl	8001594 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a44:	f7fd fda6 	bl	8001594 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1c7      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b2d      	ldr	r3, [pc, #180]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4929      	ldr	r1, [pc, #164]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
 8003a76:	e018      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a78:	4b27      	ldr	r3, [pc, #156]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a26      	ldr	r2, [pc, #152]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd fd86 	bl	8001594 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fd82 	bl	8001594 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1a3      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d038      	beq.n	8003b28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d019      	beq.n	8003af2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd fd63 	bl	8001594 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fd5f 	bl	8001594 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e180      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x23a>
 8003af0:	e01a      	b.n	8003b28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af2:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af6:	4a08      	ldr	r2, [pc, #32]	@ (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fd fd49 	bl	8001594 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b06:	f7fd fd45 	bl	8001594 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d903      	bls.n	8003b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e166      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
 8003b18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1c:	4b92      	ldr	r3, [pc, #584]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80a4 	beq.w	8003c7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b8c      	ldr	r3, [pc, #560]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	4b89      	ldr	r3, [pc, #548]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	4a88      	ldr	r2, [pc, #544]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b4e:	4b86      	ldr	r3, [pc, #536]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b5e:	4b83      	ldr	r3, [pc, #524]	@ (8003d6c <HAL_RCC_OscConfig+0x4d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b6a:	4b80      	ldr	r3, [pc, #512]	@ (8003d6c <HAL_RCC_OscConfig+0x4d4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7f      	ldr	r2, [pc, #508]	@ (8003d6c <HAL_RCC_OscConfig+0x4d4>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fd fd0d 	bl	8001594 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd fd09 	bl	8001594 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	@ 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e12a      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b90:	4b76      	ldr	r3, [pc, #472]	@ (8003d6c <HAL_RCC_OscConfig+0x4d4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x31a>
 8003ba4:	4b70      	ldr	r3, [pc, #448]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba8:	4a6f      	ldr	r2, [pc, #444]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb0:	e02d      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x33c>
 8003bba:	4b6b      	ldr	r3, [pc, #428]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	4a6a      	ldr	r2, [pc, #424]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc6:	4b68      	ldr	r3, [pc, #416]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	4a67      	ldr	r2, [pc, #412]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bd2:	e01c      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x35e>
 8003bdc:	4b62      	ldr	r3, [pc, #392]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	4a61      	ldr	r2, [pc, #388]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003be8:	4b5f      	ldr	r3, [pc, #380]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bec:	4a5e      	ldr	r2, [pc, #376]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
 8003bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c02:	4b59      	ldr	r3, [pc, #356]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c06:	4a58      	ldr	r2, [pc, #352]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d015      	beq.n	8003c42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fd fcbd 	bl	8001594 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fd fcb9 	bl	8001594 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0d8      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	4b4c      	ldr	r3, [pc, #304]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ee      	beq.n	8003c1e <HAL_RCC_OscConfig+0x386>
 8003c40:	e014      	b.n	8003c6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fd fca7 	bl	8001594 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fd fca3 	bl	8001594 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0c2      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ee      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4b3d      	ldr	r3, [pc, #244]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	4a3c      	ldr	r2, [pc, #240]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80ae 	beq.w	8003de4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c88:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d06d      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d14b      	bne.n	8003d34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b32      	ldr	r3, [pc, #200]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a31      	ldr	r2, [pc, #196]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd fc74 	bl	8001594 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd fc70 	bl	8001594 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e091      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	4b29      	ldr	r3, [pc, #164]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	019b      	lsls	r3, r3, #6
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	071b      	lsls	r3, r3, #28
 8003cfa:	491b      	ldr	r1, [pc, #108]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d00:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a18      	ldr	r2, [pc, #96]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fc42 	bl	8001594 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd fc3e 	bl	8001594 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e05f      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x47c>
 8003d32:	e057      	b.n	8003de4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0b      	ldr	r2, [pc, #44]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fc28 	bl	8001594 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fd fc24 	bl	8001594 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e045      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	4b03      	ldr	r3, [pc, #12]	@ (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x4b0>
 8003d66:	e03d      	b.n	8003de4 <HAL_RCC_OscConfig+0x54c>
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d70:	4b1f      	ldr	r3, [pc, #124]	@ (8003df0 <HAL_RCC_OscConfig+0x558>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d129      	bne.n	8003de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d122      	bne.n	8003de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003da6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d119      	bne.n	8003de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d10f      	bne.n	8003de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0d0      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d910      	bls.n	8003e3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b67      	ldr	r3, [pc, #412]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 020f 	bic.w	r2, r3, #15
 8003e22:	4965      	ldr	r1, [pc, #404]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b63      	ldr	r3, [pc, #396]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b8      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e54:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a58      	ldr	r2, [pc, #352]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003e5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e6c:	4b53      	ldr	r3, [pc, #332]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a52      	ldr	r2, [pc, #328]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003e72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b50      	ldr	r3, [pc, #320]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	494d      	ldr	r1, [pc, #308]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d040      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9e:	4b47      	ldr	r3, [pc, #284]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d115      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e07f      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	4b41      	ldr	r3, [pc, #260]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e073      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e06b      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed6:	4b39      	ldr	r3, [pc, #228]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 0203 	bic.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4936      	ldr	r1, [pc, #216]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee8:	f7fd fb54 	bl	8001594 <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef0:	f7fd fb50 	bl	8001594 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e053      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	4b2d      	ldr	r3, [pc, #180]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 020c 	and.w	r2, r3, #12
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1eb      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f18:	4b27      	ldr	r3, [pc, #156]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d210      	bcs.n	8003f48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b24      	ldr	r3, [pc, #144]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 020f 	bic.w	r2, r3, #15
 8003f2e:	4922      	ldr	r1, [pc, #136]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e032      	b.n	8003fae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f54:	4b19      	ldr	r3, [pc, #100]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4916      	ldr	r1, [pc, #88]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f72:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	490e      	ldr	r1, [pc, #56]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f86:	f000 f821 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	091b      	lsrs	r3, r3, #4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	490a      	ldr	r1, [pc, #40]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1cc>)
 8003f98:	5ccb      	ldrb	r3, [r1, r3]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a09      	ldr	r2, [pc, #36]	@ (8003fc4 <HAL_RCC_ClockConfig+0x1d0>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <HAL_RCC_ClockConfig+0x1d4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd fab0 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023c00 	.word	0x40023c00
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	08008a10 	.word	0x08008a10
 8003fc4:	20000000 	.word	0x20000000
 8003fc8:	20000004 	.word	0x20000004

08003fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b094      	sub	sp, #80	@ 0x50
 8003fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd8:	2300      	movs	r3, #0
 8003fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fdc:	2300      	movs	r3, #0
 8003fde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe4:	4b79      	ldr	r3, [pc, #484]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d00d      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x40>
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	f200 80e1 	bhi.w	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d003      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffe:	e0db      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b73      	ldr	r3, [pc, #460]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004002:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004004:	e0db      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004006:	4b73      	ldr	r3, [pc, #460]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800400a:	e0d8      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800400c:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004014:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004016:	4b6d      	ldr	r3, [pc, #436]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004022:	4b6a      	ldr	r3, [pc, #424]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	2200      	movs	r2, #0
 800402a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800402c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004034:	633b      	str	r3, [r7, #48]	@ 0x30
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
 800403a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4621      	mov	r1, r4
 8004058:	1a51      	subs	r1, r2, r1
 800405a:	6139      	str	r1, [r7, #16]
 800405c:	4629      	mov	r1, r5
 800405e:	eb63 0301 	sbc.w	r3, r3, r1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004070:	4659      	mov	r1, fp
 8004072:	018b      	lsls	r3, r1, #6
 8004074:	4651      	mov	r1, sl
 8004076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407a:	4651      	mov	r1, sl
 800407c:	018a      	lsls	r2, r1, #6
 800407e:	4651      	mov	r1, sl
 8004080:	ebb2 0801 	subs.w	r8, r2, r1
 8004084:	4659      	mov	r1, fp
 8004086:	eb63 0901 	sbc.w	r9, r3, r1
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800409a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409e:	4690      	mov	r8, r2
 80040a0:	4699      	mov	r9, r3
 80040a2:	4623      	mov	r3, r4
 80040a4:	eb18 0303 	adds.w	r3, r8, r3
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	462b      	mov	r3, r5
 80040ac:	eb49 0303 	adc.w	r3, r9, r3
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040be:	4629      	mov	r1, r5
 80040c0:	024b      	lsls	r3, r1, #9
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c8:	4621      	mov	r1, r4
 80040ca:	024a      	lsls	r2, r1, #9
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d2:	2200      	movs	r2, #0
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040dc:	f7fc f908 	bl	80002f0 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e8:	e058      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	4b38      	ldr	r3, [pc, #224]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	2200      	movs	r2, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	4611      	mov	r1, r2
 80040f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	0159      	lsls	r1, r3, #5
 8004112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004116:	0150      	lsls	r0, r2, #5
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4641      	mov	r1, r8
 800411e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004122:	4649      	mov	r1, r9
 8004124:	eb63 0b01 	sbc.w	fp, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800413c:	ebb2 040a 	subs.w	r4, r2, sl
 8004140:	eb63 050b 	sbc.w	r5, r3, fp
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	00eb      	lsls	r3, r5, #3
 800414e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004152:	00e2      	lsls	r2, r4, #3
 8004154:	4614      	mov	r4, r2
 8004156:	461d      	mov	r5, r3
 8004158:	4643      	mov	r3, r8
 800415a:	18e3      	adds	r3, r4, r3
 800415c:	603b      	str	r3, [r7, #0]
 800415e:	464b      	mov	r3, r9
 8004160:	eb45 0303 	adc.w	r3, r5, r3
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004172:	4629      	mov	r1, r5
 8004174:	028b      	lsls	r3, r1, #10
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800417c:	4621      	mov	r1, r4
 800417e:	028a      	lsls	r2, r1, #10
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004186:	2200      	movs	r2, #0
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	61fa      	str	r2, [r7, #28]
 800418c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004190:	f7fc f8ae 	bl	80002f0 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x200>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3750      	adds	r7, #80	@ 0x50
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	007a1200 	.word	0x007a1200

080041d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_GetHCLKFreq+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000000 	.word	0x20000000

080041f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041f4:	f7ff fff0 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	@ (8004214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	08008a20 	.word	0x08008a20

08004218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800421c:	f7ff ffdc 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 8004220:	4602      	mov	r2, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0b5b      	lsrs	r3, r3, #13
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4903      	ldr	r1, [pc, #12]	@ (800423c <HAL_RCC_GetPCLK2Freq+0x24>)
 800422e:	5ccb      	ldrb	r3, [r1, r3]
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	08008a20 	.word	0x08008a20

08004240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d012      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004268:	4b69      	ldr	r3, [pc, #420]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a68      	ldr	r2, [pc, #416]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004272:	6093      	str	r3, [r2, #8]
 8004274:	4b66      	ldr	r3, [pc, #408]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427c:	4964      	ldr	r1, [pc, #400]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800429a:	4b5d      	ldr	r3, [pc, #372]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a8:	4959      	ldr	r1, [pc, #356]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b8:	d101      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	494a      	ldr	r1, [pc, #296]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f4:	d101      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808b 	beq.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004324:	4b3a      	ldr	r3, [pc, #232]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	4a39      	ldr	r2, [pc, #228]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004330:	4b37      	ldr	r3, [pc, #220]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800433c:	4b35      	ldr	r3, [pc, #212]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a34      	ldr	r2, [pc, #208]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004348:	f7fd f924 	bl	8001594 <HAL_GetTick>
 800434c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fd f920 	bl	8001594 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	@ 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e38f      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004362:	4b2c      	ldr	r3, [pc, #176]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800436e:	4b28      	ldr	r3, [pc, #160]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004376:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d035      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	429a      	cmp	r2, r3
 800438a:	d02e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800438c:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004394:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004396:	4b1e      	ldr	r3, [pc, #120]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ae:	4a18      	ldr	r2, [pc, #96]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043b4:	4b16      	ldr	r3, [pc, #88]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d114      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd f8e8 	bl	8001594 <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c6:	e00a      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fd f8e4 	bl	8001594 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e351      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043de:	4b0c      	ldr	r3, [pc, #48]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ee      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f6:	d111      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004404:	4b04      	ldr	r3, [pc, #16]	@ (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004406:	400b      	ands	r3, r1
 8004408:	4901      	ldr	r1, [pc, #4]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
 800440e:	e00b      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004410:	40023800 	.word	0x40023800
 8004414:	40007000 	.word	0x40007000
 8004418:	0ffffcff 	.word	0x0ffffcff
 800441c:	4bac      	ldr	r3, [pc, #688]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4aab      	ldr	r2, [pc, #684]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004426:	6093      	str	r3, [r2, #8]
 8004428:	4ba9      	ldr	r3, [pc, #676]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004434:	49a6      	ldr	r1, [pc, #664]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004436:	4313      	orrs	r3, r2
 8004438:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d010      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004446:	4ba2      	ldr	r3, [pc, #648]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800444c:	4aa0      	ldr	r2, [pc, #640]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004452:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004456:	4b9e      	ldr	r3, [pc, #632]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004458:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	499b      	ldr	r1, [pc, #620]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004474:	4b96      	ldr	r3, [pc, #600]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004482:	4993      	ldr	r1, [pc, #588]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004496:	4b8e      	ldr	r3, [pc, #568]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044a4:	498a      	ldr	r1, [pc, #552]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044b8:	4b85      	ldr	r3, [pc, #532]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c6:	4982      	ldr	r1, [pc, #520]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044da:	4b7d      	ldr	r3, [pc, #500]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4979      	ldr	r1, [pc, #484]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044fc:	4b74      	ldr	r3, [pc, #464]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	4971      	ldr	r1, [pc, #452]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800451e:	4b6c      	ldr	r3, [pc, #432]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004524:	f023 020c 	bic.w	r2, r3, #12
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800452c:	4968      	ldr	r1, [pc, #416]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452e:	4313      	orrs	r3, r2
 8004530:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004540:	4b63      	ldr	r3, [pc, #396]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004546:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454e:	4960      	ldr	r1, [pc, #384]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004562:	4b5b      	ldr	r3, [pc, #364]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004568:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004570:	4957      	ldr	r1, [pc, #348]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004584:	4b52      	ldr	r3, [pc, #328]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004592:	494f      	ldr	r1, [pc, #316]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045a6:	4b4a      	ldr	r3, [pc, #296]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b4:	4946      	ldr	r1, [pc, #280]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045c8:	4b41      	ldr	r3, [pc, #260]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d6:	493e      	ldr	r1, [pc, #248]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045ea:	4b39      	ldr	r3, [pc, #228]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f8:	4935      	ldr	r1, [pc, #212]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800460c:	4b30      	ldr	r3, [pc, #192]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004612:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800461a:	492d      	ldr	r1, [pc, #180]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d011      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800462e:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004634:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463c:	4924      	ldr	r1, [pc, #144]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800464c:	d101      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800465e:	2301      	movs	r3, #1
 8004660:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800466e:	4b18      	ldr	r3, [pc, #96]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004674:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467c:	4914      	ldr	r1, [pc, #80]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004690:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004696:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046a0:	490b      	ldr	r1, [pc, #44]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00f      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046b4:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c4:	4902      	ldr	r1, [pc, #8]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046cc:	e002      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046e0:	4b8a      	ldr	r3, [pc, #552]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f0:	4986      	ldr	r1, [pc, #536]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004704:	4b81      	ldr	r3, [pc, #516]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800470a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004714:	497d      	ldr	r1, [pc, #500]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d006      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80d6 	beq.w	80048dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004730:	4b76      	ldr	r3, [pc, #472]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a75      	ldr	r2, [pc, #468]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004736:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fc ff2a 	bl	8001594 <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004744:	f7fc ff26 	bl	8001594 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	@ 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e195      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004756:	4b6d      	ldr	r3, [pc, #436]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d021      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11d      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004776:	4b65      	ldr	r3, [pc, #404]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004784:	4b61      	ldr	r3, [pc, #388]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800478a:	0e1b      	lsrs	r3, r3, #24
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	019a      	lsls	r2, r3, #6
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	071b      	lsls	r3, r3, #28
 80047aa:	4958      	ldr	r1, [pc, #352]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d004      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02e      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047dc:	d129      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047de:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ec:	4b47      	ldr	r3, [pc, #284]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f2:	0f1b      	lsrs	r3, r3, #28
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	019a      	lsls	r2, r3, #6
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	061b      	lsls	r3, r3, #24
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	071b      	lsls	r3, r3, #28
 8004812:	493e      	ldr	r1, [pc, #248]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800481a:	4b3c      	ldr	r3, [pc, #240]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004820:	f023 021f 	bic.w	r2, r3, #31
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	3b01      	subs	r3, #1
 800482a:	4938      	ldr	r1, [pc, #224]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01d      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800483e:	4b33      	ldr	r3, [pc, #204]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800484c:	4b2f      	ldr	r3, [pc, #188]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004852:	0f1b      	lsrs	r3, r3, #28
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	019a      	lsls	r2, r3, #6
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	431a      	orrs	r2, r3
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	061b      	lsls	r3, r3, #24
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	071b      	lsls	r3, r3, #28
 8004872:	4926      	ldr	r1, [pc, #152]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d011      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	019a      	lsls	r2, r3, #6
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	041b      	lsls	r3, r3, #16
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	071b      	lsls	r3, r3, #28
 80048a2:	491a      	ldr	r1, [pc, #104]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048aa:	4b18      	ldr	r3, [pc, #96]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a17      	ldr	r2, [pc, #92]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b6:	f7fc fe6d 	bl	8001594 <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048be:	f7fc fe69 	bl	8001594 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b64      	cmp	r3, #100	@ 0x64
 80048ca:	d901      	bls.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0d8      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048d0:	4b0e      	ldr	r3, [pc, #56]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	f040 80ce 	bne.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048e4:	4b09      	ldr	r3, [pc, #36]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a08      	ldr	r2, [pc, #32]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f0:	f7fc fe50 	bl	8001594 <HAL_GetTick>
 80048f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048f6:	e00b      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048f8:	f7fc fe4c 	bl	8001594 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	@ 0x64
 8004904:	d904      	bls.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e0bb      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004910:	4b5e      	ldr	r3, [pc, #376]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800491c:	d0ec      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800493a:	2b00      	cmp	r3, #0
 800493c:	d02e      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d12a      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004946:	4b51      	ldr	r3, [pc, #324]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004954:	4b4d      	ldr	r3, [pc, #308]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495a:	0f1b      	lsrs	r3, r3, #28
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	019a      	lsls	r2, r3, #6
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	431a      	orrs	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	071b      	lsls	r3, r3, #28
 800497a:	4944      	ldr	r1, [pc, #272]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004982:	4b42      	ldr	r3, [pc, #264]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004988:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	3b01      	subs	r3, #1
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	493d      	ldr	r1, [pc, #244]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b0:	d11d      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049b2:	4b36      	ldr	r3, [pc, #216]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b8:	0e1b      	lsrs	r3, r3, #24
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049c0:	4b32      	ldr	r3, [pc, #200]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	0f1b      	lsrs	r3, r3, #28
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	019a      	lsls	r2, r3, #6
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	431a      	orrs	r2, r3
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	061b      	lsls	r3, r3, #24
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	071b      	lsls	r3, r3, #28
 80049e6:	4929      	ldr	r1, [pc, #164]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d028      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049fa:	4b24      	ldr	r3, [pc, #144]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a00:	0e1b      	lsrs	r3, r3, #24
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a08:	4b20      	ldr	r3, [pc, #128]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	019a      	lsls	r2, r3, #6
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	431a      	orrs	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	061b      	lsls	r3, r3, #24
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	071b      	lsls	r3, r3, #28
 8004a2e:	4917      	ldr	r1, [pc, #92]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a36:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	4911      	ldr	r1, [pc, #68]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0e      	ldr	r2, [pc, #56]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fc fd9c 	bl	8001594 <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a60:	f7fc fd98 	bl	8001594 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	@ 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e007      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a72:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a7e:	d1ef      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800

08004a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e049      	b.n	8004b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fade 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 f970 	bl	8004db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d001      	beq.n	8004b58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e04c      	b.n	8004bf2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a26      	ldr	r2, [pc, #152]	@ (8004c00 <HAL_TIM_Base_Start+0xc0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d022      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x70>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b72:	d01d      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x70>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a22      	ldr	r2, [pc, #136]	@ (8004c04 <HAL_TIM_Base_Start+0xc4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d018      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x70>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	@ (8004c08 <HAL_TIM_Base_Start+0xc8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x70>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c0c <HAL_TIM_Base_Start+0xcc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00e      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x70>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1e      	ldr	r2, [pc, #120]	@ (8004c10 <HAL_TIM_Base_Start+0xd0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x70>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c14 <HAL_TIM_Base_Start+0xd4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_TIM_Base_Start+0x70>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c18 <HAL_TIM_Base_Start+0xd8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d115      	bne.n	8004bdc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	4b19      	ldr	r3, [pc, #100]	@ (8004c1c <HAL_TIM_Base_Start+0xdc>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b06      	cmp	r3, #6
 8004bc0:	d015      	beq.n	8004bee <HAL_TIM_Base_Start+0xae>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc8:	d011      	beq.n	8004bee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	e008      	b.n	8004bee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e000      	b.n	8004bf0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40010400 	.word	0x40010400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40001800 	.word	0x40001800
 8004c1c:	00010007 	.word	0x00010007

08004c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIM_ConfigClockSource+0x1c>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e0b4      	b.n	8004da6 <HAL_TIM_ConfigClockSource+0x186>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	4b56      	ldr	r3, [pc, #344]	@ (8004db0 <HAL_TIM_ConfigClockSource+0x190>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c74:	d03e      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7a:	f200 8087 	bhi.w	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c82:	f000 8086 	beq.w	8004d92 <HAL_TIM_ConfigClockSource+0x172>
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8a:	d87f      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b70      	cmp	r3, #112	@ 0x70
 8004c8e:	d01a      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8004c90:	2b70      	cmp	r3, #112	@ 0x70
 8004c92:	d87b      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b60      	cmp	r3, #96	@ 0x60
 8004c96:	d050      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x11a>
 8004c98:	2b60      	cmp	r3, #96	@ 0x60
 8004c9a:	d877      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b50      	cmp	r3, #80	@ 0x50
 8004c9e:	d03c      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0xfa>
 8004ca0:	2b50      	cmp	r3, #80	@ 0x50
 8004ca2:	d873      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b40      	cmp	r3, #64	@ 0x40
 8004ca6:	d058      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x13a>
 8004ca8:	2b40      	cmp	r3, #64	@ 0x40
 8004caa:	d86f      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b30      	cmp	r3, #48	@ 0x30
 8004cae:	d064      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	2b30      	cmp	r3, #48	@ 0x30
 8004cb2:	d86b      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d060      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d867      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05c      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d05a      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	e062      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	f000 f98d 	bl	8004ff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	609a      	str	r2, [r3, #8]
      break;
 8004cf2:	e04f      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	f000 f976 	bl	8004ff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d16:	609a      	str	r2, [r3, #8]
      break;
 8004d18:	e03c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 f8ea 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2150      	movs	r1, #80	@ 0x50
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f943 	bl	8004fbe <TIM_ITRx_SetConfig>
      break;
 8004d38:	e02c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d46:	461a      	mov	r2, r3
 8004d48:	f000 f909 	bl	8004f5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2160      	movs	r1, #96	@ 0x60
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f933 	bl	8004fbe <TIM_ITRx_SetConfig>
      break;
 8004d58:	e01c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	461a      	mov	r2, r3
 8004d68:	f000 f8ca 	bl	8004f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2140      	movs	r1, #64	@ 0x40
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f923 	bl	8004fbe <TIM_ITRx_SetConfig>
      break;
 8004d78:	e00c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f000 f91a 	bl	8004fbe <TIM_ITRx_SetConfig>
      break;
 8004d8a:	e003      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d90:	e000      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	fffeff88 	.word	0xfffeff88

08004db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a43      	ldr	r2, [pc, #268]	@ (8004ed4 <TIM_Base_SetConfig+0x120>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd2:	d00f      	beq.n	8004df4 <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	@ (8004ed8 <TIM_Base_SetConfig+0x124>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00b      	beq.n	8004df4 <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3f      	ldr	r2, [pc, #252]	@ (8004edc <TIM_Base_SetConfig+0x128>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d007      	beq.n	8004df4 <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ee0 <TIM_Base_SetConfig+0x12c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d003      	beq.n	8004df4 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee4 <TIM_Base_SetConfig+0x130>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d108      	bne.n	8004e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a32      	ldr	r2, [pc, #200]	@ (8004ed4 <TIM_Base_SetConfig+0x120>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02b      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e14:	d027      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2f      	ldr	r2, [pc, #188]	@ (8004ed8 <TIM_Base_SetConfig+0x124>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d023      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2e      	ldr	r2, [pc, #184]	@ (8004edc <TIM_Base_SetConfig+0x128>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01f      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee0 <TIM_Base_SetConfig+0x12c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01b      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee4 <TIM_Base_SetConfig+0x130>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d017      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee8 <TIM_Base_SetConfig+0x134>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	@ (8004eec <TIM_Base_SetConfig+0x138>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00f      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a29      	ldr	r2, [pc, #164]	@ (8004ef0 <TIM_Base_SetConfig+0x13c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a28      	ldr	r2, [pc, #160]	@ (8004ef4 <TIM_Base_SetConfig+0x140>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a27      	ldr	r2, [pc, #156]	@ (8004ef8 <TIM_Base_SetConfig+0x144>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a26      	ldr	r2, [pc, #152]	@ (8004efc <TIM_Base_SetConfig+0x148>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d108      	bne.n	8004e78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed4 <TIM_Base_SetConfig+0x120>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_Base_SetConfig+0xf2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a10      	ldr	r2, [pc, #64]	@ (8004ee4 <TIM_Base_SetConfig+0x130>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d103      	bne.n	8004eae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f043 0204 	orr.w	r2, r3, #4
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40010000 	.word	0x40010000
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40010400 	.word	0x40010400
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800
 8004ef4:	40001800 	.word	0x40001800
 8004ef8:	40001c00 	.word	0x40001c00
 8004efc:	40002000 	.word	0x40002000

08004f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f023 030a 	bic.w	r3, r3, #10
 8004f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	621a      	str	r2, [r3, #32]
}
 8004f52:	bf00      	nop
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f023 0210 	bic.w	r2, r3, #16
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	031b      	lsls	r3, r3, #12
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b085      	sub	sp, #20
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f043 0307 	orr.w	r3, r3, #7
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800500e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	021a      	lsls	r2, r3, #8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	431a      	orrs	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	609a      	str	r2, [r3, #8]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e06d      	b.n	8005128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a30      	ldr	r2, [pc, #192]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2f      	ldr	r2, [pc, #188]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005086:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005098:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a20      	ldr	r2, [pc, #128]	@ (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050be:	d01d      	beq.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a15      	ldr	r2, [pc, #84]	@ (8005138 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a16      	ldr	r2, [pc, #88]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a15      	ldr	r2, [pc, #84]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10c      	bne.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005102:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40014000 	.word	0x40014000
 800514c:	40001800 	.word	0x40001800

08005150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e040      	b.n	80051e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb ff9e 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	@ 0x24
 800517c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fb16 	bl	80057c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f8af 	bl	8005300 <UART_SetConfig>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e01b      	b.n	80051e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fb95 	bl	800590c <UART_CheckIdleState>
 80051e2:	4603      	mov	r3, r0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	@ 0x28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005200:	2b20      	cmp	r3, #32
 8005202:	d177      	bne.n	80052f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_UART_Transmit+0x24>
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e070      	b.n	80052f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2221      	movs	r2, #33	@ 0x21
 8005220:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005222:	f7fc f9b7 	bl	8001594 <HAL_GetTick>
 8005226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005240:	d108      	bne.n	8005254 <HAL_UART_Transmit+0x68>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d104      	bne.n	8005254 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	e003      	b.n	800525c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800525c:	e02f      	b.n	80052be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	2180      	movs	r1, #128	@ 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fbf7 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d004      	beq.n	800527e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e03b      	b.n	80052f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005292:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	3302      	adds	r3, #2
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e007      	b.n	80052ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	781a      	ldrb	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3301      	adds	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1c9      	bne.n	800525e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2200      	movs	r2, #0
 80052d2:	2140      	movs	r1, #64	@ 0x40
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fbc1 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e005      	b.n	80052f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e000      	b.n	80052f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80052f4:	2302      	movs	r3, #2
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4ba6      	ldr	r3, [pc, #664]	@ (80055c4 <UART_SetConfig+0x2c4>)
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	430b      	orrs	r3, r1
 8005336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a94      	ldr	r2, [pc, #592]	@ (80055c8 <UART_SetConfig+0x2c8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d120      	bne.n	80053be <UART_SetConfig+0xbe>
 800537c:	4b93      	ldr	r3, [pc, #588]	@ (80055cc <UART_SetConfig+0x2cc>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d816      	bhi.n	80053b8 <UART_SetConfig+0xb8>
 800538a:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <UART_SetConfig+0x90>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053a7 	.word	0x080053a7
 800539c:	080053b3 	.word	0x080053b3
 80053a0:	2301      	movs	r3, #1
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e150      	b.n	8005648 <UART_SetConfig+0x348>
 80053a6:	2302      	movs	r3, #2
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e14d      	b.n	8005648 <UART_SetConfig+0x348>
 80053ac:	2304      	movs	r3, #4
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e14a      	b.n	8005648 <UART_SetConfig+0x348>
 80053b2:	2308      	movs	r3, #8
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e147      	b.n	8005648 <UART_SetConfig+0x348>
 80053b8:	2310      	movs	r3, #16
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e144      	b.n	8005648 <UART_SetConfig+0x348>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a83      	ldr	r2, [pc, #524]	@ (80055d0 <UART_SetConfig+0x2d0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d132      	bne.n	800542e <UART_SetConfig+0x12e>
 80053c8:	4b80      	ldr	r3, [pc, #512]	@ (80055cc <UART_SetConfig+0x2cc>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	d828      	bhi.n	8005428 <UART_SetConfig+0x128>
 80053d6:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <UART_SetConfig+0xdc>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005429 	.word	0x08005429
 80053e4:	08005429 	.word	0x08005429
 80053e8:	08005429 	.word	0x08005429
 80053ec:	0800541d 	.word	0x0800541d
 80053f0:	08005429 	.word	0x08005429
 80053f4:	08005429 	.word	0x08005429
 80053f8:	08005429 	.word	0x08005429
 80053fc:	08005417 	.word	0x08005417
 8005400:	08005429 	.word	0x08005429
 8005404:	08005429 	.word	0x08005429
 8005408:	08005429 	.word	0x08005429
 800540c:	08005423 	.word	0x08005423
 8005410:	2300      	movs	r3, #0
 8005412:	77fb      	strb	r3, [r7, #31]
 8005414:	e118      	b.n	8005648 <UART_SetConfig+0x348>
 8005416:	2302      	movs	r3, #2
 8005418:	77fb      	strb	r3, [r7, #31]
 800541a:	e115      	b.n	8005648 <UART_SetConfig+0x348>
 800541c:	2304      	movs	r3, #4
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e112      	b.n	8005648 <UART_SetConfig+0x348>
 8005422:	2308      	movs	r3, #8
 8005424:	77fb      	strb	r3, [r7, #31]
 8005426:	e10f      	b.n	8005648 <UART_SetConfig+0x348>
 8005428:	2310      	movs	r3, #16
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e10c      	b.n	8005648 <UART_SetConfig+0x348>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a68      	ldr	r2, [pc, #416]	@ (80055d4 <UART_SetConfig+0x2d4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d120      	bne.n	800547a <UART_SetConfig+0x17a>
 8005438:	4b64      	ldr	r3, [pc, #400]	@ (80055cc <UART_SetConfig+0x2cc>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005442:	2b30      	cmp	r3, #48	@ 0x30
 8005444:	d013      	beq.n	800546e <UART_SetConfig+0x16e>
 8005446:	2b30      	cmp	r3, #48	@ 0x30
 8005448:	d814      	bhi.n	8005474 <UART_SetConfig+0x174>
 800544a:	2b20      	cmp	r3, #32
 800544c:	d009      	beq.n	8005462 <UART_SetConfig+0x162>
 800544e:	2b20      	cmp	r3, #32
 8005450:	d810      	bhi.n	8005474 <UART_SetConfig+0x174>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <UART_SetConfig+0x15c>
 8005456:	2b10      	cmp	r3, #16
 8005458:	d006      	beq.n	8005468 <UART_SetConfig+0x168>
 800545a:	e00b      	b.n	8005474 <UART_SetConfig+0x174>
 800545c:	2300      	movs	r3, #0
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e0f2      	b.n	8005648 <UART_SetConfig+0x348>
 8005462:	2302      	movs	r3, #2
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e0ef      	b.n	8005648 <UART_SetConfig+0x348>
 8005468:	2304      	movs	r3, #4
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e0ec      	b.n	8005648 <UART_SetConfig+0x348>
 800546e:	2308      	movs	r3, #8
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e0e9      	b.n	8005648 <UART_SetConfig+0x348>
 8005474:	2310      	movs	r3, #16
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e0e6      	b.n	8005648 <UART_SetConfig+0x348>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a56      	ldr	r2, [pc, #344]	@ (80055d8 <UART_SetConfig+0x2d8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d120      	bne.n	80054c6 <UART_SetConfig+0x1c6>
 8005484:	4b51      	ldr	r3, [pc, #324]	@ (80055cc <UART_SetConfig+0x2cc>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800548a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800548e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005490:	d013      	beq.n	80054ba <UART_SetConfig+0x1ba>
 8005492:	2bc0      	cmp	r3, #192	@ 0xc0
 8005494:	d814      	bhi.n	80054c0 <UART_SetConfig+0x1c0>
 8005496:	2b80      	cmp	r3, #128	@ 0x80
 8005498:	d009      	beq.n	80054ae <UART_SetConfig+0x1ae>
 800549a:	2b80      	cmp	r3, #128	@ 0x80
 800549c:	d810      	bhi.n	80054c0 <UART_SetConfig+0x1c0>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <UART_SetConfig+0x1a8>
 80054a2:	2b40      	cmp	r3, #64	@ 0x40
 80054a4:	d006      	beq.n	80054b4 <UART_SetConfig+0x1b4>
 80054a6:	e00b      	b.n	80054c0 <UART_SetConfig+0x1c0>
 80054a8:	2300      	movs	r3, #0
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e0cc      	b.n	8005648 <UART_SetConfig+0x348>
 80054ae:	2302      	movs	r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e0c9      	b.n	8005648 <UART_SetConfig+0x348>
 80054b4:	2304      	movs	r3, #4
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e0c6      	b.n	8005648 <UART_SetConfig+0x348>
 80054ba:	2308      	movs	r3, #8
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e0c3      	b.n	8005648 <UART_SetConfig+0x348>
 80054c0:	2310      	movs	r3, #16
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e0c0      	b.n	8005648 <UART_SetConfig+0x348>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a44      	ldr	r2, [pc, #272]	@ (80055dc <UART_SetConfig+0x2dc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d125      	bne.n	800551c <UART_SetConfig+0x21c>
 80054d0:	4b3e      	ldr	r3, [pc, #248]	@ (80055cc <UART_SetConfig+0x2cc>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054de:	d017      	beq.n	8005510 <UART_SetConfig+0x210>
 80054e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054e4:	d817      	bhi.n	8005516 <UART_SetConfig+0x216>
 80054e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ea:	d00b      	beq.n	8005504 <UART_SetConfig+0x204>
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f0:	d811      	bhi.n	8005516 <UART_SetConfig+0x216>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <UART_SetConfig+0x1fe>
 80054f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054fa:	d006      	beq.n	800550a <UART_SetConfig+0x20a>
 80054fc:	e00b      	b.n	8005516 <UART_SetConfig+0x216>
 80054fe:	2300      	movs	r3, #0
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e0a1      	b.n	8005648 <UART_SetConfig+0x348>
 8005504:	2302      	movs	r3, #2
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e09e      	b.n	8005648 <UART_SetConfig+0x348>
 800550a:	2304      	movs	r3, #4
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e09b      	b.n	8005648 <UART_SetConfig+0x348>
 8005510:	2308      	movs	r3, #8
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e098      	b.n	8005648 <UART_SetConfig+0x348>
 8005516:	2310      	movs	r3, #16
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e095      	b.n	8005648 <UART_SetConfig+0x348>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2f      	ldr	r2, [pc, #188]	@ (80055e0 <UART_SetConfig+0x2e0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d125      	bne.n	8005572 <UART_SetConfig+0x272>
 8005526:	4b29      	ldr	r3, [pc, #164]	@ (80055cc <UART_SetConfig+0x2cc>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005530:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005534:	d017      	beq.n	8005566 <UART_SetConfig+0x266>
 8005536:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800553a:	d817      	bhi.n	800556c <UART_SetConfig+0x26c>
 800553c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005540:	d00b      	beq.n	800555a <UART_SetConfig+0x25a>
 8005542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005546:	d811      	bhi.n	800556c <UART_SetConfig+0x26c>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <UART_SetConfig+0x254>
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005550:	d006      	beq.n	8005560 <UART_SetConfig+0x260>
 8005552:	e00b      	b.n	800556c <UART_SetConfig+0x26c>
 8005554:	2301      	movs	r3, #1
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e076      	b.n	8005648 <UART_SetConfig+0x348>
 800555a:	2302      	movs	r3, #2
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e073      	b.n	8005648 <UART_SetConfig+0x348>
 8005560:	2304      	movs	r3, #4
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e070      	b.n	8005648 <UART_SetConfig+0x348>
 8005566:	2308      	movs	r3, #8
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e06d      	b.n	8005648 <UART_SetConfig+0x348>
 800556c:	2310      	movs	r3, #16
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e06a      	b.n	8005648 <UART_SetConfig+0x348>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <UART_SetConfig+0x2e4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d138      	bne.n	80055ee <UART_SetConfig+0x2ee>
 800557c:	4b13      	ldr	r3, [pc, #76]	@ (80055cc <UART_SetConfig+0x2cc>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005582:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005586:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800558a:	d017      	beq.n	80055bc <UART_SetConfig+0x2bc>
 800558c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005590:	d82a      	bhi.n	80055e8 <UART_SetConfig+0x2e8>
 8005592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005596:	d00b      	beq.n	80055b0 <UART_SetConfig+0x2b0>
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559c:	d824      	bhi.n	80055e8 <UART_SetConfig+0x2e8>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <UART_SetConfig+0x2aa>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a6:	d006      	beq.n	80055b6 <UART_SetConfig+0x2b6>
 80055a8:	e01e      	b.n	80055e8 <UART_SetConfig+0x2e8>
 80055aa:	2300      	movs	r3, #0
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e04b      	b.n	8005648 <UART_SetConfig+0x348>
 80055b0:	2302      	movs	r3, #2
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e048      	b.n	8005648 <UART_SetConfig+0x348>
 80055b6:	2304      	movs	r3, #4
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e045      	b.n	8005648 <UART_SetConfig+0x348>
 80055bc:	2308      	movs	r3, #8
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e042      	b.n	8005648 <UART_SetConfig+0x348>
 80055c2:	bf00      	nop
 80055c4:	efff69f3 	.word	0xefff69f3
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40004400 	.word	0x40004400
 80055d4:	40004800 	.word	0x40004800
 80055d8:	40004c00 	.word	0x40004c00
 80055dc:	40005000 	.word	0x40005000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	40007800 	.word	0x40007800
 80055e8:	2310      	movs	r3, #16
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e02c      	b.n	8005648 <UART_SetConfig+0x348>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a72      	ldr	r2, [pc, #456]	@ (80057bc <UART_SetConfig+0x4bc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d125      	bne.n	8005644 <UART_SetConfig+0x344>
 80055f8:	4b71      	ldr	r3, [pc, #452]	@ (80057c0 <UART_SetConfig+0x4c0>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005602:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005606:	d017      	beq.n	8005638 <UART_SetConfig+0x338>
 8005608:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800560c:	d817      	bhi.n	800563e <UART_SetConfig+0x33e>
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005612:	d00b      	beq.n	800562c <UART_SetConfig+0x32c>
 8005614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005618:	d811      	bhi.n	800563e <UART_SetConfig+0x33e>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <UART_SetConfig+0x326>
 800561e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005622:	d006      	beq.n	8005632 <UART_SetConfig+0x332>
 8005624:	e00b      	b.n	800563e <UART_SetConfig+0x33e>
 8005626:	2300      	movs	r3, #0
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e00d      	b.n	8005648 <UART_SetConfig+0x348>
 800562c:	2302      	movs	r3, #2
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e00a      	b.n	8005648 <UART_SetConfig+0x348>
 8005632:	2304      	movs	r3, #4
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e007      	b.n	8005648 <UART_SetConfig+0x348>
 8005638:	2308      	movs	r3, #8
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e004      	b.n	8005648 <UART_SetConfig+0x348>
 800563e:	2310      	movs	r3, #16
 8005640:	77fb      	strb	r3, [r7, #31]
 8005642:	e001      	b.n	8005648 <UART_SetConfig+0x348>
 8005644:	2310      	movs	r3, #16
 8005646:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005650:	d15b      	bne.n	800570a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005652:	7ffb      	ldrb	r3, [r7, #31]
 8005654:	2b08      	cmp	r3, #8
 8005656:	d828      	bhi.n	80056aa <UART_SetConfig+0x3aa>
 8005658:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <UART_SetConfig+0x360>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005685 	.word	0x08005685
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005695 	.word	0x08005695
 800566c:	080056ab 	.word	0x080056ab
 8005670:	0800569b 	.word	0x0800569b
 8005674:	080056ab 	.word	0x080056ab
 8005678:	080056ab 	.word	0x080056ab
 800567c:	080056ab 	.word	0x080056ab
 8005680:	080056a3 	.word	0x080056a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005684:	f7fe fdb4 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 8005688:	61b8      	str	r0, [r7, #24]
        break;
 800568a:	e013      	b.n	80056b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800568c:	f7fe fdc4 	bl	8004218 <HAL_RCC_GetPCLK2Freq>
 8005690:	61b8      	str	r0, [r7, #24]
        break;
 8005692:	e00f      	b.n	80056b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005694:	4b4b      	ldr	r3, [pc, #300]	@ (80057c4 <UART_SetConfig+0x4c4>)
 8005696:	61bb      	str	r3, [r7, #24]
        break;
 8005698:	e00c      	b.n	80056b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800569a:	f7fe fc97 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 800569e:	61b8      	str	r0, [r7, #24]
        break;
 80056a0:	e008      	b.n	80056b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056a6:	61bb      	str	r3, [r7, #24]
        break;
 80056a8:	e004      	b.n	80056b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	77bb      	strb	r3, [r7, #30]
        break;
 80056b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d074      	beq.n	80057a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	005a      	lsls	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	441a      	add	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b0f      	cmp	r3, #15
 80056d4:	d916      	bls.n	8005704 <UART_SetConfig+0x404>
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056dc:	d212      	bcs.n	8005704 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f023 030f 	bic.w	r3, r3, #15
 80056e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	89fb      	ldrh	r3, [r7, #14]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	89fa      	ldrh	r2, [r7, #14]
 8005700:	60da      	str	r2, [r3, #12]
 8005702:	e04f      	b.n	80057a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	77bb      	strb	r3, [r7, #30]
 8005708:	e04c      	b.n	80057a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800570a:	7ffb      	ldrb	r3, [r7, #31]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d828      	bhi.n	8005762 <UART_SetConfig+0x462>
 8005710:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0x418>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	0800573d 	.word	0x0800573d
 800571c:	08005745 	.word	0x08005745
 8005720:	0800574d 	.word	0x0800574d
 8005724:	08005763 	.word	0x08005763
 8005728:	08005753 	.word	0x08005753
 800572c:	08005763 	.word	0x08005763
 8005730:	08005763 	.word	0x08005763
 8005734:	08005763 	.word	0x08005763
 8005738:	0800575b 	.word	0x0800575b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800573c:	f7fe fd58 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 8005740:	61b8      	str	r0, [r7, #24]
        break;
 8005742:	e013      	b.n	800576c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005744:	f7fe fd68 	bl	8004218 <HAL_RCC_GetPCLK2Freq>
 8005748:	61b8      	str	r0, [r7, #24]
        break;
 800574a:	e00f      	b.n	800576c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800574c:	4b1d      	ldr	r3, [pc, #116]	@ (80057c4 <UART_SetConfig+0x4c4>)
 800574e:	61bb      	str	r3, [r7, #24]
        break;
 8005750:	e00c      	b.n	800576c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005752:	f7fe fc3b 	bl	8003fcc <HAL_RCC_GetSysClockFreq>
 8005756:	61b8      	str	r0, [r7, #24]
        break;
 8005758:	e008      	b.n	800576c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800575e:	61bb      	str	r3, [r7, #24]
        break;
 8005760:	e004      	b.n	800576c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	77bb      	strb	r3, [r7, #30]
        break;
 800576a:	bf00      	nop
    }

    if (pclk != 0U)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d018      	beq.n	80057a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	085a      	lsrs	r2, r3, #1
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	441a      	add	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b0f      	cmp	r3, #15
 800578a:	d909      	bls.n	80057a0 <UART_SetConfig+0x4a0>
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005792:	d205      	bcs.n	80057a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	b29a      	uxth	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	e001      	b.n	80057a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80057b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40007c00 	.word	0x40007c00
 80057c0:	40023800 	.word	0x40023800
 80057c4:	00f42400 	.word	0x00f42400

080057c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01a      	beq.n	80058de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c6:	d10a      	bne.n	80058de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b098      	sub	sp, #96	@ 0x60
 8005910:	af02      	add	r7, sp, #8
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800591c:	f7fb fe3a 	bl	8001594 <HAL_GetTick>
 8005920:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b08      	cmp	r3, #8
 800592e:	d12e      	bne.n	800598e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005930:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005938:	2200      	movs	r2, #0
 800593a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f88c 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d021      	beq.n	800598e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800595e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005968:	647b      	str	r3, [r7, #68]	@ 0x44
 800596a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800596e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e062      	b.n	8005a54 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d149      	bne.n	8005a30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f856 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03c      	beq.n	8005a30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	623b      	str	r3, [r7, #32]
   return(result);
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3308      	adds	r3, #8
 8005a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	617b      	str	r3, [r7, #20]
   return(result);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e011      	b.n	8005a54 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3758      	adds	r7, #88	@ 0x58
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6c:	e04f      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d04b      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a76:	f7fb fd8d 	bl	8001594 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d302      	bcc.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e04e      	b.n	8005b2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d037      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b80      	cmp	r3, #128	@ 0x80
 8005aa2:	d034      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d031      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d110      	bne.n	8005ada <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2208      	movs	r2, #8
 8005abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f838 	bl	8005b36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e029      	b.n	8005b2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae8:	d111      	bne.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f81e 	bl	8005b36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e00f      	b.n	8005b2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4013      	ands	r3, r2
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d0a0      	beq.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b095      	sub	sp, #84	@ 0x54
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3308      	adds	r3, #8
 8005b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d118      	bne.n	8005bde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0310 	bic.w	r3, r3, #16
 8005bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bf2:	bf00      	nop
 8005bf4:	3754      	adds	r7, #84	@ 0x54
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c00:	b084      	sub	sp, #16
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	f107 001c 	add.w	r0, r7, #28
 8005c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d121      	bne.n	8005c5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	4b21      	ldr	r3, [pc, #132]	@ (8005cb0 <USB_CoreInit+0xb0>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d105      	bne.n	8005c52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa92 	bl	800617c <USB_CoreReset>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
 8005c5c:	e010      	b.n	8005c80 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa86 	bl	800617c <USB_CoreReset>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c80:	7fbb      	ldrb	r3, [r7, #30]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d10b      	bne.n	8005c9e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f043 0206 	orr.w	r2, r3, #6
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005caa:	b004      	add	sp, #16
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	ffbdffbf 	.word	0xffbdffbf

08005cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f023 0201 	bic.w	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d115      	bne.n	8005d24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d04:	200a      	movs	r0, #10
 8005d06:	f7fb fc51 	bl	80015ac <HAL_Delay>
      ms += 10U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	330a      	adds	r3, #10
 8005d0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa25 	bl	8006160 <USB_GetMode>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d01e      	beq.n	8005d5a <USB_SetCurrentMode+0x84>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d20:	d9f0      	bls.n	8005d04 <USB_SetCurrentMode+0x2e>
 8005d22:	e01a      	b.n	8005d5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d115      	bne.n	8005d56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d36:	200a      	movs	r0, #10
 8005d38:	f7fb fc38 	bl	80015ac <HAL_Delay>
      ms += 10U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	330a      	adds	r3, #10
 8005d40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa0c 	bl	8006160 <USB_GetMode>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <USB_SetCurrentMode+0x84>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d52:	d9f0      	bls.n	8005d36 <USB_SetCurrentMode+0x60>
 8005d54:	e001      	b.n	8005d5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e005      	b.n	8005d66 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d5e:	d101      	bne.n	8005d64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d70:	b084      	sub	sp, #16
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	e009      	b.n	8005da4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	3340      	adds	r3, #64	@ 0x40
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	3301      	adds	r3, #1
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b0e      	cmp	r3, #14
 8005da8:	d9f2      	bls.n	8005d90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005daa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d11c      	bne.n	8005dec <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e005      	b.n	8005df8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2300      	movs	r3, #0
 8005e02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d10d      	bne.n	8005e28 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e14:	2100      	movs	r1, #0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f968 	bl	80060ec <USB_SetDevSpeed>
 8005e1c:	e008      	b.n	8005e30 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e1e:	2101      	movs	r1, #1
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f963 	bl	80060ec <USB_SetDevSpeed>
 8005e26:	e003      	b.n	8005e30 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e28:	2103      	movs	r1, #3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f95e 	bl	80060ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e30:	2110      	movs	r1, #16
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8fa 	bl	800602c <USB_FlushTxFifo>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f924 	bl	8006090 <USB_FlushRxFifo>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e64:	461a      	mov	r2, r3
 8005e66:	2300      	movs	r3, #0
 8005e68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e70:	461a      	mov	r2, r3
 8005e72:	2300      	movs	r3, #0
 8005e74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e043      	b.n	8005f04 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e92:	d118      	bne.n	8005ec6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e013      	b.n	8005ed8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e008      	b.n	8005ed8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005efc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	3301      	adds	r3, #1
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f08:	461a      	mov	r2, r3
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d3b5      	bcc.n	8005e7c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e043      	b.n	8005f9e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f2c:	d118      	bne.n	8005f60 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f40:	461a      	mov	r2, r3
 8005f42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	e013      	b.n	8005f72 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f56:	461a      	mov	r2, r3
 8005f58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e008      	b.n	8005f72 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2300      	movs	r3, #0
 8005f70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2300      	movs	r3, #0
 8005f82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d3b5      	bcc.n	8005f16 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005fca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f043 0210 	orr.w	r2, r3, #16
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <USB_DevInit+0x2b4>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f043 0208 	orr.w	r2, r3, #8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006000:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006004:	2b01      	cmp	r3, #1
 8006006:	d105      	bne.n	8006014 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <USB_DevInit+0x2b8>)
 800600e:	4313      	orrs	r3, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006020:	b004      	add	sp, #16
 8006022:	4770      	bx	lr
 8006024:	803c3800 	.word	0x803c3800
 8006028:	40000004 	.word	0x40000004

0800602c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3301      	adds	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006046:	d901      	bls.n	800604c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e01b      	b.n	8006084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	daf2      	bge.n	800603a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	019b      	lsls	r3, r3, #6
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3301      	adds	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006070:	d901      	bls.n	8006076 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e006      	b.n	8006084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d0f0      	beq.n	8006064 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060a8:	d901      	bls.n	80060ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e018      	b.n	80060e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	daf2      	bge.n	800609c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2210      	movs	r2, #16
 80060be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3301      	adds	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060cc:	d901      	bls.n	80060d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e006      	b.n	80060e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d0f0      	beq.n	80060c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006138:	f023 0303 	bic.w	r3, r3, #3
 800613c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800614c:	f043 0302 	orr.w	r3, r3, #2
 8006150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0301 	and.w	r3, r3, #1
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006194:	d901      	bls.n	800619a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e022      	b.n	80061e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	daf2      	bge.n	8006188 <USB_CoreReset+0xc>

  count = 10U;
 80061a2:	230a      	movs	r3, #10
 80061a4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80061a6:	e002      	b.n	80061ae <USB_CoreReset+0x32>
  {
    count--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f9      	bne.n	80061a8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061cc:	d901      	bls.n	80061d2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e006      	b.n	80061e0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d0f0      	beq.n	80061c0 <USB_CoreReset+0x44>

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <__cvt>:
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	ed2d 8b02 	vpush	{d8}
 80061f2:	eeb0 8b40 	vmov.f64	d8, d0
 80061f6:	b085      	sub	sp, #20
 80061f8:	4617      	mov	r7, r2
 80061fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80061fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061fe:	ee18 2a90 	vmov	r2, s17
 8006202:	f025 0520 	bic.w	r5, r5, #32
 8006206:	2a00      	cmp	r2, #0
 8006208:	bfb6      	itet	lt
 800620a:	222d      	movlt	r2, #45	@ 0x2d
 800620c:	2200      	movge	r2, #0
 800620e:	eeb1 8b40 	vneglt.f64	d8, d0
 8006212:	2d46      	cmp	r5, #70	@ 0x46
 8006214:	460c      	mov	r4, r1
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	d004      	beq.n	8006224 <__cvt+0x38>
 800621a:	2d45      	cmp	r5, #69	@ 0x45
 800621c:	d100      	bne.n	8006220 <__cvt+0x34>
 800621e:	3401      	adds	r4, #1
 8006220:	2102      	movs	r1, #2
 8006222:	e000      	b.n	8006226 <__cvt+0x3a>
 8006224:	2103      	movs	r1, #3
 8006226:	ab03      	add	r3, sp, #12
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	ab02      	add	r3, sp, #8
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	4622      	mov	r2, r4
 8006230:	4633      	mov	r3, r6
 8006232:	eeb0 0b48 	vmov.f64	d0, d8
 8006236:	f000 fe2f 	bl	8006e98 <_dtoa_r>
 800623a:	2d47      	cmp	r5, #71	@ 0x47
 800623c:	d114      	bne.n	8006268 <__cvt+0x7c>
 800623e:	07fb      	lsls	r3, r7, #31
 8006240:	d50a      	bpl.n	8006258 <__cvt+0x6c>
 8006242:	1902      	adds	r2, r0, r4
 8006244:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624c:	bf08      	it	eq
 800624e:	9203      	streq	r2, [sp, #12]
 8006250:	2130      	movs	r1, #48	@ 0x30
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	4293      	cmp	r3, r2
 8006256:	d319      	bcc.n	800628c <__cvt+0xa0>
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800625c:	1a1b      	subs	r3, r3, r0
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	b005      	add	sp, #20
 8006262:	ecbd 8b02 	vpop	{d8}
 8006266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006268:	2d46      	cmp	r5, #70	@ 0x46
 800626a:	eb00 0204 	add.w	r2, r0, r4
 800626e:	d1e9      	bne.n	8006244 <__cvt+0x58>
 8006270:	7803      	ldrb	r3, [r0, #0]
 8006272:	2b30      	cmp	r3, #48	@ 0x30
 8006274:	d107      	bne.n	8006286 <__cvt+0x9a>
 8006276:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800627a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627e:	bf1c      	itt	ne
 8006280:	f1c4 0401 	rsbne	r4, r4, #1
 8006284:	6034      	strne	r4, [r6, #0]
 8006286:	6833      	ldr	r3, [r6, #0]
 8006288:	441a      	add	r2, r3
 800628a:	e7db      	b.n	8006244 <__cvt+0x58>
 800628c:	1c5c      	adds	r4, r3, #1
 800628e:	9403      	str	r4, [sp, #12]
 8006290:	7019      	strb	r1, [r3, #0]
 8006292:	e7de      	b.n	8006252 <__cvt+0x66>

08006294 <__exponent>:
 8006294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006296:	2900      	cmp	r1, #0
 8006298:	bfba      	itte	lt
 800629a:	4249      	neglt	r1, r1
 800629c:	232d      	movlt	r3, #45	@ 0x2d
 800629e:	232b      	movge	r3, #43	@ 0x2b
 80062a0:	2909      	cmp	r1, #9
 80062a2:	7002      	strb	r2, [r0, #0]
 80062a4:	7043      	strb	r3, [r0, #1]
 80062a6:	dd29      	ble.n	80062fc <__exponent+0x68>
 80062a8:	f10d 0307 	add.w	r3, sp, #7
 80062ac:	461d      	mov	r5, r3
 80062ae:	270a      	movs	r7, #10
 80062b0:	461a      	mov	r2, r3
 80062b2:	fbb1 f6f7 	udiv	r6, r1, r7
 80062b6:	fb07 1416 	mls	r4, r7, r6, r1
 80062ba:	3430      	adds	r4, #48	@ 0x30
 80062bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80062c0:	460c      	mov	r4, r1
 80062c2:	2c63      	cmp	r4, #99	@ 0x63
 80062c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80062c8:	4631      	mov	r1, r6
 80062ca:	dcf1      	bgt.n	80062b0 <__exponent+0x1c>
 80062cc:	3130      	adds	r1, #48	@ 0x30
 80062ce:	1e94      	subs	r4, r2, #2
 80062d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062d4:	1c41      	adds	r1, r0, #1
 80062d6:	4623      	mov	r3, r4
 80062d8:	42ab      	cmp	r3, r5
 80062da:	d30a      	bcc.n	80062f2 <__exponent+0x5e>
 80062dc:	f10d 0309 	add.w	r3, sp, #9
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	42ac      	cmp	r4, r5
 80062e4:	bf88      	it	hi
 80062e6:	2300      	movhi	r3, #0
 80062e8:	3302      	adds	r3, #2
 80062ea:	4403      	add	r3, r0
 80062ec:	1a18      	subs	r0, r3, r0
 80062ee:	b003      	add	sp, #12
 80062f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062fa:	e7ed      	b.n	80062d8 <__exponent+0x44>
 80062fc:	2330      	movs	r3, #48	@ 0x30
 80062fe:	3130      	adds	r1, #48	@ 0x30
 8006300:	7083      	strb	r3, [r0, #2]
 8006302:	70c1      	strb	r1, [r0, #3]
 8006304:	1d03      	adds	r3, r0, #4
 8006306:	e7f1      	b.n	80062ec <__exponent+0x58>

08006308 <_printf_float>:
 8006308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	b08d      	sub	sp, #52	@ 0x34
 800630e:	460c      	mov	r4, r1
 8006310:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006314:	4616      	mov	r6, r2
 8006316:	461f      	mov	r7, r3
 8006318:	4605      	mov	r5, r0
 800631a:	f000 fcbb 	bl	8006c94 <_localeconv_r>
 800631e:	f8d0 b000 	ldr.w	fp, [r0]
 8006322:	4658      	mov	r0, fp
 8006324:	f7f9 ffdc 	bl	80002e0 <strlen>
 8006328:	2300      	movs	r3, #0
 800632a:	930a      	str	r3, [sp, #40]	@ 0x28
 800632c:	f8d8 3000 	ldr.w	r3, [r8]
 8006330:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	9005      	str	r0, [sp, #20]
 8006338:	3307      	adds	r3, #7
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	f103 0108 	add.w	r1, r3, #8
 8006342:	f8c8 1000 	str.w	r1, [r8]
 8006346:	ed93 0b00 	vldr	d0, [r3]
 800634a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80065a8 <_printf_float+0x2a0>
 800634e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006352:	eeb4 7b46 	vcmp.f64	d7, d6
 8006356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800635e:	dd24      	ble.n	80063aa <_printf_float+0xa2>
 8006360:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006368:	d502      	bpl.n	8006370 <_printf_float+0x68>
 800636a:	232d      	movs	r3, #45	@ 0x2d
 800636c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006370:	498f      	ldr	r1, [pc, #572]	@ (80065b0 <_printf_float+0x2a8>)
 8006372:	4b90      	ldr	r3, [pc, #576]	@ (80065b4 <_printf_float+0x2ac>)
 8006374:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006378:	bf8c      	ite	hi
 800637a:	4688      	movhi	r8, r1
 800637c:	4698      	movls	r8, r3
 800637e:	f022 0204 	bic.w	r2, r2, #4
 8006382:	2303      	movs	r3, #3
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	6022      	str	r2, [r4, #0]
 8006388:	f04f 0a00 	mov.w	sl, #0
 800638c:	9700      	str	r7, [sp, #0]
 800638e:	4633      	mov	r3, r6
 8006390:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	f000 f9d1 	bl	800673c <_printf_common>
 800639a:	3001      	adds	r0, #1
 800639c:	f040 8089 	bne.w	80064b2 <_printf_float+0x1aa>
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	b00d      	add	sp, #52	@ 0x34
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	eeb4 0b40 	vcmp.f64	d0, d0
 80063ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b2:	d709      	bvc.n	80063c8 <_printf_float+0xc0>
 80063b4:	ee10 3a90 	vmov	r3, s1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bfbc      	itt	lt
 80063bc:	232d      	movlt	r3, #45	@ 0x2d
 80063be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063c2:	497d      	ldr	r1, [pc, #500]	@ (80065b8 <_printf_float+0x2b0>)
 80063c4:	4b7d      	ldr	r3, [pc, #500]	@ (80065bc <_printf_float+0x2b4>)
 80063c6:	e7d5      	b.n	8006374 <_printf_float+0x6c>
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80063d0:	d139      	bne.n	8006446 <_printf_float+0x13e>
 80063d2:	2306      	movs	r3, #6
 80063d4:	6063      	str	r3, [r4, #4]
 80063d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063da:	2300      	movs	r3, #0
 80063dc:	6022      	str	r2, [r4, #0]
 80063de:	9303      	str	r3, [sp, #12]
 80063e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80063e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80063e6:	ab09      	add	r3, sp, #36	@ 0x24
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	6861      	ldr	r1, [r4, #4]
 80063ec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063f0:	4628      	mov	r0, r5
 80063f2:	f7ff fefb 	bl	80061ec <__cvt>
 80063f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063fc:	4680      	mov	r8, r0
 80063fe:	d129      	bne.n	8006454 <_printf_float+0x14c>
 8006400:	1cc8      	adds	r0, r1, #3
 8006402:	db02      	blt.n	800640a <_printf_float+0x102>
 8006404:	6863      	ldr	r3, [r4, #4]
 8006406:	4299      	cmp	r1, r3
 8006408:	dd41      	ble.n	800648e <_printf_float+0x186>
 800640a:	f1a9 0902 	sub.w	r9, r9, #2
 800640e:	fa5f f989 	uxtb.w	r9, r9
 8006412:	3901      	subs	r1, #1
 8006414:	464a      	mov	r2, r9
 8006416:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800641a:	9109      	str	r1, [sp, #36]	@ 0x24
 800641c:	f7ff ff3a 	bl	8006294 <__exponent>
 8006420:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006422:	1813      	adds	r3, r2, r0
 8006424:	2a01      	cmp	r2, #1
 8006426:	4682      	mov	sl, r0
 8006428:	6123      	str	r3, [r4, #16]
 800642a:	dc02      	bgt.n	8006432 <_printf_float+0x12a>
 800642c:	6822      	ldr	r2, [r4, #0]
 800642e:	07d2      	lsls	r2, r2, #31
 8006430:	d501      	bpl.n	8006436 <_printf_float+0x12e>
 8006432:	3301      	adds	r3, #1
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0a6      	beq.n	800638c <_printf_float+0x84>
 800643e:	232d      	movs	r3, #45	@ 0x2d
 8006440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006444:	e7a2      	b.n	800638c <_printf_float+0x84>
 8006446:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800644a:	d1c4      	bne.n	80063d6 <_printf_float+0xce>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1c2      	bne.n	80063d6 <_printf_float+0xce>
 8006450:	2301      	movs	r3, #1
 8006452:	e7bf      	b.n	80063d4 <_printf_float+0xcc>
 8006454:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006458:	d9db      	bls.n	8006412 <_printf_float+0x10a>
 800645a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800645e:	d118      	bne.n	8006492 <_printf_float+0x18a>
 8006460:	2900      	cmp	r1, #0
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	dd0b      	ble.n	800647e <_printf_float+0x176>
 8006466:	6121      	str	r1, [r4, #16]
 8006468:	b913      	cbnz	r3, 8006470 <_printf_float+0x168>
 800646a:	6822      	ldr	r2, [r4, #0]
 800646c:	07d0      	lsls	r0, r2, #31
 800646e:	d502      	bpl.n	8006476 <_printf_float+0x16e>
 8006470:	3301      	adds	r3, #1
 8006472:	440b      	add	r3, r1
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006478:	f04f 0a00 	mov.w	sl, #0
 800647c:	e7db      	b.n	8006436 <_printf_float+0x12e>
 800647e:	b913      	cbnz	r3, 8006486 <_printf_float+0x17e>
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	07d2      	lsls	r2, r2, #31
 8006484:	d501      	bpl.n	800648a <_printf_float+0x182>
 8006486:	3302      	adds	r3, #2
 8006488:	e7f4      	b.n	8006474 <_printf_float+0x16c>
 800648a:	2301      	movs	r3, #1
 800648c:	e7f2      	b.n	8006474 <_printf_float+0x16c>
 800648e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006494:	4299      	cmp	r1, r3
 8006496:	db05      	blt.n	80064a4 <_printf_float+0x19c>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	6121      	str	r1, [r4, #16]
 800649c:	07d8      	lsls	r0, r3, #31
 800649e:	d5ea      	bpl.n	8006476 <_printf_float+0x16e>
 80064a0:	1c4b      	adds	r3, r1, #1
 80064a2:	e7e7      	b.n	8006474 <_printf_float+0x16c>
 80064a4:	2900      	cmp	r1, #0
 80064a6:	bfd4      	ite	le
 80064a8:	f1c1 0202 	rsble	r2, r1, #2
 80064ac:	2201      	movgt	r2, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	e7e0      	b.n	8006474 <_printf_float+0x16c>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	055a      	lsls	r2, r3, #21
 80064b6:	d407      	bmi.n	80064c8 <_printf_float+0x1c0>
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	4642      	mov	r2, r8
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	d12a      	bne.n	800651c <_printf_float+0x214>
 80064c6:	e76b      	b.n	80063a0 <_printf_float+0x98>
 80064c8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80064cc:	f240 80e0 	bls.w	8006690 <_printf_float+0x388>
 80064d0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80064d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80064d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064dc:	d133      	bne.n	8006546 <_printf_float+0x23e>
 80064de:	4a38      	ldr	r2, [pc, #224]	@ (80065c0 <_printf_float+0x2b8>)
 80064e0:	2301      	movs	r3, #1
 80064e2:	4631      	mov	r1, r6
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b8      	blx	r7
 80064e8:	3001      	adds	r0, #1
 80064ea:	f43f af59 	beq.w	80063a0 <_printf_float+0x98>
 80064ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064f2:	4543      	cmp	r3, r8
 80064f4:	db02      	blt.n	80064fc <_printf_float+0x1f4>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	07d8      	lsls	r0, r3, #31
 80064fa:	d50f      	bpl.n	800651c <_printf_float+0x214>
 80064fc:	9b05      	ldr	r3, [sp, #20]
 80064fe:	465a      	mov	r2, fp
 8006500:	4631      	mov	r1, r6
 8006502:	4628      	mov	r0, r5
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	f43f af4a 	beq.w	80063a0 <_printf_float+0x98>
 800650c:	f04f 0900 	mov.w	r9, #0
 8006510:	f108 38ff 	add.w	r8, r8, #4294967295
 8006514:	f104 0a1a 	add.w	sl, r4, #26
 8006518:	45c8      	cmp	r8, r9
 800651a:	dc09      	bgt.n	8006530 <_printf_float+0x228>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	079b      	lsls	r3, r3, #30
 8006520:	f100 8107 	bmi.w	8006732 <_printf_float+0x42a>
 8006524:	68e0      	ldr	r0, [r4, #12]
 8006526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006528:	4298      	cmp	r0, r3
 800652a:	bfb8      	it	lt
 800652c:	4618      	movlt	r0, r3
 800652e:	e739      	b.n	80063a4 <_printf_float+0x9c>
 8006530:	2301      	movs	r3, #1
 8006532:	4652      	mov	r2, sl
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f af30 	beq.w	80063a0 <_printf_float+0x98>
 8006540:	f109 0901 	add.w	r9, r9, #1
 8006544:	e7e8      	b.n	8006518 <_printf_float+0x210>
 8006546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	dc3b      	bgt.n	80065c4 <_printf_float+0x2bc>
 800654c:	4a1c      	ldr	r2, [pc, #112]	@ (80065c0 <_printf_float+0x2b8>)
 800654e:	2301      	movs	r3, #1
 8006550:	4631      	mov	r1, r6
 8006552:	4628      	mov	r0, r5
 8006554:	47b8      	blx	r7
 8006556:	3001      	adds	r0, #1
 8006558:	f43f af22 	beq.w	80063a0 <_printf_float+0x98>
 800655c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006560:	ea59 0303 	orrs.w	r3, r9, r3
 8006564:	d102      	bne.n	800656c <_printf_float+0x264>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	07d9      	lsls	r1, r3, #31
 800656a:	d5d7      	bpl.n	800651c <_printf_float+0x214>
 800656c:	9b05      	ldr	r3, [sp, #20]
 800656e:	465a      	mov	r2, fp
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f af12 	beq.w	80063a0 <_printf_float+0x98>
 800657c:	f04f 0a00 	mov.w	sl, #0
 8006580:	f104 0b1a 	add.w	fp, r4, #26
 8006584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006586:	425b      	negs	r3, r3
 8006588:	4553      	cmp	r3, sl
 800658a:	dc01      	bgt.n	8006590 <_printf_float+0x288>
 800658c:	464b      	mov	r3, r9
 800658e:	e794      	b.n	80064ba <_printf_float+0x1b2>
 8006590:	2301      	movs	r3, #1
 8006592:	465a      	mov	r2, fp
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	f43f af00 	beq.w	80063a0 <_printf_float+0x98>
 80065a0:	f10a 0a01 	add.w	sl, sl, #1
 80065a4:	e7ee      	b.n	8006584 <_printf_float+0x27c>
 80065a6:	bf00      	nop
 80065a8:	ffffffff 	.word	0xffffffff
 80065ac:	7fefffff 	.word	0x7fefffff
 80065b0:	08008a34 	.word	0x08008a34
 80065b4:	08008a30 	.word	0x08008a30
 80065b8:	08008a3c 	.word	0x08008a3c
 80065bc:	08008a38 	.word	0x08008a38
 80065c0:	08008a40 	.word	0x08008a40
 80065c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065ca:	4553      	cmp	r3, sl
 80065cc:	bfa8      	it	ge
 80065ce:	4653      	movge	r3, sl
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	4699      	mov	r9, r3
 80065d4:	dc37      	bgt.n	8006646 <_printf_float+0x33e>
 80065d6:	2300      	movs	r3, #0
 80065d8:	9307      	str	r3, [sp, #28]
 80065da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065de:	f104 021a 	add.w	r2, r4, #26
 80065e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065e4:	9907      	ldr	r1, [sp, #28]
 80065e6:	9306      	str	r3, [sp, #24]
 80065e8:	eba3 0309 	sub.w	r3, r3, r9
 80065ec:	428b      	cmp	r3, r1
 80065ee:	dc31      	bgt.n	8006654 <_printf_float+0x34c>
 80065f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f2:	459a      	cmp	sl, r3
 80065f4:	dc3b      	bgt.n	800666e <_printf_float+0x366>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	07da      	lsls	r2, r3, #31
 80065fa:	d438      	bmi.n	800666e <_printf_float+0x366>
 80065fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065fe:	ebaa 0903 	sub.w	r9, sl, r3
 8006602:	9b06      	ldr	r3, [sp, #24]
 8006604:	ebaa 0303 	sub.w	r3, sl, r3
 8006608:	4599      	cmp	r9, r3
 800660a:	bfa8      	it	ge
 800660c:	4699      	movge	r9, r3
 800660e:	f1b9 0f00 	cmp.w	r9, #0
 8006612:	dc34      	bgt.n	800667e <_printf_float+0x376>
 8006614:	f04f 0800 	mov.w	r8, #0
 8006618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800661c:	f104 0b1a 	add.w	fp, r4, #26
 8006620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006622:	ebaa 0303 	sub.w	r3, sl, r3
 8006626:	eba3 0309 	sub.w	r3, r3, r9
 800662a:	4543      	cmp	r3, r8
 800662c:	f77f af76 	ble.w	800651c <_printf_float+0x214>
 8006630:	2301      	movs	r3, #1
 8006632:	465a      	mov	r2, fp
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f aeb0 	beq.w	80063a0 <_printf_float+0x98>
 8006640:	f108 0801 	add.w	r8, r8, #1
 8006644:	e7ec      	b.n	8006620 <_printf_float+0x318>
 8006646:	4642      	mov	r2, r8
 8006648:	4631      	mov	r1, r6
 800664a:	4628      	mov	r0, r5
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	d1c1      	bne.n	80065d6 <_printf_float+0x2ce>
 8006652:	e6a5      	b.n	80063a0 <_printf_float+0x98>
 8006654:	2301      	movs	r3, #1
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	9206      	str	r2, [sp, #24]
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	f43f ae9e 	beq.w	80063a0 <_printf_float+0x98>
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	9a06      	ldr	r2, [sp, #24]
 8006668:	3301      	adds	r3, #1
 800666a:	9307      	str	r3, [sp, #28]
 800666c:	e7b9      	b.n	80065e2 <_printf_float+0x2da>
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	465a      	mov	r2, fp
 8006672:	4631      	mov	r1, r6
 8006674:	4628      	mov	r0, r5
 8006676:	47b8      	blx	r7
 8006678:	3001      	adds	r0, #1
 800667a:	d1bf      	bne.n	80065fc <_printf_float+0x2f4>
 800667c:	e690      	b.n	80063a0 <_printf_float+0x98>
 800667e:	9a06      	ldr	r2, [sp, #24]
 8006680:	464b      	mov	r3, r9
 8006682:	4442      	add	r2, r8
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	d1c2      	bne.n	8006614 <_printf_float+0x30c>
 800668e:	e687      	b.n	80063a0 <_printf_float+0x98>
 8006690:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006694:	f1b9 0f01 	cmp.w	r9, #1
 8006698:	dc01      	bgt.n	800669e <_printf_float+0x396>
 800669a:	07db      	lsls	r3, r3, #31
 800669c:	d536      	bpl.n	800670c <_printf_float+0x404>
 800669e:	2301      	movs	r3, #1
 80066a0:	4642      	mov	r2, r8
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	f43f ae79 	beq.w	80063a0 <_printf_float+0x98>
 80066ae:	9b05      	ldr	r3, [sp, #20]
 80066b0:	465a      	mov	r2, fp
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f ae71 	beq.w	80063a0 <_printf_float+0x98>
 80066be:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80066c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80066ce:	d018      	beq.n	8006702 <_printf_float+0x3fa>
 80066d0:	464b      	mov	r3, r9
 80066d2:	f108 0201 	add.w	r2, r8, #1
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d10c      	bne.n	80066fa <_printf_float+0x3f2>
 80066e0:	e65e      	b.n	80063a0 <_printf_float+0x98>
 80066e2:	2301      	movs	r3, #1
 80066e4:	465a      	mov	r2, fp
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f ae57 	beq.w	80063a0 <_printf_float+0x98>
 80066f2:	f108 0801 	add.w	r8, r8, #1
 80066f6:	45c8      	cmp	r8, r9
 80066f8:	dbf3      	blt.n	80066e2 <_printf_float+0x3da>
 80066fa:	4653      	mov	r3, sl
 80066fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006700:	e6dc      	b.n	80064bc <_printf_float+0x1b4>
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	f104 0b1a 	add.w	fp, r4, #26
 800670a:	e7f4      	b.n	80066f6 <_printf_float+0x3ee>
 800670c:	2301      	movs	r3, #1
 800670e:	4642      	mov	r2, r8
 8006710:	e7e1      	b.n	80066d6 <_printf_float+0x3ce>
 8006712:	2301      	movs	r3, #1
 8006714:	464a      	mov	r2, r9
 8006716:	4631      	mov	r1, r6
 8006718:	4628      	mov	r0, r5
 800671a:	47b8      	blx	r7
 800671c:	3001      	adds	r0, #1
 800671e:	f43f ae3f 	beq.w	80063a0 <_printf_float+0x98>
 8006722:	f108 0801 	add.w	r8, r8, #1
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800672a:	1a5b      	subs	r3, r3, r1
 800672c:	4543      	cmp	r3, r8
 800672e:	dcf0      	bgt.n	8006712 <_printf_float+0x40a>
 8006730:	e6f8      	b.n	8006524 <_printf_float+0x21c>
 8006732:	f04f 0800 	mov.w	r8, #0
 8006736:	f104 0919 	add.w	r9, r4, #25
 800673a:	e7f4      	b.n	8006726 <_printf_float+0x41e>

0800673c <_printf_common>:
 800673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006740:	4616      	mov	r6, r2
 8006742:	4698      	mov	r8, r3
 8006744:	688a      	ldr	r2, [r1, #8]
 8006746:	690b      	ldr	r3, [r1, #16]
 8006748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800674c:	4293      	cmp	r3, r2
 800674e:	bfb8      	it	lt
 8006750:	4613      	movlt	r3, r2
 8006752:	6033      	str	r3, [r6, #0]
 8006754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006758:	4607      	mov	r7, r0
 800675a:	460c      	mov	r4, r1
 800675c:	b10a      	cbz	r2, 8006762 <_printf_common+0x26>
 800675e:	3301      	adds	r3, #1
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	0699      	lsls	r1, r3, #26
 8006766:	bf42      	ittt	mi
 8006768:	6833      	ldrmi	r3, [r6, #0]
 800676a:	3302      	addmi	r3, #2
 800676c:	6033      	strmi	r3, [r6, #0]
 800676e:	6825      	ldr	r5, [r4, #0]
 8006770:	f015 0506 	ands.w	r5, r5, #6
 8006774:	d106      	bne.n	8006784 <_printf_common+0x48>
 8006776:	f104 0a19 	add.w	sl, r4, #25
 800677a:	68e3      	ldr	r3, [r4, #12]
 800677c:	6832      	ldr	r2, [r6, #0]
 800677e:	1a9b      	subs	r3, r3, r2
 8006780:	42ab      	cmp	r3, r5
 8006782:	dc26      	bgt.n	80067d2 <_printf_common+0x96>
 8006784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006788:	6822      	ldr	r2, [r4, #0]
 800678a:	3b00      	subs	r3, #0
 800678c:	bf18      	it	ne
 800678e:	2301      	movne	r3, #1
 8006790:	0692      	lsls	r2, r2, #26
 8006792:	d42b      	bmi.n	80067ec <_printf_common+0xb0>
 8006794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006798:	4641      	mov	r1, r8
 800679a:	4638      	mov	r0, r7
 800679c:	47c8      	blx	r9
 800679e:	3001      	adds	r0, #1
 80067a0:	d01e      	beq.n	80067e0 <_printf_common+0xa4>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	6922      	ldr	r2, [r4, #16]
 80067a6:	f003 0306 	and.w	r3, r3, #6
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	bf02      	ittt	eq
 80067ae:	68e5      	ldreq	r5, [r4, #12]
 80067b0:	6833      	ldreq	r3, [r6, #0]
 80067b2:	1aed      	subeq	r5, r5, r3
 80067b4:	68a3      	ldr	r3, [r4, #8]
 80067b6:	bf0c      	ite	eq
 80067b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067bc:	2500      	movne	r5, #0
 80067be:	4293      	cmp	r3, r2
 80067c0:	bfc4      	itt	gt
 80067c2:	1a9b      	subgt	r3, r3, r2
 80067c4:	18ed      	addgt	r5, r5, r3
 80067c6:	2600      	movs	r6, #0
 80067c8:	341a      	adds	r4, #26
 80067ca:	42b5      	cmp	r5, r6
 80067cc:	d11a      	bne.n	8006804 <_printf_common+0xc8>
 80067ce:	2000      	movs	r0, #0
 80067d0:	e008      	b.n	80067e4 <_printf_common+0xa8>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4652      	mov	r2, sl
 80067d6:	4641      	mov	r1, r8
 80067d8:	4638      	mov	r0, r7
 80067da:	47c8      	blx	r9
 80067dc:	3001      	adds	r0, #1
 80067de:	d103      	bne.n	80067e8 <_printf_common+0xac>
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e8:	3501      	adds	r5, #1
 80067ea:	e7c6      	b.n	800677a <_printf_common+0x3e>
 80067ec:	18e1      	adds	r1, r4, r3
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	2030      	movs	r0, #48	@ 0x30
 80067f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067f6:	4422      	add	r2, r4
 80067f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006800:	3302      	adds	r3, #2
 8006802:	e7c7      	b.n	8006794 <_printf_common+0x58>
 8006804:	2301      	movs	r3, #1
 8006806:	4622      	mov	r2, r4
 8006808:	4641      	mov	r1, r8
 800680a:	4638      	mov	r0, r7
 800680c:	47c8      	blx	r9
 800680e:	3001      	adds	r0, #1
 8006810:	d0e6      	beq.n	80067e0 <_printf_common+0xa4>
 8006812:	3601      	adds	r6, #1
 8006814:	e7d9      	b.n	80067ca <_printf_common+0x8e>
	...

08006818 <_printf_i>:
 8006818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	7e0f      	ldrb	r7, [r1, #24]
 800681e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006820:	2f78      	cmp	r7, #120	@ 0x78
 8006822:	4691      	mov	r9, r2
 8006824:	4680      	mov	r8, r0
 8006826:	460c      	mov	r4, r1
 8006828:	469a      	mov	sl, r3
 800682a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800682e:	d807      	bhi.n	8006840 <_printf_i+0x28>
 8006830:	2f62      	cmp	r7, #98	@ 0x62
 8006832:	d80a      	bhi.n	800684a <_printf_i+0x32>
 8006834:	2f00      	cmp	r7, #0
 8006836:	f000 80d1 	beq.w	80069dc <_printf_i+0x1c4>
 800683a:	2f58      	cmp	r7, #88	@ 0x58
 800683c:	f000 80b8 	beq.w	80069b0 <_printf_i+0x198>
 8006840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006848:	e03a      	b.n	80068c0 <_printf_i+0xa8>
 800684a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800684e:	2b15      	cmp	r3, #21
 8006850:	d8f6      	bhi.n	8006840 <_printf_i+0x28>
 8006852:	a101      	add	r1, pc, #4	@ (adr r1, 8006858 <_printf_i+0x40>)
 8006854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006858:	080068b1 	.word	0x080068b1
 800685c:	080068c5 	.word	0x080068c5
 8006860:	08006841 	.word	0x08006841
 8006864:	08006841 	.word	0x08006841
 8006868:	08006841 	.word	0x08006841
 800686c:	08006841 	.word	0x08006841
 8006870:	080068c5 	.word	0x080068c5
 8006874:	08006841 	.word	0x08006841
 8006878:	08006841 	.word	0x08006841
 800687c:	08006841 	.word	0x08006841
 8006880:	08006841 	.word	0x08006841
 8006884:	080069c3 	.word	0x080069c3
 8006888:	080068ef 	.word	0x080068ef
 800688c:	0800697d 	.word	0x0800697d
 8006890:	08006841 	.word	0x08006841
 8006894:	08006841 	.word	0x08006841
 8006898:	080069e5 	.word	0x080069e5
 800689c:	08006841 	.word	0x08006841
 80068a0:	080068ef 	.word	0x080068ef
 80068a4:	08006841 	.word	0x08006841
 80068a8:	08006841 	.word	0x08006841
 80068ac:	08006985 	.word	0x08006985
 80068b0:	6833      	ldr	r3, [r6, #0]
 80068b2:	1d1a      	adds	r2, r3, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6032      	str	r2, [r6, #0]
 80068b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068c0:	2301      	movs	r3, #1
 80068c2:	e09c      	b.n	80069fe <_printf_i+0x1e6>
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	6820      	ldr	r0, [r4, #0]
 80068c8:	1d19      	adds	r1, r3, #4
 80068ca:	6031      	str	r1, [r6, #0]
 80068cc:	0606      	lsls	r6, r0, #24
 80068ce:	d501      	bpl.n	80068d4 <_printf_i+0xbc>
 80068d0:	681d      	ldr	r5, [r3, #0]
 80068d2:	e003      	b.n	80068dc <_printf_i+0xc4>
 80068d4:	0645      	lsls	r5, r0, #25
 80068d6:	d5fb      	bpl.n	80068d0 <_printf_i+0xb8>
 80068d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068dc:	2d00      	cmp	r5, #0
 80068de:	da03      	bge.n	80068e8 <_printf_i+0xd0>
 80068e0:	232d      	movs	r3, #45	@ 0x2d
 80068e2:	426d      	negs	r5, r5
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e8:	4858      	ldr	r0, [pc, #352]	@ (8006a4c <_printf_i+0x234>)
 80068ea:	230a      	movs	r3, #10
 80068ec:	e011      	b.n	8006912 <_printf_i+0xfa>
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	6833      	ldr	r3, [r6, #0]
 80068f2:	0608      	lsls	r0, r1, #24
 80068f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068f8:	d402      	bmi.n	8006900 <_printf_i+0xe8>
 80068fa:	0649      	lsls	r1, r1, #25
 80068fc:	bf48      	it	mi
 80068fe:	b2ad      	uxthmi	r5, r5
 8006900:	2f6f      	cmp	r7, #111	@ 0x6f
 8006902:	4852      	ldr	r0, [pc, #328]	@ (8006a4c <_printf_i+0x234>)
 8006904:	6033      	str	r3, [r6, #0]
 8006906:	bf14      	ite	ne
 8006908:	230a      	movne	r3, #10
 800690a:	2308      	moveq	r3, #8
 800690c:	2100      	movs	r1, #0
 800690e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006912:	6866      	ldr	r6, [r4, #4]
 8006914:	60a6      	str	r6, [r4, #8]
 8006916:	2e00      	cmp	r6, #0
 8006918:	db05      	blt.n	8006926 <_printf_i+0x10e>
 800691a:	6821      	ldr	r1, [r4, #0]
 800691c:	432e      	orrs	r6, r5
 800691e:	f021 0104 	bic.w	r1, r1, #4
 8006922:	6021      	str	r1, [r4, #0]
 8006924:	d04b      	beq.n	80069be <_printf_i+0x1a6>
 8006926:	4616      	mov	r6, r2
 8006928:	fbb5 f1f3 	udiv	r1, r5, r3
 800692c:	fb03 5711 	mls	r7, r3, r1, r5
 8006930:	5dc7      	ldrb	r7, [r0, r7]
 8006932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006936:	462f      	mov	r7, r5
 8006938:	42bb      	cmp	r3, r7
 800693a:	460d      	mov	r5, r1
 800693c:	d9f4      	bls.n	8006928 <_printf_i+0x110>
 800693e:	2b08      	cmp	r3, #8
 8006940:	d10b      	bne.n	800695a <_printf_i+0x142>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	07df      	lsls	r7, r3, #31
 8006946:	d508      	bpl.n	800695a <_printf_i+0x142>
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	6861      	ldr	r1, [r4, #4]
 800694c:	4299      	cmp	r1, r3
 800694e:	bfde      	ittt	le
 8006950:	2330      	movle	r3, #48	@ 0x30
 8006952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800695a:	1b92      	subs	r2, r2, r6
 800695c:	6122      	str	r2, [r4, #16]
 800695e:	f8cd a000 	str.w	sl, [sp]
 8006962:	464b      	mov	r3, r9
 8006964:	aa03      	add	r2, sp, #12
 8006966:	4621      	mov	r1, r4
 8006968:	4640      	mov	r0, r8
 800696a:	f7ff fee7 	bl	800673c <_printf_common>
 800696e:	3001      	adds	r0, #1
 8006970:	d14a      	bne.n	8006a08 <_printf_i+0x1f0>
 8006972:	f04f 30ff 	mov.w	r0, #4294967295
 8006976:	b004      	add	sp, #16
 8006978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	f043 0320 	orr.w	r3, r3, #32
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	4832      	ldr	r0, [pc, #200]	@ (8006a50 <_printf_i+0x238>)
 8006986:	2778      	movs	r7, #120	@ 0x78
 8006988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	6831      	ldr	r1, [r6, #0]
 8006990:	061f      	lsls	r7, r3, #24
 8006992:	f851 5b04 	ldr.w	r5, [r1], #4
 8006996:	d402      	bmi.n	800699e <_printf_i+0x186>
 8006998:	065f      	lsls	r7, r3, #25
 800699a:	bf48      	it	mi
 800699c:	b2ad      	uxthmi	r5, r5
 800699e:	6031      	str	r1, [r6, #0]
 80069a0:	07d9      	lsls	r1, r3, #31
 80069a2:	bf44      	itt	mi
 80069a4:	f043 0320 	orrmi.w	r3, r3, #32
 80069a8:	6023      	strmi	r3, [r4, #0]
 80069aa:	b11d      	cbz	r5, 80069b4 <_printf_i+0x19c>
 80069ac:	2310      	movs	r3, #16
 80069ae:	e7ad      	b.n	800690c <_printf_i+0xf4>
 80069b0:	4826      	ldr	r0, [pc, #152]	@ (8006a4c <_printf_i+0x234>)
 80069b2:	e7e9      	b.n	8006988 <_printf_i+0x170>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	f023 0320 	bic.w	r3, r3, #32
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	e7f6      	b.n	80069ac <_printf_i+0x194>
 80069be:	4616      	mov	r6, r2
 80069c0:	e7bd      	b.n	800693e <_printf_i+0x126>
 80069c2:	6833      	ldr	r3, [r6, #0]
 80069c4:	6825      	ldr	r5, [r4, #0]
 80069c6:	6961      	ldr	r1, [r4, #20]
 80069c8:	1d18      	adds	r0, r3, #4
 80069ca:	6030      	str	r0, [r6, #0]
 80069cc:	062e      	lsls	r6, r5, #24
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	d501      	bpl.n	80069d6 <_printf_i+0x1be>
 80069d2:	6019      	str	r1, [r3, #0]
 80069d4:	e002      	b.n	80069dc <_printf_i+0x1c4>
 80069d6:	0668      	lsls	r0, r5, #25
 80069d8:	d5fb      	bpl.n	80069d2 <_printf_i+0x1ba>
 80069da:	8019      	strh	r1, [r3, #0]
 80069dc:	2300      	movs	r3, #0
 80069de:	6123      	str	r3, [r4, #16]
 80069e0:	4616      	mov	r6, r2
 80069e2:	e7bc      	b.n	800695e <_printf_i+0x146>
 80069e4:	6833      	ldr	r3, [r6, #0]
 80069e6:	1d1a      	adds	r2, r3, #4
 80069e8:	6032      	str	r2, [r6, #0]
 80069ea:	681e      	ldr	r6, [r3, #0]
 80069ec:	6862      	ldr	r2, [r4, #4]
 80069ee:	2100      	movs	r1, #0
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7f9 fc25 	bl	8000240 <memchr>
 80069f6:	b108      	cbz	r0, 80069fc <_printf_i+0x1e4>
 80069f8:	1b80      	subs	r0, r0, r6
 80069fa:	6060      	str	r0, [r4, #4]
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	2300      	movs	r3, #0
 8006a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a06:	e7aa      	b.n	800695e <_printf_i+0x146>
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	4632      	mov	r2, r6
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	4640      	mov	r0, r8
 8006a10:	47d0      	blx	sl
 8006a12:	3001      	adds	r0, #1
 8006a14:	d0ad      	beq.n	8006972 <_printf_i+0x15a>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	079b      	lsls	r3, r3, #30
 8006a1a:	d413      	bmi.n	8006a44 <_printf_i+0x22c>
 8006a1c:	68e0      	ldr	r0, [r4, #12]
 8006a1e:	9b03      	ldr	r3, [sp, #12]
 8006a20:	4298      	cmp	r0, r3
 8006a22:	bfb8      	it	lt
 8006a24:	4618      	movlt	r0, r3
 8006a26:	e7a6      	b.n	8006976 <_printf_i+0x15e>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4632      	mov	r2, r6
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4640      	mov	r0, r8
 8006a30:	47d0      	blx	sl
 8006a32:	3001      	adds	r0, #1
 8006a34:	d09d      	beq.n	8006972 <_printf_i+0x15a>
 8006a36:	3501      	adds	r5, #1
 8006a38:	68e3      	ldr	r3, [r4, #12]
 8006a3a:	9903      	ldr	r1, [sp, #12]
 8006a3c:	1a5b      	subs	r3, r3, r1
 8006a3e:	42ab      	cmp	r3, r5
 8006a40:	dcf2      	bgt.n	8006a28 <_printf_i+0x210>
 8006a42:	e7eb      	b.n	8006a1c <_printf_i+0x204>
 8006a44:	2500      	movs	r5, #0
 8006a46:	f104 0619 	add.w	r6, r4, #25
 8006a4a:	e7f5      	b.n	8006a38 <_printf_i+0x220>
 8006a4c:	08008a42 	.word	0x08008a42
 8006a50:	08008a53 	.word	0x08008a53

08006a54 <std>:
 8006a54:	2300      	movs	r3, #0
 8006a56:	b510      	push	{r4, lr}
 8006a58:	4604      	mov	r4, r0
 8006a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a62:	6083      	str	r3, [r0, #8]
 8006a64:	8181      	strh	r1, [r0, #12]
 8006a66:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a68:	81c2      	strh	r2, [r0, #14]
 8006a6a:	6183      	str	r3, [r0, #24]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	2208      	movs	r2, #8
 8006a70:	305c      	adds	r0, #92	@ 0x5c
 8006a72:	f000 f906 	bl	8006c82 <memset>
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <std+0x58>)
 8006a78:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <std+0x5c>)
 8006a7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <std+0x60>)
 8006a80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <std+0x64>)
 8006a84:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <std+0x68>)
 8006a88:	6224      	str	r4, [r4, #32]
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d006      	beq.n	8006a9c <std+0x48>
 8006a8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a92:	4294      	cmp	r4, r2
 8006a94:	d002      	beq.n	8006a9c <std+0x48>
 8006a96:	33d0      	adds	r3, #208	@ 0xd0
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	d105      	bne.n	8006aa8 <std+0x54>
 8006a9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa4:	f000 b96a 	b.w	8006d7c <__retarget_lock_init_recursive>
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	bf00      	nop
 8006aac:	08006bfd 	.word	0x08006bfd
 8006ab0:	08006c1f 	.word	0x08006c1f
 8006ab4:	08006c57 	.word	0x08006c57
 8006ab8:	08006c7b 	.word	0x08006c7b
 8006abc:	20000b78 	.word	0x20000b78

08006ac0 <stdio_exit_handler>:
 8006ac0:	4a02      	ldr	r2, [pc, #8]	@ (8006acc <stdio_exit_handler+0xc>)
 8006ac2:	4903      	ldr	r1, [pc, #12]	@ (8006ad0 <stdio_exit_handler+0x10>)
 8006ac4:	4803      	ldr	r0, [pc, #12]	@ (8006ad4 <stdio_exit_handler+0x14>)
 8006ac6:	f000 b869 	b.w	8006b9c <_fwalk_sglue>
 8006aca:	bf00      	nop
 8006acc:	2000000c 	.word	0x2000000c
 8006ad0:	080085d5 	.word	0x080085d5
 8006ad4:	2000001c 	.word	0x2000001c

08006ad8 <cleanup_stdio>:
 8006ad8:	6841      	ldr	r1, [r0, #4]
 8006ada:	4b0c      	ldr	r3, [pc, #48]	@ (8006b0c <cleanup_stdio+0x34>)
 8006adc:	4299      	cmp	r1, r3
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	d001      	beq.n	8006ae8 <cleanup_stdio+0x10>
 8006ae4:	f001 fd76 	bl	80085d4 <_fflush_r>
 8006ae8:	68a1      	ldr	r1, [r4, #8]
 8006aea:	4b09      	ldr	r3, [pc, #36]	@ (8006b10 <cleanup_stdio+0x38>)
 8006aec:	4299      	cmp	r1, r3
 8006aee:	d002      	beq.n	8006af6 <cleanup_stdio+0x1e>
 8006af0:	4620      	mov	r0, r4
 8006af2:	f001 fd6f 	bl	80085d4 <_fflush_r>
 8006af6:	68e1      	ldr	r1, [r4, #12]
 8006af8:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <cleanup_stdio+0x3c>)
 8006afa:	4299      	cmp	r1, r3
 8006afc:	d004      	beq.n	8006b08 <cleanup_stdio+0x30>
 8006afe:	4620      	mov	r0, r4
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	f001 bd66 	b.w	80085d4 <_fflush_r>
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000b78 	.word	0x20000b78
 8006b10:	20000be0 	.word	0x20000be0
 8006b14:	20000c48 	.word	0x20000c48

08006b18 <global_stdio_init.part.0>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <global_stdio_init.part.0+0x30>)
 8006b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8006b4c <global_stdio_init.part.0+0x34>)
 8006b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b50 <global_stdio_init.part.0+0x38>)
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	4620      	mov	r0, r4
 8006b24:	2200      	movs	r2, #0
 8006b26:	2104      	movs	r1, #4
 8006b28:	f7ff ff94 	bl	8006a54 <std>
 8006b2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b30:	2201      	movs	r2, #1
 8006b32:	2109      	movs	r1, #9
 8006b34:	f7ff ff8e 	bl	8006a54 <std>
 8006b38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b42:	2112      	movs	r1, #18
 8006b44:	f7ff bf86 	b.w	8006a54 <std>
 8006b48:	20000cb0 	.word	0x20000cb0
 8006b4c:	20000b78 	.word	0x20000b78
 8006b50:	08006ac1 	.word	0x08006ac1

08006b54 <__sfp_lock_acquire>:
 8006b54:	4801      	ldr	r0, [pc, #4]	@ (8006b5c <__sfp_lock_acquire+0x8>)
 8006b56:	f000 b912 	b.w	8006d7e <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	20000cb9 	.word	0x20000cb9

08006b60 <__sfp_lock_release>:
 8006b60:	4801      	ldr	r0, [pc, #4]	@ (8006b68 <__sfp_lock_release+0x8>)
 8006b62:	f000 b90d 	b.w	8006d80 <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	20000cb9 	.word	0x20000cb9

08006b6c <__sinit>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4604      	mov	r4, r0
 8006b70:	f7ff fff0 	bl	8006b54 <__sfp_lock_acquire>
 8006b74:	6a23      	ldr	r3, [r4, #32]
 8006b76:	b11b      	cbz	r3, 8006b80 <__sinit+0x14>
 8006b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b7c:	f7ff bff0 	b.w	8006b60 <__sfp_lock_release>
 8006b80:	4b04      	ldr	r3, [pc, #16]	@ (8006b94 <__sinit+0x28>)
 8006b82:	6223      	str	r3, [r4, #32]
 8006b84:	4b04      	ldr	r3, [pc, #16]	@ (8006b98 <__sinit+0x2c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f5      	bne.n	8006b78 <__sinit+0xc>
 8006b8c:	f7ff ffc4 	bl	8006b18 <global_stdio_init.part.0>
 8006b90:	e7f2      	b.n	8006b78 <__sinit+0xc>
 8006b92:	bf00      	nop
 8006b94:	08006ad9 	.word	0x08006ad9
 8006b98:	20000cb0 	.word	0x20000cb0

08006b9c <_fwalk_sglue>:
 8006b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	4688      	mov	r8, r1
 8006ba4:	4614      	mov	r4, r2
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bac:	f1b9 0901 	subs.w	r9, r9, #1
 8006bb0:	d505      	bpl.n	8006bbe <_fwalk_sglue+0x22>
 8006bb2:	6824      	ldr	r4, [r4, #0]
 8006bb4:	2c00      	cmp	r4, #0
 8006bb6:	d1f7      	bne.n	8006ba8 <_fwalk_sglue+0xc>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d907      	bls.n	8006bd4 <_fwalk_sglue+0x38>
 8006bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	d003      	beq.n	8006bd4 <_fwalk_sglue+0x38>
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4638      	mov	r0, r7
 8006bd0:	47c0      	blx	r8
 8006bd2:	4306      	orrs	r6, r0
 8006bd4:	3568      	adds	r5, #104	@ 0x68
 8006bd6:	e7e9      	b.n	8006bac <_fwalk_sglue+0x10>

08006bd8 <iprintf>:
 8006bd8:	b40f      	push	{r0, r1, r2, r3}
 8006bda:	b507      	push	{r0, r1, r2, lr}
 8006bdc:	4906      	ldr	r1, [pc, #24]	@ (8006bf8 <iprintf+0x20>)
 8006bde:	ab04      	add	r3, sp, #16
 8006be0:	6808      	ldr	r0, [r1, #0]
 8006be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be6:	6881      	ldr	r1, [r0, #8]
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	f001 fb57 	bl	800829c <_vfiprintf_r>
 8006bee:	b003      	add	sp, #12
 8006bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bf4:	b004      	add	sp, #16
 8006bf6:	4770      	bx	lr
 8006bf8:	20000018 	.word	0x20000018

08006bfc <__sread>:
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	460c      	mov	r4, r1
 8006c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c04:	f000 f86c 	bl	8006ce0 <_read_r>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	bfab      	itete	ge
 8006c0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c10:	181b      	addge	r3, r3, r0
 8006c12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c16:	bfac      	ite	ge
 8006c18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c1a:	81a3      	strhlt	r3, [r4, #12]
 8006c1c:	bd10      	pop	{r4, pc}

08006c1e <__swrite>:
 8006c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c22:	461f      	mov	r7, r3
 8006c24:	898b      	ldrh	r3, [r1, #12]
 8006c26:	05db      	lsls	r3, r3, #23
 8006c28:	4605      	mov	r5, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	d505      	bpl.n	8006c3c <__swrite+0x1e>
 8006c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c34:	2302      	movs	r3, #2
 8006c36:	2200      	movs	r2, #0
 8006c38:	f000 f840 	bl	8006cbc <_lseek_r>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c46:	81a3      	strh	r3, [r4, #12]
 8006c48:	4632      	mov	r2, r6
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c52:	f000 b857 	b.w	8006d04 <_write_r>

08006c56 <__sseek>:
 8006c56:	b510      	push	{r4, lr}
 8006c58:	460c      	mov	r4, r1
 8006c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5e:	f000 f82d 	bl	8006cbc <_lseek_r>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	bf15      	itete	ne
 8006c68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c72:	81a3      	strheq	r3, [r4, #12]
 8006c74:	bf18      	it	ne
 8006c76:	81a3      	strhne	r3, [r4, #12]
 8006c78:	bd10      	pop	{r4, pc}

08006c7a <__sclose>:
 8006c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c7e:	f000 b80d 	b.w	8006c9c <_close_r>

08006c82 <memset>:
 8006c82:	4402      	add	r2, r0
 8006c84:	4603      	mov	r3, r0
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d100      	bne.n	8006c8c <memset+0xa>
 8006c8a:	4770      	bx	lr
 8006c8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c90:	e7f9      	b.n	8006c86 <memset+0x4>
	...

08006c94 <_localeconv_r>:
 8006c94:	4800      	ldr	r0, [pc, #0]	@ (8006c98 <_localeconv_r+0x4>)
 8006c96:	4770      	bx	lr
 8006c98:	20000158 	.word	0x20000158

08006c9c <_close_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	@ (8006cb8 <_close_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7fa fb7e 	bl	80013a8 <_close>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_close_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_close_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	20000cb4 	.word	0x20000cb4

08006cbc <_lseek_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d07      	ldr	r5, [pc, #28]	@ (8006cdc <_lseek_r+0x20>)
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	602a      	str	r2, [r5, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f7fa fb93 	bl	80013f6 <_lseek>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d102      	bne.n	8006cda <_lseek_r+0x1e>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	b103      	cbz	r3, 8006cda <_lseek_r+0x1e>
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	20000cb4 	.word	0x20000cb4

08006ce0 <_read_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d07      	ldr	r5, [pc, #28]	@ (8006d00 <_read_r+0x20>)
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	4608      	mov	r0, r1
 8006ce8:	4611      	mov	r1, r2
 8006cea:	2200      	movs	r2, #0
 8006cec:	602a      	str	r2, [r5, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	f7fa fb21 	bl	8001336 <_read>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_read_r+0x1e>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_read_r+0x1e>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	20000cb4 	.word	0x20000cb4

08006d04 <_write_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d07      	ldr	r5, [pc, #28]	@ (8006d24 <_write_r+0x20>)
 8006d08:	4604      	mov	r4, r0
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	602a      	str	r2, [r5, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f7fa fb2c 	bl	8001370 <_write>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_write_r+0x1e>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_write_r+0x1e>
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	20000cb4 	.word	0x20000cb4

08006d28 <__errno>:
 8006d28:	4b01      	ldr	r3, [pc, #4]	@ (8006d30 <__errno+0x8>)
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000018 	.word	0x20000018

08006d34 <__libc_init_array>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4d0d      	ldr	r5, [pc, #52]	@ (8006d6c <__libc_init_array+0x38>)
 8006d38:	4c0d      	ldr	r4, [pc, #52]	@ (8006d70 <__libc_init_array+0x3c>)
 8006d3a:	1b64      	subs	r4, r4, r5
 8006d3c:	10a4      	asrs	r4, r4, #2
 8006d3e:	2600      	movs	r6, #0
 8006d40:	42a6      	cmp	r6, r4
 8006d42:	d109      	bne.n	8006d58 <__libc_init_array+0x24>
 8006d44:	4d0b      	ldr	r5, [pc, #44]	@ (8006d74 <__libc_init_array+0x40>)
 8006d46:	4c0c      	ldr	r4, [pc, #48]	@ (8006d78 <__libc_init_array+0x44>)
 8006d48:	f001 fe52 	bl	80089f0 <_init>
 8006d4c:	1b64      	subs	r4, r4, r5
 8006d4e:	10a4      	asrs	r4, r4, #2
 8006d50:	2600      	movs	r6, #0
 8006d52:	42a6      	cmp	r6, r4
 8006d54:	d105      	bne.n	8006d62 <__libc_init_array+0x2e>
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5c:	4798      	blx	r3
 8006d5e:	3601      	adds	r6, #1
 8006d60:	e7ee      	b.n	8006d40 <__libc_init_array+0xc>
 8006d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d66:	4798      	blx	r3
 8006d68:	3601      	adds	r6, #1
 8006d6a:	e7f2      	b.n	8006d52 <__libc_init_array+0x1e>
 8006d6c:	08008dac 	.word	0x08008dac
 8006d70:	08008dac 	.word	0x08008dac
 8006d74:	08008dac 	.word	0x08008dac
 8006d78:	08008db0 	.word	0x08008db0

08006d7c <__retarget_lock_init_recursive>:
 8006d7c:	4770      	bx	lr

08006d7e <__retarget_lock_acquire_recursive>:
 8006d7e:	4770      	bx	lr

08006d80 <__retarget_lock_release_recursive>:
 8006d80:	4770      	bx	lr

08006d82 <quorem>:
 8006d82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d86:	6903      	ldr	r3, [r0, #16]
 8006d88:	690c      	ldr	r4, [r1, #16]
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	db7e      	blt.n	8006e8e <quorem+0x10c>
 8006d90:	3c01      	subs	r4, #1
 8006d92:	f101 0814 	add.w	r8, r1, #20
 8006d96:	00a3      	lsls	r3, r4, #2
 8006d98:	f100 0514 	add.w	r5, r0, #20
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dac:	3301      	adds	r3, #1
 8006dae:	429a      	cmp	r2, r3
 8006db0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006db4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006db8:	d32e      	bcc.n	8006e18 <quorem+0x96>
 8006dba:	f04f 0a00 	mov.w	sl, #0
 8006dbe:	46c4      	mov	ip, r8
 8006dc0:	46ae      	mov	lr, r5
 8006dc2:	46d3      	mov	fp, sl
 8006dc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dc8:	b298      	uxth	r0, r3
 8006dca:	fb06 a000 	mla	r0, r6, r0, sl
 8006dce:	0c02      	lsrs	r2, r0, #16
 8006dd0:	0c1b      	lsrs	r3, r3, #16
 8006dd2:	fb06 2303 	mla	r3, r6, r3, r2
 8006dd6:	f8de 2000 	ldr.w	r2, [lr]
 8006dda:	b280      	uxth	r0, r0
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	1a12      	subs	r2, r2, r0
 8006de0:	445a      	add	r2, fp
 8006de2:	f8de 0000 	ldr.w	r0, [lr]
 8006de6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006df0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006df4:	b292      	uxth	r2, r2
 8006df6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dfa:	45e1      	cmp	r9, ip
 8006dfc:	f84e 2b04 	str.w	r2, [lr], #4
 8006e00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e04:	d2de      	bcs.n	8006dc4 <quorem+0x42>
 8006e06:	9b00      	ldr	r3, [sp, #0]
 8006e08:	58eb      	ldr	r3, [r5, r3]
 8006e0a:	b92b      	cbnz	r3, 8006e18 <quorem+0x96>
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	3b04      	subs	r3, #4
 8006e10:	429d      	cmp	r5, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	d32f      	bcc.n	8006e76 <quorem+0xf4>
 8006e16:	613c      	str	r4, [r7, #16]
 8006e18:	4638      	mov	r0, r7
 8006e1a:	f001 f90d 	bl	8008038 <__mcmp>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	db25      	blt.n	8006e6e <quorem+0xec>
 8006e22:	4629      	mov	r1, r5
 8006e24:	2000      	movs	r0, #0
 8006e26:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e2a:	f8d1 c000 	ldr.w	ip, [r1]
 8006e2e:	fa1f fe82 	uxth.w	lr, r2
 8006e32:	fa1f f38c 	uxth.w	r3, ip
 8006e36:	eba3 030e 	sub.w	r3, r3, lr
 8006e3a:	4403      	add	r3, r0
 8006e3c:	0c12      	lsrs	r2, r2, #16
 8006e3e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e42:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e4c:	45c1      	cmp	r9, r8
 8006e4e:	f841 3b04 	str.w	r3, [r1], #4
 8006e52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e56:	d2e6      	bcs.n	8006e26 <quorem+0xa4>
 8006e58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e60:	b922      	cbnz	r2, 8006e6c <quorem+0xea>
 8006e62:	3b04      	subs	r3, #4
 8006e64:	429d      	cmp	r5, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	d30b      	bcc.n	8006e82 <quorem+0x100>
 8006e6a:	613c      	str	r4, [r7, #16]
 8006e6c:	3601      	adds	r6, #1
 8006e6e:	4630      	mov	r0, r6
 8006e70:	b003      	add	sp, #12
 8006e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	3b04      	subs	r3, #4
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	d1cb      	bne.n	8006e16 <quorem+0x94>
 8006e7e:	3c01      	subs	r4, #1
 8006e80:	e7c6      	b.n	8006e10 <quorem+0x8e>
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	3b04      	subs	r3, #4
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	d1ef      	bne.n	8006e6a <quorem+0xe8>
 8006e8a:	3c01      	subs	r4, #1
 8006e8c:	e7ea      	b.n	8006e64 <quorem+0xe2>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	e7ee      	b.n	8006e70 <quorem+0xee>
 8006e92:	0000      	movs	r0, r0
 8006e94:	0000      	movs	r0, r0
	...

08006e98 <_dtoa_r>:
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	ed2d 8b02 	vpush	{d8}
 8006ea0:	69c7      	ldr	r7, [r0, #28]
 8006ea2:	b091      	sub	sp, #68	@ 0x44
 8006ea4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ea8:	ec55 4b10 	vmov	r4, r5, d0
 8006eac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006eae:	9107      	str	r1, [sp, #28]
 8006eb0:	4681      	mov	r9, r0
 8006eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb4:	930d      	str	r3, [sp, #52]	@ 0x34
 8006eb6:	b97f      	cbnz	r7, 8006ed8 <_dtoa_r+0x40>
 8006eb8:	2010      	movs	r0, #16
 8006eba:	f000 fd95 	bl	80079e8 <malloc>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	f8c9 001c 	str.w	r0, [r9, #28]
 8006ec4:	b920      	cbnz	r0, 8006ed0 <_dtoa_r+0x38>
 8006ec6:	4ba0      	ldr	r3, [pc, #640]	@ (8007148 <_dtoa_r+0x2b0>)
 8006ec8:	21ef      	movs	r1, #239	@ 0xef
 8006eca:	48a0      	ldr	r0, [pc, #640]	@ (800714c <_dtoa_r+0x2b4>)
 8006ecc:	f001 fc5c 	bl	8008788 <__assert_func>
 8006ed0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ed4:	6007      	str	r7, [r0, #0]
 8006ed6:	60c7      	str	r7, [r0, #12]
 8006ed8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006edc:	6819      	ldr	r1, [r3, #0]
 8006ede:	b159      	cbz	r1, 8006ef8 <_dtoa_r+0x60>
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	604a      	str	r2, [r1, #4]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	4093      	lsls	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]
 8006eea:	4648      	mov	r0, r9
 8006eec:	f000 fe72 	bl	8007bd4 <_Bfree>
 8006ef0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	1e2b      	subs	r3, r5, #0
 8006efa:	bfbb      	ittet	lt
 8006efc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f00:	9303      	strlt	r3, [sp, #12]
 8006f02:	2300      	movge	r3, #0
 8006f04:	2201      	movlt	r2, #1
 8006f06:	bfac      	ite	ge
 8006f08:	6033      	strge	r3, [r6, #0]
 8006f0a:	6032      	strlt	r2, [r6, #0]
 8006f0c:	4b90      	ldr	r3, [pc, #576]	@ (8007150 <_dtoa_r+0x2b8>)
 8006f0e:	9e03      	ldr	r6, [sp, #12]
 8006f10:	43b3      	bics	r3, r6
 8006f12:	d110      	bne.n	8006f36 <_dtoa_r+0x9e>
 8006f14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f16:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006f20:	4323      	orrs	r3, r4
 8006f22:	f000 84e6 	beq.w	80078f2 <_dtoa_r+0xa5a>
 8006f26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006f28:	4f8a      	ldr	r7, [pc, #552]	@ (8007154 <_dtoa_r+0x2bc>)
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 84e8 	beq.w	8007900 <_dtoa_r+0xa68>
 8006f30:	1cfb      	adds	r3, r7, #3
 8006f32:	f000 bce3 	b.w	80078fc <_dtoa_r+0xa64>
 8006f36:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006f3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f42:	d10a      	bne.n	8006f5a <_dtoa_r+0xc2>
 8006f44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f46:	2301      	movs	r3, #1
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006f4c:	b113      	cbz	r3, 8006f54 <_dtoa_r+0xbc>
 8006f4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006f50:	4b81      	ldr	r3, [pc, #516]	@ (8007158 <_dtoa_r+0x2c0>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	4f81      	ldr	r7, [pc, #516]	@ (800715c <_dtoa_r+0x2c4>)
 8006f56:	f000 bcd3 	b.w	8007900 <_dtoa_r+0xa68>
 8006f5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8006f5c:	a90f      	add	r1, sp, #60	@ 0x3c
 8006f5e:	4648      	mov	r0, r9
 8006f60:	eeb0 0b48 	vmov.f64	d0, d8
 8006f64:	f001 f918 	bl	8008198 <__d2b>
 8006f68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8006f6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f6e:	9001      	str	r0, [sp, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d045      	beq.n	8007000 <_dtoa_r+0x168>
 8006f74:	eeb0 7b48 	vmov.f64	d7, d8
 8006f78:	ee18 1a90 	vmov	r1, s17
 8006f7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006f80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8006f84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006f88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	ee07 1a90 	vmov	s15, r1
 8006f92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8006f96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007130 <_dtoa_r+0x298>
 8006f9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007138 <_dtoa_r+0x2a0>
 8006fa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006fa6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007140 <_dtoa_r+0x2a8>
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006fb2:	eeb0 7b46 	vmov.f64	d7, d6
 8006fb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006fba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006fbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc6:	ee16 8a90 	vmov	r8, s13
 8006fca:	d508      	bpl.n	8006fde <_dtoa_r+0x146>
 8006fcc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006fd0:	eeb4 6b47 	vcmp.f64	d6, d7
 8006fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd8:	bf18      	it	ne
 8006fda:	f108 38ff 	addne.w	r8, r8, #4294967295
 8006fde:	f1b8 0f16 	cmp.w	r8, #22
 8006fe2:	d82b      	bhi.n	800703c <_dtoa_r+0x1a4>
 8006fe4:	495e      	ldr	r1, [pc, #376]	@ (8007160 <_dtoa_r+0x2c8>)
 8006fe6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8006fea:	ed91 7b00 	vldr	d7, [r1]
 8006fee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d501      	bpl.n	8006ffc <_dtoa_r+0x164>
 8006ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	e01e      	b.n	800703e <_dtoa_r+0x1a6>
 8007000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007002:	4413      	add	r3, r2
 8007004:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007008:	2920      	cmp	r1, #32
 800700a:	bfc1      	itttt	gt
 800700c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007010:	408e      	lslgt	r6, r1
 8007012:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007016:	fa24 f101 	lsrgt.w	r1, r4, r1
 800701a:	bfd6      	itet	le
 800701c:	f1c1 0120 	rsble	r1, r1, #32
 8007020:	4331      	orrgt	r1, r6
 8007022:	fa04 f101 	lslle.w	r1, r4, r1
 8007026:	ee07 1a90 	vmov	s15, r1
 800702a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800702e:	3b01      	subs	r3, #1
 8007030:	ee17 1a90 	vmov	r1, s15
 8007034:	2501      	movs	r5, #1
 8007036:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800703a:	e7a8      	b.n	8006f8e <_dtoa_r+0xf6>
 800703c:	2101      	movs	r1, #1
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	1e53      	subs	r3, r2, #1
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	bf45      	ittet	mi
 8007046:	f1c2 0301 	rsbmi	r3, r2, #1
 800704a:	9304      	strmi	r3, [sp, #16]
 800704c:	2300      	movpl	r3, #0
 800704e:	2300      	movmi	r3, #0
 8007050:	bf4c      	ite	mi
 8007052:	9306      	strmi	r3, [sp, #24]
 8007054:	9304      	strpl	r3, [sp, #16]
 8007056:	f1b8 0f00 	cmp.w	r8, #0
 800705a:	910c      	str	r1, [sp, #48]	@ 0x30
 800705c:	db18      	blt.n	8007090 <_dtoa_r+0x1f8>
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007064:	4443      	add	r3, r8
 8007066:	9306      	str	r3, [sp, #24]
 8007068:	2300      	movs	r3, #0
 800706a:	9a07      	ldr	r2, [sp, #28]
 800706c:	2a09      	cmp	r2, #9
 800706e:	d845      	bhi.n	80070fc <_dtoa_r+0x264>
 8007070:	2a05      	cmp	r2, #5
 8007072:	bfc4      	itt	gt
 8007074:	3a04      	subgt	r2, #4
 8007076:	9207      	strgt	r2, [sp, #28]
 8007078:	9a07      	ldr	r2, [sp, #28]
 800707a:	f1a2 0202 	sub.w	r2, r2, #2
 800707e:	bfcc      	ite	gt
 8007080:	2400      	movgt	r4, #0
 8007082:	2401      	movle	r4, #1
 8007084:	2a03      	cmp	r2, #3
 8007086:	d844      	bhi.n	8007112 <_dtoa_r+0x27a>
 8007088:	e8df f002 	tbb	[pc, r2]
 800708c:	0b173634 	.word	0x0b173634
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	2200      	movs	r2, #0
 8007094:	eba3 0308 	sub.w	r3, r3, r8
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	920a      	str	r2, [sp, #40]	@ 0x28
 800709c:	f1c8 0300 	rsb	r3, r8, #0
 80070a0:	e7e3      	b.n	800706a <_dtoa_r+0x1d2>
 80070a2:	2201      	movs	r2, #1
 80070a4:	9208      	str	r2, [sp, #32]
 80070a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070a8:	eb08 0b02 	add.w	fp, r8, r2
 80070ac:	f10b 0a01 	add.w	sl, fp, #1
 80070b0:	4652      	mov	r2, sl
 80070b2:	2a01      	cmp	r2, #1
 80070b4:	bfb8      	it	lt
 80070b6:	2201      	movlt	r2, #1
 80070b8:	e006      	b.n	80070c8 <_dtoa_r+0x230>
 80070ba:	2201      	movs	r2, #1
 80070bc:	9208      	str	r2, [sp, #32]
 80070be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	dd29      	ble.n	8007118 <_dtoa_r+0x280>
 80070c4:	4693      	mov	fp, r2
 80070c6:	4692      	mov	sl, r2
 80070c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80070cc:	2100      	movs	r1, #0
 80070ce:	2004      	movs	r0, #4
 80070d0:	f100 0614 	add.w	r6, r0, #20
 80070d4:	4296      	cmp	r6, r2
 80070d6:	d926      	bls.n	8007126 <_dtoa_r+0x28e>
 80070d8:	6079      	str	r1, [r7, #4]
 80070da:	4648      	mov	r0, r9
 80070dc:	9305      	str	r3, [sp, #20]
 80070de:	f000 fd39 	bl	8007b54 <_Balloc>
 80070e2:	9b05      	ldr	r3, [sp, #20]
 80070e4:	4607      	mov	r7, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d13e      	bne.n	8007168 <_dtoa_r+0x2d0>
 80070ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007164 <_dtoa_r+0x2cc>)
 80070ec:	4602      	mov	r2, r0
 80070ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80070f2:	e6ea      	b.n	8006eca <_dtoa_r+0x32>
 80070f4:	2200      	movs	r2, #0
 80070f6:	e7e1      	b.n	80070bc <_dtoa_r+0x224>
 80070f8:	2200      	movs	r2, #0
 80070fa:	e7d3      	b.n	80070a4 <_dtoa_r+0x20c>
 80070fc:	2401      	movs	r4, #1
 80070fe:	2200      	movs	r2, #0
 8007100:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007104:	f04f 3bff 	mov.w	fp, #4294967295
 8007108:	2100      	movs	r1, #0
 800710a:	46da      	mov	sl, fp
 800710c:	2212      	movs	r2, #18
 800710e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007110:	e7da      	b.n	80070c8 <_dtoa_r+0x230>
 8007112:	2201      	movs	r2, #1
 8007114:	9208      	str	r2, [sp, #32]
 8007116:	e7f5      	b.n	8007104 <_dtoa_r+0x26c>
 8007118:	f04f 0b01 	mov.w	fp, #1
 800711c:	46da      	mov	sl, fp
 800711e:	465a      	mov	r2, fp
 8007120:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007124:	e7d0      	b.n	80070c8 <_dtoa_r+0x230>
 8007126:	3101      	adds	r1, #1
 8007128:	0040      	lsls	r0, r0, #1
 800712a:	e7d1      	b.n	80070d0 <_dtoa_r+0x238>
 800712c:	f3af 8000 	nop.w
 8007130:	636f4361 	.word	0x636f4361
 8007134:	3fd287a7 	.word	0x3fd287a7
 8007138:	8b60c8b3 	.word	0x8b60c8b3
 800713c:	3fc68a28 	.word	0x3fc68a28
 8007140:	509f79fb 	.word	0x509f79fb
 8007144:	3fd34413 	.word	0x3fd34413
 8007148:	08008a71 	.word	0x08008a71
 800714c:	08008a88 	.word	0x08008a88
 8007150:	7ff00000 	.word	0x7ff00000
 8007154:	08008a6d 	.word	0x08008a6d
 8007158:	08008a41 	.word	0x08008a41
 800715c:	08008a40 	.word	0x08008a40
 8007160:	08008bd8 	.word	0x08008bd8
 8007164:	08008ae0 	.word	0x08008ae0
 8007168:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800716c:	f1ba 0f0e 	cmp.w	sl, #14
 8007170:	6010      	str	r0, [r2, #0]
 8007172:	d86e      	bhi.n	8007252 <_dtoa_r+0x3ba>
 8007174:	2c00      	cmp	r4, #0
 8007176:	d06c      	beq.n	8007252 <_dtoa_r+0x3ba>
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	f340 80b4 	ble.w	80072e8 <_dtoa_r+0x450>
 8007180:	4ac8      	ldr	r2, [pc, #800]	@ (80074a4 <_dtoa_r+0x60c>)
 8007182:	f008 010f 	and.w	r1, r8, #15
 8007186:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800718a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800718e:	ed92 7b00 	vldr	d7, [r2]
 8007192:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007196:	f000 809b 	beq.w	80072d0 <_dtoa_r+0x438>
 800719a:	4ac3      	ldr	r2, [pc, #780]	@ (80074a8 <_dtoa_r+0x610>)
 800719c:	ed92 6b08 	vldr	d6, [r2, #32]
 80071a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80071a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80071a8:	f001 010f 	and.w	r1, r1, #15
 80071ac:	2203      	movs	r2, #3
 80071ae:	48be      	ldr	r0, [pc, #760]	@ (80074a8 <_dtoa_r+0x610>)
 80071b0:	2900      	cmp	r1, #0
 80071b2:	f040 808f 	bne.w	80072d4 <_dtoa_r+0x43c>
 80071b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80071ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80071be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80071c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071c8:	2900      	cmp	r1, #0
 80071ca:	f000 80b3 	beq.w	8007334 <_dtoa_r+0x49c>
 80071ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80071d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071da:	f140 80ab 	bpl.w	8007334 <_dtoa_r+0x49c>
 80071de:	f1ba 0f00 	cmp.w	sl, #0
 80071e2:	f000 80a7 	beq.w	8007334 <_dtoa_r+0x49c>
 80071e6:	f1bb 0f00 	cmp.w	fp, #0
 80071ea:	dd30      	ble.n	800724e <_dtoa_r+0x3b6>
 80071ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80071f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80071f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80071fc:	9105      	str	r1, [sp, #20]
 80071fe:	3201      	adds	r2, #1
 8007200:	465c      	mov	r4, fp
 8007202:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007206:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800720a:	ee07 2a90 	vmov	s15, r2
 800720e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007212:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007216:	ee15 2a90 	vmov	r2, s11
 800721a:	ec51 0b15 	vmov	r0, r1, d5
 800721e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007222:	2c00      	cmp	r4, #0
 8007224:	f040 808a 	bne.w	800733c <_dtoa_r+0x4a4>
 8007228:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800722c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007230:	ec41 0b17 	vmov	d7, r0, r1
 8007234:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723c:	f300 826a 	bgt.w	8007714 <_dtoa_r+0x87c>
 8007240:	eeb1 7b47 	vneg.f64	d7, d7
 8007244:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724c:	d423      	bmi.n	8007296 <_dtoa_r+0x3fe>
 800724e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007252:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007254:	2a00      	cmp	r2, #0
 8007256:	f2c0 8129 	blt.w	80074ac <_dtoa_r+0x614>
 800725a:	f1b8 0f0e 	cmp.w	r8, #14
 800725e:	f300 8125 	bgt.w	80074ac <_dtoa_r+0x614>
 8007262:	4b90      	ldr	r3, [pc, #576]	@ (80074a4 <_dtoa_r+0x60c>)
 8007264:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007268:	ed93 6b00 	vldr	d6, [r3]
 800726c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	f280 80c8 	bge.w	8007404 <_dtoa_r+0x56c>
 8007274:	f1ba 0f00 	cmp.w	sl, #0
 8007278:	f300 80c4 	bgt.w	8007404 <_dtoa_r+0x56c>
 800727c:	d10b      	bne.n	8007296 <_dtoa_r+0x3fe>
 800727e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007282:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800728a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007292:	f2c0 823c 	blt.w	800770e <_dtoa_r+0x876>
 8007296:	2400      	movs	r4, #0
 8007298:	4625      	mov	r5, r4
 800729a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729c:	43db      	mvns	r3, r3
 800729e:	9305      	str	r3, [sp, #20]
 80072a0:	463e      	mov	r6, r7
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	4621      	mov	r1, r4
 80072a8:	4648      	mov	r0, r9
 80072aa:	f000 fc93 	bl	8007bd4 <_Bfree>
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	f000 80a2 	beq.w	80073f8 <_dtoa_r+0x560>
 80072b4:	f1b8 0f00 	cmp.w	r8, #0
 80072b8:	d005      	beq.n	80072c6 <_dtoa_r+0x42e>
 80072ba:	45a8      	cmp	r8, r5
 80072bc:	d003      	beq.n	80072c6 <_dtoa_r+0x42e>
 80072be:	4641      	mov	r1, r8
 80072c0:	4648      	mov	r0, r9
 80072c2:	f000 fc87 	bl	8007bd4 <_Bfree>
 80072c6:	4629      	mov	r1, r5
 80072c8:	4648      	mov	r0, r9
 80072ca:	f000 fc83 	bl	8007bd4 <_Bfree>
 80072ce:	e093      	b.n	80073f8 <_dtoa_r+0x560>
 80072d0:	2202      	movs	r2, #2
 80072d2:	e76c      	b.n	80071ae <_dtoa_r+0x316>
 80072d4:	07cc      	lsls	r4, r1, #31
 80072d6:	d504      	bpl.n	80072e2 <_dtoa_r+0x44a>
 80072d8:	ed90 6b00 	vldr	d6, [r0]
 80072dc:	3201      	adds	r2, #1
 80072de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072e2:	1049      	asrs	r1, r1, #1
 80072e4:	3008      	adds	r0, #8
 80072e6:	e763      	b.n	80071b0 <_dtoa_r+0x318>
 80072e8:	d022      	beq.n	8007330 <_dtoa_r+0x498>
 80072ea:	f1c8 0100 	rsb	r1, r8, #0
 80072ee:	4a6d      	ldr	r2, [pc, #436]	@ (80074a4 <_dtoa_r+0x60c>)
 80072f0:	f001 000f 	and.w	r0, r1, #15
 80072f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80072f8:	ed92 7b00 	vldr	d7, [r2]
 80072fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007300:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007304:	4868      	ldr	r0, [pc, #416]	@ (80074a8 <_dtoa_r+0x610>)
 8007306:	1109      	asrs	r1, r1, #4
 8007308:	2400      	movs	r4, #0
 800730a:	2202      	movs	r2, #2
 800730c:	b929      	cbnz	r1, 800731a <_dtoa_r+0x482>
 800730e:	2c00      	cmp	r4, #0
 8007310:	f43f af57 	beq.w	80071c2 <_dtoa_r+0x32a>
 8007314:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007318:	e753      	b.n	80071c2 <_dtoa_r+0x32a>
 800731a:	07ce      	lsls	r6, r1, #31
 800731c:	d505      	bpl.n	800732a <_dtoa_r+0x492>
 800731e:	ed90 6b00 	vldr	d6, [r0]
 8007322:	3201      	adds	r2, #1
 8007324:	2401      	movs	r4, #1
 8007326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800732a:	1049      	asrs	r1, r1, #1
 800732c:	3008      	adds	r0, #8
 800732e:	e7ed      	b.n	800730c <_dtoa_r+0x474>
 8007330:	2202      	movs	r2, #2
 8007332:	e746      	b.n	80071c2 <_dtoa_r+0x32a>
 8007334:	f8cd 8014 	str.w	r8, [sp, #20]
 8007338:	4654      	mov	r4, sl
 800733a:	e762      	b.n	8007202 <_dtoa_r+0x36a>
 800733c:	4a59      	ldr	r2, [pc, #356]	@ (80074a4 <_dtoa_r+0x60c>)
 800733e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007342:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007346:	9a08      	ldr	r2, [sp, #32]
 8007348:	ec41 0b17 	vmov	d7, r0, r1
 800734c:	443c      	add	r4, r7
 800734e:	b34a      	cbz	r2, 80073a4 <_dtoa_r+0x50c>
 8007350:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007354:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007358:	463e      	mov	r6, r7
 800735a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800735e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007362:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007366:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800736a:	ee14 2a90 	vmov	r2, s9
 800736e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007372:	3230      	adds	r2, #48	@ 0x30
 8007374:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007378:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800737c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007380:	f806 2b01 	strb.w	r2, [r6], #1
 8007384:	d438      	bmi.n	80073f8 <_dtoa_r+0x560>
 8007386:	ee32 5b46 	vsub.f64	d5, d2, d6
 800738a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007392:	d46e      	bmi.n	8007472 <_dtoa_r+0x5da>
 8007394:	42a6      	cmp	r6, r4
 8007396:	f43f af5a 	beq.w	800724e <_dtoa_r+0x3b6>
 800739a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800739e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80073a2:	e7e0      	b.n	8007366 <_dtoa_r+0x4ce>
 80073a4:	4621      	mov	r1, r4
 80073a6:	463e      	mov	r6, r7
 80073a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073ac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80073b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80073b4:	ee14 2a90 	vmov	r2, s9
 80073b8:	3230      	adds	r2, #48	@ 0x30
 80073ba:	f806 2b01 	strb.w	r2, [r6], #1
 80073be:	42a6      	cmp	r6, r4
 80073c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80073c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80073c8:	d119      	bne.n	80073fe <_dtoa_r+0x566>
 80073ca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80073ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80073d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	dc4a      	bgt.n	8007472 <_dtoa_r+0x5da>
 80073dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80073e0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80073e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e8:	f57f af31 	bpl.w	800724e <_dtoa_r+0x3b6>
 80073ec:	460e      	mov	r6, r1
 80073ee:	3901      	subs	r1, #1
 80073f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073f4:	2b30      	cmp	r3, #48	@ 0x30
 80073f6:	d0f9      	beq.n	80073ec <_dtoa_r+0x554>
 80073f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80073fc:	e027      	b.n	800744e <_dtoa_r+0x5b6>
 80073fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007402:	e7d5      	b.n	80073b0 <_dtoa_r+0x518>
 8007404:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007408:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800740c:	463e      	mov	r6, r7
 800740e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007412:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007416:	ee15 3a10 	vmov	r3, s10
 800741a:	3330      	adds	r3, #48	@ 0x30
 800741c:	f806 3b01 	strb.w	r3, [r6], #1
 8007420:	1bf3      	subs	r3, r6, r7
 8007422:	459a      	cmp	sl, r3
 8007424:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007428:	eea3 7b46 	vfms.f64	d7, d3, d6
 800742c:	d132      	bne.n	8007494 <_dtoa_r+0x5fc>
 800742e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007432:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743a:	dc18      	bgt.n	800746e <_dtoa_r+0x5d6>
 800743c:	eeb4 7b46 	vcmp.f64	d7, d6
 8007440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007444:	d103      	bne.n	800744e <_dtoa_r+0x5b6>
 8007446:	ee15 3a10 	vmov	r3, s10
 800744a:	07db      	lsls	r3, r3, #31
 800744c:	d40f      	bmi.n	800746e <_dtoa_r+0x5d6>
 800744e:	9901      	ldr	r1, [sp, #4]
 8007450:	4648      	mov	r0, r9
 8007452:	f000 fbbf 	bl	8007bd4 <_Bfree>
 8007456:	2300      	movs	r3, #0
 8007458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800745a:	7033      	strb	r3, [r6, #0]
 800745c:	f108 0301 	add.w	r3, r8, #1
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 824b 	beq.w	8007900 <_dtoa_r+0xa68>
 800746a:	601e      	str	r6, [r3, #0]
 800746c:	e248      	b.n	8007900 <_dtoa_r+0xa68>
 800746e:	f8cd 8014 	str.w	r8, [sp, #20]
 8007472:	4633      	mov	r3, r6
 8007474:	461e      	mov	r6, r3
 8007476:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800747a:	2a39      	cmp	r2, #57	@ 0x39
 800747c:	d106      	bne.n	800748c <_dtoa_r+0x5f4>
 800747e:	429f      	cmp	r7, r3
 8007480:	d1f8      	bne.n	8007474 <_dtoa_r+0x5dc>
 8007482:	9a05      	ldr	r2, [sp, #20]
 8007484:	3201      	adds	r2, #1
 8007486:	9205      	str	r2, [sp, #20]
 8007488:	2230      	movs	r2, #48	@ 0x30
 800748a:	703a      	strb	r2, [r7, #0]
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	3201      	adds	r2, #1
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	e7b1      	b.n	80073f8 <_dtoa_r+0x560>
 8007494:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007498:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a0:	d1b5      	bne.n	800740e <_dtoa_r+0x576>
 80074a2:	e7d4      	b.n	800744e <_dtoa_r+0x5b6>
 80074a4:	08008bd8 	.word	0x08008bd8
 80074a8:	08008bb0 	.word	0x08008bb0
 80074ac:	9908      	ldr	r1, [sp, #32]
 80074ae:	2900      	cmp	r1, #0
 80074b0:	f000 80e9 	beq.w	8007686 <_dtoa_r+0x7ee>
 80074b4:	9907      	ldr	r1, [sp, #28]
 80074b6:	2901      	cmp	r1, #1
 80074b8:	f300 80cb 	bgt.w	8007652 <_dtoa_r+0x7ba>
 80074bc:	2d00      	cmp	r5, #0
 80074be:	f000 80c4 	beq.w	800764a <_dtoa_r+0x7b2>
 80074c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80074c6:	9e04      	ldr	r6, [sp, #16]
 80074c8:	461c      	mov	r4, r3
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	9b04      	ldr	r3, [sp, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	9b06      	ldr	r3, [sp, #24]
 80074d4:	2101      	movs	r1, #1
 80074d6:	4413      	add	r3, r2
 80074d8:	4648      	mov	r0, r9
 80074da:	9306      	str	r3, [sp, #24]
 80074dc:	f000 fc2e 	bl	8007d3c <__i2b>
 80074e0:	9b05      	ldr	r3, [sp, #20]
 80074e2:	4605      	mov	r5, r0
 80074e4:	b166      	cbz	r6, 8007500 <_dtoa_r+0x668>
 80074e6:	9a06      	ldr	r2, [sp, #24]
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	dd09      	ble.n	8007500 <_dtoa_r+0x668>
 80074ec:	42b2      	cmp	r2, r6
 80074ee:	9904      	ldr	r1, [sp, #16]
 80074f0:	bfa8      	it	ge
 80074f2:	4632      	movge	r2, r6
 80074f4:	1a89      	subs	r1, r1, r2
 80074f6:	9104      	str	r1, [sp, #16]
 80074f8:	9906      	ldr	r1, [sp, #24]
 80074fa:	1ab6      	subs	r6, r6, r2
 80074fc:	1a8a      	subs	r2, r1, r2
 80074fe:	9206      	str	r2, [sp, #24]
 8007500:	b30b      	cbz	r3, 8007546 <_dtoa_r+0x6ae>
 8007502:	9a08      	ldr	r2, [sp, #32]
 8007504:	2a00      	cmp	r2, #0
 8007506:	f000 80c5 	beq.w	8007694 <_dtoa_r+0x7fc>
 800750a:	2c00      	cmp	r4, #0
 800750c:	f000 80bf 	beq.w	800768e <_dtoa_r+0x7f6>
 8007510:	4629      	mov	r1, r5
 8007512:	4622      	mov	r2, r4
 8007514:	4648      	mov	r0, r9
 8007516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007518:	f000 fcc8 	bl	8007eac <__pow5mult>
 800751c:	9a01      	ldr	r2, [sp, #4]
 800751e:	4601      	mov	r1, r0
 8007520:	4605      	mov	r5, r0
 8007522:	4648      	mov	r0, r9
 8007524:	f000 fc20 	bl	8007d68 <__multiply>
 8007528:	9901      	ldr	r1, [sp, #4]
 800752a:	9005      	str	r0, [sp, #20]
 800752c:	4648      	mov	r0, r9
 800752e:	f000 fb51 	bl	8007bd4 <_Bfree>
 8007532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007534:	1b1b      	subs	r3, r3, r4
 8007536:	f000 80b0 	beq.w	800769a <_dtoa_r+0x802>
 800753a:	9905      	ldr	r1, [sp, #20]
 800753c:	461a      	mov	r2, r3
 800753e:	4648      	mov	r0, r9
 8007540:	f000 fcb4 	bl	8007eac <__pow5mult>
 8007544:	9001      	str	r0, [sp, #4]
 8007546:	2101      	movs	r1, #1
 8007548:	4648      	mov	r0, r9
 800754a:	f000 fbf7 	bl	8007d3c <__i2b>
 800754e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007550:	4604      	mov	r4, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 81da 	beq.w	800790c <_dtoa_r+0xa74>
 8007558:	461a      	mov	r2, r3
 800755a:	4601      	mov	r1, r0
 800755c:	4648      	mov	r0, r9
 800755e:	f000 fca5 	bl	8007eac <__pow5mult>
 8007562:	9b07      	ldr	r3, [sp, #28]
 8007564:	2b01      	cmp	r3, #1
 8007566:	4604      	mov	r4, r0
 8007568:	f300 80a0 	bgt.w	80076ac <_dtoa_r+0x814>
 800756c:	9b02      	ldr	r3, [sp, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	f040 8096 	bne.w	80076a0 <_dtoa_r+0x808>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800757a:	2a00      	cmp	r2, #0
 800757c:	f040 8092 	bne.w	80076a4 <_dtoa_r+0x80c>
 8007580:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007584:	0d12      	lsrs	r2, r2, #20
 8007586:	0512      	lsls	r2, r2, #20
 8007588:	2a00      	cmp	r2, #0
 800758a:	f000 808d 	beq.w	80076a8 <_dtoa_r+0x810>
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	3301      	adds	r3, #1
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	9b06      	ldr	r3, [sp, #24]
 8007596:	3301      	adds	r3, #1
 8007598:	9306      	str	r3, [sp, #24]
 800759a:	2301      	movs	r3, #1
 800759c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800759e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 81b9 	beq.w	8007918 <_dtoa_r+0xa80>
 80075a6:	6922      	ldr	r2, [r4, #16]
 80075a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80075ac:	6910      	ldr	r0, [r2, #16]
 80075ae:	f000 fb79 	bl	8007ca4 <__hi0bits>
 80075b2:	f1c0 0020 	rsb	r0, r0, #32
 80075b6:	9b06      	ldr	r3, [sp, #24]
 80075b8:	4418      	add	r0, r3
 80075ba:	f010 001f 	ands.w	r0, r0, #31
 80075be:	f000 8081 	beq.w	80076c4 <_dtoa_r+0x82c>
 80075c2:	f1c0 0220 	rsb	r2, r0, #32
 80075c6:	2a04      	cmp	r2, #4
 80075c8:	dd73      	ble.n	80076b2 <_dtoa_r+0x81a>
 80075ca:	9b04      	ldr	r3, [sp, #16]
 80075cc:	f1c0 001c 	rsb	r0, r0, #28
 80075d0:	4403      	add	r3, r0
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	9b06      	ldr	r3, [sp, #24]
 80075d6:	4406      	add	r6, r0
 80075d8:	4403      	add	r3, r0
 80075da:	9306      	str	r3, [sp, #24]
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd05      	ble.n	80075ee <_dtoa_r+0x756>
 80075e2:	9901      	ldr	r1, [sp, #4]
 80075e4:	461a      	mov	r2, r3
 80075e6:	4648      	mov	r0, r9
 80075e8:	f000 fcba 	bl	8007f60 <__lshift>
 80075ec:	9001      	str	r0, [sp, #4]
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	dd05      	ble.n	8007600 <_dtoa_r+0x768>
 80075f4:	4621      	mov	r1, r4
 80075f6:	461a      	mov	r2, r3
 80075f8:	4648      	mov	r0, r9
 80075fa:	f000 fcb1 	bl	8007f60 <__lshift>
 80075fe:	4604      	mov	r4, r0
 8007600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007602:	2b00      	cmp	r3, #0
 8007604:	d060      	beq.n	80076c8 <_dtoa_r+0x830>
 8007606:	9801      	ldr	r0, [sp, #4]
 8007608:	4621      	mov	r1, r4
 800760a:	f000 fd15 	bl	8008038 <__mcmp>
 800760e:	2800      	cmp	r0, #0
 8007610:	da5a      	bge.n	80076c8 <_dtoa_r+0x830>
 8007612:	f108 33ff 	add.w	r3, r8, #4294967295
 8007616:	9305      	str	r3, [sp, #20]
 8007618:	9901      	ldr	r1, [sp, #4]
 800761a:	2300      	movs	r3, #0
 800761c:	220a      	movs	r2, #10
 800761e:	4648      	mov	r0, r9
 8007620:	f000 fafa 	bl	8007c18 <__multadd>
 8007624:	9b08      	ldr	r3, [sp, #32]
 8007626:	9001      	str	r0, [sp, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 8177 	beq.w	800791c <_dtoa_r+0xa84>
 800762e:	4629      	mov	r1, r5
 8007630:	2300      	movs	r3, #0
 8007632:	220a      	movs	r2, #10
 8007634:	4648      	mov	r0, r9
 8007636:	f000 faef 	bl	8007c18 <__multadd>
 800763a:	f1bb 0f00 	cmp.w	fp, #0
 800763e:	4605      	mov	r5, r0
 8007640:	dc6e      	bgt.n	8007720 <_dtoa_r+0x888>
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b02      	cmp	r3, #2
 8007646:	dc48      	bgt.n	80076da <_dtoa_r+0x842>
 8007648:	e06a      	b.n	8007720 <_dtoa_r+0x888>
 800764a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800764c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007650:	e739      	b.n	80074c6 <_dtoa_r+0x62e>
 8007652:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007656:	42a3      	cmp	r3, r4
 8007658:	db07      	blt.n	800766a <_dtoa_r+0x7d2>
 800765a:	f1ba 0f00 	cmp.w	sl, #0
 800765e:	eba3 0404 	sub.w	r4, r3, r4
 8007662:	db0b      	blt.n	800767c <_dtoa_r+0x7e4>
 8007664:	9e04      	ldr	r6, [sp, #16]
 8007666:	4652      	mov	r2, sl
 8007668:	e72f      	b.n	80074ca <_dtoa_r+0x632>
 800766a:	1ae2      	subs	r2, r4, r3
 800766c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800766e:	9e04      	ldr	r6, [sp, #16]
 8007670:	4413      	add	r3, r2
 8007672:	930a      	str	r3, [sp, #40]	@ 0x28
 8007674:	4652      	mov	r2, sl
 8007676:	4623      	mov	r3, r4
 8007678:	2400      	movs	r4, #0
 800767a:	e726      	b.n	80074ca <_dtoa_r+0x632>
 800767c:	9a04      	ldr	r2, [sp, #16]
 800767e:	eba2 060a 	sub.w	r6, r2, sl
 8007682:	2200      	movs	r2, #0
 8007684:	e721      	b.n	80074ca <_dtoa_r+0x632>
 8007686:	9e04      	ldr	r6, [sp, #16]
 8007688:	9d08      	ldr	r5, [sp, #32]
 800768a:	461c      	mov	r4, r3
 800768c:	e72a      	b.n	80074e4 <_dtoa_r+0x64c>
 800768e:	9a01      	ldr	r2, [sp, #4]
 8007690:	9205      	str	r2, [sp, #20]
 8007692:	e752      	b.n	800753a <_dtoa_r+0x6a2>
 8007694:	9901      	ldr	r1, [sp, #4]
 8007696:	461a      	mov	r2, r3
 8007698:	e751      	b.n	800753e <_dtoa_r+0x6a6>
 800769a:	9b05      	ldr	r3, [sp, #20]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	e752      	b.n	8007546 <_dtoa_r+0x6ae>
 80076a0:	2300      	movs	r3, #0
 80076a2:	e77b      	b.n	800759c <_dtoa_r+0x704>
 80076a4:	9b02      	ldr	r3, [sp, #8]
 80076a6:	e779      	b.n	800759c <_dtoa_r+0x704>
 80076a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80076aa:	e778      	b.n	800759e <_dtoa_r+0x706>
 80076ac:	2300      	movs	r3, #0
 80076ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076b0:	e779      	b.n	80075a6 <_dtoa_r+0x70e>
 80076b2:	d093      	beq.n	80075dc <_dtoa_r+0x744>
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	321c      	adds	r2, #28
 80076b8:	4413      	add	r3, r2
 80076ba:	9304      	str	r3, [sp, #16]
 80076bc:	9b06      	ldr	r3, [sp, #24]
 80076be:	4416      	add	r6, r2
 80076c0:	4413      	add	r3, r2
 80076c2:	e78a      	b.n	80075da <_dtoa_r+0x742>
 80076c4:	4602      	mov	r2, r0
 80076c6:	e7f5      	b.n	80076b4 <_dtoa_r+0x81c>
 80076c8:	f1ba 0f00 	cmp.w	sl, #0
 80076cc:	f8cd 8014 	str.w	r8, [sp, #20]
 80076d0:	46d3      	mov	fp, sl
 80076d2:	dc21      	bgt.n	8007718 <_dtoa_r+0x880>
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	dd1e      	ble.n	8007718 <_dtoa_r+0x880>
 80076da:	f1bb 0f00 	cmp.w	fp, #0
 80076de:	f47f addc 	bne.w	800729a <_dtoa_r+0x402>
 80076e2:	4621      	mov	r1, r4
 80076e4:	465b      	mov	r3, fp
 80076e6:	2205      	movs	r2, #5
 80076e8:	4648      	mov	r0, r9
 80076ea:	f000 fa95 	bl	8007c18 <__multadd>
 80076ee:	4601      	mov	r1, r0
 80076f0:	4604      	mov	r4, r0
 80076f2:	9801      	ldr	r0, [sp, #4]
 80076f4:	f000 fca0 	bl	8008038 <__mcmp>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	f77f adce 	ble.w	800729a <_dtoa_r+0x402>
 80076fe:	463e      	mov	r6, r7
 8007700:	2331      	movs	r3, #49	@ 0x31
 8007702:	f806 3b01 	strb.w	r3, [r6], #1
 8007706:	9b05      	ldr	r3, [sp, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	9305      	str	r3, [sp, #20]
 800770c:	e5c9      	b.n	80072a2 <_dtoa_r+0x40a>
 800770e:	f8cd 8014 	str.w	r8, [sp, #20]
 8007712:	4654      	mov	r4, sl
 8007714:	4625      	mov	r5, r4
 8007716:	e7f2      	b.n	80076fe <_dtoa_r+0x866>
 8007718:	9b08      	ldr	r3, [sp, #32]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8102 	beq.w	8007924 <_dtoa_r+0xa8c>
 8007720:	2e00      	cmp	r6, #0
 8007722:	dd05      	ble.n	8007730 <_dtoa_r+0x898>
 8007724:	4629      	mov	r1, r5
 8007726:	4632      	mov	r2, r6
 8007728:	4648      	mov	r0, r9
 800772a:	f000 fc19 	bl	8007f60 <__lshift>
 800772e:	4605      	mov	r5, r0
 8007730:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d058      	beq.n	80077e8 <_dtoa_r+0x950>
 8007736:	6869      	ldr	r1, [r5, #4]
 8007738:	4648      	mov	r0, r9
 800773a:	f000 fa0b 	bl	8007b54 <_Balloc>
 800773e:	4606      	mov	r6, r0
 8007740:	b928      	cbnz	r0, 800774e <_dtoa_r+0x8b6>
 8007742:	4b82      	ldr	r3, [pc, #520]	@ (800794c <_dtoa_r+0xab4>)
 8007744:	4602      	mov	r2, r0
 8007746:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800774a:	f7ff bbbe 	b.w	8006eca <_dtoa_r+0x32>
 800774e:	692a      	ldr	r2, [r5, #16]
 8007750:	3202      	adds	r2, #2
 8007752:	0092      	lsls	r2, r2, #2
 8007754:	f105 010c 	add.w	r1, r5, #12
 8007758:	300c      	adds	r0, #12
 800775a:	f001 f807 	bl	800876c <memcpy>
 800775e:	2201      	movs	r2, #1
 8007760:	4631      	mov	r1, r6
 8007762:	4648      	mov	r0, r9
 8007764:	f000 fbfc 	bl	8007f60 <__lshift>
 8007768:	1c7b      	adds	r3, r7, #1
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	eb07 030b 	add.w	r3, r7, fp
 8007770:	9309      	str	r3, [sp, #36]	@ 0x24
 8007772:	9b02      	ldr	r3, [sp, #8]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	46a8      	mov	r8, r5
 800777a:	9308      	str	r3, [sp, #32]
 800777c:	4605      	mov	r5, r0
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	9801      	ldr	r0, [sp, #4]
 8007782:	4621      	mov	r1, r4
 8007784:	f103 3bff 	add.w	fp, r3, #4294967295
 8007788:	f7ff fafb 	bl	8006d82 <quorem>
 800778c:	4641      	mov	r1, r8
 800778e:	9002      	str	r0, [sp, #8]
 8007790:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007794:	9801      	ldr	r0, [sp, #4]
 8007796:	f000 fc4f 	bl	8008038 <__mcmp>
 800779a:	462a      	mov	r2, r5
 800779c:	9006      	str	r0, [sp, #24]
 800779e:	4621      	mov	r1, r4
 80077a0:	4648      	mov	r0, r9
 80077a2:	f000 fc65 	bl	8008070 <__mdiff>
 80077a6:	68c2      	ldr	r2, [r0, #12]
 80077a8:	4606      	mov	r6, r0
 80077aa:	b9fa      	cbnz	r2, 80077ec <_dtoa_r+0x954>
 80077ac:	4601      	mov	r1, r0
 80077ae:	9801      	ldr	r0, [sp, #4]
 80077b0:	f000 fc42 	bl	8008038 <__mcmp>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4631      	mov	r1, r6
 80077b8:	4648      	mov	r0, r9
 80077ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80077bc:	f000 fa0a 	bl	8007bd4 <_Bfree>
 80077c0:	9b07      	ldr	r3, [sp, #28]
 80077c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077c4:	9e04      	ldr	r6, [sp, #16]
 80077c6:	ea42 0103 	orr.w	r1, r2, r3
 80077ca:	9b08      	ldr	r3, [sp, #32]
 80077cc:	4319      	orrs	r1, r3
 80077ce:	d10f      	bne.n	80077f0 <_dtoa_r+0x958>
 80077d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80077d4:	d028      	beq.n	8007828 <_dtoa_r+0x990>
 80077d6:	9b06      	ldr	r3, [sp, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dd02      	ble.n	80077e2 <_dtoa_r+0x94a>
 80077dc:	9b02      	ldr	r3, [sp, #8]
 80077de:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80077e2:	f88b a000 	strb.w	sl, [fp]
 80077e6:	e55e      	b.n	80072a6 <_dtoa_r+0x40e>
 80077e8:	4628      	mov	r0, r5
 80077ea:	e7bd      	b.n	8007768 <_dtoa_r+0x8d0>
 80077ec:	2201      	movs	r2, #1
 80077ee:	e7e2      	b.n	80077b6 <_dtoa_r+0x91e>
 80077f0:	9b06      	ldr	r3, [sp, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	db04      	blt.n	8007800 <_dtoa_r+0x968>
 80077f6:	9907      	ldr	r1, [sp, #28]
 80077f8:	430b      	orrs	r3, r1
 80077fa:	9908      	ldr	r1, [sp, #32]
 80077fc:	430b      	orrs	r3, r1
 80077fe:	d120      	bne.n	8007842 <_dtoa_r+0x9aa>
 8007800:	2a00      	cmp	r2, #0
 8007802:	ddee      	ble.n	80077e2 <_dtoa_r+0x94a>
 8007804:	9901      	ldr	r1, [sp, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	4648      	mov	r0, r9
 800780a:	f000 fba9 	bl	8007f60 <__lshift>
 800780e:	4621      	mov	r1, r4
 8007810:	9001      	str	r0, [sp, #4]
 8007812:	f000 fc11 	bl	8008038 <__mcmp>
 8007816:	2800      	cmp	r0, #0
 8007818:	dc03      	bgt.n	8007822 <_dtoa_r+0x98a>
 800781a:	d1e2      	bne.n	80077e2 <_dtoa_r+0x94a>
 800781c:	f01a 0f01 	tst.w	sl, #1
 8007820:	d0df      	beq.n	80077e2 <_dtoa_r+0x94a>
 8007822:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007826:	d1d9      	bne.n	80077dc <_dtoa_r+0x944>
 8007828:	2339      	movs	r3, #57	@ 0x39
 800782a:	f88b 3000 	strb.w	r3, [fp]
 800782e:	4633      	mov	r3, r6
 8007830:	461e      	mov	r6, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007838:	2a39      	cmp	r2, #57	@ 0x39
 800783a:	d052      	beq.n	80078e2 <_dtoa_r+0xa4a>
 800783c:	3201      	adds	r2, #1
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	e531      	b.n	80072a6 <_dtoa_r+0x40e>
 8007842:	2a00      	cmp	r2, #0
 8007844:	dd07      	ble.n	8007856 <_dtoa_r+0x9be>
 8007846:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800784a:	d0ed      	beq.n	8007828 <_dtoa_r+0x990>
 800784c:	f10a 0301 	add.w	r3, sl, #1
 8007850:	f88b 3000 	strb.w	r3, [fp]
 8007854:	e527      	b.n	80072a6 <_dtoa_r+0x40e>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800785a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800785e:	4293      	cmp	r3, r2
 8007860:	d029      	beq.n	80078b6 <_dtoa_r+0xa1e>
 8007862:	9901      	ldr	r1, [sp, #4]
 8007864:	2300      	movs	r3, #0
 8007866:	220a      	movs	r2, #10
 8007868:	4648      	mov	r0, r9
 800786a:	f000 f9d5 	bl	8007c18 <__multadd>
 800786e:	45a8      	cmp	r8, r5
 8007870:	9001      	str	r0, [sp, #4]
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	f04f 020a 	mov.w	r2, #10
 800787a:	4641      	mov	r1, r8
 800787c:	4648      	mov	r0, r9
 800787e:	d107      	bne.n	8007890 <_dtoa_r+0x9f8>
 8007880:	f000 f9ca 	bl	8007c18 <__multadd>
 8007884:	4680      	mov	r8, r0
 8007886:	4605      	mov	r5, r0
 8007888:	9b04      	ldr	r3, [sp, #16]
 800788a:	3301      	adds	r3, #1
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	e776      	b.n	800777e <_dtoa_r+0x8e6>
 8007890:	f000 f9c2 	bl	8007c18 <__multadd>
 8007894:	4629      	mov	r1, r5
 8007896:	4680      	mov	r8, r0
 8007898:	2300      	movs	r3, #0
 800789a:	220a      	movs	r2, #10
 800789c:	4648      	mov	r0, r9
 800789e:	f000 f9bb 	bl	8007c18 <__multadd>
 80078a2:	4605      	mov	r5, r0
 80078a4:	e7f0      	b.n	8007888 <_dtoa_r+0x9f0>
 80078a6:	f1bb 0f00 	cmp.w	fp, #0
 80078aa:	bfcc      	ite	gt
 80078ac:	465e      	movgt	r6, fp
 80078ae:	2601      	movle	r6, #1
 80078b0:	443e      	add	r6, r7
 80078b2:	f04f 0800 	mov.w	r8, #0
 80078b6:	9901      	ldr	r1, [sp, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	4648      	mov	r0, r9
 80078bc:	f000 fb50 	bl	8007f60 <__lshift>
 80078c0:	4621      	mov	r1, r4
 80078c2:	9001      	str	r0, [sp, #4]
 80078c4:	f000 fbb8 	bl	8008038 <__mcmp>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	dcb0      	bgt.n	800782e <_dtoa_r+0x996>
 80078cc:	d102      	bne.n	80078d4 <_dtoa_r+0xa3c>
 80078ce:	f01a 0f01 	tst.w	sl, #1
 80078d2:	d1ac      	bne.n	800782e <_dtoa_r+0x996>
 80078d4:	4633      	mov	r3, r6
 80078d6:	461e      	mov	r6, r3
 80078d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078dc:	2a30      	cmp	r2, #48	@ 0x30
 80078de:	d0fa      	beq.n	80078d6 <_dtoa_r+0xa3e>
 80078e0:	e4e1      	b.n	80072a6 <_dtoa_r+0x40e>
 80078e2:	429f      	cmp	r7, r3
 80078e4:	d1a4      	bne.n	8007830 <_dtoa_r+0x998>
 80078e6:	9b05      	ldr	r3, [sp, #20]
 80078e8:	3301      	adds	r3, #1
 80078ea:	9305      	str	r3, [sp, #20]
 80078ec:	2331      	movs	r3, #49	@ 0x31
 80078ee:	703b      	strb	r3, [r7, #0]
 80078f0:	e4d9      	b.n	80072a6 <_dtoa_r+0x40e>
 80078f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078f4:	4f16      	ldr	r7, [pc, #88]	@ (8007950 <_dtoa_r+0xab8>)
 80078f6:	b11b      	cbz	r3, 8007900 <_dtoa_r+0xa68>
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	4638      	mov	r0, r7
 8007902:	b011      	add	sp, #68	@ 0x44
 8007904:	ecbd 8b02 	vpop	{d8}
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	9b07      	ldr	r3, [sp, #28]
 800790e:	2b01      	cmp	r3, #1
 8007910:	f77f ae2c 	ble.w	800756c <_dtoa_r+0x6d4>
 8007914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007916:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007918:	2001      	movs	r0, #1
 800791a:	e64c      	b.n	80075b6 <_dtoa_r+0x71e>
 800791c:	f1bb 0f00 	cmp.w	fp, #0
 8007920:	f77f aed8 	ble.w	80076d4 <_dtoa_r+0x83c>
 8007924:	463e      	mov	r6, r7
 8007926:	9801      	ldr	r0, [sp, #4]
 8007928:	4621      	mov	r1, r4
 800792a:	f7ff fa2a 	bl	8006d82 <quorem>
 800792e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007932:	f806 ab01 	strb.w	sl, [r6], #1
 8007936:	1bf2      	subs	r2, r6, r7
 8007938:	4593      	cmp	fp, r2
 800793a:	ddb4      	ble.n	80078a6 <_dtoa_r+0xa0e>
 800793c:	9901      	ldr	r1, [sp, #4]
 800793e:	2300      	movs	r3, #0
 8007940:	220a      	movs	r2, #10
 8007942:	4648      	mov	r0, r9
 8007944:	f000 f968 	bl	8007c18 <__multadd>
 8007948:	9001      	str	r0, [sp, #4]
 800794a:	e7ec      	b.n	8007926 <_dtoa_r+0xa8e>
 800794c:	08008ae0 	.word	0x08008ae0
 8007950:	08008a64 	.word	0x08008a64

08007954 <_free_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	4605      	mov	r5, r0
 8007958:	2900      	cmp	r1, #0
 800795a:	d041      	beq.n	80079e0 <_free_r+0x8c>
 800795c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007960:	1f0c      	subs	r4, r1, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfb8      	it	lt
 8007966:	18e4      	addlt	r4, r4, r3
 8007968:	f000 f8e8 	bl	8007b3c <__malloc_lock>
 800796c:	4a1d      	ldr	r2, [pc, #116]	@ (80079e4 <_free_r+0x90>)
 800796e:	6813      	ldr	r3, [r2, #0]
 8007970:	b933      	cbnz	r3, 8007980 <_free_r+0x2c>
 8007972:	6063      	str	r3, [r4, #4]
 8007974:	6014      	str	r4, [r2, #0]
 8007976:	4628      	mov	r0, r5
 8007978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800797c:	f000 b8e4 	b.w	8007b48 <__malloc_unlock>
 8007980:	42a3      	cmp	r3, r4
 8007982:	d908      	bls.n	8007996 <_free_r+0x42>
 8007984:	6820      	ldr	r0, [r4, #0]
 8007986:	1821      	adds	r1, r4, r0
 8007988:	428b      	cmp	r3, r1
 800798a:	bf01      	itttt	eq
 800798c:	6819      	ldreq	r1, [r3, #0]
 800798e:	685b      	ldreq	r3, [r3, #4]
 8007990:	1809      	addeq	r1, r1, r0
 8007992:	6021      	streq	r1, [r4, #0]
 8007994:	e7ed      	b.n	8007972 <_free_r+0x1e>
 8007996:	461a      	mov	r2, r3
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b10b      	cbz	r3, 80079a0 <_free_r+0x4c>
 800799c:	42a3      	cmp	r3, r4
 800799e:	d9fa      	bls.n	8007996 <_free_r+0x42>
 80079a0:	6811      	ldr	r1, [r2, #0]
 80079a2:	1850      	adds	r0, r2, r1
 80079a4:	42a0      	cmp	r0, r4
 80079a6:	d10b      	bne.n	80079c0 <_free_r+0x6c>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	4401      	add	r1, r0
 80079ac:	1850      	adds	r0, r2, r1
 80079ae:	4283      	cmp	r3, r0
 80079b0:	6011      	str	r1, [r2, #0]
 80079b2:	d1e0      	bne.n	8007976 <_free_r+0x22>
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	6053      	str	r3, [r2, #4]
 80079ba:	4408      	add	r0, r1
 80079bc:	6010      	str	r0, [r2, #0]
 80079be:	e7da      	b.n	8007976 <_free_r+0x22>
 80079c0:	d902      	bls.n	80079c8 <_free_r+0x74>
 80079c2:	230c      	movs	r3, #12
 80079c4:	602b      	str	r3, [r5, #0]
 80079c6:	e7d6      	b.n	8007976 <_free_r+0x22>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	1821      	adds	r1, r4, r0
 80079cc:	428b      	cmp	r3, r1
 80079ce:	bf04      	itt	eq
 80079d0:	6819      	ldreq	r1, [r3, #0]
 80079d2:	685b      	ldreq	r3, [r3, #4]
 80079d4:	6063      	str	r3, [r4, #4]
 80079d6:	bf04      	itt	eq
 80079d8:	1809      	addeq	r1, r1, r0
 80079da:	6021      	streq	r1, [r4, #0]
 80079dc:	6054      	str	r4, [r2, #4]
 80079de:	e7ca      	b.n	8007976 <_free_r+0x22>
 80079e0:	bd38      	pop	{r3, r4, r5, pc}
 80079e2:	bf00      	nop
 80079e4:	20000cc0 	.word	0x20000cc0

080079e8 <malloc>:
 80079e8:	4b02      	ldr	r3, [pc, #8]	@ (80079f4 <malloc+0xc>)
 80079ea:	4601      	mov	r1, r0
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	f000 b825 	b.w	8007a3c <_malloc_r>
 80079f2:	bf00      	nop
 80079f4:	20000018 	.word	0x20000018

080079f8 <sbrk_aligned>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	4e0f      	ldr	r6, [pc, #60]	@ (8007a38 <sbrk_aligned+0x40>)
 80079fc:	460c      	mov	r4, r1
 80079fe:	6831      	ldr	r1, [r6, #0]
 8007a00:	4605      	mov	r5, r0
 8007a02:	b911      	cbnz	r1, 8007a0a <sbrk_aligned+0x12>
 8007a04:	f000 fea2 	bl	800874c <_sbrk_r>
 8007a08:	6030      	str	r0, [r6, #0]
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 fe9d 	bl	800874c <_sbrk_r>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d103      	bne.n	8007a1e <sbrk_aligned+0x26>
 8007a16:	f04f 34ff 	mov.w	r4, #4294967295
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	1cc4      	adds	r4, r0, #3
 8007a20:	f024 0403 	bic.w	r4, r4, #3
 8007a24:	42a0      	cmp	r0, r4
 8007a26:	d0f8      	beq.n	8007a1a <sbrk_aligned+0x22>
 8007a28:	1a21      	subs	r1, r4, r0
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 fe8e 	bl	800874c <_sbrk_r>
 8007a30:	3001      	adds	r0, #1
 8007a32:	d1f2      	bne.n	8007a1a <sbrk_aligned+0x22>
 8007a34:	e7ef      	b.n	8007a16 <sbrk_aligned+0x1e>
 8007a36:	bf00      	nop
 8007a38:	20000cbc 	.word	0x20000cbc

08007a3c <_malloc_r>:
 8007a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a40:	1ccd      	adds	r5, r1, #3
 8007a42:	f025 0503 	bic.w	r5, r5, #3
 8007a46:	3508      	adds	r5, #8
 8007a48:	2d0c      	cmp	r5, #12
 8007a4a:	bf38      	it	cc
 8007a4c:	250c      	movcc	r5, #12
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	4606      	mov	r6, r0
 8007a52:	db01      	blt.n	8007a58 <_malloc_r+0x1c>
 8007a54:	42a9      	cmp	r1, r5
 8007a56:	d904      	bls.n	8007a62 <_malloc_r+0x26>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	6033      	str	r3, [r6, #0]
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b38 <_malloc_r+0xfc>
 8007a66:	f000 f869 	bl	8007b3c <__malloc_lock>
 8007a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a6e:	461c      	mov	r4, r3
 8007a70:	bb44      	cbnz	r4, 8007ac4 <_malloc_r+0x88>
 8007a72:	4629      	mov	r1, r5
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff ffbf 	bl	80079f8 <sbrk_aligned>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	d158      	bne.n	8007b32 <_malloc_r+0xf6>
 8007a80:	f8d8 4000 	ldr.w	r4, [r8]
 8007a84:	4627      	mov	r7, r4
 8007a86:	2f00      	cmp	r7, #0
 8007a88:	d143      	bne.n	8007b12 <_malloc_r+0xd6>
 8007a8a:	2c00      	cmp	r4, #0
 8007a8c:	d04b      	beq.n	8007b26 <_malloc_r+0xea>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	4639      	mov	r1, r7
 8007a92:	4630      	mov	r0, r6
 8007a94:	eb04 0903 	add.w	r9, r4, r3
 8007a98:	f000 fe58 	bl	800874c <_sbrk_r>
 8007a9c:	4581      	cmp	r9, r0
 8007a9e:	d142      	bne.n	8007b26 <_malloc_r+0xea>
 8007aa0:	6821      	ldr	r1, [r4, #0]
 8007aa2:	1a6d      	subs	r5, r5, r1
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7ff ffa6 	bl	80079f8 <sbrk_aligned>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d03a      	beq.n	8007b26 <_malloc_r+0xea>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	442b      	add	r3, r5
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	bb62      	cbnz	r2, 8007b18 <_malloc_r+0xdc>
 8007abe:	f8c8 7000 	str.w	r7, [r8]
 8007ac2:	e00f      	b.n	8007ae4 <_malloc_r+0xa8>
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	1b52      	subs	r2, r2, r5
 8007ac8:	d420      	bmi.n	8007b0c <_malloc_r+0xd0>
 8007aca:	2a0b      	cmp	r2, #11
 8007acc:	d917      	bls.n	8007afe <_malloc_r+0xc2>
 8007ace:	1961      	adds	r1, r4, r5
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	6025      	str	r5, [r4, #0]
 8007ad4:	bf18      	it	ne
 8007ad6:	6059      	strne	r1, [r3, #4]
 8007ad8:	6863      	ldr	r3, [r4, #4]
 8007ada:	bf08      	it	eq
 8007adc:	f8c8 1000 	streq.w	r1, [r8]
 8007ae0:	5162      	str	r2, [r4, r5]
 8007ae2:	604b      	str	r3, [r1, #4]
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 f82f 	bl	8007b48 <__malloc_unlock>
 8007aea:	f104 000b 	add.w	r0, r4, #11
 8007aee:	1d23      	adds	r3, r4, #4
 8007af0:	f020 0007 	bic.w	r0, r0, #7
 8007af4:	1ac2      	subs	r2, r0, r3
 8007af6:	bf1c      	itt	ne
 8007af8:	1a1b      	subne	r3, r3, r0
 8007afa:	50a3      	strne	r3, [r4, r2]
 8007afc:	e7af      	b.n	8007a5e <_malloc_r+0x22>
 8007afe:	6862      	ldr	r2, [r4, #4]
 8007b00:	42a3      	cmp	r3, r4
 8007b02:	bf0c      	ite	eq
 8007b04:	f8c8 2000 	streq.w	r2, [r8]
 8007b08:	605a      	strne	r2, [r3, #4]
 8007b0a:	e7eb      	b.n	8007ae4 <_malloc_r+0xa8>
 8007b0c:	4623      	mov	r3, r4
 8007b0e:	6864      	ldr	r4, [r4, #4]
 8007b10:	e7ae      	b.n	8007a70 <_malloc_r+0x34>
 8007b12:	463c      	mov	r4, r7
 8007b14:	687f      	ldr	r7, [r7, #4]
 8007b16:	e7b6      	b.n	8007a86 <_malloc_r+0x4a>
 8007b18:	461a      	mov	r2, r3
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	d1fb      	bne.n	8007b18 <_malloc_r+0xdc>
 8007b20:	2300      	movs	r3, #0
 8007b22:	6053      	str	r3, [r2, #4]
 8007b24:	e7de      	b.n	8007ae4 <_malloc_r+0xa8>
 8007b26:	230c      	movs	r3, #12
 8007b28:	6033      	str	r3, [r6, #0]
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f000 f80c 	bl	8007b48 <__malloc_unlock>
 8007b30:	e794      	b.n	8007a5c <_malloc_r+0x20>
 8007b32:	6005      	str	r5, [r0, #0]
 8007b34:	e7d6      	b.n	8007ae4 <_malloc_r+0xa8>
 8007b36:	bf00      	nop
 8007b38:	20000cc0 	.word	0x20000cc0

08007b3c <__malloc_lock>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	@ (8007b44 <__malloc_lock+0x8>)
 8007b3e:	f7ff b91e 	b.w	8006d7e <__retarget_lock_acquire_recursive>
 8007b42:	bf00      	nop
 8007b44:	20000cb8 	.word	0x20000cb8

08007b48 <__malloc_unlock>:
 8007b48:	4801      	ldr	r0, [pc, #4]	@ (8007b50 <__malloc_unlock+0x8>)
 8007b4a:	f7ff b919 	b.w	8006d80 <__retarget_lock_release_recursive>
 8007b4e:	bf00      	nop
 8007b50:	20000cb8 	.word	0x20000cb8

08007b54 <_Balloc>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	69c6      	ldr	r6, [r0, #28]
 8007b58:	4604      	mov	r4, r0
 8007b5a:	460d      	mov	r5, r1
 8007b5c:	b976      	cbnz	r6, 8007b7c <_Balloc+0x28>
 8007b5e:	2010      	movs	r0, #16
 8007b60:	f7ff ff42 	bl	80079e8 <malloc>
 8007b64:	4602      	mov	r2, r0
 8007b66:	61e0      	str	r0, [r4, #28]
 8007b68:	b920      	cbnz	r0, 8007b74 <_Balloc+0x20>
 8007b6a:	4b18      	ldr	r3, [pc, #96]	@ (8007bcc <_Balloc+0x78>)
 8007b6c:	4818      	ldr	r0, [pc, #96]	@ (8007bd0 <_Balloc+0x7c>)
 8007b6e:	216b      	movs	r1, #107	@ 0x6b
 8007b70:	f000 fe0a 	bl	8008788 <__assert_func>
 8007b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b78:	6006      	str	r6, [r0, #0]
 8007b7a:	60c6      	str	r6, [r0, #12]
 8007b7c:	69e6      	ldr	r6, [r4, #28]
 8007b7e:	68f3      	ldr	r3, [r6, #12]
 8007b80:	b183      	cbz	r3, 8007ba4 <_Balloc+0x50>
 8007b82:	69e3      	ldr	r3, [r4, #28]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b8a:	b9b8      	cbnz	r0, 8007bbc <_Balloc+0x68>
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007b92:	1d72      	adds	r2, r6, #5
 8007b94:	0092      	lsls	r2, r2, #2
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 fe14 	bl	80087c4 <_calloc_r>
 8007b9c:	b160      	cbz	r0, 8007bb8 <_Balloc+0x64>
 8007b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ba2:	e00e      	b.n	8007bc2 <_Balloc+0x6e>
 8007ba4:	2221      	movs	r2, #33	@ 0x21
 8007ba6:	2104      	movs	r1, #4
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 fe0b 	bl	80087c4 <_calloc_r>
 8007bae:	69e3      	ldr	r3, [r4, #28]
 8007bb0:	60f0      	str	r0, [r6, #12]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e4      	bne.n	8007b82 <_Balloc+0x2e>
 8007bb8:	2000      	movs	r0, #0
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	6802      	ldr	r2, [r0, #0]
 8007bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bc8:	e7f7      	b.n	8007bba <_Balloc+0x66>
 8007bca:	bf00      	nop
 8007bcc:	08008a71 	.word	0x08008a71
 8007bd0:	08008af1 	.word	0x08008af1

08007bd4 <_Bfree>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	69c6      	ldr	r6, [r0, #28]
 8007bd8:	4605      	mov	r5, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	b976      	cbnz	r6, 8007bfc <_Bfree+0x28>
 8007bde:	2010      	movs	r0, #16
 8007be0:	f7ff ff02 	bl	80079e8 <malloc>
 8007be4:	4602      	mov	r2, r0
 8007be6:	61e8      	str	r0, [r5, #28]
 8007be8:	b920      	cbnz	r0, 8007bf4 <_Bfree+0x20>
 8007bea:	4b09      	ldr	r3, [pc, #36]	@ (8007c10 <_Bfree+0x3c>)
 8007bec:	4809      	ldr	r0, [pc, #36]	@ (8007c14 <_Bfree+0x40>)
 8007bee:	218f      	movs	r1, #143	@ 0x8f
 8007bf0:	f000 fdca 	bl	8008788 <__assert_func>
 8007bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bf8:	6006      	str	r6, [r0, #0]
 8007bfa:	60c6      	str	r6, [r0, #12]
 8007bfc:	b13c      	cbz	r4, 8007c0e <_Bfree+0x3a>
 8007bfe:	69eb      	ldr	r3, [r5, #28]
 8007c00:	6862      	ldr	r2, [r4, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c08:	6021      	str	r1, [r4, #0]
 8007c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c0e:	bd70      	pop	{r4, r5, r6, pc}
 8007c10:	08008a71 	.word	0x08008a71
 8007c14:	08008af1 	.word	0x08008af1

08007c18 <__multadd>:
 8007c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1c:	690d      	ldr	r5, [r1, #16]
 8007c1e:	4607      	mov	r7, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	461e      	mov	r6, r3
 8007c24:	f101 0c14 	add.w	ip, r1, #20
 8007c28:	2000      	movs	r0, #0
 8007c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007c2e:	b299      	uxth	r1, r3
 8007c30:	fb02 6101 	mla	r1, r2, r1, r6
 8007c34:	0c1e      	lsrs	r6, r3, #16
 8007c36:	0c0b      	lsrs	r3, r1, #16
 8007c38:	fb02 3306 	mla	r3, r2, r6, r3
 8007c3c:	b289      	uxth	r1, r1
 8007c3e:	3001      	adds	r0, #1
 8007c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c44:	4285      	cmp	r5, r0
 8007c46:	f84c 1b04 	str.w	r1, [ip], #4
 8007c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c4e:	dcec      	bgt.n	8007c2a <__multadd+0x12>
 8007c50:	b30e      	cbz	r6, 8007c96 <__multadd+0x7e>
 8007c52:	68a3      	ldr	r3, [r4, #8]
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dc19      	bgt.n	8007c8c <__multadd+0x74>
 8007c58:	6861      	ldr	r1, [r4, #4]
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	3101      	adds	r1, #1
 8007c5e:	f7ff ff79 	bl	8007b54 <_Balloc>
 8007c62:	4680      	mov	r8, r0
 8007c64:	b928      	cbnz	r0, 8007c72 <__multadd+0x5a>
 8007c66:	4602      	mov	r2, r0
 8007c68:	4b0c      	ldr	r3, [pc, #48]	@ (8007c9c <__multadd+0x84>)
 8007c6a:	480d      	ldr	r0, [pc, #52]	@ (8007ca0 <__multadd+0x88>)
 8007c6c:	21ba      	movs	r1, #186	@ 0xba
 8007c6e:	f000 fd8b 	bl	8008788 <__assert_func>
 8007c72:	6922      	ldr	r2, [r4, #16]
 8007c74:	3202      	adds	r2, #2
 8007c76:	f104 010c 	add.w	r1, r4, #12
 8007c7a:	0092      	lsls	r2, r2, #2
 8007c7c:	300c      	adds	r0, #12
 8007c7e:	f000 fd75 	bl	800876c <memcpy>
 8007c82:	4621      	mov	r1, r4
 8007c84:	4638      	mov	r0, r7
 8007c86:	f7ff ffa5 	bl	8007bd4 <_Bfree>
 8007c8a:	4644      	mov	r4, r8
 8007c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c90:	3501      	adds	r5, #1
 8007c92:	615e      	str	r6, [r3, #20]
 8007c94:	6125      	str	r5, [r4, #16]
 8007c96:	4620      	mov	r0, r4
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c9c:	08008ae0 	.word	0x08008ae0
 8007ca0:	08008af1 	.word	0x08008af1

08007ca4 <__hi0bits>:
 8007ca4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ca8:	4603      	mov	r3, r0
 8007caa:	bf36      	itet	cc
 8007cac:	0403      	lslcc	r3, r0, #16
 8007cae:	2000      	movcs	r0, #0
 8007cb0:	2010      	movcc	r0, #16
 8007cb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cb6:	bf3c      	itt	cc
 8007cb8:	021b      	lslcc	r3, r3, #8
 8007cba:	3008      	addcc	r0, #8
 8007cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cc0:	bf3c      	itt	cc
 8007cc2:	011b      	lslcc	r3, r3, #4
 8007cc4:	3004      	addcc	r0, #4
 8007cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cca:	bf3c      	itt	cc
 8007ccc:	009b      	lslcc	r3, r3, #2
 8007cce:	3002      	addcc	r0, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	db05      	blt.n	8007ce0 <__hi0bits+0x3c>
 8007cd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007cd8:	f100 0001 	add.w	r0, r0, #1
 8007cdc:	bf08      	it	eq
 8007cde:	2020      	moveq	r0, #32
 8007ce0:	4770      	bx	lr

08007ce2 <__lo0bits>:
 8007ce2:	6803      	ldr	r3, [r0, #0]
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	f013 0007 	ands.w	r0, r3, #7
 8007cea:	d00b      	beq.n	8007d04 <__lo0bits+0x22>
 8007cec:	07d9      	lsls	r1, r3, #31
 8007cee:	d421      	bmi.n	8007d34 <__lo0bits+0x52>
 8007cf0:	0798      	lsls	r0, r3, #30
 8007cf2:	bf49      	itett	mi
 8007cf4:	085b      	lsrmi	r3, r3, #1
 8007cf6:	089b      	lsrpl	r3, r3, #2
 8007cf8:	2001      	movmi	r0, #1
 8007cfa:	6013      	strmi	r3, [r2, #0]
 8007cfc:	bf5c      	itt	pl
 8007cfe:	6013      	strpl	r3, [r2, #0]
 8007d00:	2002      	movpl	r0, #2
 8007d02:	4770      	bx	lr
 8007d04:	b299      	uxth	r1, r3
 8007d06:	b909      	cbnz	r1, 8007d0c <__lo0bits+0x2a>
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	2010      	movs	r0, #16
 8007d0c:	b2d9      	uxtb	r1, r3
 8007d0e:	b909      	cbnz	r1, 8007d14 <__lo0bits+0x32>
 8007d10:	3008      	adds	r0, #8
 8007d12:	0a1b      	lsrs	r3, r3, #8
 8007d14:	0719      	lsls	r1, r3, #28
 8007d16:	bf04      	itt	eq
 8007d18:	091b      	lsreq	r3, r3, #4
 8007d1a:	3004      	addeq	r0, #4
 8007d1c:	0799      	lsls	r1, r3, #30
 8007d1e:	bf04      	itt	eq
 8007d20:	089b      	lsreq	r3, r3, #2
 8007d22:	3002      	addeq	r0, #2
 8007d24:	07d9      	lsls	r1, r3, #31
 8007d26:	d403      	bmi.n	8007d30 <__lo0bits+0x4e>
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	f100 0001 	add.w	r0, r0, #1
 8007d2e:	d003      	beq.n	8007d38 <__lo0bits+0x56>
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	4770      	bx	lr
 8007d34:	2000      	movs	r0, #0
 8007d36:	4770      	bx	lr
 8007d38:	2020      	movs	r0, #32
 8007d3a:	4770      	bx	lr

08007d3c <__i2b>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	460c      	mov	r4, r1
 8007d40:	2101      	movs	r1, #1
 8007d42:	f7ff ff07 	bl	8007b54 <_Balloc>
 8007d46:	4602      	mov	r2, r0
 8007d48:	b928      	cbnz	r0, 8007d56 <__i2b+0x1a>
 8007d4a:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <__i2b+0x24>)
 8007d4c:	4805      	ldr	r0, [pc, #20]	@ (8007d64 <__i2b+0x28>)
 8007d4e:	f240 1145 	movw	r1, #325	@ 0x145
 8007d52:	f000 fd19 	bl	8008788 <__assert_func>
 8007d56:	2301      	movs	r3, #1
 8007d58:	6144      	str	r4, [r0, #20]
 8007d5a:	6103      	str	r3, [r0, #16]
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop
 8007d60:	08008ae0 	.word	0x08008ae0
 8007d64:	08008af1 	.word	0x08008af1

08007d68 <__multiply>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	4617      	mov	r7, r2
 8007d6e:	690a      	ldr	r2, [r1, #16]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	bfa8      	it	ge
 8007d76:	463b      	movge	r3, r7
 8007d78:	4689      	mov	r9, r1
 8007d7a:	bfa4      	itt	ge
 8007d7c:	460f      	movge	r7, r1
 8007d7e:	4699      	movge	r9, r3
 8007d80:	693d      	ldr	r5, [r7, #16]
 8007d82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	eb05 060a 	add.w	r6, r5, sl
 8007d8e:	42b3      	cmp	r3, r6
 8007d90:	b085      	sub	sp, #20
 8007d92:	bfb8      	it	lt
 8007d94:	3101      	addlt	r1, #1
 8007d96:	f7ff fedd 	bl	8007b54 <_Balloc>
 8007d9a:	b930      	cbnz	r0, 8007daa <__multiply+0x42>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	4b41      	ldr	r3, [pc, #260]	@ (8007ea4 <__multiply+0x13c>)
 8007da0:	4841      	ldr	r0, [pc, #260]	@ (8007ea8 <__multiply+0x140>)
 8007da2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007da6:	f000 fcef 	bl	8008788 <__assert_func>
 8007daa:	f100 0414 	add.w	r4, r0, #20
 8007dae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007db2:	4623      	mov	r3, r4
 8007db4:	2200      	movs	r2, #0
 8007db6:	4573      	cmp	r3, lr
 8007db8:	d320      	bcc.n	8007dfc <__multiply+0x94>
 8007dba:	f107 0814 	add.w	r8, r7, #20
 8007dbe:	f109 0114 	add.w	r1, r9, #20
 8007dc2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007dc6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007dca:	9302      	str	r3, [sp, #8]
 8007dcc:	1beb      	subs	r3, r5, r7
 8007dce:	3b15      	subs	r3, #21
 8007dd0:	f023 0303 	bic.w	r3, r3, #3
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	3715      	adds	r7, #21
 8007dd8:	42bd      	cmp	r5, r7
 8007dda:	bf38      	it	cc
 8007ddc:	2304      	movcc	r3, #4
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	9b02      	ldr	r3, [sp, #8]
 8007de2:	9103      	str	r1, [sp, #12]
 8007de4:	428b      	cmp	r3, r1
 8007de6:	d80c      	bhi.n	8007e02 <__multiply+0x9a>
 8007de8:	2e00      	cmp	r6, #0
 8007dea:	dd03      	ble.n	8007df4 <__multiply+0x8c>
 8007dec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d055      	beq.n	8007ea0 <__multiply+0x138>
 8007df4:	6106      	str	r6, [r0, #16]
 8007df6:	b005      	add	sp, #20
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfc:	f843 2b04 	str.w	r2, [r3], #4
 8007e00:	e7d9      	b.n	8007db6 <__multiply+0x4e>
 8007e02:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e06:	f1ba 0f00 	cmp.w	sl, #0
 8007e0a:	d01f      	beq.n	8007e4c <__multiply+0xe4>
 8007e0c:	46c4      	mov	ip, r8
 8007e0e:	46a1      	mov	r9, r4
 8007e10:	2700      	movs	r7, #0
 8007e12:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e16:	f8d9 3000 	ldr.w	r3, [r9]
 8007e1a:	fa1f fb82 	uxth.w	fp, r2
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e24:	443b      	add	r3, r7
 8007e26:	f8d9 7000 	ldr.w	r7, [r9]
 8007e2a:	0c12      	lsrs	r2, r2, #16
 8007e2c:	0c3f      	lsrs	r7, r7, #16
 8007e2e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007e32:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e3c:	4565      	cmp	r5, ip
 8007e3e:	f849 3b04 	str.w	r3, [r9], #4
 8007e42:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007e46:	d8e4      	bhi.n	8007e12 <__multiply+0xaa>
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	50e7      	str	r7, [r4, r3]
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e52:	3104      	adds	r1, #4
 8007e54:	f1b9 0f00 	cmp.w	r9, #0
 8007e58:	d020      	beq.n	8007e9c <__multiply+0x134>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	4647      	mov	r7, r8
 8007e5e:	46a4      	mov	ip, r4
 8007e60:	f04f 0a00 	mov.w	sl, #0
 8007e64:	f8b7 b000 	ldrh.w	fp, [r7]
 8007e68:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007e6c:	fb09 220b 	mla	r2, r9, fp, r2
 8007e70:	4452      	add	r2, sl
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e78:	f84c 3b04 	str.w	r3, [ip], #4
 8007e7c:	f857 3b04 	ldr.w	r3, [r7], #4
 8007e80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e84:	f8bc 3000 	ldrh.w	r3, [ip]
 8007e88:	fb09 330a 	mla	r3, r9, sl, r3
 8007e8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007e90:	42bd      	cmp	r5, r7
 8007e92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e96:	d8e5      	bhi.n	8007e64 <__multiply+0xfc>
 8007e98:	9a01      	ldr	r2, [sp, #4]
 8007e9a:	50a3      	str	r3, [r4, r2]
 8007e9c:	3404      	adds	r4, #4
 8007e9e:	e79f      	b.n	8007de0 <__multiply+0x78>
 8007ea0:	3e01      	subs	r6, #1
 8007ea2:	e7a1      	b.n	8007de8 <__multiply+0x80>
 8007ea4:	08008ae0 	.word	0x08008ae0
 8007ea8:	08008af1 	.word	0x08008af1

08007eac <__pow5mult>:
 8007eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	f012 0203 	ands.w	r2, r2, #3
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	460e      	mov	r6, r1
 8007eba:	d007      	beq.n	8007ecc <__pow5mult+0x20>
 8007ebc:	4c25      	ldr	r4, [pc, #148]	@ (8007f54 <__pow5mult+0xa8>)
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ec6:	f7ff fea7 	bl	8007c18 <__multadd>
 8007eca:	4606      	mov	r6, r0
 8007ecc:	10ad      	asrs	r5, r5, #2
 8007ece:	d03d      	beq.n	8007f4c <__pow5mult+0xa0>
 8007ed0:	69fc      	ldr	r4, [r7, #28]
 8007ed2:	b97c      	cbnz	r4, 8007ef4 <__pow5mult+0x48>
 8007ed4:	2010      	movs	r0, #16
 8007ed6:	f7ff fd87 	bl	80079e8 <malloc>
 8007eda:	4602      	mov	r2, r0
 8007edc:	61f8      	str	r0, [r7, #28]
 8007ede:	b928      	cbnz	r0, 8007eec <__pow5mult+0x40>
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f58 <__pow5mult+0xac>)
 8007ee2:	481e      	ldr	r0, [pc, #120]	@ (8007f5c <__pow5mult+0xb0>)
 8007ee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ee8:	f000 fc4e 	bl	8008788 <__assert_func>
 8007eec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef0:	6004      	str	r4, [r0, #0]
 8007ef2:	60c4      	str	r4, [r0, #12]
 8007ef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007efc:	b94c      	cbnz	r4, 8007f12 <__pow5mult+0x66>
 8007efe:	f240 2171 	movw	r1, #625	@ 0x271
 8007f02:	4638      	mov	r0, r7
 8007f04:	f7ff ff1a 	bl	8007d3c <__i2b>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f0e:	4604      	mov	r4, r0
 8007f10:	6003      	str	r3, [r0, #0]
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	07eb      	lsls	r3, r5, #31
 8007f18:	d50a      	bpl.n	8007f30 <__pow5mult+0x84>
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff ff22 	bl	8007d68 <__multiply>
 8007f24:	4631      	mov	r1, r6
 8007f26:	4680      	mov	r8, r0
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff fe53 	bl	8007bd4 <_Bfree>
 8007f2e:	4646      	mov	r6, r8
 8007f30:	106d      	asrs	r5, r5, #1
 8007f32:	d00b      	beq.n	8007f4c <__pow5mult+0xa0>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	b938      	cbnz	r0, 8007f48 <__pow5mult+0x9c>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ff13 	bl	8007d68 <__multiply>
 8007f42:	6020      	str	r0, [r4, #0]
 8007f44:	f8c0 9000 	str.w	r9, [r0]
 8007f48:	4604      	mov	r4, r0
 8007f4a:	e7e4      	b.n	8007f16 <__pow5mult+0x6a>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f52:	bf00      	nop
 8007f54:	08008ba4 	.word	0x08008ba4
 8007f58:	08008a71 	.word	0x08008a71
 8007f5c:	08008af1 	.word	0x08008af1

08007f60 <__lshift>:
 8007f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f64:	460c      	mov	r4, r1
 8007f66:	6849      	ldr	r1, [r1, #4]
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	4607      	mov	r7, r0
 8007f72:	4691      	mov	r9, r2
 8007f74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f78:	f108 0601 	add.w	r6, r8, #1
 8007f7c:	42b3      	cmp	r3, r6
 8007f7e:	db0b      	blt.n	8007f98 <__lshift+0x38>
 8007f80:	4638      	mov	r0, r7
 8007f82:	f7ff fde7 	bl	8007b54 <_Balloc>
 8007f86:	4605      	mov	r5, r0
 8007f88:	b948      	cbnz	r0, 8007f9e <__lshift+0x3e>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b28      	ldr	r3, [pc, #160]	@ (8008030 <__lshift+0xd0>)
 8007f8e:	4829      	ldr	r0, [pc, #164]	@ (8008034 <__lshift+0xd4>)
 8007f90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f94:	f000 fbf8 	bl	8008788 <__assert_func>
 8007f98:	3101      	adds	r1, #1
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	e7ee      	b.n	8007f7c <__lshift+0x1c>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f100 0114 	add.w	r1, r0, #20
 8007fa4:	f100 0210 	add.w	r2, r0, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	4553      	cmp	r3, sl
 8007fac:	db33      	blt.n	8008016 <__lshift+0xb6>
 8007fae:	6920      	ldr	r0, [r4, #16]
 8007fb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fb4:	f104 0314 	add.w	r3, r4, #20
 8007fb8:	f019 091f 	ands.w	r9, r9, #31
 8007fbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fc4:	d02b      	beq.n	800801e <__lshift+0xbe>
 8007fc6:	f1c9 0e20 	rsb	lr, r9, #32
 8007fca:	468a      	mov	sl, r1
 8007fcc:	2200      	movs	r2, #0
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	fa00 f009 	lsl.w	r0, r0, r9
 8007fd4:	4310      	orrs	r0, r2
 8007fd6:	f84a 0b04 	str.w	r0, [sl], #4
 8007fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fde:	459c      	cmp	ip, r3
 8007fe0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fe4:	d8f3      	bhi.n	8007fce <__lshift+0x6e>
 8007fe6:	ebac 0304 	sub.w	r3, ip, r4
 8007fea:	3b15      	subs	r3, #21
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	f104 0015 	add.w	r0, r4, #21
 8007ff6:	4560      	cmp	r0, ip
 8007ff8:	bf88      	it	hi
 8007ffa:	2304      	movhi	r3, #4
 8007ffc:	50ca      	str	r2, [r1, r3]
 8007ffe:	b10a      	cbz	r2, 8008004 <__lshift+0xa4>
 8008000:	f108 0602 	add.w	r6, r8, #2
 8008004:	3e01      	subs	r6, #1
 8008006:	4638      	mov	r0, r7
 8008008:	612e      	str	r6, [r5, #16]
 800800a:	4621      	mov	r1, r4
 800800c:	f7ff fde2 	bl	8007bd4 <_Bfree>
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	f842 0f04 	str.w	r0, [r2, #4]!
 800801a:	3301      	adds	r3, #1
 800801c:	e7c5      	b.n	8007faa <__lshift+0x4a>
 800801e:	3904      	subs	r1, #4
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	f841 2f04 	str.w	r2, [r1, #4]!
 8008028:	459c      	cmp	ip, r3
 800802a:	d8f9      	bhi.n	8008020 <__lshift+0xc0>
 800802c:	e7ea      	b.n	8008004 <__lshift+0xa4>
 800802e:	bf00      	nop
 8008030:	08008ae0 	.word	0x08008ae0
 8008034:	08008af1 	.word	0x08008af1

08008038 <__mcmp>:
 8008038:	690a      	ldr	r2, [r1, #16]
 800803a:	4603      	mov	r3, r0
 800803c:	6900      	ldr	r0, [r0, #16]
 800803e:	1a80      	subs	r0, r0, r2
 8008040:	b530      	push	{r4, r5, lr}
 8008042:	d10e      	bne.n	8008062 <__mcmp+0x2a>
 8008044:	3314      	adds	r3, #20
 8008046:	3114      	adds	r1, #20
 8008048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800804c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008058:	4295      	cmp	r5, r2
 800805a:	d003      	beq.n	8008064 <__mcmp+0x2c>
 800805c:	d205      	bcs.n	800806a <__mcmp+0x32>
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	bd30      	pop	{r4, r5, pc}
 8008064:	42a3      	cmp	r3, r4
 8008066:	d3f3      	bcc.n	8008050 <__mcmp+0x18>
 8008068:	e7fb      	b.n	8008062 <__mcmp+0x2a>
 800806a:	2001      	movs	r0, #1
 800806c:	e7f9      	b.n	8008062 <__mcmp+0x2a>
	...

08008070 <__mdiff>:
 8008070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4689      	mov	r9, r1
 8008076:	4606      	mov	r6, r0
 8008078:	4611      	mov	r1, r2
 800807a:	4648      	mov	r0, r9
 800807c:	4614      	mov	r4, r2
 800807e:	f7ff ffdb 	bl	8008038 <__mcmp>
 8008082:	1e05      	subs	r5, r0, #0
 8008084:	d112      	bne.n	80080ac <__mdiff+0x3c>
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff fd63 	bl	8007b54 <_Balloc>
 800808e:	4602      	mov	r2, r0
 8008090:	b928      	cbnz	r0, 800809e <__mdiff+0x2e>
 8008092:	4b3f      	ldr	r3, [pc, #252]	@ (8008190 <__mdiff+0x120>)
 8008094:	f240 2137 	movw	r1, #567	@ 0x237
 8008098:	483e      	ldr	r0, [pc, #248]	@ (8008194 <__mdiff+0x124>)
 800809a:	f000 fb75 	bl	8008788 <__assert_func>
 800809e:	2301      	movs	r3, #1
 80080a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080a4:	4610      	mov	r0, r2
 80080a6:	b003      	add	sp, #12
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	bfbc      	itt	lt
 80080ae:	464b      	movlt	r3, r9
 80080b0:	46a1      	movlt	r9, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080b8:	bfba      	itte	lt
 80080ba:	461c      	movlt	r4, r3
 80080bc:	2501      	movlt	r5, #1
 80080be:	2500      	movge	r5, #0
 80080c0:	f7ff fd48 	bl	8007b54 <_Balloc>
 80080c4:	4602      	mov	r2, r0
 80080c6:	b918      	cbnz	r0, 80080d0 <__mdiff+0x60>
 80080c8:	4b31      	ldr	r3, [pc, #196]	@ (8008190 <__mdiff+0x120>)
 80080ca:	f240 2145 	movw	r1, #581	@ 0x245
 80080ce:	e7e3      	b.n	8008098 <__mdiff+0x28>
 80080d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080d4:	6926      	ldr	r6, [r4, #16]
 80080d6:	60c5      	str	r5, [r0, #12]
 80080d8:	f109 0310 	add.w	r3, r9, #16
 80080dc:	f109 0514 	add.w	r5, r9, #20
 80080e0:	f104 0e14 	add.w	lr, r4, #20
 80080e4:	f100 0b14 	add.w	fp, r0, #20
 80080e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	46d9      	mov	r9, fp
 80080f4:	f04f 0c00 	mov.w	ip, #0
 80080f8:	9b01      	ldr	r3, [sp, #4]
 80080fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	fa1f f38a 	uxth.w	r3, sl
 8008108:	4619      	mov	r1, r3
 800810a:	b283      	uxth	r3, r0
 800810c:	1acb      	subs	r3, r1, r3
 800810e:	0c00      	lsrs	r0, r0, #16
 8008110:	4463      	add	r3, ip
 8008112:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008116:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800811a:	b29b      	uxth	r3, r3
 800811c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008120:	4576      	cmp	r6, lr
 8008122:	f849 3b04 	str.w	r3, [r9], #4
 8008126:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800812a:	d8e5      	bhi.n	80080f8 <__mdiff+0x88>
 800812c:	1b33      	subs	r3, r6, r4
 800812e:	3b15      	subs	r3, #21
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	3415      	adds	r4, #21
 8008136:	3304      	adds	r3, #4
 8008138:	42a6      	cmp	r6, r4
 800813a:	bf38      	it	cc
 800813c:	2304      	movcc	r3, #4
 800813e:	441d      	add	r5, r3
 8008140:	445b      	add	r3, fp
 8008142:	461e      	mov	r6, r3
 8008144:	462c      	mov	r4, r5
 8008146:	4544      	cmp	r4, r8
 8008148:	d30e      	bcc.n	8008168 <__mdiff+0xf8>
 800814a:	f108 0103 	add.w	r1, r8, #3
 800814e:	1b49      	subs	r1, r1, r5
 8008150:	f021 0103 	bic.w	r1, r1, #3
 8008154:	3d03      	subs	r5, #3
 8008156:	45a8      	cmp	r8, r5
 8008158:	bf38      	it	cc
 800815a:	2100      	movcc	r1, #0
 800815c:	440b      	add	r3, r1
 800815e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008162:	b191      	cbz	r1, 800818a <__mdiff+0x11a>
 8008164:	6117      	str	r7, [r2, #16]
 8008166:	e79d      	b.n	80080a4 <__mdiff+0x34>
 8008168:	f854 1b04 	ldr.w	r1, [r4], #4
 800816c:	46e6      	mov	lr, ip
 800816e:	0c08      	lsrs	r0, r1, #16
 8008170:	fa1c fc81 	uxtah	ip, ip, r1
 8008174:	4471      	add	r1, lr
 8008176:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800817a:	b289      	uxth	r1, r1
 800817c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008180:	f846 1b04 	str.w	r1, [r6], #4
 8008184:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008188:	e7dd      	b.n	8008146 <__mdiff+0xd6>
 800818a:	3f01      	subs	r7, #1
 800818c:	e7e7      	b.n	800815e <__mdiff+0xee>
 800818e:	bf00      	nop
 8008190:	08008ae0 	.word	0x08008ae0
 8008194:	08008af1 	.word	0x08008af1

08008198 <__d2b>:
 8008198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800819c:	460f      	mov	r7, r1
 800819e:	2101      	movs	r1, #1
 80081a0:	ec59 8b10 	vmov	r8, r9, d0
 80081a4:	4616      	mov	r6, r2
 80081a6:	f7ff fcd5 	bl	8007b54 <_Balloc>
 80081aa:	4604      	mov	r4, r0
 80081ac:	b930      	cbnz	r0, 80081bc <__d2b+0x24>
 80081ae:	4602      	mov	r2, r0
 80081b0:	4b23      	ldr	r3, [pc, #140]	@ (8008240 <__d2b+0xa8>)
 80081b2:	4824      	ldr	r0, [pc, #144]	@ (8008244 <__d2b+0xac>)
 80081b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80081b8:	f000 fae6 	bl	8008788 <__assert_func>
 80081bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081c4:	b10d      	cbz	r5, 80081ca <__d2b+0x32>
 80081c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	f1b8 0300 	subs.w	r3, r8, #0
 80081d0:	d023      	beq.n	800821a <__d2b+0x82>
 80081d2:	4668      	mov	r0, sp
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	f7ff fd84 	bl	8007ce2 <__lo0bits>
 80081da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081de:	b1d0      	cbz	r0, 8008216 <__d2b+0x7e>
 80081e0:	f1c0 0320 	rsb	r3, r0, #32
 80081e4:	fa02 f303 	lsl.w	r3, r2, r3
 80081e8:	430b      	orrs	r3, r1
 80081ea:	40c2      	lsrs	r2, r0
 80081ec:	6163      	str	r3, [r4, #20]
 80081ee:	9201      	str	r2, [sp, #4]
 80081f0:	9b01      	ldr	r3, [sp, #4]
 80081f2:	61a3      	str	r3, [r4, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bf0c      	ite	eq
 80081f8:	2201      	moveq	r2, #1
 80081fa:	2202      	movne	r2, #2
 80081fc:	6122      	str	r2, [r4, #16]
 80081fe:	b1a5      	cbz	r5, 800822a <__d2b+0x92>
 8008200:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008204:	4405      	add	r5, r0
 8008206:	603d      	str	r5, [r7, #0]
 8008208:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800820c:	6030      	str	r0, [r6, #0]
 800820e:	4620      	mov	r0, r4
 8008210:	b003      	add	sp, #12
 8008212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008216:	6161      	str	r1, [r4, #20]
 8008218:	e7ea      	b.n	80081f0 <__d2b+0x58>
 800821a:	a801      	add	r0, sp, #4
 800821c:	f7ff fd61 	bl	8007ce2 <__lo0bits>
 8008220:	9b01      	ldr	r3, [sp, #4]
 8008222:	6163      	str	r3, [r4, #20]
 8008224:	3020      	adds	r0, #32
 8008226:	2201      	movs	r2, #1
 8008228:	e7e8      	b.n	80081fc <__d2b+0x64>
 800822a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800822e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008232:	6038      	str	r0, [r7, #0]
 8008234:	6918      	ldr	r0, [r3, #16]
 8008236:	f7ff fd35 	bl	8007ca4 <__hi0bits>
 800823a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800823e:	e7e5      	b.n	800820c <__d2b+0x74>
 8008240:	08008ae0 	.word	0x08008ae0
 8008244:	08008af1 	.word	0x08008af1

08008248 <__sfputc_r>:
 8008248:	6893      	ldr	r3, [r2, #8]
 800824a:	3b01      	subs	r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	b410      	push	{r4}
 8008250:	6093      	str	r3, [r2, #8]
 8008252:	da08      	bge.n	8008266 <__sfputc_r+0x1e>
 8008254:	6994      	ldr	r4, [r2, #24]
 8008256:	42a3      	cmp	r3, r4
 8008258:	db01      	blt.n	800825e <__sfputc_r+0x16>
 800825a:	290a      	cmp	r1, #10
 800825c:	d103      	bne.n	8008266 <__sfputc_r+0x1e>
 800825e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008262:	f000 b9df 	b.w	8008624 <__swbuf_r>
 8008266:	6813      	ldr	r3, [r2, #0]
 8008268:	1c58      	adds	r0, r3, #1
 800826a:	6010      	str	r0, [r2, #0]
 800826c:	7019      	strb	r1, [r3, #0]
 800826e:	4608      	mov	r0, r1
 8008270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008274:	4770      	bx	lr

08008276 <__sfputs_r>:
 8008276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008278:	4606      	mov	r6, r0
 800827a:	460f      	mov	r7, r1
 800827c:	4614      	mov	r4, r2
 800827e:	18d5      	adds	r5, r2, r3
 8008280:	42ac      	cmp	r4, r5
 8008282:	d101      	bne.n	8008288 <__sfputs_r+0x12>
 8008284:	2000      	movs	r0, #0
 8008286:	e007      	b.n	8008298 <__sfputs_r+0x22>
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	463a      	mov	r2, r7
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff ffda 	bl	8008248 <__sfputc_r>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d1f3      	bne.n	8008280 <__sfputs_r+0xa>
 8008298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800829c <_vfiprintf_r>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	460d      	mov	r5, r1
 80082a2:	b09d      	sub	sp, #116	@ 0x74
 80082a4:	4614      	mov	r4, r2
 80082a6:	4698      	mov	r8, r3
 80082a8:	4606      	mov	r6, r0
 80082aa:	b118      	cbz	r0, 80082b4 <_vfiprintf_r+0x18>
 80082ac:	6a03      	ldr	r3, [r0, #32]
 80082ae:	b90b      	cbnz	r3, 80082b4 <_vfiprintf_r+0x18>
 80082b0:	f7fe fc5c 	bl	8006b6c <__sinit>
 80082b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082b6:	07d9      	lsls	r1, r3, #31
 80082b8:	d405      	bmi.n	80082c6 <_vfiprintf_r+0x2a>
 80082ba:	89ab      	ldrh	r3, [r5, #12]
 80082bc:	059a      	lsls	r2, r3, #22
 80082be:	d402      	bmi.n	80082c6 <_vfiprintf_r+0x2a>
 80082c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082c2:	f7fe fd5c 	bl	8006d7e <__retarget_lock_acquire_recursive>
 80082c6:	89ab      	ldrh	r3, [r5, #12]
 80082c8:	071b      	lsls	r3, r3, #28
 80082ca:	d501      	bpl.n	80082d0 <_vfiprintf_r+0x34>
 80082cc:	692b      	ldr	r3, [r5, #16]
 80082ce:	b99b      	cbnz	r3, 80082f8 <_vfiprintf_r+0x5c>
 80082d0:	4629      	mov	r1, r5
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 f9e4 	bl	80086a0 <__swsetup_r>
 80082d8:	b170      	cbz	r0, 80082f8 <_vfiprintf_r+0x5c>
 80082da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082dc:	07dc      	lsls	r4, r3, #31
 80082de:	d504      	bpl.n	80082ea <_vfiprintf_r+0x4e>
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295
 80082e4:	b01d      	add	sp, #116	@ 0x74
 80082e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	0598      	lsls	r0, r3, #22
 80082ee:	d4f7      	bmi.n	80082e0 <_vfiprintf_r+0x44>
 80082f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082f2:	f7fe fd45 	bl	8006d80 <__retarget_lock_release_recursive>
 80082f6:	e7f3      	b.n	80082e0 <_vfiprintf_r+0x44>
 80082f8:	2300      	movs	r3, #0
 80082fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fc:	2320      	movs	r3, #32
 80082fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008302:	f8cd 800c 	str.w	r8, [sp, #12]
 8008306:	2330      	movs	r3, #48	@ 0x30
 8008308:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80084b8 <_vfiprintf_r+0x21c>
 800830c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008310:	f04f 0901 	mov.w	r9, #1
 8008314:	4623      	mov	r3, r4
 8008316:	469a      	mov	sl, r3
 8008318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831c:	b10a      	cbz	r2, 8008322 <_vfiprintf_r+0x86>
 800831e:	2a25      	cmp	r2, #37	@ 0x25
 8008320:	d1f9      	bne.n	8008316 <_vfiprintf_r+0x7a>
 8008322:	ebba 0b04 	subs.w	fp, sl, r4
 8008326:	d00b      	beq.n	8008340 <_vfiprintf_r+0xa4>
 8008328:	465b      	mov	r3, fp
 800832a:	4622      	mov	r2, r4
 800832c:	4629      	mov	r1, r5
 800832e:	4630      	mov	r0, r6
 8008330:	f7ff ffa1 	bl	8008276 <__sfputs_r>
 8008334:	3001      	adds	r0, #1
 8008336:	f000 80a7 	beq.w	8008488 <_vfiprintf_r+0x1ec>
 800833a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800833c:	445a      	add	r2, fp
 800833e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008340:	f89a 3000 	ldrb.w	r3, [sl]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 809f 	beq.w	8008488 <_vfiprintf_r+0x1ec>
 800834a:	2300      	movs	r3, #0
 800834c:	f04f 32ff 	mov.w	r2, #4294967295
 8008350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008354:	f10a 0a01 	add.w	sl, sl, #1
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008360:	931a      	str	r3, [sp, #104]	@ 0x68
 8008362:	4654      	mov	r4, sl
 8008364:	2205      	movs	r2, #5
 8008366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800836a:	4853      	ldr	r0, [pc, #332]	@ (80084b8 <_vfiprintf_r+0x21c>)
 800836c:	f7f7 ff68 	bl	8000240 <memchr>
 8008370:	9a04      	ldr	r2, [sp, #16]
 8008372:	b9d8      	cbnz	r0, 80083ac <_vfiprintf_r+0x110>
 8008374:	06d1      	lsls	r1, r2, #27
 8008376:	bf44      	itt	mi
 8008378:	2320      	movmi	r3, #32
 800837a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800837e:	0713      	lsls	r3, r2, #28
 8008380:	bf44      	itt	mi
 8008382:	232b      	movmi	r3, #43	@ 0x2b
 8008384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008388:	f89a 3000 	ldrb.w	r3, [sl]
 800838c:	2b2a      	cmp	r3, #42	@ 0x2a
 800838e:	d015      	beq.n	80083bc <_vfiprintf_r+0x120>
 8008390:	9a07      	ldr	r2, [sp, #28]
 8008392:	4654      	mov	r4, sl
 8008394:	2000      	movs	r0, #0
 8008396:	f04f 0c0a 	mov.w	ip, #10
 800839a:	4621      	mov	r1, r4
 800839c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a0:	3b30      	subs	r3, #48	@ 0x30
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	d94b      	bls.n	800843e <_vfiprintf_r+0x1a2>
 80083a6:	b1b0      	cbz	r0, 80083d6 <_vfiprintf_r+0x13a>
 80083a8:	9207      	str	r2, [sp, #28]
 80083aa:	e014      	b.n	80083d6 <_vfiprintf_r+0x13a>
 80083ac:	eba0 0308 	sub.w	r3, r0, r8
 80083b0:	fa09 f303 	lsl.w	r3, r9, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	46a2      	mov	sl, r4
 80083ba:	e7d2      	b.n	8008362 <_vfiprintf_r+0xc6>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	1d19      	adds	r1, r3, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	9103      	str	r1, [sp, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bfbb      	ittet	lt
 80083c8:	425b      	neglt	r3, r3
 80083ca:	f042 0202 	orrlt.w	r2, r2, #2
 80083ce:	9307      	strge	r3, [sp, #28]
 80083d0:	9307      	strlt	r3, [sp, #28]
 80083d2:	bfb8      	it	lt
 80083d4:	9204      	strlt	r2, [sp, #16]
 80083d6:	7823      	ldrb	r3, [r4, #0]
 80083d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80083da:	d10a      	bne.n	80083f2 <_vfiprintf_r+0x156>
 80083dc:	7863      	ldrb	r3, [r4, #1]
 80083de:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e0:	d132      	bne.n	8008448 <_vfiprintf_r+0x1ac>
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	9203      	str	r2, [sp, #12]
 80083ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ee:	3402      	adds	r4, #2
 80083f0:	9305      	str	r3, [sp, #20]
 80083f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084c8 <_vfiprintf_r+0x22c>
 80083f6:	7821      	ldrb	r1, [r4, #0]
 80083f8:	2203      	movs	r2, #3
 80083fa:	4650      	mov	r0, sl
 80083fc:	f7f7 ff20 	bl	8000240 <memchr>
 8008400:	b138      	cbz	r0, 8008412 <_vfiprintf_r+0x176>
 8008402:	9b04      	ldr	r3, [sp, #16]
 8008404:	eba0 000a 	sub.w	r0, r0, sl
 8008408:	2240      	movs	r2, #64	@ 0x40
 800840a:	4082      	lsls	r2, r0
 800840c:	4313      	orrs	r3, r2
 800840e:	3401      	adds	r4, #1
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008416:	4829      	ldr	r0, [pc, #164]	@ (80084bc <_vfiprintf_r+0x220>)
 8008418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800841c:	2206      	movs	r2, #6
 800841e:	f7f7 ff0f 	bl	8000240 <memchr>
 8008422:	2800      	cmp	r0, #0
 8008424:	d03f      	beq.n	80084a6 <_vfiprintf_r+0x20a>
 8008426:	4b26      	ldr	r3, [pc, #152]	@ (80084c0 <_vfiprintf_r+0x224>)
 8008428:	bb1b      	cbnz	r3, 8008472 <_vfiprintf_r+0x1d6>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	3307      	adds	r3, #7
 800842e:	f023 0307 	bic.w	r3, r3, #7
 8008432:	3308      	adds	r3, #8
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008438:	443b      	add	r3, r7
 800843a:	9309      	str	r3, [sp, #36]	@ 0x24
 800843c:	e76a      	b.n	8008314 <_vfiprintf_r+0x78>
 800843e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008442:	460c      	mov	r4, r1
 8008444:	2001      	movs	r0, #1
 8008446:	e7a8      	b.n	800839a <_vfiprintf_r+0xfe>
 8008448:	2300      	movs	r3, #0
 800844a:	3401      	adds	r4, #1
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	4619      	mov	r1, r3
 8008450:	f04f 0c0a 	mov.w	ip, #10
 8008454:	4620      	mov	r0, r4
 8008456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845a:	3a30      	subs	r2, #48	@ 0x30
 800845c:	2a09      	cmp	r2, #9
 800845e:	d903      	bls.n	8008468 <_vfiprintf_r+0x1cc>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0c6      	beq.n	80083f2 <_vfiprintf_r+0x156>
 8008464:	9105      	str	r1, [sp, #20]
 8008466:	e7c4      	b.n	80083f2 <_vfiprintf_r+0x156>
 8008468:	fb0c 2101 	mla	r1, ip, r1, r2
 800846c:	4604      	mov	r4, r0
 800846e:	2301      	movs	r3, #1
 8008470:	e7f0      	b.n	8008454 <_vfiprintf_r+0x1b8>
 8008472:	ab03      	add	r3, sp, #12
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	462a      	mov	r2, r5
 8008478:	4b12      	ldr	r3, [pc, #72]	@ (80084c4 <_vfiprintf_r+0x228>)
 800847a:	a904      	add	r1, sp, #16
 800847c:	4630      	mov	r0, r6
 800847e:	f7fd ff43 	bl	8006308 <_printf_float>
 8008482:	4607      	mov	r7, r0
 8008484:	1c78      	adds	r0, r7, #1
 8008486:	d1d6      	bne.n	8008436 <_vfiprintf_r+0x19a>
 8008488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800848a:	07d9      	lsls	r1, r3, #31
 800848c:	d405      	bmi.n	800849a <_vfiprintf_r+0x1fe>
 800848e:	89ab      	ldrh	r3, [r5, #12]
 8008490:	059a      	lsls	r2, r3, #22
 8008492:	d402      	bmi.n	800849a <_vfiprintf_r+0x1fe>
 8008494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008496:	f7fe fc73 	bl	8006d80 <__retarget_lock_release_recursive>
 800849a:	89ab      	ldrh	r3, [r5, #12]
 800849c:	065b      	lsls	r3, r3, #25
 800849e:	f53f af1f 	bmi.w	80082e0 <_vfiprintf_r+0x44>
 80084a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084a4:	e71e      	b.n	80082e4 <_vfiprintf_r+0x48>
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	462a      	mov	r2, r5
 80084ac:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <_vfiprintf_r+0x228>)
 80084ae:	a904      	add	r1, sp, #16
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7fe f9b1 	bl	8006818 <_printf_i>
 80084b6:	e7e4      	b.n	8008482 <_vfiprintf_r+0x1e6>
 80084b8:	08008b4a 	.word	0x08008b4a
 80084bc:	08008b54 	.word	0x08008b54
 80084c0:	08006309 	.word	0x08006309
 80084c4:	08008277 	.word	0x08008277
 80084c8:	08008b50 	.word	0x08008b50

080084cc <__sflush_r>:
 80084cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d4:	0716      	lsls	r6, r2, #28
 80084d6:	4605      	mov	r5, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	d454      	bmi.n	8008586 <__sflush_r+0xba>
 80084dc:	684b      	ldr	r3, [r1, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dc02      	bgt.n	80084e8 <__sflush_r+0x1c>
 80084e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd48      	ble.n	800857a <__sflush_r+0xae>
 80084e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	d045      	beq.n	800857a <__sflush_r+0xae>
 80084ee:	2300      	movs	r3, #0
 80084f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084f4:	682f      	ldr	r7, [r5, #0]
 80084f6:	6a21      	ldr	r1, [r4, #32]
 80084f8:	602b      	str	r3, [r5, #0]
 80084fa:	d030      	beq.n	800855e <__sflush_r+0x92>
 80084fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	0759      	lsls	r1, r3, #29
 8008502:	d505      	bpl.n	8008510 <__sflush_r+0x44>
 8008504:	6863      	ldr	r3, [r4, #4]
 8008506:	1ad2      	subs	r2, r2, r3
 8008508:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800850a:	b10b      	cbz	r3, 8008510 <__sflush_r+0x44>
 800850c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	2300      	movs	r3, #0
 8008512:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008514:	6a21      	ldr	r1, [r4, #32]
 8008516:	4628      	mov	r0, r5
 8008518:	47b0      	blx	r6
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	d106      	bne.n	800852e <__sflush_r+0x62>
 8008520:	6829      	ldr	r1, [r5, #0]
 8008522:	291d      	cmp	r1, #29
 8008524:	d82b      	bhi.n	800857e <__sflush_r+0xb2>
 8008526:	4a2a      	ldr	r2, [pc, #168]	@ (80085d0 <__sflush_r+0x104>)
 8008528:	40ca      	lsrs	r2, r1
 800852a:	07d6      	lsls	r6, r2, #31
 800852c:	d527      	bpl.n	800857e <__sflush_r+0xb2>
 800852e:	2200      	movs	r2, #0
 8008530:	6062      	str	r2, [r4, #4]
 8008532:	04d9      	lsls	r1, r3, #19
 8008534:	6922      	ldr	r2, [r4, #16]
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	d504      	bpl.n	8008544 <__sflush_r+0x78>
 800853a:	1c42      	adds	r2, r0, #1
 800853c:	d101      	bne.n	8008542 <__sflush_r+0x76>
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	b903      	cbnz	r3, 8008544 <__sflush_r+0x78>
 8008542:	6560      	str	r0, [r4, #84]	@ 0x54
 8008544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008546:	602f      	str	r7, [r5, #0]
 8008548:	b1b9      	cbz	r1, 800857a <__sflush_r+0xae>
 800854a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800854e:	4299      	cmp	r1, r3
 8008550:	d002      	beq.n	8008558 <__sflush_r+0x8c>
 8008552:	4628      	mov	r0, r5
 8008554:	f7ff f9fe 	bl	8007954 <_free_r>
 8008558:	2300      	movs	r3, #0
 800855a:	6363      	str	r3, [r4, #52]	@ 0x34
 800855c:	e00d      	b.n	800857a <__sflush_r+0xae>
 800855e:	2301      	movs	r3, #1
 8008560:	4628      	mov	r0, r5
 8008562:	47b0      	blx	r6
 8008564:	4602      	mov	r2, r0
 8008566:	1c50      	adds	r0, r2, #1
 8008568:	d1c9      	bne.n	80084fe <__sflush_r+0x32>
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0c6      	beq.n	80084fe <__sflush_r+0x32>
 8008570:	2b1d      	cmp	r3, #29
 8008572:	d001      	beq.n	8008578 <__sflush_r+0xac>
 8008574:	2b16      	cmp	r3, #22
 8008576:	d11e      	bne.n	80085b6 <__sflush_r+0xea>
 8008578:	602f      	str	r7, [r5, #0]
 800857a:	2000      	movs	r0, #0
 800857c:	e022      	b.n	80085c4 <__sflush_r+0xf8>
 800857e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008582:	b21b      	sxth	r3, r3
 8008584:	e01b      	b.n	80085be <__sflush_r+0xf2>
 8008586:	690f      	ldr	r7, [r1, #16]
 8008588:	2f00      	cmp	r7, #0
 800858a:	d0f6      	beq.n	800857a <__sflush_r+0xae>
 800858c:	0793      	lsls	r3, r2, #30
 800858e:	680e      	ldr	r6, [r1, #0]
 8008590:	bf08      	it	eq
 8008592:	694b      	ldreq	r3, [r1, #20]
 8008594:	600f      	str	r7, [r1, #0]
 8008596:	bf18      	it	ne
 8008598:	2300      	movne	r3, #0
 800859a:	eba6 0807 	sub.w	r8, r6, r7
 800859e:	608b      	str	r3, [r1, #8]
 80085a0:	f1b8 0f00 	cmp.w	r8, #0
 80085a4:	dde9      	ble.n	800857a <__sflush_r+0xae>
 80085a6:	6a21      	ldr	r1, [r4, #32]
 80085a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085aa:	4643      	mov	r3, r8
 80085ac:	463a      	mov	r2, r7
 80085ae:	4628      	mov	r0, r5
 80085b0:	47b0      	blx	r6
 80085b2:	2800      	cmp	r0, #0
 80085b4:	dc08      	bgt.n	80085c8 <__sflush_r+0xfc>
 80085b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c8:	4407      	add	r7, r0
 80085ca:	eba8 0800 	sub.w	r8, r8, r0
 80085ce:	e7e7      	b.n	80085a0 <__sflush_r+0xd4>
 80085d0:	20400001 	.word	0x20400001

080085d4 <_fflush_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	690b      	ldr	r3, [r1, #16]
 80085d8:	4605      	mov	r5, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b913      	cbnz	r3, 80085e4 <_fflush_r+0x10>
 80085de:	2500      	movs	r5, #0
 80085e0:	4628      	mov	r0, r5
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	b118      	cbz	r0, 80085ee <_fflush_r+0x1a>
 80085e6:	6a03      	ldr	r3, [r0, #32]
 80085e8:	b90b      	cbnz	r3, 80085ee <_fflush_r+0x1a>
 80085ea:	f7fe fabf 	bl	8006b6c <__sinit>
 80085ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f3      	beq.n	80085de <_fflush_r+0xa>
 80085f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085f8:	07d0      	lsls	r0, r2, #31
 80085fa:	d404      	bmi.n	8008606 <_fflush_r+0x32>
 80085fc:	0599      	lsls	r1, r3, #22
 80085fe:	d402      	bmi.n	8008606 <_fflush_r+0x32>
 8008600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008602:	f7fe fbbc 	bl	8006d7e <__retarget_lock_acquire_recursive>
 8008606:	4628      	mov	r0, r5
 8008608:	4621      	mov	r1, r4
 800860a:	f7ff ff5f 	bl	80084cc <__sflush_r>
 800860e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008610:	07da      	lsls	r2, r3, #31
 8008612:	4605      	mov	r5, r0
 8008614:	d4e4      	bmi.n	80085e0 <_fflush_r+0xc>
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	059b      	lsls	r3, r3, #22
 800861a:	d4e1      	bmi.n	80085e0 <_fflush_r+0xc>
 800861c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861e:	f7fe fbaf 	bl	8006d80 <__retarget_lock_release_recursive>
 8008622:	e7dd      	b.n	80085e0 <_fflush_r+0xc>

08008624 <__swbuf_r>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	460e      	mov	r6, r1
 8008628:	4614      	mov	r4, r2
 800862a:	4605      	mov	r5, r0
 800862c:	b118      	cbz	r0, 8008636 <__swbuf_r+0x12>
 800862e:	6a03      	ldr	r3, [r0, #32]
 8008630:	b90b      	cbnz	r3, 8008636 <__swbuf_r+0x12>
 8008632:	f7fe fa9b 	bl	8006b6c <__sinit>
 8008636:	69a3      	ldr	r3, [r4, #24]
 8008638:	60a3      	str	r3, [r4, #8]
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	071a      	lsls	r2, r3, #28
 800863e:	d501      	bpl.n	8008644 <__swbuf_r+0x20>
 8008640:	6923      	ldr	r3, [r4, #16]
 8008642:	b943      	cbnz	r3, 8008656 <__swbuf_r+0x32>
 8008644:	4621      	mov	r1, r4
 8008646:	4628      	mov	r0, r5
 8008648:	f000 f82a 	bl	80086a0 <__swsetup_r>
 800864c:	b118      	cbz	r0, 8008656 <__swbuf_r+0x32>
 800864e:	f04f 37ff 	mov.w	r7, #4294967295
 8008652:	4638      	mov	r0, r7
 8008654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	6922      	ldr	r2, [r4, #16]
 800865a:	1a98      	subs	r0, r3, r2
 800865c:	6963      	ldr	r3, [r4, #20]
 800865e:	b2f6      	uxtb	r6, r6
 8008660:	4283      	cmp	r3, r0
 8008662:	4637      	mov	r7, r6
 8008664:	dc05      	bgt.n	8008672 <__swbuf_r+0x4e>
 8008666:	4621      	mov	r1, r4
 8008668:	4628      	mov	r0, r5
 800866a:	f7ff ffb3 	bl	80085d4 <_fflush_r>
 800866e:	2800      	cmp	r0, #0
 8008670:	d1ed      	bne.n	800864e <__swbuf_r+0x2a>
 8008672:	68a3      	ldr	r3, [r4, #8]
 8008674:	3b01      	subs	r3, #1
 8008676:	60a3      	str	r3, [r4, #8]
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	6022      	str	r2, [r4, #0]
 800867e:	701e      	strb	r6, [r3, #0]
 8008680:	6962      	ldr	r2, [r4, #20]
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	429a      	cmp	r2, r3
 8008686:	d004      	beq.n	8008692 <__swbuf_r+0x6e>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	07db      	lsls	r3, r3, #31
 800868c:	d5e1      	bpl.n	8008652 <__swbuf_r+0x2e>
 800868e:	2e0a      	cmp	r6, #10
 8008690:	d1df      	bne.n	8008652 <__swbuf_r+0x2e>
 8008692:	4621      	mov	r1, r4
 8008694:	4628      	mov	r0, r5
 8008696:	f7ff ff9d 	bl	80085d4 <_fflush_r>
 800869a:	2800      	cmp	r0, #0
 800869c:	d0d9      	beq.n	8008652 <__swbuf_r+0x2e>
 800869e:	e7d6      	b.n	800864e <__swbuf_r+0x2a>

080086a0 <__swsetup_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4b29      	ldr	r3, [pc, #164]	@ (8008748 <__swsetup_r+0xa8>)
 80086a4:	4605      	mov	r5, r0
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	460c      	mov	r4, r1
 80086aa:	b118      	cbz	r0, 80086b4 <__swsetup_r+0x14>
 80086ac:	6a03      	ldr	r3, [r0, #32]
 80086ae:	b90b      	cbnz	r3, 80086b4 <__swsetup_r+0x14>
 80086b0:	f7fe fa5c 	bl	8006b6c <__sinit>
 80086b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b8:	0719      	lsls	r1, r3, #28
 80086ba:	d422      	bmi.n	8008702 <__swsetup_r+0x62>
 80086bc:	06da      	lsls	r2, r3, #27
 80086be:	d407      	bmi.n	80086d0 <__swsetup_r+0x30>
 80086c0:	2209      	movs	r2, #9
 80086c2:	602a      	str	r2, [r5, #0]
 80086c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c8:	81a3      	strh	r3, [r4, #12]
 80086ca:	f04f 30ff 	mov.w	r0, #4294967295
 80086ce:	e033      	b.n	8008738 <__swsetup_r+0x98>
 80086d0:	0758      	lsls	r0, r3, #29
 80086d2:	d512      	bpl.n	80086fa <__swsetup_r+0x5a>
 80086d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086d6:	b141      	cbz	r1, 80086ea <__swsetup_r+0x4a>
 80086d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086dc:	4299      	cmp	r1, r3
 80086de:	d002      	beq.n	80086e6 <__swsetup_r+0x46>
 80086e0:	4628      	mov	r0, r5
 80086e2:	f7ff f937 	bl	8007954 <_free_r>
 80086e6:	2300      	movs	r3, #0
 80086e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	2300      	movs	r3, #0
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6923      	ldr	r3, [r4, #16]
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	f043 0308 	orr.w	r3, r3, #8
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	6923      	ldr	r3, [r4, #16]
 8008704:	b94b      	cbnz	r3, 800871a <__swsetup_r+0x7a>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800870c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008710:	d003      	beq.n	800871a <__swsetup_r+0x7a>
 8008712:	4621      	mov	r1, r4
 8008714:	4628      	mov	r0, r5
 8008716:	f000 f8c1 	bl	800889c <__smakebuf_r>
 800871a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871e:	f013 0201 	ands.w	r2, r3, #1
 8008722:	d00a      	beq.n	800873a <__swsetup_r+0x9a>
 8008724:	2200      	movs	r2, #0
 8008726:	60a2      	str	r2, [r4, #8]
 8008728:	6962      	ldr	r2, [r4, #20]
 800872a:	4252      	negs	r2, r2
 800872c:	61a2      	str	r2, [r4, #24]
 800872e:	6922      	ldr	r2, [r4, #16]
 8008730:	b942      	cbnz	r2, 8008744 <__swsetup_r+0xa4>
 8008732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008736:	d1c5      	bne.n	80086c4 <__swsetup_r+0x24>
 8008738:	bd38      	pop	{r3, r4, r5, pc}
 800873a:	0799      	lsls	r1, r3, #30
 800873c:	bf58      	it	pl
 800873e:	6962      	ldrpl	r2, [r4, #20]
 8008740:	60a2      	str	r2, [r4, #8]
 8008742:	e7f4      	b.n	800872e <__swsetup_r+0x8e>
 8008744:	2000      	movs	r0, #0
 8008746:	e7f7      	b.n	8008738 <__swsetup_r+0x98>
 8008748:	20000018 	.word	0x20000018

0800874c <_sbrk_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	@ (8008768 <_sbrk_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f8 fe5a 	bl	8001410 <_sbrk>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_sbrk_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_sbrk_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000cb4 	.word	0x20000cb4

0800876c <memcpy>:
 800876c:	440a      	add	r2, r1
 800876e:	4291      	cmp	r1, r2
 8008770:	f100 33ff 	add.w	r3, r0, #4294967295
 8008774:	d100      	bne.n	8008778 <memcpy+0xc>
 8008776:	4770      	bx	lr
 8008778:	b510      	push	{r4, lr}
 800877a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800877e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008782:	4291      	cmp	r1, r2
 8008784:	d1f9      	bne.n	800877a <memcpy+0xe>
 8008786:	bd10      	pop	{r4, pc}

08008788 <__assert_func>:
 8008788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800878a:	4614      	mov	r4, r2
 800878c:	461a      	mov	r2, r3
 800878e:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <__assert_func+0x2c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4605      	mov	r5, r0
 8008794:	68d8      	ldr	r0, [r3, #12]
 8008796:	b14c      	cbz	r4, 80087ac <__assert_func+0x24>
 8008798:	4b07      	ldr	r3, [pc, #28]	@ (80087b8 <__assert_func+0x30>)
 800879a:	9100      	str	r1, [sp, #0]
 800879c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087a0:	4906      	ldr	r1, [pc, #24]	@ (80087bc <__assert_func+0x34>)
 80087a2:	462b      	mov	r3, r5
 80087a4:	f000 f842 	bl	800882c <fiprintf>
 80087a8:	f000 f8d6 	bl	8008958 <abort>
 80087ac:	4b04      	ldr	r3, [pc, #16]	@ (80087c0 <__assert_func+0x38>)
 80087ae:	461c      	mov	r4, r3
 80087b0:	e7f3      	b.n	800879a <__assert_func+0x12>
 80087b2:	bf00      	nop
 80087b4:	20000018 	.word	0x20000018
 80087b8:	08008b65 	.word	0x08008b65
 80087bc:	08008b72 	.word	0x08008b72
 80087c0:	08008ba0 	.word	0x08008ba0

080087c4 <_calloc_r>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	fba1 5402 	umull	r5, r4, r1, r2
 80087ca:	b934      	cbnz	r4, 80087da <_calloc_r+0x16>
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7ff f935 	bl	8007a3c <_malloc_r>
 80087d2:	4606      	mov	r6, r0
 80087d4:	b928      	cbnz	r0, 80087e2 <_calloc_r+0x1e>
 80087d6:	4630      	mov	r0, r6
 80087d8:	bd70      	pop	{r4, r5, r6, pc}
 80087da:	220c      	movs	r2, #12
 80087dc:	6002      	str	r2, [r0, #0]
 80087de:	2600      	movs	r6, #0
 80087e0:	e7f9      	b.n	80087d6 <_calloc_r+0x12>
 80087e2:	462a      	mov	r2, r5
 80087e4:	4621      	mov	r1, r4
 80087e6:	f7fe fa4c 	bl	8006c82 <memset>
 80087ea:	e7f4      	b.n	80087d6 <_calloc_r+0x12>

080087ec <__ascii_mbtowc>:
 80087ec:	b082      	sub	sp, #8
 80087ee:	b901      	cbnz	r1, 80087f2 <__ascii_mbtowc+0x6>
 80087f0:	a901      	add	r1, sp, #4
 80087f2:	b142      	cbz	r2, 8008806 <__ascii_mbtowc+0x1a>
 80087f4:	b14b      	cbz	r3, 800880a <__ascii_mbtowc+0x1e>
 80087f6:	7813      	ldrb	r3, [r2, #0]
 80087f8:	600b      	str	r3, [r1, #0]
 80087fa:	7812      	ldrb	r2, [r2, #0]
 80087fc:	1e10      	subs	r0, r2, #0
 80087fe:	bf18      	it	ne
 8008800:	2001      	movne	r0, #1
 8008802:	b002      	add	sp, #8
 8008804:	4770      	bx	lr
 8008806:	4610      	mov	r0, r2
 8008808:	e7fb      	b.n	8008802 <__ascii_mbtowc+0x16>
 800880a:	f06f 0001 	mvn.w	r0, #1
 800880e:	e7f8      	b.n	8008802 <__ascii_mbtowc+0x16>

08008810 <__ascii_wctomb>:
 8008810:	4603      	mov	r3, r0
 8008812:	4608      	mov	r0, r1
 8008814:	b141      	cbz	r1, 8008828 <__ascii_wctomb+0x18>
 8008816:	2aff      	cmp	r2, #255	@ 0xff
 8008818:	d904      	bls.n	8008824 <__ascii_wctomb+0x14>
 800881a:	228a      	movs	r2, #138	@ 0x8a
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	f04f 30ff 	mov.w	r0, #4294967295
 8008822:	4770      	bx	lr
 8008824:	700a      	strb	r2, [r1, #0]
 8008826:	2001      	movs	r0, #1
 8008828:	4770      	bx	lr
	...

0800882c <fiprintf>:
 800882c:	b40e      	push	{r1, r2, r3}
 800882e:	b503      	push	{r0, r1, lr}
 8008830:	4601      	mov	r1, r0
 8008832:	ab03      	add	r3, sp, #12
 8008834:	4805      	ldr	r0, [pc, #20]	@ (800884c <fiprintf+0x20>)
 8008836:	f853 2b04 	ldr.w	r2, [r3], #4
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	f7ff fd2d 	bl	800829c <_vfiprintf_r>
 8008842:	b002      	add	sp, #8
 8008844:	f85d eb04 	ldr.w	lr, [sp], #4
 8008848:	b003      	add	sp, #12
 800884a:	4770      	bx	lr
 800884c:	20000018 	.word	0x20000018

08008850 <__swhatbuf_r>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	460c      	mov	r4, r1
 8008854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008858:	2900      	cmp	r1, #0
 800885a:	b096      	sub	sp, #88	@ 0x58
 800885c:	4615      	mov	r5, r2
 800885e:	461e      	mov	r6, r3
 8008860:	da0d      	bge.n	800887e <__swhatbuf_r+0x2e>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008868:	f04f 0100 	mov.w	r1, #0
 800886c:	bf14      	ite	ne
 800886e:	2340      	movne	r3, #64	@ 0x40
 8008870:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008874:	2000      	movs	r0, #0
 8008876:	6031      	str	r1, [r6, #0]
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	b016      	add	sp, #88	@ 0x58
 800887c:	bd70      	pop	{r4, r5, r6, pc}
 800887e:	466a      	mov	r2, sp
 8008880:	f000 f848 	bl	8008914 <_fstat_r>
 8008884:	2800      	cmp	r0, #0
 8008886:	dbec      	blt.n	8008862 <__swhatbuf_r+0x12>
 8008888:	9901      	ldr	r1, [sp, #4]
 800888a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800888e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008892:	4259      	negs	r1, r3
 8008894:	4159      	adcs	r1, r3
 8008896:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800889a:	e7eb      	b.n	8008874 <__swhatbuf_r+0x24>

0800889c <__smakebuf_r>:
 800889c:	898b      	ldrh	r3, [r1, #12]
 800889e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088a0:	079d      	lsls	r5, r3, #30
 80088a2:	4606      	mov	r6, r0
 80088a4:	460c      	mov	r4, r1
 80088a6:	d507      	bpl.n	80088b8 <__smakebuf_r+0x1c>
 80088a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	6123      	str	r3, [r4, #16]
 80088b0:	2301      	movs	r3, #1
 80088b2:	6163      	str	r3, [r4, #20]
 80088b4:	b003      	add	sp, #12
 80088b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b8:	ab01      	add	r3, sp, #4
 80088ba:	466a      	mov	r2, sp
 80088bc:	f7ff ffc8 	bl	8008850 <__swhatbuf_r>
 80088c0:	9f00      	ldr	r7, [sp, #0]
 80088c2:	4605      	mov	r5, r0
 80088c4:	4639      	mov	r1, r7
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7ff f8b8 	bl	8007a3c <_malloc_r>
 80088cc:	b948      	cbnz	r0, 80088e2 <__smakebuf_r+0x46>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	059a      	lsls	r2, r3, #22
 80088d4:	d4ee      	bmi.n	80088b4 <__smakebuf_r+0x18>
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	f043 0302 	orr.w	r3, r3, #2
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	e7e2      	b.n	80088a8 <__smakebuf_r+0xc>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	6020      	str	r0, [r4, #0]
 80088e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088f2:	b15b      	cbz	r3, 800890c <__smakebuf_r+0x70>
 80088f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 f81d 	bl	8008938 <_isatty_r>
 80088fe:	b128      	cbz	r0, 800890c <__smakebuf_r+0x70>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	f043 0301 	orr.w	r3, r3, #1
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	89a3      	ldrh	r3, [r4, #12]
 800890e:	431d      	orrs	r5, r3
 8008910:	81a5      	strh	r5, [r4, #12]
 8008912:	e7cf      	b.n	80088b4 <__smakebuf_r+0x18>

08008914 <_fstat_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	@ (8008934 <_fstat_r+0x20>)
 8008918:	2300      	movs	r3, #0
 800891a:	4604      	mov	r4, r0
 800891c:	4608      	mov	r0, r1
 800891e:	4611      	mov	r1, r2
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	f7f8 fd4d 	bl	80013c0 <_fstat>
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	d102      	bne.n	8008930 <_fstat_r+0x1c>
 800892a:	682b      	ldr	r3, [r5, #0]
 800892c:	b103      	cbz	r3, 8008930 <_fstat_r+0x1c>
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	bd38      	pop	{r3, r4, r5, pc}
 8008932:	bf00      	nop
 8008934:	20000cb4 	.word	0x20000cb4

08008938 <_isatty_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d06      	ldr	r5, [pc, #24]	@ (8008954 <_isatty_r+0x1c>)
 800893c:	2300      	movs	r3, #0
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	602b      	str	r3, [r5, #0]
 8008944:	f7f8 fd4c 	bl	80013e0 <_isatty>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_isatty_r+0x1a>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_isatty_r+0x1a>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	20000cb4 	.word	0x20000cb4

08008958 <abort>:
 8008958:	b508      	push	{r3, lr}
 800895a:	2006      	movs	r0, #6
 800895c:	f000 f82c 	bl	80089b8 <raise>
 8008960:	2001      	movs	r0, #1
 8008962:	f7f8 fcdd 	bl	8001320 <_exit>

08008966 <_raise_r>:
 8008966:	291f      	cmp	r1, #31
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4605      	mov	r5, r0
 800896c:	460c      	mov	r4, r1
 800896e:	d904      	bls.n	800897a <_raise_r+0x14>
 8008970:	2316      	movs	r3, #22
 8008972:	6003      	str	r3, [r0, #0]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800897c:	b112      	cbz	r2, 8008984 <_raise_r+0x1e>
 800897e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008982:	b94b      	cbnz	r3, 8008998 <_raise_r+0x32>
 8008984:	4628      	mov	r0, r5
 8008986:	f000 f831 	bl	80089ec <_getpid_r>
 800898a:	4622      	mov	r2, r4
 800898c:	4601      	mov	r1, r0
 800898e:	4628      	mov	r0, r5
 8008990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008994:	f000 b818 	b.w	80089c8 <_kill_r>
 8008998:	2b01      	cmp	r3, #1
 800899a:	d00a      	beq.n	80089b2 <_raise_r+0x4c>
 800899c:	1c59      	adds	r1, r3, #1
 800899e:	d103      	bne.n	80089a8 <_raise_r+0x42>
 80089a0:	2316      	movs	r3, #22
 80089a2:	6003      	str	r3, [r0, #0]
 80089a4:	2001      	movs	r0, #1
 80089a6:	e7e7      	b.n	8008978 <_raise_r+0x12>
 80089a8:	2100      	movs	r1, #0
 80089aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80089ae:	4620      	mov	r0, r4
 80089b0:	4798      	blx	r3
 80089b2:	2000      	movs	r0, #0
 80089b4:	e7e0      	b.n	8008978 <_raise_r+0x12>
	...

080089b8 <raise>:
 80089b8:	4b02      	ldr	r3, [pc, #8]	@ (80089c4 <raise+0xc>)
 80089ba:	4601      	mov	r1, r0
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	f7ff bfd2 	b.w	8008966 <_raise_r>
 80089c2:	bf00      	nop
 80089c4:	20000018 	.word	0x20000018

080089c8 <_kill_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4d07      	ldr	r5, [pc, #28]	@ (80089e8 <_kill_r+0x20>)
 80089cc:	2300      	movs	r3, #0
 80089ce:	4604      	mov	r4, r0
 80089d0:	4608      	mov	r0, r1
 80089d2:	4611      	mov	r1, r2
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	f7f8 fc93 	bl	8001300 <_kill>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	d102      	bne.n	80089e4 <_kill_r+0x1c>
 80089de:	682b      	ldr	r3, [r5, #0]
 80089e0:	b103      	cbz	r3, 80089e4 <_kill_r+0x1c>
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	bf00      	nop
 80089e8:	20000cb4 	.word	0x20000cb4

080089ec <_getpid_r>:
 80089ec:	f7f8 bc80 	b.w	80012f0 <_getpid>

080089f0 <_init>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr

080089fc <_fini>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr
