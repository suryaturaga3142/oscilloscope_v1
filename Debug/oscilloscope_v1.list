
oscilloscope_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08008bf0  08008bf0  00009bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f8c  08008f8c  0000a314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f8c  08008f8c  00009f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f94  08008f94  0000a314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08009170  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009210  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009b0  20000314  080092b0  0000a314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000cc4  080092b0  0000acc4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a314  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a37e  00000000  00000000  0000a342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035be  00000000  00000000  000246c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001670  00000000  00000000  00027c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000116c  00000000  00000000  000292f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bd88  00000000  00000000  0002a45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b713  00000000  00000000  000561e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010cc31  00000000  00000000  000718f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017e528  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e18  00000000  00000000  0017e56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  00185384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	08008bd8 	.word	0x08008bd8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	08008bd8 	.word	0x08008bd8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <__io_putchar+0x20>)
 800062e:	f004 fecf 	bl	80053d0 <HAL_UART_Transmit>
  return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000580 	.word	0x20000580

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e028      	b.n	800069e <main+0x5e>
		dac_buf[i] = 1.3f * i * (i - 15) * (i - 31) + 1970;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000656:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800077c <main+0x13c>
 800065a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3b0f      	subs	r3, #15
 8000662:	ee07 3a90 	vmov	s15, r3
 8000666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	3b1f      	subs	r3, #31
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000780 <main+0x140>
 8000682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068a:	ee17 3a90 	vmov	r3, s15
 800068e:	b299      	uxth	r1, r3
 8000690:	4a3c      	ldr	r2, [pc, #240]	@ (8000784 <main+0x144>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < DAC_BUF_LEN; i++) {
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b1f      	cmp	r3, #31
 80006a2:	ddd3      	ble.n	800064c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 ff93 	bl	80015ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f880 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 faba 	bl	8000c24 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b0:	f000 fa86 	bl	8000bc0 <MX_DMA_Init>
  MX_ETH_Init();
 80006b4:	f000 f98a 	bl	80009cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006b8:	f000 fa24 	bl	8000b04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006bc:	f000 fa52 	bl	8000b64 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006c0:	f000 f8e6 	bl	8000890 <MX_ADC1_Init>
  MX_DAC_Init();
 80006c4:	f000 f958 	bl	8000978 <MX_DAC_Init>
  MX_TIM2_Init();
 80006c8:	f000 f9ce 	bl	8000a68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 80006cc:	482e      	ldr	r0, [pc, #184]	@ (8000788 <main+0x148>)
 80006ce:	f004 fb29 	bl	8004d24 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dac_buf, DAC_BUF_LEN, DAC_ALIGN_12B_R);
 80006d2:	2300      	movs	r3, #0
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2320      	movs	r3, #32
 80006d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000784 <main+0x144>)
 80006da:	2100      	movs	r1, #0
 80006dc:	482b      	ldr	r0, [pc, #172]	@ (800078c <main+0x14c>)
 80006de:	f001 fdc1 	bl	8002264 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 80006e2:	2220      	movs	r2, #32
 80006e4:	492a      	ldr	r1, [pc, #168]	@ (8000790 <main+0x150>)
 80006e6:	482b      	ldr	r0, [pc, #172]	@ (8000794 <main+0x154>)
 80006e8:	f001 f836 	bl	8001758 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int delay = 1000.0f * (htim2.Init.Prescaler + 1) * (htim2.Init.Period + 1) / TIM_CLK;
 80006ec:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <main+0x148>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	ee07 3a90 	vmov	s15, r3
 80006f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006fa:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000798 <main+0x158>
 80006fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000702:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <main+0x148>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	ee07 3a90 	vmov	s15, r3
 800070c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000714:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800079c <main+0x15c>
 8000718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800071c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000720:	ee17 3a90 	vmov	r3, s15
 8000724:	607b      	str	r3, [r7, #4]
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	e022      	b.n	8000772 <main+0x132>
		  float voltage = adc_buf[i] * 3.3f / 4095.0f;
 800072c:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <main+0x150>)
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000734:	b29b      	uxth	r3, r3
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800073e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80007a0 <main+0x160>
 8000742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000746:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80007a4 <main+0x164>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	edc7 7a00 	vstr	s15, [r7]
		  printf("%f\r\n", voltage);
 8000752:	edd7 7a00 	vldr	s15, [r7]
 8000756:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800075a:	ec53 2b17 	vmov	r2, r3, d7
 800075e:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <main+0x168>)
 8000760:	f006 fb2e 	bl	8006dc0 <iprintf>
		  HAL_Delay(delay);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 ff8e 	bl	8001688 <HAL_Delay>
	  for (int i = 0; i < ADC_BUF_LEN; i++) {
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b1f      	cmp	r3, #31
 8000776:	ddd9      	ble.n	800072c <main+0xec>
  {
 8000778:	e7b8      	b.n	80006ec <main+0xac>
 800077a:	bf00      	nop
 800077c:	3fa66666 	.word	0x3fa66666
 8000780:	44f64000 	.word	0x44f64000
 8000784:	20000b28 	.word	0x20000b28
 8000788:	20000534 	.word	0x20000534
 800078c:	20000410 	.word	0x20000410
 8000790:	20000ae8 	.word	0x20000ae8
 8000794:	20000368 	.word	0x20000368
 8000798:	447a0000 	.word	0x447a0000
 800079c:	4cb71b00 	.word	0x4cb71b00
 80007a0:	40533333 	.word	0x40533333
 80007a4:	457ff000 	.word	0x457ff000
 80007a8:	08008bf0 	.word	0x08008bf0

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	@ 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2234      	movs	r2, #52	@ 0x34
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f006 fb55 	bl	8006e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d0:	f003 f8f4 	bl	80039bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <SystemClock_Config+0xdc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000888 <SystemClock_Config+0xdc>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <SystemClock_Config+0xdc>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ec:	4b27      	ldr	r3, [pc, #156]	@ (800088c <SystemClock_Config+0xe0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007f4:	4a25      	ldr	r2, [pc, #148]	@ (800088c <SystemClock_Config+0xe0>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <SystemClock_Config+0xe0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800080c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800081a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000820:	2360      	movs	r3, #96	@ 0x60
 8000822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4618      	mov	r0, r3
 8000836:	f003 f921 	bl	8003a7c <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000840:	f000 fab6 	bl	8000db0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000844:	f003 f8ca 	bl	80039dc <HAL_PWREx_EnableOverDrive>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800084e:	f000 faaf 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2302      	movs	r3, #2
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2103      	movs	r1, #3
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fbb2 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800087a:	f000 fa99 	bl	8000db0 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	@ 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
 80008a6:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000970 <MX_ADC1_Init+0xe0>)
 80008b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ba:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c2:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c8:	4b28      	ldr	r3, [pc, #160]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ce:	4b27      	ldr	r3, [pc, #156]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d4:	4b25      	ldr	r3, [pc, #148]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008dc:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008e6:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_ADC1_Init+0xdc>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_ADC1_Init+0xdc>)
 8000902:	2201      	movs	r2, #1
 8000904:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000906:	4819      	ldr	r0, [pc, #100]	@ (800096c <MX_ADC1_Init+0xdc>)
 8000908:	f000 fee2 	bl	80016d0 <HAL_ADC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000912:	f000 fa4d 	bl	8000db0 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_ADC1_Init+0xe4>)
 8000918:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 100;
 800091a:	2364      	movs	r3, #100	@ 0x64
 800091c:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 8000926:	2301      	movs	r3, #1
 8000928:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	480e      	ldr	r0, [pc, #56]	@ (800096c <MX_ADC1_Init+0xdc>)
 8000934:	f001 f986 	bl	8001c44 <HAL_ADC_AnalogWDGConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800093e:	f000 fa37 	bl	8000db0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000946:	2301      	movs	r3, #1
 8000948:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	@ (800096c <MX_ADC1_Init+0xdc>)
 8000954:	f001 f81c 	bl	8001990 <HAL_ADC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800095e:	f000 fa27 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000368 	.word	0x20000368
 8000970:	40012000 	.word	0x40012000
 8000974:	00800200 	.word	0x00800200

08000978 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_DAC_Init+0x4c>)
 8000988:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <MX_DAC_Init+0x50>)
 800098a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <MX_DAC_Init+0x4c>)
 800098e:	f001 fc46 	bl	800221e <HAL_DAC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000998:	f000 fa0a 	bl	8000db0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800099c:	2324      	movs	r3, #36	@ 0x24
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <MX_DAC_Init+0x4c>)
 80009ac:	f001 fd38 	bl	8002420 <HAL_DAC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009b6:	f000 f9fb 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000410 	.word	0x20000410
 80009c8:	40007400 	.word	0x40007400

080009cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <MX_ETH_Init+0x84>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	@ (8000a54 <MX_ETH_Init+0x88>)
 80009d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_ETH_Init+0x8c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <MX_ETH_Init+0x8c>)
 80009de:	2280      	movs	r2, #128	@ 0x80
 80009e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_ETH_Init+0x8c>)
 80009e4:	22e1      	movs	r2, #225	@ 0xe1
 80009e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_ETH_Init+0x8c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_ETH_Init+0x8c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_ETH_Init+0x8c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_ETH_Init+0x84>)
 80009fc:	4a16      	ldr	r2, [pc, #88]	@ (8000a58 <MX_ETH_Init+0x8c>)
 80009fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <MX_ETH_Init+0x84>)
 8000a02:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a06:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_ETH_Init+0x84>)
 8000a0a:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <MX_ETH_Init+0x90>)
 8000a0c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <MX_ETH_Init+0x84>)
 8000a10:	4a13      	ldr	r2, [pc, #76]	@ (8000a60 <MX_ETH_Init+0x94>)
 8000a12:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_ETH_Init+0x84>)
 8000a16:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a1a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <MX_ETH_Init+0x84>)
 8000a1e:	f002 f95b 	bl	8002cd8 <HAL_ETH_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a28:	f000 f9c2 	bl	8000db0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a2c:	2238      	movs	r2, #56	@ 0x38
 8000a2e:	2100      	movs	r1, #0
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <MX_ETH_Init+0x98>)
 8000a32:	f006 fa1a 	bl	8006e6a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_ETH_Init+0x98>)
 8000a38:	2221      	movs	r2, #33	@ 0x21
 8000a3a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_ETH_Init+0x98>)
 8000a3e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a42:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <MX_ETH_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000484 	.word	0x20000484
 8000a54:	40028000 	.word	0x40028000
 8000a58:	20000b68 	.word	0x20000b68
 8000a5c:	20000274 	.word	0x20000274
 8000a60:	200001d4 	.word	0x200001d4
 8000a64:	20000330 	.word	0x20000330

08000a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000a88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000a90:	2213      	movs	r2, #19
 8000a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000a9c:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aae:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000ab0:	f004 f8e0 	bl	8004c74 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000aba:	f000 f979 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000acc:	f004 f99a 	bl	8004e04 <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ad6:	f000 f96b 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ada:	2320      	movs	r3, #32
 8000adc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_TIM2_Init+0x98>)
 8000ae8:	f004 fb96 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000af2:	f000 f95d 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000534 	.word	0x20000534

08000b04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <MX_USART3_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART3_UART_Init+0x58>)
 8000b48:	f004 fbf4 	bl	8005334 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 f92d 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000580 	.word	0x20000580
 8000b60:	40004800 	.word	0x40004800

08000b64 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	2206      	movs	r2, #6
 8000b74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	f002 fdcd 	bl	8003746 <HAL_PCD_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f000 f8fd 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000608 	.word	0x20000608

08000bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_DMA_Init+0x60>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <MX_DMA_Init+0x60>)
 8000bcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_DMA_Init+0x60>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_DMA_Init+0x60>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <MX_DMA_Init+0x60>)
 8000be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_DMA_Init+0x60>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2010      	movs	r0, #16
 8000bfc:	f001 fad9 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c00:	2010      	movs	r0, #16
 8000c02:	f001 faf2 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2038      	movs	r0, #56	@ 0x38
 8000c0c:	f001 fad1 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c10:	2038      	movs	r0, #56	@ 0x38
 8000c12:	f001 faea 	bl	80021ea <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b58      	ldr	r3, [pc, #352]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a57      	ldr	r2, [pc, #348]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b55      	ldr	r3, [pc, #340]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c52:	4b52      	ldr	r3, [pc, #328]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a51      	ldr	r2, [pc, #324]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c58:	f043 0320 	orr.w	r3, r3, #32
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b49      	ldr	r3, [pc, #292]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b46      	ldr	r3, [pc, #280]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a45      	ldr	r2, [pc, #276]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b43      	ldr	r3, [pc, #268]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b40      	ldr	r3, [pc, #256]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a39      	ldr	r2, [pc, #228]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b37      	ldr	r3, [pc, #220]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cca:	4b34      	ldr	r3, [pc, #208]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a33      	ldr	r2, [pc, #204]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <MX_GPIO_Init+0x178>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ce8:	482d      	ldr	r0, [pc, #180]	@ (8000da0 <MX_GPIO_Init+0x17c>)
 8000cea:	f002 fcef 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2140      	movs	r1, #64	@ 0x40
 8000cf2:	482c      	ldr	r0, [pc, #176]	@ (8000da4 <MX_GPIO_Init+0x180>)
 8000cf4:	f002 fcea 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4826      	ldr	r0, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0x184>)
 8000d10:	f002 fb30 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4820      	ldr	r0, [pc, #128]	@ (8000dac <MX_GPIO_Init+0x188>)
 8000d2c:	f002 fb22 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d30:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4815      	ldr	r0, [pc, #84]	@ (8000da0 <MX_GPIO_Init+0x17c>)
 8000d4a:	f002 fb13 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d4e:	2340      	movs	r3, #64	@ 0x40
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	480f      	ldr	r0, [pc, #60]	@ (8000da4 <MX_GPIO_Init+0x180>)
 8000d66:	f002 fb05 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <MX_GPIO_Init+0x180>)
 8000d7e:	f002 faf9 	bl	8003374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f001 fa13 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d8c:	2028      	movs	r0, #40	@ 0x28
 8000d8e:	f001 fa2c 	bl	80021ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d92:	bf00      	nop
 8000d94:	3730      	adds	r7, #48	@ 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40021800 	.word	0x40021800
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40021400 	.word	0x40021400

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <HAL_MspInit+0x44>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <HAL_MspInit+0x44>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <HAL_MspInit+0x44>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <HAL_MspInit+0x44>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <HAL_MspInit+0x44>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_MspInit+0x44>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed8 <HAL_ADC_MspInit+0xd4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d153      	bne.n	8000ece <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e26:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <HAL_ADC_MspInit+0xd8>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000edc <HAL_ADC_MspInit+0xd8>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <HAL_ADC_MspInit+0xd8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <HAL_ADC_MspInit+0xd8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a26      	ldr	r2, [pc, #152]	@ (8000edc <HAL_ADC_MspInit+0xd8>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <HAL_ADC_MspInit+0xd8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e56:	2301      	movs	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	481d      	ldr	r0, [pc, #116]	@ (8000ee0 <HAL_ADC_MspInit+0xdc>)
 8000e6a:	f002 fa83 	bl	8003374 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000e72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eb2:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000eb4:	f001 fb98 	bl	80025e8 <HAL_DMA_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000ebe:	f7ff ff77 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40012000 	.word	0x40012000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	200003b0 	.word	0x200003b0
 8000ee8:	40026410 	.word	0x40026410

08000eec <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <HAL_DAC_MspInit+0xd4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d154      	bne.n	8000fb8 <HAL_DAC_MspInit+0xcc>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc4 <HAL_DAC_MspInit+0xd8>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc4 <HAL_DAC_MspInit+0xd8>)
 8000f14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc4 <HAL_DAC_MspInit+0xd8>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <HAL_DAC_MspInit+0xd8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <HAL_DAC_MspInit+0xd8>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <HAL_DAC_MspInit+0xd8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481d      	ldr	r0, [pc, #116]	@ (8000fc8 <HAL_DAC_MspInit+0xdc>)
 8000f52:	f002 fa0f 	bl	8003374 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f58:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd0 <HAL_DAC_MspInit+0xe4>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f5e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000f62:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f66:	2240      	movs	r2, #64	@ 0x40
 8000f68:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f7e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f86:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000f88:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000f9c:	480b      	ldr	r0, [pc, #44]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000f9e:	f001 fb23 	bl	80025e8 <HAL_DMA_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8000fa8:	f7ff ff02 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_DAC_MspInit+0xe0>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	@ 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40007400 	.word	0x40007400
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	20000424 	.word	0x20000424
 8000fd0:	40026088 	.word	0x40026088

08000fd4 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	@ 0x38
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800112c <HAL_ETH_MspInit+0x158>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	f040 8096 	bne.w	8001124 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8000ffe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001002:	6313      	str	r3, [r2, #48]	@ 0x30
 8001004:	4b4a      	ldr	r3, [pc, #296]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800100c:	623b      	str	r3, [r7, #32]
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	4b47      	ldr	r3, [pc, #284]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001014:	4a46      	ldr	r2, [pc, #280]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001016:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800101a:	6313      	str	r3, [r2, #48]	@ 0x30
 800101c:	4b44      	ldr	r3, [pc, #272]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	4b41      	ldr	r3, [pc, #260]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	4a40      	ldr	r2, [pc, #256]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800102e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001032:	6313      	str	r3, [r2, #48]	@ 0x30
 8001034:	4b3e      	ldr	r3, [pc, #248]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001040:	4b3b      	ldr	r3, [pc, #236]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4a3a      	ldr	r2, [pc, #232]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6313      	str	r3, [r2, #48]	@ 0x30
 800104c:	4b38      	ldr	r3, [pc, #224]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b35      	ldr	r3, [pc, #212]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	4a34      	ldr	r2, [pc, #208]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6313      	str	r3, [r2, #48]	@ 0x30
 8001064:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	4a2e      	ldr	r2, [pc, #184]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	6313      	str	r3, [r2, #48]	@ 0x30
 800107c:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108c:	4a28      	ldr	r2, [pc, #160]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 800108e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001092:	6313      	str	r3, [r2, #48]	@ 0x30
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <HAL_ETH_MspInit+0x15c>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010a0:	2332      	movs	r3, #50	@ 0x32
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b0:	230b      	movs	r3, #11
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b8:	4619      	mov	r1, r3
 80010ba:	481e      	ldr	r0, [pc, #120]	@ (8001134 <HAL_ETH_MspInit+0x160>)
 80010bc:	f002 f95a 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010c0:	2386      	movs	r3, #134	@ 0x86
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d0:	230b      	movs	r3, #11
 80010d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4817      	ldr	r0, [pc, #92]	@ (8001138 <HAL_ETH_MspInit+0x164>)
 80010dc:	f002 f94a 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f2:	230b      	movs	r3, #11
 80010f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	480f      	ldr	r0, [pc, #60]	@ (800113c <HAL_ETH_MspInit+0x168>)
 80010fe:	f002 f939 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001102:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001114:	230b      	movs	r3, #11
 8001116:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4808      	ldr	r0, [pc, #32]	@ (8001140 <HAL_ETH_MspInit+0x16c>)
 8001120:	f002 f928 	bl	8003374 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001124:	bf00      	nop
 8001126:	3738      	adds	r7, #56	@ 0x38
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40028000 	.word	0x40028000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40021800 	.word	0x40021800

08001144 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001154:	d10b      	bne.n	800116e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_TIM_Base_MspInit+0x38>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_TIM_Base_MspInit+0x38>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_TIM_Base_MspInit+0x38>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0ae      	sub	sp, #184	@ 0xb8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2290      	movs	r2, #144	@ 0x90
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f005 fe62 	bl	8006e6a <memset>
  if(huart->Instance==USART3)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <HAL_UART_MspInit+0xb4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d13c      	bne.n	800122a <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f930 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ca:	f7ff fdf1 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <HAL_UART_MspInit+0xb8>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_UART_MspInit+0xb8>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <HAL_UART_MspInit+0xb8>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <HAL_UART_MspInit+0xb8>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a13      	ldr	r2, [pc, #76]	@ (8001238 <HAL_UART_MspInit+0xb8>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_UART_MspInit+0xb8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001218:	2307      	movs	r3, #7
 800121a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <HAL_UART_MspInit+0xbc>)
 8001226:	f002 f8a5 	bl	8003374 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800122a:	bf00      	nop
 800122c:	37b8      	adds	r7, #184	@ 0xb8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40004800 	.word	0x40004800
 8001238:	40023800 	.word	0x40023800
 800123c:	40020c00 	.word	0x40020c00

08001240 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0ae      	sub	sp, #184	@ 0xb8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2290      	movs	r2, #144	@ 0x90
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f005 fe02 	bl	8006e6a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800126e:	d159      	bne.n	8001324 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001270:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001274:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4618      	mov	r0, r3
 8001282:	f003 f8cf 	bl	8004424 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800128c:	f7ff fd90 	bl	8000db0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <HAL_PCD_MspInit+0xec>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	4a25      	ldr	r2, [pc, #148]	@ (800132c <HAL_PCD_MspInit+0xec>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6313      	str	r3, [r2, #48]	@ 0x30
 800129c:	4b23      	ldr	r3, [pc, #140]	@ (800132c <HAL_PCD_MspInit+0xec>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012a8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012c2:	230a      	movs	r3, #10
 80012c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4818      	ldr	r0, [pc, #96]	@ (8001330 <HAL_PCD_MspInit+0xf0>)
 80012d0:	f002 f850 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4810      	ldr	r0, [pc, #64]	@ (8001330 <HAL_PCD_MspInit+0xf0>)
 80012f0:	f002 f840 	bl	8003374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012f4:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <HAL_PCD_MspInit+0xec>)
 80012f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f8:	4a0c      	ldr	r2, [pc, #48]	@ (800132c <HAL_PCD_MspInit+0xec>)
 80012fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012fe:	6353      	str	r3, [r2, #52]	@ 0x34
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_PCD_MspInit+0xec>)
 8001302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <HAL_PCD_MspInit+0xec>)
 800130e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001310:	4a06      	ldr	r2, [pc, #24]	@ (800132c <HAL_PCD_MspInit+0xec>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001316:	6453      	str	r3, [r2, #68]	@ 0x44
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <HAL_PCD_MspInit+0xec>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001324:	bf00      	nop
 8001326:	37b8      	adds	r7, #184	@ 0xb8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <MemManage_Handler+0x4>

0800134c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <UsageFault_Handler+0x4>

0800135c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f95d 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <DMA1_Stream5_IRQHandler+0x10>)
 800139a:	f001 fa33 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000424 	.word	0x20000424

080013a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80013ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013b0:	f002 f9a6 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <DMA2_Stream0_IRQHandler+0x10>)
 80013be:	f001 fa21 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200003b0 	.word	0x200003b0

080013cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return 1;
 80013d0:	2301      	movs	r3, #1
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_kill>:

int _kill(int pid, int sig)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e6:	f005 fd93 	bl	8006f10 <__errno>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2216      	movs	r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
  return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_exit>:

void _exit (int status)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffe7 	bl	80013dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800140e:	bf00      	nop
 8001410:	e7fd      	b.n	800140e <_exit+0x12>

08001412 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e00a      	b.n	800143a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001424:	f3af 8000 	nop.w
 8001428:	4601      	mov	r1, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	60ba      	str	r2, [r7, #8]
 8001430:	b2ca      	uxtb	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	dbf0      	blt.n	8001424 <_read+0x12>
  }

  return len;
 8001442:	687b      	ldr	r3, [r7, #4]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e009      	b.n	8001472 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	60ba      	str	r2, [r7, #8]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f8d8 	bl	800061c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbf1      	blt.n	800145e <_write+0x12>
  }
  return len;
 800147a:	687b      	ldr	r3, [r7, #4]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_close>:

int _close(int file)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ac:	605a      	str	r2, [r3, #4]
  return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_isatty>:

int _isatty(int file)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f005 fcf8 	bl	8006f10 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20080000 	.word	0x20080000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000b70 	.word	0x20000b70
 8001554:	20000cc8 	.word	0x20000cc8

08001558 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001580:	f7ff ffea 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f005 fcb7 	bl	8006f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff f847 	bl	8000640 <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015c0:	08008f9c 	.word	0x08008f9c
  ldr r2, =_sbss
 80015c4:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80015c8:	20000cc4 	.word	0x20000cc4

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>

080015ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f000 fde2 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 f805 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015de:	f7ff fbed 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fdfd 	bl	8002206 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 fdc5 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	20000b74 	.word	0x20000b74

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000b74 	.word	0x20000b74

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008

080016d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e031      	b.n	800174a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fb88 	bl	8000e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_ADC_Init+0x84>)
 8001714:	4013      	ands	r3, r2
 8001716:	f043 0202 	orr.w	r2, r3, #2
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 faf0 	bl	8001d04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f023 0303 	bic.w	r3, r3, #3
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40
 800173a:	e001      	b.n	8001740 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	ffffeefd 	.word	0xffffeefd

08001758 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_Start_DMA+0x22>
 8001776:	2302      	movs	r3, #2
 8001778:	e0d6      	b.n	8001928 <HAL_ADC_Start_DMA+0x1d0>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d018      	beq.n	80017c2 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80017a0:	4b63      	ldr	r3, [pc, #396]	@ (8001930 <HAL_ADC_Start_DMA+0x1d8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a63      	ldr	r2, [pc, #396]	@ (8001934 <HAL_ADC_Start_DMA+0x1dc>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9a      	lsrs	r2, r3, #18
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80017b4:	e002      	b.n	80017bc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f9      	bne.n	80017b6 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 809e 	bne.w	800190e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017d6:	4b58      	ldr	r3, [pc, #352]	@ (8001938 <HAL_ADC_Start_DMA+0x1e0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800180c:	d106      	bne.n	800181c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f023 0206 	bic.w	r2, r3, #6
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	645a      	str	r2, [r3, #68]	@ 0x44
 800181a:	e002      	b.n	8001822 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182e:	4a43      	ldr	r2, [pc, #268]	@ (800193c <HAL_ADC_Start_DMA+0x1e4>)
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001836:	4a42      	ldr	r2, [pc, #264]	@ (8001940 <HAL_ADC_Start_DMA+0x1e8>)
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183e:	4a41      	ldr	r2, [pc, #260]	@ (8001944 <HAL_ADC_Start_DMA+0x1ec>)
 8001840:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800184a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800185a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800186a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	334c      	adds	r3, #76	@ 0x4c
 8001876:	4619      	mov	r1, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f000 ff62 	bl	8002744 <HAL_DMA_Start_IT>
 8001880:	4603      	mov	r3, r0
 8001882:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <HAL_ADC_Start_DMA+0x1f0>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10f      	bne.n	80018b0 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d143      	bne.n	8001926 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	e03a      	b.n	8001926 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a25      	ldr	r2, [pc, #148]	@ (800194c <HAL_ADC_Start_DMA+0x1f4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10e      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x180>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018d6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <HAL_ADC_Start_DMA+0x1f0>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d120      	bne.n	8001926 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	@ (8001950 <HAL_ADC_Start_DMA+0x1f8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d11b      	bne.n	8001926 <HAL_ADC_Start_DMA+0x1ce>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d114      	bne.n	8001926 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	e00b      	b.n	8001926 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f043 0210 	orr.w	r2, r3, #16
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8001926:	7dfb      	ldrb	r3, [r7, #23]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	431bde83 	.word	0x431bde83
 8001938:	fffff8fe 	.word	0xfffff8fe
 800193c:	08001ef9 	.word	0x08001ef9
 8001940:	08001fb3 	.word	0x08001fb3
 8001944:	08001fcf 	.word	0x08001fcf
 8001948:	40012300 	.word	0x40012300
 800194c:	40012000 	.word	0x40012000
 8001950:	40012200 	.word	0x40012200

08001954 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1c>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e13a      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x292>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d93a      	bls.n	8001a32 <HAL_ADC_ConfigChannel+0xa2>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019c4:	d035      	beq.n	8001a32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68d9      	ldr	r1, [r3, #12]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	3b1e      	subs	r3, #30
 80019dc:	2207      	movs	r2, #7
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	400a      	ands	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001c30 <HAL_ADC_ConfigChannel+0x2a0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10a      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68d9      	ldr	r1, [r3, #12]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	061a      	lsls	r2, r3, #24
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a0a:	e039      	b.n	8001a80 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68d9      	ldr	r1, [r3, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4403      	add	r3, r0
 8001a24:	3b1e      	subs	r3, #30
 8001a26:	409a      	lsls	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a30:	e026      	b.n	8001a80 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6919      	ldr	r1, [r3, #16]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43da      	mvns	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	400a      	ands	r2, r1
 8001a58:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6919      	ldr	r1, [r3, #16]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4403      	add	r3, r0
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	409a      	lsls	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b06      	cmp	r3, #6
 8001a86:	d824      	bhi.n	8001ad2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b05      	subs	r3, #5
 8001a9a:	221f      	movs	r2, #31
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b05      	subs	r3, #5
 8001ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ad0:	e04c      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d824      	bhi.n	8001b24 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b23      	subs	r3, #35	@ 0x23
 8001aec:	221f      	movs	r2, #31
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	400a      	ands	r2, r1
 8001afa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b23      	subs	r3, #35	@ 0x23
 8001b16:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b22:	e023      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b41      	subs	r3, #65	@ 0x41
 8001b36:	221f      	movs	r2, #31
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	400a      	ands	r2, r1
 8001b44:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b41      	subs	r3, #65	@ 0x41
 8001b60:	fa00 f203 	lsl.w	r2, r0, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a30      	ldr	r2, [pc, #192]	@ (8001c34 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1fc>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b7e:	d105      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b80:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a2c      	ldr	r2, [pc, #176]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001b86:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001b8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <HAL_ADC_ConfigChannel+0x2a4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10f      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x226>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a25      	ldr	r2, [pc, #148]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001ba4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ba8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bb4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <HAL_ADC_ConfigChannel+0x2a4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d12b      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x288>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x242>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b11      	cmp	r3, #17
 8001bd0:	d122      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bd8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001bdc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4a15      	ldr	r2, [pc, #84]	@ (8001c38 <HAL_ADC_ConfigChannel+0x2a8>)
 8001be4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d111      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_ADC_ConfigChannel+0x2ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HAL_ADC_ConfigChannel+0x2b0>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	0c9a      	lsrs	r2, r3, #18
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c0a:	e002      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f9      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	10000012 	.word	0x10000012
 8001c34:	40012000 	.word	0x40012000
 8001c38:	40012300 	.word	0x40012300
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	431bde83 	.word	0x431bde83

08001c44 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_AnalogWDGConfig+0x18>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e04b      	b.n	8001cf4 <HAL_ADC_AnalogWDGConfig+0xb0>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	7c1b      	ldrb	r3, [r3, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	e007      	b.n	8001c8e <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c8c:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <HAL_ADC_AnalogWDGConfig+0xbc>)
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	6852      	ldr	r2, [r2, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	6892      	ldr	r2, [r2, #8]
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 021f 	bic.w	r2, r2, #31
 8001cd2:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	ff3ffdff 	.word	0xff3ffdff

08001d04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001d0c:	4b78      	ldr	r3, [pc, #480]	@ (8001ef0 <ADC_Init+0x1ec>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a77      	ldr	r2, [pc, #476]	@ (8001ef0 <ADC_Init+0x1ec>)
 8001d12:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001d16:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001d18:	4b75      	ldr	r3, [pc, #468]	@ (8001ef0 <ADC_Init+0x1ec>)
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4973      	ldr	r1, [pc, #460]	@ (8001ef0 <ADC_Init+0x1ec>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	021a      	lsls	r2, r3, #8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6899      	ldr	r1, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	4a58      	ldr	r2, [pc, #352]	@ (8001ef4 <ADC_Init+0x1f0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d022      	beq.n	8001dde <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001da6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6899      	ldr	r1, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6899      	ldr	r1, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e00f      	b.n	8001dfe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001dfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0202 	bic.w	r2, r2, #2
 8001e0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6899      	ldr	r1, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	005a      	lsls	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	3b01      	subs	r3, #1
 8001e58:	035a      	lsls	r2, r3, #13
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	e007      	b.n	8001e74 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	051a      	lsls	r2, r3, #20
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eb6:	025a      	lsls	r2, r3, #9
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ece:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6899      	ldr	r1, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	029a      	lsls	r2, r3, #10
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40012300 	.word	0x40012300
 8001ef4:	0f000001 	.word	0x0f000001

08001ef8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f04:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d13c      	bne.n	8001f8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d12b      	bne.n	8001f84 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d127      	bne.n	8001f84 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d119      	bne.n	8001f84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0220 	bic.w	r2, r2, #32
 8001f5e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fce5 	bl	8001954 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f8a:	e00e      	b.n	8001faa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f7ff fcef 	bl	800197c <HAL_ADC_ErrorCallback>
}
 8001f9e:	e004      	b.n	8001faa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff fcd1 	bl	8001968 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fda:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2240      	movs	r2, #64	@ 0x40
 8001fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f043 0204 	orr.w	r2, r3, #4
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff fcc4 	bl	800197c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff4:	bf00      	nop
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <__NVIC_SetPriorityGrouping+0x40>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	4313      	orrs	r3, r2
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <__NVIC_SetPriorityGrouping+0x40>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00
 8002040:	05fa0000 	.word	0x05fa0000

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <__NVIC_EnableIRQ+0x38>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	@ (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff29 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff3e 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff8e 	bl	80020f0 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5d 	bl	800209c <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff31 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa2 	bl	8002158 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e014      	b.n	800225a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	791b      	ldrb	r3, [r3, #4]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fe fe53 	bl	8000eec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0a2      	b.n	80023c2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	795b      	ldrb	r3, [r3, #5]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_DAC_Start_DMA+0x24>
 8002284:	2302      	movs	r3, #2
 8002286:	e09c      	b.n	80023c2 <HAL_DAC_Start_DMA+0x15e>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2202      	movs	r2, #2
 8002292:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d129      	bne.n	80022ee <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a4b      	ldr	r2, [pc, #300]	@ (80023cc <HAL_DAC_Start_DMA+0x168>)
 80022a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4a4a      	ldr	r2, [pc, #296]	@ (80023d0 <HAL_DAC_Start_DMA+0x16c>)
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4a49      	ldr	r2, [pc, #292]	@ (80023d4 <HAL_DAC_Start_DMA+0x170>)
 80022b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_DAC_Start_DMA+0x6c>
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d005      	beq.n	80022da <HAL_DAC_Start_DMA+0x76>
 80022ce:	e009      	b.n	80022e4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3308      	adds	r3, #8
 80022d6:	613b      	str	r3, [r7, #16]
        break;
 80022d8:	e033      	b.n	8002342 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	613b      	str	r3, [r7, #16]
        break;
 80022e2:	e02e      	b.n	8002342 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3310      	adds	r3, #16
 80022ea:	613b      	str	r3, [r7, #16]
        break;
 80022ec:	e029      	b.n	8002342 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4a39      	ldr	r2, [pc, #228]	@ (80023d8 <HAL_DAC_Start_DMA+0x174>)
 80022f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <HAL_DAC_Start_DMA+0x178>)
 80022fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a37      	ldr	r2, [pc, #220]	@ (80023e0 <HAL_DAC_Start_DMA+0x17c>)
 8002304:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002314:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_DAC_Start_DMA+0xc0>
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	2b04      	cmp	r3, #4
 8002320:	d005      	beq.n	800232e <HAL_DAC_Start_DMA+0xca>
 8002322:	e009      	b.n	8002338 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3314      	adds	r3, #20
 800232a:	613b      	str	r3, [r7, #16]
        break;
 800232c:	e009      	b.n	8002342 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3318      	adds	r3, #24
 8002334:	613b      	str	r3, [r7, #16]
        break;
 8002336:	e004      	b.n	8002342 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	331c      	adds	r3, #28
 800233e:	613b      	str	r3, [r7, #16]
        break;
 8002340:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d111      	bne.n	800236c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002356:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6898      	ldr	r0, [r3, #8]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	f000 f9ef 	bl	8002744 <HAL_DMA_Start_IT>
 8002366:	4603      	mov	r3, r0
 8002368:	75fb      	strb	r3, [r7, #23]
 800236a:	e010      	b.n	800238e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800237a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68d8      	ldr	r0, [r3, #12]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	f000 f9dd 	bl	8002744 <HAL_DMA_Start_IT>
 800238a:	4603      	mov	r3, r0
 800238c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10c      	bne.n	80023b4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2201      	movs	r2, #1
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e005      	b.n	80023c0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f043 0204 	orr.w	r2, r3, #4
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	080024d3 	.word	0x080024d3
 80023d0:	080024f5 	.word	0x080024f5
 80023d4:	08002511 	.word	0x08002511
 80023d8:	0800257b 	.word	0x0800257b
 80023dc:	0800259d 	.word	0x0800259d
 80023e0:	080025b9 	.word	0x080025b9

080023e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_DAC_ConfigChannel+0x1c>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e042      	b.n	80024c6 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	795b      	ldrb	r3, [r3, #5]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_DAC_ConfigChannel+0x2c>
 8002448:	2302      	movs	r3, #2
 800244a:	e03c      	b.n	80024c6 <HAL_DAC_ConfigChannel+0xa6>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2202      	movs	r2, #2
 8002456:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	22c0      	movs	r2, #192	@ 0xc0
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80024c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	@ 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024de:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff ff7f 	bl	80023e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	711a      	strb	r2, [r3, #4]
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002500:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f7ff ff78 	bl	80023f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f043 0204 	orr.w	r2, r3, #4
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff ff6e 	bl	800240c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	711a      	strb	r2, [r3, #4]
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002586:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff ffd8 	bl	800253e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	711a      	strb	r2, [r3, #4]
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7ff ffd1 	bl	8002552 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff ffc7 	bl	8002566 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	711a      	strb	r2, [r3, #4]
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff f83c 	bl	8001670 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e099      	b.n	8002738 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002624:	e00f      	b.n	8002646 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002626:	f7ff f823 	bl	8001670 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b05      	cmp	r3, #5
 8002632:	d908      	bls.n	8002646 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e078      	b.n	8002738 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e8      	bne.n	8002626 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <HAL_DMA_Init+0x158>)
 8002660:	4013      	ands	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002672:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	2b04      	cmp	r3, #4
 800269e:	d107      	bne.n	80026b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a8:	4313      	orrs	r3, r2
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 0307 	bic.w	r3, r3, #7
 80026c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d117      	bne.n	800270a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa77 	bl	8002be0 <DMA_CheckFifoParam>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2240      	movs	r2, #64	@ 0x40
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002706:	2301      	movs	r3, #1
 8002708:	e016      	b.n	8002738 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa2e 	bl	8002b74 <DMA_CalcBaseAndBitshift>
 8002718:	4603      	mov	r3, r0
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	223f      	movs	r2, #63	@ 0x3f
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	e010803f 	.word	0xe010803f

08002744 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_DMA_Start_IT+0x26>
 8002766:	2302      	movs	r3, #2
 8002768:	e048      	b.n	80027fc <HAL_DMA_Start_IT+0xb8>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d137      	bne.n	80027ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f9c0 	bl	8002b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	223f      	movs	r2, #63	@ 0x3f
 800279e:	409a      	lsls	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0216 	orr.w	r2, r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0208 	orr.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e005      	b.n	80027fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
 80027f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002810:	4b8e      	ldr	r3, [pc, #568]	@ (8002a4c <HAL_DMA_IRQHandler+0x248>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a8e      	ldr	r2, [pc, #568]	@ (8002a50 <HAL_DMA_IRQHandler+0x24c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	2208      	movs	r2, #8
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0204 	bic.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	2208      	movs	r2, #8
 800285e:	409a      	lsls	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d012      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028aa:	2204      	movs	r2, #4
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e0:	2210      	movs	r2, #16
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d043      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03c      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fe:	2210      	movs	r2, #16
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d108      	bne.n	8002934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e01f      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
 8002944:	e016      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0208 	bic.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002978:	2220      	movs	r2, #32
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 808f 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8087 	beq.w	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	2220      	movs	r2, #32
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d136      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0216 	bic.w	r2, r2, #22
 80029bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_DMA_IRQHandler+0x1da>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	223f      	movs	r2, #63	@ 0x3f
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07e      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
        }
        return;
 8002a1a:	e079      	b.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01d      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d031      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
 8002a48:	e02c      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
 8002a64:	e01e      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0210 	bic.w	r2, r2, #16
 8002a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d032      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d022      	beq.n	8002afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2205      	movs	r2, #5
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d307      	bcc.n	8002aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f2      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x2cc>
 8002aea:	e000      	b.n	8002aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
 8002b0e:	e000      	b.n	8002b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b10:	bf00      	nop
    }
  }
}
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b40      	cmp	r3, #64	@ 0x40
 8002b44:	d108      	bne.n	8002b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b56:	e007      	b.n	8002b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b10      	subs	r3, #16
 8002b84:	4a13      	ldr	r2, [pc, #76]	@ (8002bd4 <DMA_CalcBaseAndBitshift+0x60>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b8e:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d908      	bls.n	8002bb4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <DMA_CalcBaseAndBitshift+0x68>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	1d1a      	adds	r2, r3, #4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bb2:	e006      	b.n	8002bc2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <DMA_CalcBaseAndBitshift+0x68>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	aaaaaaab 	.word	0xaaaaaaab
 8002bd8:	08008c10 	.word	0x08008c10
 8002bdc:	fffffc00 	.word	0xfffffc00

08002be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11f      	bne.n	8002c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d856      	bhi.n	8002cae <DMA_CheckFifoParam+0xce>
 8002c00:	a201      	add	r2, pc, #4	@ (adr r2, 8002c08 <DMA_CheckFifoParam+0x28>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c2b 	.word	0x08002c2b
 8002c10:	08002c19 	.word	0x08002c19
 8002c14:	08002caf 	.word	0x08002caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d046      	beq.n	8002cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e043      	b.n	8002cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c32:	d140      	bne.n	8002cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e03d      	b.n	8002cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c42:	d121      	bne.n	8002c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d837      	bhi.n	8002cba <DMA_CheckFifoParam+0xda>
 8002c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c50 <DMA_CheckFifoParam+0x70>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c67 	.word	0x08002c67
 8002c58:	08002c61 	.word	0x08002c61
 8002c5c:	08002c79 	.word	0x08002c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e030      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d025      	beq.n	8002cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e022      	b.n	8002cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c80:	d11f      	bne.n	8002cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c86:	e01c      	b.n	8002cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d903      	bls.n	8002c96 <DMA_CheckFifoParam+0xb6>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d003      	beq.n	8002c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c94:	e018      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9a:	e015      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00e      	beq.n	8002cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e00b      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e00a      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e008      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e006      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e004      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop

08002cd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e086      	b.n	8002df8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fe f969 	bl	8000fd4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	4b3f      	ldr	r3, [pc, #252]	@ (8002e00 <HAL_ETH_Init+0x128>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	4a3e      	ldr	r2, [pc, #248]	@ (8002e00 <HAL_ETH_Init+0x128>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e00 <HAL_ETH_Init+0x128>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e04 <HAL_ETH_Init+0x12c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4a39      	ldr	r2, [pc, #228]	@ (8002e04 <HAL_ETH_Init+0x12c>)
 8002d20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d24:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d26:	4b37      	ldr	r3, [pc, #220]	@ (8002e04 <HAL_ETH_Init+0x12c>)
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	4935      	ldr	r1, [pc, #212]	@ (8002e04 <HAL_ETH_Init+0x12c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d34:	4b33      	ldr	r3, [pc, #204]	@ (8002e04 <HAL_ETH_Init+0x12c>)
 8002d36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d50:	f7fe fc8e 	bl	8001670 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d56:	e011      	b.n	8002d7c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d58:	f7fe fc8a 	bl	8001670 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d66:	d909      	bls.n	8002d7c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	22e0      	movs	r2, #224	@ 0xe0
 8002d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e03d      	b.n	8002df8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e4      	bne.n	8002d58 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f97a 	bl	8003088 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fa25 	bl	80031e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa7b 	bl	8003296 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f9e3 	bl	8003174 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <HAL_ETH_Init+0x130>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002de2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2210      	movs	r2, #16
 8002df2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40013800 	.word	0x40013800
 8002e08:	00020060 	.word	0x00020060

08002e0c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4b53      	ldr	r3, [pc, #332]	@ (8002f70 <ETH_SetMACConfig+0x164>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	7b9b      	ldrb	r3, [r3, #14]
 8002e2a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	7c12      	ldrb	r2, [r2, #16]
 8002e30:	2a00      	cmp	r2, #0
 8002e32:	d102      	bne.n	8002e3a <ETH_SetMACConfig+0x2e>
 8002e34:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e38:	e000      	b.n	8002e3c <ETH_SetMACConfig+0x30>
 8002e3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	7c52      	ldrb	r2, [r2, #17]
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d102      	bne.n	8002e4c <ETH_SetMACConfig+0x40>
 8002e46:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e4a:	e000      	b.n	8002e4e <ETH_SetMACConfig+0x42>
 8002e4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e4e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	7fdb      	ldrb	r3, [r3, #31]
 8002e5a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e5c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	7f92      	ldrb	r2, [r2, #30]
 8002e68:	2a00      	cmp	r2, #0
 8002e6a:	d102      	bne.n	8002e72 <ETH_SetMACConfig+0x66>
 8002e6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e70:	e000      	b.n	8002e74 <ETH_SetMACConfig+0x68>
 8002e72:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	7f1b      	ldrb	r3, [r3, #28]
 8002e7a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e7c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	791b      	ldrb	r3, [r3, #4]
 8002e88:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e92:	2a00      	cmp	r2, #0
 8002e94:	d102      	bne.n	8002e9c <ETH_SetMACConfig+0x90>
 8002e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9a:	e000      	b.n	8002e9e <ETH_SetMACConfig+0x92>
 8002e9c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	7bdb      	ldrb	r3, [r3, #15]
 8002ea4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ea6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002eac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002eb4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f7fe fbda 	bl	8001688 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002eea:	4013      	ands	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	d101      	bne.n	8002f02 <ETH_SetMACConfig+0xf6>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	e000      	b.n	8002f04 <ETH_SetMACConfig+0xf8>
 8002f02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f04:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f12:	2a01      	cmp	r2, #1
 8002f14:	d101      	bne.n	8002f1a <ETH_SetMACConfig+0x10e>
 8002f16:	2208      	movs	r2, #8
 8002f18:	e000      	b.n	8002f1c <ETH_SetMACConfig+0x110>
 8002f1a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f1c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f24:	2a01      	cmp	r2, #1
 8002f26:	d101      	bne.n	8002f2c <ETH_SetMACConfig+0x120>
 8002f28:	2204      	movs	r2, #4
 8002f2a:	e000      	b.n	8002f2e <ETH_SetMACConfig+0x122>
 8002f2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002f36:	2a01      	cmp	r2, #1
 8002f38:	d101      	bne.n	8002f3e <ETH_SetMACConfig+0x132>
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	e000      	b.n	8002f40 <ETH_SetMACConfig+0x134>
 8002f3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f40:	4313      	orrs	r3, r2
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f7fe fb95 	bl	8001688 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	619a      	str	r2, [r3, #24]
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	fd20810f 	.word	0xfd20810f

08002f74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003084 <ETH_SetDMAConfig+0x110>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7b1b      	ldrb	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <ETH_SetDMAConfig+0x2c>
 8002f9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f9e:	e000      	b.n	8002fa2 <ETH_SetDMAConfig+0x2e>
 8002fa0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	7b5b      	ldrb	r3, [r3, #13]
 8002fa6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fa8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	7f52      	ldrb	r2, [r2, #29]
 8002fae:	2a00      	cmp	r2, #0
 8002fb0:	d102      	bne.n	8002fb8 <ETH_SetDMAConfig+0x44>
 8002fb2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002fb6:	e000      	b.n	8002fba <ETH_SetDMAConfig+0x46>
 8002fb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	7b9b      	ldrb	r3, [r3, #14]
 8002fc0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fc2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	7f1b      	ldrb	r3, [r3, #28]
 8002fce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002fd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7f9b      	ldrb	r3, [r3, #30]
 8002fd6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fd8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fe6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800300a:	2001      	movs	r0, #1
 800300c:	f7fe fb3c 	bl	8001688 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003018:	461a      	mov	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	791b      	ldrb	r3, [r3, #4]
 8003022:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003028:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800302e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003034:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800303c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800303e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003046:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800304c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003056:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800305a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003068:	2001      	movs	r0, #1
 800306a:	f7fe fb0d 	bl	8001688 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6013      	str	r3, [r2, #0]
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	f8de3f23 	.word	0xf8de3f23

08003088 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b0a6      	sub	sp, #152	@ 0x98
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800309c:	2300      	movs	r3, #0
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030ca:	2300      	movs	r3, #0
 80030cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003102:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fe7f 	bl	8002e0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800310e:	2301      	movs	r3, #1
 8003110:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003112:	2301      	movs	r3, #1
 8003114:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800311c:	2301      	movs	r3, #1
 800311e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800313a:	2301      	movs	r3, #1
 800313c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800313e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003142:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003144:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003148:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800314a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800314e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003156:	2300      	movs	r3, #0
 8003158:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	4619      	mov	r1, r3
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff05 	bl	8002f74 <ETH_SetDMAConfig>
}
 800316a:	bf00      	nop
 800316c:	3798      	adds	r7, #152	@ 0x98
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3305      	adds	r3, #5
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	3204      	adds	r2, #4
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <ETH_MACAddressConfig+0x68>)
 8003196:	4413      	add	r3, r2
 8003198:	461a      	mov	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3303      	adds	r3, #3
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	061a      	lsls	r2, r3, #24
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3302      	adds	r3, #2
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3301      	adds	r3, #1
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	4313      	orrs	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <ETH_MACAddressConfig+0x6c>)
 80031c6:	4413      	add	r3, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	6013      	str	r3, [r2, #0]
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40028040 	.word	0x40028040
 80031e0:	40028044 	.word	0x40028044

080031e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e03e      	b.n	8003270 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68d9      	ldr	r1, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2200      	movs	r2, #0
 800320e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	3206      	adds	r2, #6
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d80c      	bhi.n	8003254 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68d9      	ldr	r1, [r3, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	440b      	add	r3, r1
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e004      	b.n	800325e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d9bd      	bls.n	80031f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003288:	611a      	str	r2, [r3, #16]
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e048      	b.n	8003336 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6919      	ldr	r1, [r3, #16]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2200      	movs	r2, #0
 80032c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80032e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	3212      	adds	r2, #18
 8003302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d80c      	bhi.n	8003326 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6919      	ldr	r1, [r3, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	e004      	b.n	8003330 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3301      	adds	r3, #1
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d9b3      	bls.n	80032a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003366:	60da      	str	r2, [r3, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	@ 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e175      	b.n	8003680 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 8164 	bne.w	800367a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d005      	beq.n	80033ca <HAL_GPIO_Init+0x56>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d130      	bne.n	800342c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003400:	2201      	movs	r2, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 0201 	and.w	r2, r3, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b03      	cmp	r3, #3
 8003436:	d017      	beq.n	8003468 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d123      	bne.n	80034bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80be 	beq.w	800367a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b66      	ldr	r3, [pc, #408]	@ (8003698 <HAL_GPIO_Init+0x324>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	4a65      	ldr	r2, [pc, #404]	@ (8003698 <HAL_GPIO_Init+0x324>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003508:	6453      	str	r3, [r2, #68]	@ 0x44
 800350a:	4b63      	ldr	r3, [pc, #396]	@ (8003698 <HAL_GPIO_Init+0x324>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003516:	4a61      	ldr	r2, [pc, #388]	@ (800369c <HAL_GPIO_Init+0x328>)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3302      	adds	r3, #2
 800351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	220f      	movs	r2, #15
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a58      	ldr	r2, [pc, #352]	@ (80036a0 <HAL_GPIO_Init+0x32c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d037      	beq.n	80035b2 <HAL_GPIO_Init+0x23e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a57      	ldr	r2, [pc, #348]	@ (80036a4 <HAL_GPIO_Init+0x330>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_GPIO_Init+0x23a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a56      	ldr	r2, [pc, #344]	@ (80036a8 <HAL_GPIO_Init+0x334>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <HAL_GPIO_Init+0x236>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a55      	ldr	r2, [pc, #340]	@ (80036ac <HAL_GPIO_Init+0x338>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d025      	beq.n	80035a6 <HAL_GPIO_Init+0x232>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a54      	ldr	r2, [pc, #336]	@ (80036b0 <HAL_GPIO_Init+0x33c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01f      	beq.n	80035a2 <HAL_GPIO_Init+0x22e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a53      	ldr	r2, [pc, #332]	@ (80036b4 <HAL_GPIO_Init+0x340>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d019      	beq.n	800359e <HAL_GPIO_Init+0x22a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a52      	ldr	r2, [pc, #328]	@ (80036b8 <HAL_GPIO_Init+0x344>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_GPIO_Init+0x226>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a51      	ldr	r2, [pc, #324]	@ (80036bc <HAL_GPIO_Init+0x348>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00d      	beq.n	8003596 <HAL_GPIO_Init+0x222>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a50      	ldr	r2, [pc, #320]	@ (80036c0 <HAL_GPIO_Init+0x34c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <HAL_GPIO_Init+0x21e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4f      	ldr	r2, [pc, #316]	@ (80036c4 <HAL_GPIO_Init+0x350>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_GPIO_Init+0x21a>
 800358a:	2309      	movs	r3, #9
 800358c:	e012      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 800358e:	230a      	movs	r3, #10
 8003590:	e010      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 8003592:	2308      	movs	r3, #8
 8003594:	e00e      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 8003596:	2307      	movs	r3, #7
 8003598:	e00c      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 800359a:	2306      	movs	r3, #6
 800359c:	e00a      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 800359e:	2305      	movs	r3, #5
 80035a0:	e008      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e004      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035b2:	2300      	movs	r3, #0
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f002 0203 	and.w	r2, r2, #3
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	4093      	lsls	r3, r2
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035c4:	4935      	ldr	r1, [pc, #212]	@ (800369c <HAL_GPIO_Init+0x328>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d2:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f6:	4a34      	ldr	r2, [pc, #208]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035fc:	4b32      	ldr	r3, [pc, #200]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003620:	4a29      	ldr	r2, [pc, #164]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003626:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364a:	4a1f      	ldr	r2, [pc, #124]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003650:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003674:	4a14      	ldr	r2, [pc, #80]	@ (80036c8 <HAL_GPIO_Init+0x354>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3301      	adds	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	f67f ae86 	bls.w	8003394 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3724      	adds	r7, #36	@ 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40013800 	.word	0x40013800
 80036a0:	40020000 	.word	0x40020000
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40021400 	.word	0x40021400
 80036b8:	40021800 	.word	0x40021800
 80036bc:	40021c00 	.word	0x40021c00
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40022400 	.word	0x40022400
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800370a:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003716:	4a05      	ldr	r2, [pc, #20]	@ (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f806 	bl	8003730 <HAL_GPIO_EXTI_Callback>
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af02      	add	r7, sp, #8
 800374c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e108      	b.n	800396a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd fd64 	bl	8001240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2203      	movs	r2, #3
 800377c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003786:	d102      	bne.n	800378e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fb80 	bl	8005e98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	7c1a      	ldrb	r2, [r3, #16]
 80037a0:	f88d 2000 	strb.w	r2, [sp]
 80037a4:	3304      	adds	r3, #4
 80037a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a8:	f002 fb1c 	bl	8005de4 <USB_CoreInit>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0d5      	b.n	800396a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f002 fb78 	bl	8005eba <USB_SetCurrentMode>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0c6      	b.n	800396a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e04a      	b.n	8003878 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3315      	adds	r3, #21
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3314      	adds	r3, #20
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	b298      	uxth	r0, r3
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	332e      	adds	r3, #46	@ 0x2e
 800381e:	4602      	mov	r2, r0
 8003820:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	3318      	adds	r3, #24
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	331c      	adds	r3, #28
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3320      	adds	r3, #32
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3324      	adds	r3, #36	@ 0x24
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	3301      	adds	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	791b      	ldrb	r3, [r3, #4]
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	429a      	cmp	r2, r3
 8003880:	d3af      	bcc.n	80037e2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e044      	b.n	8003912 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038c6:	2200      	movs	r2, #0
 80038c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	3301      	adds	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	791b      	ldrb	r3, [r3, #4]
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3b5      	bcc.n	8003888 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7c1a      	ldrb	r2, [r3, #16]
 8003924:	f88d 2000 	strb.w	r2, [sp]
 8003928:	3304      	adds	r3, #4
 800392a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800392c:	f002 fb12 	bl	8005f54 <USB_DevInit>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e013      	b.n	800396a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7b1b      	ldrb	r3, [r3, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d102      	bne.n	800395e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f80b 	bl	8003974 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f002 fccd 	bl	8006302 <USB_DevDisconnect>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039a2:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	10000003 	.word	0x10000003

080039bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ca:	6013      	str	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40007000 	.word	0x40007000

080039dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	4a22      	ldr	r2, [pc, #136]	@ (8003a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f2:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a0a:	f7fd fe31 	bl	8001670 <HAL_GetTick>
 8003a0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a10:	e009      	b.n	8003a26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a12:	f7fd fe2d 	bl	8001670 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a20:	d901      	bls.n	8003a26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e022      	b.n	8003a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a26:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a32:	d1ee      	bne.n	8003a12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a34:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0f      	ldr	r2, [pc, #60]	@ (8003a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a40:	f7fd fe16 	bl	8001670 <HAL_GetTick>
 8003a44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a46:	e009      	b.n	8003a5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a48:	f7fd fe12 	bl	8001670 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a56:	d901      	bls.n	8003a5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e007      	b.n	8003a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a5c:	4b06      	ldr	r3, [pc, #24]	@ (8003a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a68:	d1ee      	bne.n	8003a48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e29b      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8087 	beq.w	8003bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa0:	4b96      	ldr	r3, [pc, #600]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d00c      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aac:	4b93      	ldr	r3, [pc, #588]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d112      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
 8003ab8:	4b90      	ldr	r3, [pc, #576]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac4:	d10b      	bne.n	8003ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d06c      	beq.n	8003bac <HAL_RCC_OscConfig+0x130>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d168      	bne.n	8003bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e275      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x7a>
 8003ae8:	4b84      	ldr	r3, [pc, #528]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a83      	ldr	r2, [pc, #524]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e02e      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x9c>
 8003afe:	4b7f      	ldr	r3, [pc, #508]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a7e      	ldr	r2, [pc, #504]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0xc0>
 8003b22:	4b76      	ldr	r3, [pc, #472]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b73      	ldr	r3, [pc, #460]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a72      	ldr	r2, [pc, #456]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xd8>
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b6c      	ldr	r3, [pc, #432]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fd88 	bl	8001670 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fd84 	bl	8001670 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	@ 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e229      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b61      	ldr	r3, [pc, #388]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe8>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd fd74 	bl	8001670 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fd70 	bl	8001670 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e215      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b57      	ldr	r3, [pc, #348]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x110>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d069      	beq.n	8003c8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bba:	4b50      	ldr	r3, [pc, #320]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x190>
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b47      	ldr	r3, [pc, #284]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1e9      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b41      	ldr	r3, [pc, #260]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	493d      	ldr	r1, [pc, #244]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e040      	b.n	8003c8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d023      	beq.n	8003c5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a38      	ldr	r2, [pc, #224]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fd26 	bl	8001670 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fd fd22 	bl	8001670 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1c7      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b30      	ldr	r3, [pc, #192]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4929      	ldr	r1, [pc, #164]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
 8003c5a:	e018      	b.n	8003c8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a26      	ldr	r2, [pc, #152]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fd02 	bl	8001670 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fd fcfe 	bl	8001670 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1a3      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	4b1e      	ldr	r3, [pc, #120]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d038      	beq.n	8003d0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d019      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b16      	ldr	r3, [pc, #88]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca6:	4a15      	ldr	r2, [pc, #84]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cae:	f7fd fcdf 	bl	8001670 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb6:	f7fd fcdb 	bl	8001670 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e180      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x23a>
 8003cd4:	e01a      	b.n	8003d0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cda:	4a08      	ldr	r2, [pc, #32]	@ (8003cfc <HAL_RCC_OscConfig+0x280>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce2:	f7fd fcc5 	bl	8001670 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cea:	f7fd fcc1 	bl	8001670 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d903      	bls.n	8003d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e166      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
 8003cfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	4b92      	ldr	r3, [pc, #584]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ee      	bne.n	8003cea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80a4 	beq.w	8003e62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1a:	4b8c      	ldr	r3, [pc, #560]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d26:	4b89      	ldr	r3, [pc, #548]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	4a88      	ldr	r2, [pc, #544]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d32:	4b86      	ldr	r3, [pc, #536]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d42:	4b83      	ldr	r3, [pc, #524]	@ (8003f50 <HAL_RCC_OscConfig+0x4d4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d118      	bne.n	8003d80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d4e:	4b80      	ldr	r3, [pc, #512]	@ (8003f50 <HAL_RCC_OscConfig+0x4d4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7f      	ldr	r2, [pc, #508]	@ (8003f50 <HAL_RCC_OscConfig+0x4d4>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d5a:	f7fd fc89 	bl	8001670 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d62:	f7fd fc85 	bl	8001670 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	@ 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e12a      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d74:	4b76      	ldr	r3, [pc, #472]	@ (8003f50 <HAL_RCC_OscConfig+0x4d4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x31a>
 8003d88:	4b70      	ldr	r3, [pc, #448]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a6f      	ldr	r2, [pc, #444]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d94:	e02d      	b.n	8003df2 <HAL_RCC_OscConfig+0x376>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x33c>
 8003d9e:	4b6b      	ldr	r3, [pc, #428]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	4a6a      	ldr	r2, [pc, #424]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003daa:	4b68      	ldr	r3, [pc, #416]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	4a67      	ldr	r2, [pc, #412]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db6:	e01c      	b.n	8003df2 <HAL_RCC_OscConfig+0x376>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b05      	cmp	r3, #5
 8003dbe:	d10c      	bne.n	8003dda <HAL_RCC_OscConfig+0x35e>
 8003dc0:	4b62      	ldr	r3, [pc, #392]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	4a61      	ldr	r2, [pc, #388]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003dc6:	f043 0304 	orr.w	r3, r3, #4
 8003dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dcc:	4b5f      	ldr	r3, [pc, #380]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd0:	4a5e      	ldr	r2, [pc, #376]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd8:	e00b      	b.n	8003df2 <HAL_RCC_OscConfig+0x376>
 8003dda:	4b5c      	ldr	r3, [pc, #368]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	4a5b      	ldr	r2, [pc, #364]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de6:	4b59      	ldr	r3, [pc, #356]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a58      	ldr	r2, [pc, #352]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003dec:	f023 0304 	bic.w	r3, r3, #4
 8003df0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fc39 	bl	8001670 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd fc35 	bl	8001670 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0d8      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	4b4c      	ldr	r3, [pc, #304]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ee      	beq.n	8003e02 <HAL_RCC_OscConfig+0x386>
 8003e24:	e014      	b.n	8003e50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fd fc23 	bl	8001670 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fd fc1f 	bl	8001670 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0c2      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e44:	4b41      	ldr	r3, [pc, #260]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ee      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e56:	4b3d      	ldr	r3, [pc, #244]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80ae 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6c:	4b37      	ldr	r3, [pc, #220]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d06d      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d14b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e80:	4b32      	ldr	r3, [pc, #200]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a31      	ldr	r2, [pc, #196]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fbf0 	bl	8001670 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd fbec 	bl	8001670 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e091      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	4b29      	ldr	r3, [pc, #164]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	019b      	lsls	r3, r3, #6
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	071b      	lsls	r3, r3, #28
 8003ede:	491b      	ldr	r1, [pc, #108]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b19      	ldr	r3, [pc, #100]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fbbe 	bl	8001670 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd fbba 	bl	8001670 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e05f      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0a:	4b10      	ldr	r3, [pc, #64]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
 8003f16:	e057      	b.n	8003fc8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f18:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fba4 	bl	8001670 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fd fba0 	bl	8001670 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e045      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	4b03      	ldr	r3, [pc, #12]	@ (8003f4c <HAL_RCC_OscConfig+0x4d0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4b0>
 8003f4a:	e03d      	b.n	8003fc8 <HAL_RCC_OscConfig+0x54c>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f54:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd4 <HAL_RCC_OscConfig+0x558>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d030      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d129      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d122      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d119      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0d0      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d910      	bls.n	8004020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b67      	ldr	r3, [pc, #412]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 020f 	bic.w	r2, r3, #15
 8004006:	4965      	ldr	r1, [pc, #404]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b63      	ldr	r3, [pc, #396]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004038:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a58      	ldr	r2, [pc, #352]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004050:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a52      	ldr	r2, [pc, #328]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004056:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800405a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b50      	ldr	r3, [pc, #320]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	494d      	ldr	r1, [pc, #308]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d040      	beq.n	80040fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b47      	ldr	r3, [pc, #284]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b41      	ldr	r3, [pc, #260]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e073      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b3d      	ldr	r3, [pc, #244]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06b      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b39      	ldr	r3, [pc, #228]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4936      	ldr	r1, [pc, #216]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040cc:	f7fd fad0 	bl	8001670 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fd facc 	bl	8001670 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e053      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b27      	ldr	r3, [pc, #156]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d210      	bcs.n	800412c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b24      	ldr	r3, [pc, #144]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 020f 	bic.w	r2, r3, #15
 8004112:	4922      	ldr	r1, [pc, #136]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b20      	ldr	r3, [pc, #128]	@ (800419c <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e032      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4916      	ldr	r1, [pc, #88]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490e      	ldr	r1, [pc, #56]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416a:	f000 f821 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490a      	ldr	r1, [pc, #40]	@ (80041a4 <HAL_RCC_ClockConfig+0x1cc>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004186:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <HAL_RCC_ClockConfig+0x1d4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd fa2c 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023c00 	.word	0x40023c00
 80041a0:	40023800 	.word	0x40023800
 80041a4:	08008bf8 	.word	0x08008bf8
 80041a8:	20000000 	.word	0x20000000
 80041ac:	20000004 	.word	0x20000004

080041b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b4:	b094      	sub	sp, #80	@ 0x50
 80041b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80041bc:	2300      	movs	r3, #0
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c0:	2300      	movs	r3, #0
 80041c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c8:	4b79      	ldr	r3, [pc, #484]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d00d      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x40>
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	f200 80e1 	bhi.w	800439c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x34>
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x3a>
 80041e2:	e0db      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b73      	ldr	r3, [pc, #460]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e8:	e0db      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ea:	4b73      	ldr	r3, [pc, #460]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ee:	e0d8      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f0:	4b6f      	ldr	r3, [pc, #444]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041fa:	4b6d      	ldr	r3, [pc, #436]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d063      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b6a      	ldr	r3, [pc, #424]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	2200      	movs	r2, #0
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004210:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004218:	633b      	str	r3, [r7, #48]	@ 0x30
 800421a:	2300      	movs	r3, #0
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
 800421e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f04f 0000 	mov.w	r0, #0
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	0159      	lsls	r1, r3, #5
 8004230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004234:	0150      	lsls	r0, r2, #5
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4621      	mov	r1, r4
 800423c:	1a51      	subs	r1, r2, r1
 800423e:	6139      	str	r1, [r7, #16]
 8004240:	4629      	mov	r1, r5
 8004242:	eb63 0301 	sbc.w	r3, r3, r1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004254:	4659      	mov	r1, fp
 8004256:	018b      	lsls	r3, r1, #6
 8004258:	4651      	mov	r1, sl
 800425a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425e:	4651      	mov	r1, sl
 8004260:	018a      	lsls	r2, r1, #6
 8004262:	4651      	mov	r1, sl
 8004264:	ebb2 0801 	subs.w	r8, r2, r1
 8004268:	4659      	mov	r1, fp
 800426a:	eb63 0901 	sbc.w	r9, r3, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004282:	4690      	mov	r8, r2
 8004284:	4699      	mov	r9, r3
 8004286:	4623      	mov	r3, r4
 8004288:	eb18 0303 	adds.w	r3, r8, r3
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	462b      	mov	r3, r5
 8004290:	eb49 0303 	adc.w	r3, r9, r3
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042a2:	4629      	mov	r1, r5
 80042a4:	024b      	lsls	r3, r1, #9
 80042a6:	4621      	mov	r1, r4
 80042a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042ac:	4621      	mov	r1, r4
 80042ae:	024a      	lsls	r2, r1, #9
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b6:	2200      	movs	r2, #0
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c0:	f7fc f816 	bl	80002f0 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042cc:	e058      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ce:	4b38      	ldr	r3, [pc, #224]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	2200      	movs	r2, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	4611      	mov	r1, r2
 80042da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	f04f 0000 	mov.w	r0, #0
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	0159      	lsls	r1, r3, #5
 80042f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fa:	0150      	lsls	r0, r2, #5
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4641      	mov	r1, r8
 8004302:	ebb2 0a01 	subs.w	sl, r2, r1
 8004306:	4649      	mov	r1, r9
 8004308:	eb63 0b01 	sbc.w	fp, r3, r1
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800431c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004320:	ebb2 040a 	subs.w	r4, r2, sl
 8004324:	eb63 050b 	sbc.w	r5, r3, fp
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	00eb      	lsls	r3, r5, #3
 8004332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004336:	00e2      	lsls	r2, r4, #3
 8004338:	4614      	mov	r4, r2
 800433a:	461d      	mov	r5, r3
 800433c:	4643      	mov	r3, r8
 800433e:	18e3      	adds	r3, r4, r3
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	464b      	mov	r3, r9
 8004344:	eb45 0303 	adc.w	r3, r5, r3
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004356:	4629      	mov	r1, r5
 8004358:	028b      	lsls	r3, r1, #10
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004360:	4621      	mov	r1, r4
 8004362:	028a      	lsls	r2, r1, #10
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	61fa      	str	r2, [r7, #28]
 8004370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004374:	f7fb ffbc 	bl	80002f0 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800439a:	e002      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3750      	adds	r7, #80	@ 0x50
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	@ (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	@ (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08008c08 	.word	0x08008c08

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffdc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0b5b      	lsrs	r3, r3, #13
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	@ (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	08008c08 	.word	0x08008c08

08004424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800444c:	4b69      	ldr	r3, [pc, #420]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a68      	ldr	r2, [pc, #416]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004456:	6093      	str	r3, [r2, #8]
 8004458:	4b66      	ldr	r3, [pc, #408]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004460:	4964      	ldr	r1, [pc, #400]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d017      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800447e:	4b5d      	ldr	r3, [pc, #372]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004484:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	4959      	ldr	r1, [pc, #356]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449c:	d101      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ba:	4b4e      	ldr	r3, [pc, #312]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	494a      	ldr	r1, [pc, #296]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044f6:	2301      	movs	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 808b 	beq.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	4a39      	ldr	r2, [pc, #228]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	@ 0x40
 8004514:	4b37      	ldr	r3, [pc, #220]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004520:	4b35      	ldr	r3, [pc, #212]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a34      	ldr	r2, [pc, #208]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd f8a0 	bl	8001670 <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fd f89c 	bl	8001670 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	@ 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e38f      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004546:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004552:	4b28      	ldr	r3, [pc, #160]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d035      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d02e      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004570:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004578:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a1d      	ldr	r2, [pc, #116]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004586:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	4a1a      	ldr	r2, [pc, #104]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004592:	4a18      	ldr	r2, [pc, #96]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004598:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d114      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd f864 	bl	8001670 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	e00a      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ac:	f7fd f860 	bl	8001670 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e351      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ee      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045da:	d111      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ea:	400b      	ands	r3, r1
 80045ec:	4901      	ldr	r1, [pc, #4]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
 80045f2:	e00b      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	0ffffcff 	.word	0x0ffffcff
 8004600:	4bac      	ldr	r3, [pc, #688]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4aab      	ldr	r2, [pc, #684]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	4ba9      	ldr	r3, [pc, #676]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	49a6      	ldr	r1, [pc, #664]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	4313      	orrs	r3, r2
 800461c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800462a:	4ba2      	ldr	r3, [pc, #648]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004630:	4aa0      	ldr	r2, [pc, #640]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004636:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800463a:	4b9e      	ldr	r3, [pc, #632]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	499b      	ldr	r1, [pc, #620]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b96      	ldr	r3, [pc, #600]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004666:	4993      	ldr	r1, [pc, #588]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467a:	4b8e      	ldr	r3, [pc, #568]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004680:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004688:	498a      	ldr	r1, [pc, #552]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469c:	4b85      	ldr	r3, [pc, #532]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046aa:	4982      	ldr	r1, [pc, #520]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046be:	4b7d      	ldr	r3, [pc, #500]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	4979      	ldr	r1, [pc, #484]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e0:	4b74      	ldr	r3, [pc, #464]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	4971      	ldr	r1, [pc, #452]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004702:	4b6c      	ldr	r3, [pc, #432]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f023 020c 	bic.w	r2, r3, #12
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004710:	4968      	ldr	r1, [pc, #416]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004724:	4b63      	ldr	r3, [pc, #396]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004732:	4960      	ldr	r1, [pc, #384]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004746:	4b5b      	ldr	r3, [pc, #364]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004754:	4957      	ldr	r1, [pc, #348]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004768:	4b52      	ldr	r3, [pc, #328]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	494f      	ldr	r1, [pc, #316]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800478a:	4b4a      	ldr	r3, [pc, #296]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004798:	4946      	ldr	r1, [pc, #280]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047ac:	4b41      	ldr	r3, [pc, #260]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	493e      	ldr	r1, [pc, #248]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047ce:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047dc:	4935      	ldr	r1, [pc, #212]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047f0:	4b30      	ldr	r3, [pc, #192]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fe:	492d      	ldr	r1, [pc, #180]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004812:	4b28      	ldr	r3, [pc, #160]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004820:	4924      	ldr	r1, [pc, #144]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004830:	d101      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004842:	2301      	movs	r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004852:	4b18      	ldr	r3, [pc, #96]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004858:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004860:	4914      	ldr	r1, [pc, #80]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004874:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004884:	490b      	ldr	r1, [pc, #44]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a8:	4902      	ldr	r1, [pc, #8]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048b0:	e002      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048c4:	4b8a      	ldr	r3, [pc, #552]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	4986      	ldr	r1, [pc, #536]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048e8:	4b81      	ldr	r3, [pc, #516]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f8:	497d      	ldr	r1, [pc, #500]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d006      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80d6 	beq.w	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004914:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a75      	ldr	r2, [pc, #468]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800491e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004920:	f7fc fea6 	bl	8001670 <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004928:	f7fc fea2 	bl	8001670 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b64      	cmp	r3, #100	@ 0x64
 8004934:	d901      	bls.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e195      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493a:	4b6d      	ldr	r3, [pc, #436]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d021      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800495a:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004968:	4b61      	ldr	r3, [pc, #388]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496e:	0e1b      	lsrs	r3, r3, #24
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	4958      	ldr	r1, [pc, #352]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02e      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049c0:	d129      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049c2:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049d0:	4b47      	ldr	r3, [pc, #284]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d6:	0f1b      	lsrs	r3, r3, #28
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	061b      	lsls	r3, r3, #24
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	493e      	ldr	r1, [pc, #248]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049fe:	4b3c      	ldr	r3, [pc, #240]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a04:	f023 021f 	bic.w	r2, r3, #31
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	4938      	ldr	r1, [pc, #224]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01d      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a22:	4b33      	ldr	r3, [pc, #204]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a28:	0e1b      	lsrs	r3, r3, #24
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a30:	4b2f      	ldr	r3, [pc, #188]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a36:	0f1b      	lsrs	r3, r3, #28
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	019a      	lsls	r2, r3, #6
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	071b      	lsls	r3, r3, #28
 8004a56:	4926      	ldr	r1, [pc, #152]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d011      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	019a      	lsls	r2, r3, #6
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	061b      	lsls	r3, r3, #24
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	071b      	lsls	r3, r3, #28
 8004a86:	491a      	ldr	r1, [pc, #104]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a8e:	4b18      	ldr	r3, [pc, #96]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9a:	f7fc fde9 	bl	8001670 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aa2:	f7fc fde5 	bl	8001670 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b64      	cmp	r3, #100	@ 0x64
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e0d8      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	f040 80ce 	bne.w	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad4:	f7fc fdcc 	bl	8001670 <HAL_GetTick>
 8004ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ada:	e00b      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004adc:	f7fc fdc8 	bl	8001670 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	@ 0x64
 8004ae8:	d904      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e0bb      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b00:	d0ec      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02e      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d12a      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b2a:	4b51      	ldr	r3, [pc, #324]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b38:	4b4d      	ldr	r3, [pc, #308]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	0f1b      	lsrs	r3, r3, #28
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	4944      	ldr	r1, [pc, #272]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b66:	4b42      	ldr	r3, [pc, #264]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b74:	3b01      	subs	r3, #1
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	493d      	ldr	r1, [pc, #244]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d022      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b94:	d11d      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b96:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ba4:	4b32      	ldr	r3, [pc, #200]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004baa:	0f1b      	lsrs	r3, r3, #28
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	019a      	lsls	r2, r3, #6
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	061b      	lsls	r3, r3, #24
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	071b      	lsls	r3, r3, #28
 8004bca:	4929      	ldr	r1, [pc, #164]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d028      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bde:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	0e1b      	lsrs	r3, r3, #24
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bec:	4b20      	ldr	r3, [pc, #128]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	0c1b      	lsrs	r3, r3, #16
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	019a      	lsls	r2, r3, #6
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	431a      	orrs	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	4917      	ldr	r1, [pc, #92]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4911      	ldr	r1, [pc, #68]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c30:	4b0f      	ldr	r3, [pc, #60]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0e      	ldr	r2, [pc, #56]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fc fd18 	bl	8001670 <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c44:	f7fc fd14 	bl	8001670 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e007      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c56:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c62:	d1ef      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800

08004c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e049      	b.n	8004d1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fa52 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 f970 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d001      	beq.n	8004d3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e04c      	b.n	8004dd6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a26      	ldr	r2, [pc, #152]	@ (8004de4 <HAL_TIM_Base_Start+0xc0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <HAL_TIM_Base_Start+0x70>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d56:	d01d      	beq.n	8004d94 <HAL_TIM_Base_Start+0x70>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a22      	ldr	r2, [pc, #136]	@ (8004de8 <HAL_TIM_Base_Start+0xc4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d018      	beq.n	8004d94 <HAL_TIM_Base_Start+0x70>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a21      	ldr	r2, [pc, #132]	@ (8004dec <HAL_TIM_Base_Start+0xc8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_TIM_Base_Start+0x70>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	@ (8004df0 <HAL_TIM_Base_Start+0xcc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_TIM_Base_Start+0x70>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004df4 <HAL_TIM_Base_Start+0xd0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_TIM_Base_Start+0x70>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1c      	ldr	r2, [pc, #112]	@ (8004df8 <HAL_TIM_Base_Start+0xd4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_TIM_Base_Start+0x70>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dfc <HAL_TIM_Base_Start+0xd8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d115      	bne.n	8004dc0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689a      	ldr	r2, [r3, #8]
 8004d9a:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <HAL_TIM_Base_Start+0xdc>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b06      	cmp	r3, #6
 8004da4:	d015      	beq.n	8004dd2 <HAL_TIM_Base_Start+0xae>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dac:	d011      	beq.n	8004dd2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	e008      	b.n	8004dd2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e000      	b.n	8004dd4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40001800 	.word	0x40001800
 8004e00:	00010007 	.word	0x00010007

08004e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIM_ConfigClockSource+0x1c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0b4      	b.n	8004f8a <HAL_TIM_ConfigClockSource+0x186>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	4b56      	ldr	r3, [pc, #344]	@ (8004f94 <HAL_TIM_ConfigClockSource+0x190>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e58:	d03e      	beq.n	8004ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e5e:	f200 8087 	bhi.w	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e66:	f000 8086 	beq.w	8004f76 <HAL_TIM_ConfigClockSource+0x172>
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	d87f      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b70      	cmp	r3, #112	@ 0x70
 8004e72:	d01a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
 8004e74:	2b70      	cmp	r3, #112	@ 0x70
 8004e76:	d87b      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b60      	cmp	r3, #96	@ 0x60
 8004e7a:	d050      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x11a>
 8004e7c:	2b60      	cmp	r3, #96	@ 0x60
 8004e7e:	d877      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b50      	cmp	r3, #80	@ 0x50
 8004e82:	d03c      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0xfa>
 8004e84:	2b50      	cmp	r3, #80	@ 0x50
 8004e86:	d873      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d058      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x13a>
 8004e8c:	2b40      	cmp	r3, #64	@ 0x40
 8004e8e:	d86f      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b30      	cmp	r3, #48	@ 0x30
 8004e92:	d064      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	2b30      	cmp	r3, #48	@ 0x30
 8004e96:	d86b      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d060      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d867      	bhi.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d05c      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d05a      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x15a>
 8004ea8:	e062      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eba:	f000 f98d 	bl	80051d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	609a      	str	r2, [r3, #8]
      break;
 8004ed6:	e04f      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee8:	f000 f976 	bl	80051d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004efa:	609a      	str	r2, [r3, #8]
      break;
 8004efc:	e03c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 f8ea 	bl	80050e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2150      	movs	r1, #80	@ 0x50
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f943 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e02c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 f909 	bl	8005142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2160      	movs	r1, #96	@ 0x60
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f933 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e01c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f000 f8ca 	bl	80050e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2140      	movs	r1, #64	@ 0x40
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f923 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004f5c:	e00c      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f000 f91a 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004f6e:	e003      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	fffeff88 	.word	0xfffeff88

08004f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a43      	ldr	r2, [pc, #268]	@ (80050b8 <TIM_Base_SetConfig+0x120>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a40      	ldr	r2, [pc, #256]	@ (80050bc <TIM_Base_SetConfig+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3f      	ldr	r2, [pc, #252]	@ (80050c0 <TIM_Base_SetConfig+0x128>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a3e      	ldr	r2, [pc, #248]	@ (80050c4 <TIM_Base_SetConfig+0x12c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3d      	ldr	r2, [pc, #244]	@ (80050c8 <TIM_Base_SetConfig+0x130>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d108      	bne.n	8004fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a32      	ldr	r2, [pc, #200]	@ (80050b8 <TIM_Base_SetConfig+0x120>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d02b      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff8:	d027      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80050bc <TIM_Base_SetConfig+0x124>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d023      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <TIM_Base_SetConfig+0x128>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01f      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2d      	ldr	r2, [pc, #180]	@ (80050c4 <TIM_Base_SetConfig+0x12c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01b      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2c      	ldr	r2, [pc, #176]	@ (80050c8 <TIM_Base_SetConfig+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d017      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2b      	ldr	r2, [pc, #172]	@ (80050cc <TIM_Base_SetConfig+0x134>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <TIM_Base_SetConfig+0x138>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00f      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <TIM_Base_SetConfig+0x13c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00b      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <TIM_Base_SetConfig+0x140>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d007      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <TIM_Base_SetConfig+0x144>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <TIM_Base_SetConfig+0x148>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d108      	bne.n	800505c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a0e      	ldr	r2, [pc, #56]	@ (80050b8 <TIM_Base_SetConfig+0x120>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_Base_SetConfig+0xf2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a10      	ldr	r2, [pc, #64]	@ (80050c8 <TIM_Base_SetConfig+0x130>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d103      	bne.n	8005092 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800
 80050d8:	40001800 	.word	0x40001800
 80050dc:	40001c00 	.word	0x40001c00
 80050e0:	40002000 	.word	0x40002000

080050e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800510e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 030a 	bic.w	r3, r3, #10
 8005120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005142:	b480      	push	{r7}
 8005144:	b087      	sub	sp, #28
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f023 0210 	bic.w	r2, r3, #16
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800516c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	031b      	lsls	r3, r3, #12
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800517e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f043 0307 	orr.w	r3, r3, #7
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	021a      	lsls	r2, r3, #8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	609a      	str	r2, [r3, #8]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800522c:	2302      	movs	r3, #2
 800522e:	e06d      	b.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a30      	ldr	r2, [pc, #192]	@ (8005318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2f      	ldr	r2, [pc, #188]	@ (800531c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d108      	bne.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800526a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a20      	ldr	r2, [pc, #128]	@ (8005318 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a2:	d01d      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005320 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a15      	ldr	r2, [pc, #84]	@ (800531c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a16      	ldr	r2, [pc, #88]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10c      	bne.n	80052fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40014000 	.word	0x40014000
 8005330:	40001800 	.word	0x40001800

08005334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e040      	b.n	80053c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb ff12 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2224      	movs	r2, #36	@ 0x24
 8005360:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fb16 	bl	80059ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f8af 	bl	80054e4 <UART_SetConfig>
 8005386:	4603      	mov	r3, r0
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e01b      	b.n	80053c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800539e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fb95 	bl	8005af0 <UART_CheckIdleState>
 80053c6:	4603      	mov	r3, r0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	@ 0x28
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d177      	bne.n	80054d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_UART_Transmit+0x24>
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e070      	b.n	80054da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2221      	movs	r2, #33	@ 0x21
 8005404:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005406:	f7fc f933 	bl	8001670 <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005424:	d108      	bne.n	8005438 <HAL_UART_Transmit+0x68>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e003      	b.n	8005440 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005440:	e02f      	b.n	80054a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2200      	movs	r2, #0
 800544a:	2180      	movs	r1, #128	@ 0x80
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fbf7 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e03b      	b.n	80054da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005476:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	3302      	adds	r3, #2
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	e007      	b.n	8005490 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	781a      	ldrb	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	3301      	adds	r3, #1
 800548e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1c9      	bne.n	8005442 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2140      	movs	r1, #64	@ 0x40
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fbc1 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d004      	beq.n	80054ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e005      	b.n	80054da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e000      	b.n	80054da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054d8:	2302      	movs	r3, #2
  }
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4ba6      	ldr	r3, [pc, #664]	@ (80057a8 <UART_SetConfig+0x2c4>)
 8005510:	4013      	ands	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	430b      	orrs	r3, r1
 800551a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	430a      	orrs	r2, r1
 8005554:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a94      	ldr	r2, [pc, #592]	@ (80057ac <UART_SetConfig+0x2c8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d120      	bne.n	80055a2 <UART_SetConfig+0xbe>
 8005560:	4b93      	ldr	r3, [pc, #588]	@ (80057b0 <UART_SetConfig+0x2cc>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	2b03      	cmp	r3, #3
 800556c:	d816      	bhi.n	800559c <UART_SetConfig+0xb8>
 800556e:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <UART_SetConfig+0x90>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	08005585 	.word	0x08005585
 8005578:	08005591 	.word	0x08005591
 800557c:	0800558b 	.word	0x0800558b
 8005580:	08005597 	.word	0x08005597
 8005584:	2301      	movs	r3, #1
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e150      	b.n	800582c <UART_SetConfig+0x348>
 800558a:	2302      	movs	r3, #2
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e14d      	b.n	800582c <UART_SetConfig+0x348>
 8005590:	2304      	movs	r3, #4
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e14a      	b.n	800582c <UART_SetConfig+0x348>
 8005596:	2308      	movs	r3, #8
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e147      	b.n	800582c <UART_SetConfig+0x348>
 800559c:	2310      	movs	r3, #16
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e144      	b.n	800582c <UART_SetConfig+0x348>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a83      	ldr	r2, [pc, #524]	@ (80057b4 <UART_SetConfig+0x2d0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d132      	bne.n	8005612 <UART_SetConfig+0x12e>
 80055ac:	4b80      	ldr	r3, [pc, #512]	@ (80057b0 <UART_SetConfig+0x2cc>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d828      	bhi.n	800560c <UART_SetConfig+0x128>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <UART_SetConfig+0xdc>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055f5 	.word	0x080055f5
 80055c4:	0800560d 	.word	0x0800560d
 80055c8:	0800560d 	.word	0x0800560d
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	08005601 	.word	0x08005601
 80055d4:	0800560d 	.word	0x0800560d
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	0800560d 	.word	0x0800560d
 80055e0:	080055fb 	.word	0x080055fb
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	0800560d 	.word	0x0800560d
 80055f0:	08005607 	.word	0x08005607
 80055f4:	2300      	movs	r3, #0
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e118      	b.n	800582c <UART_SetConfig+0x348>
 80055fa:	2302      	movs	r3, #2
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e115      	b.n	800582c <UART_SetConfig+0x348>
 8005600:	2304      	movs	r3, #4
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e112      	b.n	800582c <UART_SetConfig+0x348>
 8005606:	2308      	movs	r3, #8
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e10f      	b.n	800582c <UART_SetConfig+0x348>
 800560c:	2310      	movs	r3, #16
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e10c      	b.n	800582c <UART_SetConfig+0x348>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a68      	ldr	r2, [pc, #416]	@ (80057b8 <UART_SetConfig+0x2d4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d120      	bne.n	800565e <UART_SetConfig+0x17a>
 800561c:	4b64      	ldr	r3, [pc, #400]	@ (80057b0 <UART_SetConfig+0x2cc>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005626:	2b30      	cmp	r3, #48	@ 0x30
 8005628:	d013      	beq.n	8005652 <UART_SetConfig+0x16e>
 800562a:	2b30      	cmp	r3, #48	@ 0x30
 800562c:	d814      	bhi.n	8005658 <UART_SetConfig+0x174>
 800562e:	2b20      	cmp	r3, #32
 8005630:	d009      	beq.n	8005646 <UART_SetConfig+0x162>
 8005632:	2b20      	cmp	r3, #32
 8005634:	d810      	bhi.n	8005658 <UART_SetConfig+0x174>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <UART_SetConfig+0x15c>
 800563a:	2b10      	cmp	r3, #16
 800563c:	d006      	beq.n	800564c <UART_SetConfig+0x168>
 800563e:	e00b      	b.n	8005658 <UART_SetConfig+0x174>
 8005640:	2300      	movs	r3, #0
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e0f2      	b.n	800582c <UART_SetConfig+0x348>
 8005646:	2302      	movs	r3, #2
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e0ef      	b.n	800582c <UART_SetConfig+0x348>
 800564c:	2304      	movs	r3, #4
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e0ec      	b.n	800582c <UART_SetConfig+0x348>
 8005652:	2308      	movs	r3, #8
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e0e9      	b.n	800582c <UART_SetConfig+0x348>
 8005658:	2310      	movs	r3, #16
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e0e6      	b.n	800582c <UART_SetConfig+0x348>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a56      	ldr	r2, [pc, #344]	@ (80057bc <UART_SetConfig+0x2d8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d120      	bne.n	80056aa <UART_SetConfig+0x1c6>
 8005668:	4b51      	ldr	r3, [pc, #324]	@ (80057b0 <UART_SetConfig+0x2cc>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005672:	2bc0      	cmp	r3, #192	@ 0xc0
 8005674:	d013      	beq.n	800569e <UART_SetConfig+0x1ba>
 8005676:	2bc0      	cmp	r3, #192	@ 0xc0
 8005678:	d814      	bhi.n	80056a4 <UART_SetConfig+0x1c0>
 800567a:	2b80      	cmp	r3, #128	@ 0x80
 800567c:	d009      	beq.n	8005692 <UART_SetConfig+0x1ae>
 800567e:	2b80      	cmp	r3, #128	@ 0x80
 8005680:	d810      	bhi.n	80056a4 <UART_SetConfig+0x1c0>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <UART_SetConfig+0x1a8>
 8005686:	2b40      	cmp	r3, #64	@ 0x40
 8005688:	d006      	beq.n	8005698 <UART_SetConfig+0x1b4>
 800568a:	e00b      	b.n	80056a4 <UART_SetConfig+0x1c0>
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e0cc      	b.n	800582c <UART_SetConfig+0x348>
 8005692:	2302      	movs	r3, #2
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e0c9      	b.n	800582c <UART_SetConfig+0x348>
 8005698:	2304      	movs	r3, #4
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e0c6      	b.n	800582c <UART_SetConfig+0x348>
 800569e:	2308      	movs	r3, #8
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e0c3      	b.n	800582c <UART_SetConfig+0x348>
 80056a4:	2310      	movs	r3, #16
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e0c0      	b.n	800582c <UART_SetConfig+0x348>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a44      	ldr	r2, [pc, #272]	@ (80057c0 <UART_SetConfig+0x2dc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d125      	bne.n	8005700 <UART_SetConfig+0x21c>
 80056b4:	4b3e      	ldr	r3, [pc, #248]	@ (80057b0 <UART_SetConfig+0x2cc>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c2:	d017      	beq.n	80056f4 <UART_SetConfig+0x210>
 80056c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c8:	d817      	bhi.n	80056fa <UART_SetConfig+0x216>
 80056ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ce:	d00b      	beq.n	80056e8 <UART_SetConfig+0x204>
 80056d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d4:	d811      	bhi.n	80056fa <UART_SetConfig+0x216>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <UART_SetConfig+0x1fe>
 80056da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056de:	d006      	beq.n	80056ee <UART_SetConfig+0x20a>
 80056e0:	e00b      	b.n	80056fa <UART_SetConfig+0x216>
 80056e2:	2300      	movs	r3, #0
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e0a1      	b.n	800582c <UART_SetConfig+0x348>
 80056e8:	2302      	movs	r3, #2
 80056ea:	77fb      	strb	r3, [r7, #31]
 80056ec:	e09e      	b.n	800582c <UART_SetConfig+0x348>
 80056ee:	2304      	movs	r3, #4
 80056f0:	77fb      	strb	r3, [r7, #31]
 80056f2:	e09b      	b.n	800582c <UART_SetConfig+0x348>
 80056f4:	2308      	movs	r3, #8
 80056f6:	77fb      	strb	r3, [r7, #31]
 80056f8:	e098      	b.n	800582c <UART_SetConfig+0x348>
 80056fa:	2310      	movs	r3, #16
 80056fc:	77fb      	strb	r3, [r7, #31]
 80056fe:	e095      	b.n	800582c <UART_SetConfig+0x348>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2f      	ldr	r2, [pc, #188]	@ (80057c4 <UART_SetConfig+0x2e0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d125      	bne.n	8005756 <UART_SetConfig+0x272>
 800570a:	4b29      	ldr	r3, [pc, #164]	@ (80057b0 <UART_SetConfig+0x2cc>)
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005710:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005718:	d017      	beq.n	800574a <UART_SetConfig+0x266>
 800571a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800571e:	d817      	bhi.n	8005750 <UART_SetConfig+0x26c>
 8005720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005724:	d00b      	beq.n	800573e <UART_SetConfig+0x25a>
 8005726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800572a:	d811      	bhi.n	8005750 <UART_SetConfig+0x26c>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <UART_SetConfig+0x254>
 8005730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005734:	d006      	beq.n	8005744 <UART_SetConfig+0x260>
 8005736:	e00b      	b.n	8005750 <UART_SetConfig+0x26c>
 8005738:	2301      	movs	r3, #1
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e076      	b.n	800582c <UART_SetConfig+0x348>
 800573e:	2302      	movs	r3, #2
 8005740:	77fb      	strb	r3, [r7, #31]
 8005742:	e073      	b.n	800582c <UART_SetConfig+0x348>
 8005744:	2304      	movs	r3, #4
 8005746:	77fb      	strb	r3, [r7, #31]
 8005748:	e070      	b.n	800582c <UART_SetConfig+0x348>
 800574a:	2308      	movs	r3, #8
 800574c:	77fb      	strb	r3, [r7, #31]
 800574e:	e06d      	b.n	800582c <UART_SetConfig+0x348>
 8005750:	2310      	movs	r3, #16
 8005752:	77fb      	strb	r3, [r7, #31]
 8005754:	e06a      	b.n	800582c <UART_SetConfig+0x348>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1b      	ldr	r2, [pc, #108]	@ (80057c8 <UART_SetConfig+0x2e4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d138      	bne.n	80057d2 <UART_SetConfig+0x2ee>
 8005760:	4b13      	ldr	r3, [pc, #76]	@ (80057b0 <UART_SetConfig+0x2cc>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005766:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800576a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800576e:	d017      	beq.n	80057a0 <UART_SetConfig+0x2bc>
 8005770:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005774:	d82a      	bhi.n	80057cc <UART_SetConfig+0x2e8>
 8005776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800577a:	d00b      	beq.n	8005794 <UART_SetConfig+0x2b0>
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005780:	d824      	bhi.n	80057cc <UART_SetConfig+0x2e8>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <UART_SetConfig+0x2aa>
 8005786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800578a:	d006      	beq.n	800579a <UART_SetConfig+0x2b6>
 800578c:	e01e      	b.n	80057cc <UART_SetConfig+0x2e8>
 800578e:	2300      	movs	r3, #0
 8005790:	77fb      	strb	r3, [r7, #31]
 8005792:	e04b      	b.n	800582c <UART_SetConfig+0x348>
 8005794:	2302      	movs	r3, #2
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e048      	b.n	800582c <UART_SetConfig+0x348>
 800579a:	2304      	movs	r3, #4
 800579c:	77fb      	strb	r3, [r7, #31]
 800579e:	e045      	b.n	800582c <UART_SetConfig+0x348>
 80057a0:	2308      	movs	r3, #8
 80057a2:	77fb      	strb	r3, [r7, #31]
 80057a4:	e042      	b.n	800582c <UART_SetConfig+0x348>
 80057a6:	bf00      	nop
 80057a8:	efff69f3 	.word	0xefff69f3
 80057ac:	40011000 	.word	0x40011000
 80057b0:	40023800 	.word	0x40023800
 80057b4:	40004400 	.word	0x40004400
 80057b8:	40004800 	.word	0x40004800
 80057bc:	40004c00 	.word	0x40004c00
 80057c0:	40005000 	.word	0x40005000
 80057c4:	40011400 	.word	0x40011400
 80057c8:	40007800 	.word	0x40007800
 80057cc:	2310      	movs	r3, #16
 80057ce:	77fb      	strb	r3, [r7, #31]
 80057d0:	e02c      	b.n	800582c <UART_SetConfig+0x348>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a72      	ldr	r2, [pc, #456]	@ (80059a0 <UART_SetConfig+0x4bc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d125      	bne.n	8005828 <UART_SetConfig+0x344>
 80057dc:	4b71      	ldr	r3, [pc, #452]	@ (80059a4 <UART_SetConfig+0x4c0>)
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80057e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057ea:	d017      	beq.n	800581c <UART_SetConfig+0x338>
 80057ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057f0:	d817      	bhi.n	8005822 <UART_SetConfig+0x33e>
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f6:	d00b      	beq.n	8005810 <UART_SetConfig+0x32c>
 80057f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057fc:	d811      	bhi.n	8005822 <UART_SetConfig+0x33e>
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <UART_SetConfig+0x326>
 8005802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005806:	d006      	beq.n	8005816 <UART_SetConfig+0x332>
 8005808:	e00b      	b.n	8005822 <UART_SetConfig+0x33e>
 800580a:	2300      	movs	r3, #0
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e00d      	b.n	800582c <UART_SetConfig+0x348>
 8005810:	2302      	movs	r3, #2
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e00a      	b.n	800582c <UART_SetConfig+0x348>
 8005816:	2304      	movs	r3, #4
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e007      	b.n	800582c <UART_SetConfig+0x348>
 800581c:	2308      	movs	r3, #8
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e004      	b.n	800582c <UART_SetConfig+0x348>
 8005822:	2310      	movs	r3, #16
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e001      	b.n	800582c <UART_SetConfig+0x348>
 8005828:	2310      	movs	r3, #16
 800582a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005834:	d15b      	bne.n	80058ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d828      	bhi.n	800588e <UART_SetConfig+0x3aa>
 800583c:	a201      	add	r2, pc, #4	@ (adr r2, 8005844 <UART_SetConfig+0x360>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005869 	.word	0x08005869
 8005848:	08005871 	.word	0x08005871
 800584c:	08005879 	.word	0x08005879
 8005850:	0800588f 	.word	0x0800588f
 8005854:	0800587f 	.word	0x0800587f
 8005858:	0800588f 	.word	0x0800588f
 800585c:	0800588f 	.word	0x0800588f
 8005860:	0800588f 	.word	0x0800588f
 8005864:	08005887 	.word	0x08005887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005868:	f7fe fdb4 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 800586c:	61b8      	str	r0, [r7, #24]
        break;
 800586e:	e013      	b.n	8005898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005870:	f7fe fdc4 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8005874:	61b8      	str	r0, [r7, #24]
        break;
 8005876:	e00f      	b.n	8005898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005878:	4b4b      	ldr	r3, [pc, #300]	@ (80059a8 <UART_SetConfig+0x4c4>)
 800587a:	61bb      	str	r3, [r7, #24]
        break;
 800587c:	e00c      	b.n	8005898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587e:	f7fe fc97 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 8005882:	61b8      	str	r0, [r7, #24]
        break;
 8005884:	e008      	b.n	8005898 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588a:	61bb      	str	r3, [r7, #24]
        break;
 800588c:	e004      	b.n	8005898 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	77bb      	strb	r3, [r7, #30]
        break;
 8005896:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d074      	beq.n	8005988 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	005a      	lsls	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b0f      	cmp	r3, #15
 80058b8:	d916      	bls.n	80058e8 <UART_SetConfig+0x404>
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c0:	d212      	bcs.n	80058e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f023 030f 	bic.w	r3, r3, #15
 80058ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	89fb      	ldrh	r3, [r7, #14]
 80058da:	4313      	orrs	r3, r2
 80058dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	89fa      	ldrh	r2, [r7, #14]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	e04f      	b.n	8005988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	77bb      	strb	r3, [r7, #30]
 80058ec:	e04c      	b.n	8005988 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ee:	7ffb      	ldrb	r3, [r7, #31]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d828      	bhi.n	8005946 <UART_SetConfig+0x462>
 80058f4:	a201      	add	r2, pc, #4	@ (adr r2, 80058fc <UART_SetConfig+0x418>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005921 	.word	0x08005921
 8005900:	08005929 	.word	0x08005929
 8005904:	08005931 	.word	0x08005931
 8005908:	08005947 	.word	0x08005947
 800590c:	08005937 	.word	0x08005937
 8005910:	08005947 	.word	0x08005947
 8005914:	08005947 	.word	0x08005947
 8005918:	08005947 	.word	0x08005947
 800591c:	0800593f 	.word	0x0800593f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fe fd58 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8005924:	61b8      	str	r0, [r7, #24]
        break;
 8005926:	e013      	b.n	8005950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005928:	f7fe fd68 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 800592c:	61b8      	str	r0, [r7, #24]
        break;
 800592e:	e00f      	b.n	8005950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005930:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <UART_SetConfig+0x4c4>)
 8005932:	61bb      	str	r3, [r7, #24]
        break;
 8005934:	e00c      	b.n	8005950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005936:	f7fe fc3b 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 800593a:	61b8      	str	r0, [r7, #24]
        break;
 800593c:	e008      	b.n	8005950 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005942:	61bb      	str	r3, [r7, #24]
        break;
 8005944:	e004      	b.n	8005950 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	77bb      	strb	r3, [r7, #30]
        break;
 800594e:	bf00      	nop
    }

    if (pclk != 0U)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d018      	beq.n	8005988 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	085a      	lsrs	r2, r3, #1
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	441a      	add	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b0f      	cmp	r3, #15
 800596e:	d909      	bls.n	8005984 <UART_SetConfig+0x4a0>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005976:	d205      	bcs.n	8005984 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60da      	str	r2, [r3, #12]
 8005982:	e001      	b.n	8005988 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005994:	7fbb      	ldrb	r3, [r7, #30]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40007c00 	.word	0x40007c00
 80059a4:	40023800 	.word	0x40023800
 80059a8:	00f42400 	.word	0x00f42400

080059ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00a      	beq.n	8005a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00a      	beq.n	8005a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01a      	beq.n	8005ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aaa:	d10a      	bne.n	8005ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	605a      	str	r2, [r3, #4]
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b098      	sub	sp, #96	@ 0x60
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b00:	f7fb fdb6 	bl	8001670 <HAL_GetTick>
 8005b04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d12e      	bne.n	8005b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f88c 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d021      	beq.n	8005b72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e6      	bne.n	8005b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e062      	b.n	8005c38 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d149      	bne.n	8005c14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f856 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d03c      	beq.n	8005c14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3308      	adds	r3, #8
 8005bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e011      	b.n	8005c38 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3758      	adds	r7, #88	@ 0x58
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c50:	e04f      	b.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d04b      	beq.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5a:	f7fb fd09 	bl	8001670 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e04e      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d037      	beq.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b80      	cmp	r3, #128	@ 0x80
 8005c86:	d034      	beq.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d031      	beq.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d110      	bne.n	8005cbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f838 	bl	8005d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2208      	movs	r2, #8
 8005cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e029      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ccc:	d111      	bne.n	8005cf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f81e 	bl	8005d1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e00f      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	bf0c      	ite	eq
 8005d02:	2301      	moveq	r3, #1
 8005d04:	2300      	movne	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d0a0      	beq.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b095      	sub	sp, #84	@ 0x54
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d118      	bne.n	8005dc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f023 0310 	bic.w	r3, r3, #16
 8005da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e6      	bne.n	8005d90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dd6:	bf00      	nop
 8005dd8:	3754      	adds	r7, #84	@ 0x54
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005de4:	b084      	sub	sp, #16
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	f107 001c 	add.w	r0, r7, #28
 8005df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005df6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d121      	bne.n	8005e42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	4b21      	ldr	r3, [pc, #132]	@ (8005e94 <USB_CoreInit+0xb0>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d105      	bne.n	8005e36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa92 	bl	8006360 <USB_CoreReset>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
 8005e40:	e010      	b.n	8005e64 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fa86 	bl	8006360 <USB_CoreReset>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005e64:	7fbb      	ldrb	r3, [r7, #30]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d10b      	bne.n	8005e82 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f043 0206 	orr.w	r2, r3, #6
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f043 0220 	orr.w	r2, r3, #32
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e8e:	b004      	add	sp, #16
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	ffbdffbf 	.word	0xffbdffbf

08005e98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f023 0201 	bic.w	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d115      	bne.n	8005f08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ee8:	200a      	movs	r0, #10
 8005eea:	f7fb fbcd 	bl	8001688 <HAL_Delay>
      ms += 10U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	330a      	adds	r3, #10
 8005ef2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa25 	bl	8006344 <USB_GetMode>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d01e      	beq.n	8005f3e <USB_SetCurrentMode+0x84>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f04:	d9f0      	bls.n	8005ee8 <USB_SetCurrentMode+0x2e>
 8005f06:	e01a      	b.n	8005f3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d115      	bne.n	8005f3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f1a:	200a      	movs	r0, #10
 8005f1c:	f7fb fbb4 	bl	8001688 <HAL_Delay>
      ms += 10U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	330a      	adds	r3, #10
 8005f24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa0c 	bl	8006344 <USB_GetMode>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <USB_SetCurrentMode+0x84>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f36:	d9f0      	bls.n	8005f1a <USB_SetCurrentMode+0x60>
 8005f38:	e001      	b.n	8005f3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e005      	b.n	8005f4a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f42:	d101      	bne.n	8005f48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f54:	b084      	sub	sp, #16
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e009      	b.n	8005f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3340      	adds	r3, #64	@ 0x40
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3301      	adds	r3, #1
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b0e      	cmp	r3, #14
 8005f8c:	d9f2      	bls.n	8005f74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d11c      	bne.n	8005fd0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fa4:	f043 0302 	orr.w	r3, r3, #2
 8005fa8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e005      	b.n	8005fdc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fe8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10d      	bne.n	800600c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f968 	bl	80062d0 <USB_SetDevSpeed>
 8006000:	e008      	b.n	8006014 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006002:	2101      	movs	r1, #1
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f963 	bl	80062d0 <USB_SetDevSpeed>
 800600a:	e003      	b.n	8006014 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800600c:	2103      	movs	r1, #3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f95e 	bl	80062d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006014:	2110      	movs	r1, #16
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8fa 	bl	8006210 <USB_FlushTxFifo>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f924 	bl	8006274 <USB_FlushRxFifo>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603c:	461a      	mov	r2, r3
 800603e:	2300      	movs	r3, #0
 8006040:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006048:	461a      	mov	r2, r3
 800604a:	2300      	movs	r3, #0
 800604c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	e043      	b.n	80060e8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006076:	d118      	bne.n	80060aa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608a:	461a      	mov	r2, r3
 800608c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e013      	b.n	80060bc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a0:	461a      	mov	r2, r3
 80060a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	e008      	b.n	80060bc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b6:	461a      	mov	r2, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c8:	461a      	mov	r2, r3
 80060ca:	2300      	movs	r3, #0
 80060cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060da:	461a      	mov	r2, r3
 80060dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	3301      	adds	r3, #1
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060ec:	461a      	mov	r2, r3
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d3b5      	bcc.n	8006060 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	e043      	b.n	8006182 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800610c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006110:	d118      	bne.n	8006144 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006124:	461a      	mov	r2, r3
 8006126:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e013      	b.n	8006156 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e008      	b.n	8006156 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	461a      	mov	r2, r3
 8006152:	2300      	movs	r3, #0
 8006154:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006162:	461a      	mov	r2, r3
 8006164:	2300      	movs	r3, #0
 8006166:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006174:	461a      	mov	r2, r3
 8006176:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800617a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	3301      	adds	r3, #1
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006186:	461a      	mov	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4293      	cmp	r3, r2
 800618c:	d3b5      	bcc.n	80060fa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800619c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80061ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f043 0210 	orr.w	r2, r3, #16
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006208 <USB_DevInit+0x2b4>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f043 0208 	orr.w	r2, r3, #8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d105      	bne.n	80061f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	4b06      	ldr	r3, [pc, #24]	@ (800620c <USB_DevInit+0x2b8>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006204:	b004      	add	sp, #16
 8006206:	4770      	bx	lr
 8006208:	803c3800 	.word	0x803c3800
 800620c:	40000004 	.word	0x40000004

08006210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800622a:	d901      	bls.n	8006230 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e01b      	b.n	8006268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	daf2      	bge.n	800621e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	019b      	lsls	r3, r3, #6
 8006240:	f043 0220 	orr.w	r2, r3, #32
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3301      	adds	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006254:	d901      	bls.n	800625a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e006      	b.n	8006268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b20      	cmp	r3, #32
 8006264:	d0f0      	beq.n	8006248 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800628c:	d901      	bls.n	8006292 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e018      	b.n	80062c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	daf2      	bge.n	8006280 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2210      	movs	r2, #16
 80062a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062b0:	d901      	bls.n	80062b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e006      	b.n	80062c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d0f0      	beq.n	80062a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062f0:	4313      	orrs	r3, r2
 80062f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800631c:	f023 0303 	bic.w	r3, r3, #3
 8006320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006330:	f043 0302 	orr.w	r3, r3, #2
 8006334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0301 	and.w	r3, r3, #1
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006378:	d901      	bls.n	800637e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e022      	b.n	80063c4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	daf2      	bge.n	800636c <USB_CoreReset+0xc>

  count = 10U;
 8006386:	230a      	movs	r3, #10
 8006388:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800638a:	e002      	b.n	8006392 <USB_CoreReset+0x32>
  {
    count--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3b01      	subs	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f9      	bne.n	800638c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f043 0201 	orr.w	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063b0:	d901      	bls.n	80063b6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e006      	b.n	80063c4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d0f0      	beq.n	80063a4 <USB_CoreReset+0x44>

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <__cvt>:
 80063d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d2:	ed2d 8b02 	vpush	{d8}
 80063d6:	eeb0 8b40 	vmov.f64	d8, d0
 80063da:	b085      	sub	sp, #20
 80063dc:	4617      	mov	r7, r2
 80063de:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80063e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063e2:	ee18 2a90 	vmov	r2, s17
 80063e6:	f025 0520 	bic.w	r5, r5, #32
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	bfb6      	itet	lt
 80063ee:	222d      	movlt	r2, #45	@ 0x2d
 80063f0:	2200      	movge	r2, #0
 80063f2:	eeb1 8b40 	vneglt.f64	d8, d0
 80063f6:	2d46      	cmp	r5, #70	@ 0x46
 80063f8:	460c      	mov	r4, r1
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	d004      	beq.n	8006408 <__cvt+0x38>
 80063fe:	2d45      	cmp	r5, #69	@ 0x45
 8006400:	d100      	bne.n	8006404 <__cvt+0x34>
 8006402:	3401      	adds	r4, #1
 8006404:	2102      	movs	r1, #2
 8006406:	e000      	b.n	800640a <__cvt+0x3a>
 8006408:	2103      	movs	r1, #3
 800640a:	ab03      	add	r3, sp, #12
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	ab02      	add	r3, sp, #8
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	4622      	mov	r2, r4
 8006414:	4633      	mov	r3, r6
 8006416:	eeb0 0b48 	vmov.f64	d0, d8
 800641a:	f000 fe31 	bl	8007080 <_dtoa_r>
 800641e:	2d47      	cmp	r5, #71	@ 0x47
 8006420:	d114      	bne.n	800644c <__cvt+0x7c>
 8006422:	07fb      	lsls	r3, r7, #31
 8006424:	d50a      	bpl.n	800643c <__cvt+0x6c>
 8006426:	1902      	adds	r2, r0, r4
 8006428:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	bf08      	it	eq
 8006432:	9203      	streq	r2, [sp, #12]
 8006434:	2130      	movs	r1, #48	@ 0x30
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	4293      	cmp	r3, r2
 800643a:	d319      	bcc.n	8006470 <__cvt+0xa0>
 800643c:	9b03      	ldr	r3, [sp, #12]
 800643e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006440:	1a1b      	subs	r3, r3, r0
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	b005      	add	sp, #20
 8006446:	ecbd 8b02 	vpop	{d8}
 800644a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644c:	2d46      	cmp	r5, #70	@ 0x46
 800644e:	eb00 0204 	add.w	r2, r0, r4
 8006452:	d1e9      	bne.n	8006428 <__cvt+0x58>
 8006454:	7803      	ldrb	r3, [r0, #0]
 8006456:	2b30      	cmp	r3, #48	@ 0x30
 8006458:	d107      	bne.n	800646a <__cvt+0x9a>
 800645a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006462:	bf1c      	itt	ne
 8006464:	f1c4 0401 	rsbne	r4, r4, #1
 8006468:	6034      	strne	r4, [r6, #0]
 800646a:	6833      	ldr	r3, [r6, #0]
 800646c:	441a      	add	r2, r3
 800646e:	e7db      	b.n	8006428 <__cvt+0x58>
 8006470:	1c5c      	adds	r4, r3, #1
 8006472:	9403      	str	r4, [sp, #12]
 8006474:	7019      	strb	r1, [r3, #0]
 8006476:	e7de      	b.n	8006436 <__cvt+0x66>

08006478 <__exponent>:
 8006478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800647a:	2900      	cmp	r1, #0
 800647c:	bfba      	itte	lt
 800647e:	4249      	neglt	r1, r1
 8006480:	232d      	movlt	r3, #45	@ 0x2d
 8006482:	232b      	movge	r3, #43	@ 0x2b
 8006484:	2909      	cmp	r1, #9
 8006486:	7002      	strb	r2, [r0, #0]
 8006488:	7043      	strb	r3, [r0, #1]
 800648a:	dd29      	ble.n	80064e0 <__exponent+0x68>
 800648c:	f10d 0307 	add.w	r3, sp, #7
 8006490:	461d      	mov	r5, r3
 8006492:	270a      	movs	r7, #10
 8006494:	461a      	mov	r2, r3
 8006496:	fbb1 f6f7 	udiv	r6, r1, r7
 800649a:	fb07 1416 	mls	r4, r7, r6, r1
 800649e:	3430      	adds	r4, #48	@ 0x30
 80064a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064a4:	460c      	mov	r4, r1
 80064a6:	2c63      	cmp	r4, #99	@ 0x63
 80064a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80064ac:	4631      	mov	r1, r6
 80064ae:	dcf1      	bgt.n	8006494 <__exponent+0x1c>
 80064b0:	3130      	adds	r1, #48	@ 0x30
 80064b2:	1e94      	subs	r4, r2, #2
 80064b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064b8:	1c41      	adds	r1, r0, #1
 80064ba:	4623      	mov	r3, r4
 80064bc:	42ab      	cmp	r3, r5
 80064be:	d30a      	bcc.n	80064d6 <__exponent+0x5e>
 80064c0:	f10d 0309 	add.w	r3, sp, #9
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	42ac      	cmp	r4, r5
 80064c8:	bf88      	it	hi
 80064ca:	2300      	movhi	r3, #0
 80064cc:	3302      	adds	r3, #2
 80064ce:	4403      	add	r3, r0
 80064d0:	1a18      	subs	r0, r3, r0
 80064d2:	b003      	add	sp, #12
 80064d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064de:	e7ed      	b.n	80064bc <__exponent+0x44>
 80064e0:	2330      	movs	r3, #48	@ 0x30
 80064e2:	3130      	adds	r1, #48	@ 0x30
 80064e4:	7083      	strb	r3, [r0, #2]
 80064e6:	70c1      	strb	r1, [r0, #3]
 80064e8:	1d03      	adds	r3, r0, #4
 80064ea:	e7f1      	b.n	80064d0 <__exponent+0x58>
 80064ec:	0000      	movs	r0, r0
	...

080064f0 <_printf_float>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	b08d      	sub	sp, #52	@ 0x34
 80064f6:	460c      	mov	r4, r1
 80064f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064fc:	4616      	mov	r6, r2
 80064fe:	461f      	mov	r7, r3
 8006500:	4605      	mov	r5, r0
 8006502:	f000 fcbb 	bl	8006e7c <_localeconv_r>
 8006506:	f8d0 b000 	ldr.w	fp, [r0]
 800650a:	4658      	mov	r0, fp
 800650c:	f7f9 fee8 	bl	80002e0 <strlen>
 8006510:	2300      	movs	r3, #0
 8006512:	930a      	str	r3, [sp, #40]	@ 0x28
 8006514:	f8d8 3000 	ldr.w	r3, [r8]
 8006518:	f894 9018 	ldrb.w	r9, [r4, #24]
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	9005      	str	r0, [sp, #20]
 8006520:	3307      	adds	r3, #7
 8006522:	f023 0307 	bic.w	r3, r3, #7
 8006526:	f103 0108 	add.w	r1, r3, #8
 800652a:	f8c8 1000 	str.w	r1, [r8]
 800652e:	ed93 0b00 	vldr	d0, [r3]
 8006532:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006790 <_printf_float+0x2a0>
 8006536:	eeb0 7bc0 	vabs.f64	d7, d0
 800653a:	eeb4 7b46 	vcmp.f64	d7, d6
 800653e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006542:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006546:	dd24      	ble.n	8006592 <_printf_float+0xa2>
 8006548:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006550:	d502      	bpl.n	8006558 <_printf_float+0x68>
 8006552:	232d      	movs	r3, #45	@ 0x2d
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006558:	498f      	ldr	r1, [pc, #572]	@ (8006798 <_printf_float+0x2a8>)
 800655a:	4b90      	ldr	r3, [pc, #576]	@ (800679c <_printf_float+0x2ac>)
 800655c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006560:	bf8c      	ite	hi
 8006562:	4688      	movhi	r8, r1
 8006564:	4698      	movls	r8, r3
 8006566:	f022 0204 	bic.w	r2, r2, #4
 800656a:	2303      	movs	r3, #3
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	6022      	str	r2, [r4, #0]
 8006570:	f04f 0a00 	mov.w	sl, #0
 8006574:	9700      	str	r7, [sp, #0]
 8006576:	4633      	mov	r3, r6
 8006578:	aa0b      	add	r2, sp, #44	@ 0x2c
 800657a:	4621      	mov	r1, r4
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f9d1 	bl	8006924 <_printf_common>
 8006582:	3001      	adds	r0, #1
 8006584:	f040 8089 	bne.w	800669a <_printf_float+0x1aa>
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	b00d      	add	sp, #52	@ 0x34
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006592:	eeb4 0b40 	vcmp.f64	d0, d0
 8006596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659a:	d709      	bvc.n	80065b0 <_printf_float+0xc0>
 800659c:	ee10 3a90 	vmov	r3, s1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bfbc      	itt	lt
 80065a4:	232d      	movlt	r3, #45	@ 0x2d
 80065a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065aa:	497d      	ldr	r1, [pc, #500]	@ (80067a0 <_printf_float+0x2b0>)
 80065ac:	4b7d      	ldr	r3, [pc, #500]	@ (80067a4 <_printf_float+0x2b4>)
 80065ae:	e7d5      	b.n	800655c <_printf_float+0x6c>
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	1c59      	adds	r1, r3, #1
 80065b4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80065b8:	d139      	bne.n	800662e <_printf_float+0x13e>
 80065ba:	2306      	movs	r3, #6
 80065bc:	6063      	str	r3, [r4, #4]
 80065be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065c2:	2300      	movs	r3, #0
 80065c4:	6022      	str	r2, [r4, #0]
 80065c6:	9303      	str	r3, [sp, #12]
 80065c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80065ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80065ce:	ab09      	add	r3, sp, #36	@ 0x24
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	6861      	ldr	r1, [r4, #4]
 80065d4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065d8:	4628      	mov	r0, r5
 80065da:	f7ff fef9 	bl	80063d0 <__cvt>
 80065de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065e4:	4680      	mov	r8, r0
 80065e6:	d129      	bne.n	800663c <_printf_float+0x14c>
 80065e8:	1cc8      	adds	r0, r1, #3
 80065ea:	db02      	blt.n	80065f2 <_printf_float+0x102>
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	4299      	cmp	r1, r3
 80065f0:	dd41      	ble.n	8006676 <_printf_float+0x186>
 80065f2:	f1a9 0902 	sub.w	r9, r9, #2
 80065f6:	fa5f f989 	uxtb.w	r9, r9
 80065fa:	3901      	subs	r1, #1
 80065fc:	464a      	mov	r2, r9
 80065fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006602:	9109      	str	r1, [sp, #36]	@ 0x24
 8006604:	f7ff ff38 	bl	8006478 <__exponent>
 8006608:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800660a:	1813      	adds	r3, r2, r0
 800660c:	2a01      	cmp	r2, #1
 800660e:	4682      	mov	sl, r0
 8006610:	6123      	str	r3, [r4, #16]
 8006612:	dc02      	bgt.n	800661a <_printf_float+0x12a>
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	07d2      	lsls	r2, r2, #31
 8006618:	d501      	bpl.n	800661e <_printf_float+0x12e>
 800661a:	3301      	adds	r3, #1
 800661c:	6123      	str	r3, [r4, #16]
 800661e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0a6      	beq.n	8006574 <_printf_float+0x84>
 8006626:	232d      	movs	r3, #45	@ 0x2d
 8006628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800662c:	e7a2      	b.n	8006574 <_printf_float+0x84>
 800662e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006632:	d1c4      	bne.n	80065be <_printf_float+0xce>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1c2      	bne.n	80065be <_printf_float+0xce>
 8006638:	2301      	movs	r3, #1
 800663a:	e7bf      	b.n	80065bc <_printf_float+0xcc>
 800663c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006640:	d9db      	bls.n	80065fa <_printf_float+0x10a>
 8006642:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006646:	d118      	bne.n	800667a <_printf_float+0x18a>
 8006648:	2900      	cmp	r1, #0
 800664a:	6863      	ldr	r3, [r4, #4]
 800664c:	dd0b      	ble.n	8006666 <_printf_float+0x176>
 800664e:	6121      	str	r1, [r4, #16]
 8006650:	b913      	cbnz	r3, 8006658 <_printf_float+0x168>
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	07d0      	lsls	r0, r2, #31
 8006656:	d502      	bpl.n	800665e <_printf_float+0x16e>
 8006658:	3301      	adds	r3, #1
 800665a:	440b      	add	r3, r1
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006660:	f04f 0a00 	mov.w	sl, #0
 8006664:	e7db      	b.n	800661e <_printf_float+0x12e>
 8006666:	b913      	cbnz	r3, 800666e <_printf_float+0x17e>
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	07d2      	lsls	r2, r2, #31
 800666c:	d501      	bpl.n	8006672 <_printf_float+0x182>
 800666e:	3302      	adds	r3, #2
 8006670:	e7f4      	b.n	800665c <_printf_float+0x16c>
 8006672:	2301      	movs	r3, #1
 8006674:	e7f2      	b.n	800665c <_printf_float+0x16c>
 8006676:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800667a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800667c:	4299      	cmp	r1, r3
 800667e:	db05      	blt.n	800668c <_printf_float+0x19c>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	6121      	str	r1, [r4, #16]
 8006684:	07d8      	lsls	r0, r3, #31
 8006686:	d5ea      	bpl.n	800665e <_printf_float+0x16e>
 8006688:	1c4b      	adds	r3, r1, #1
 800668a:	e7e7      	b.n	800665c <_printf_float+0x16c>
 800668c:	2900      	cmp	r1, #0
 800668e:	bfd4      	ite	le
 8006690:	f1c1 0202 	rsble	r2, r1, #2
 8006694:	2201      	movgt	r2, #1
 8006696:	4413      	add	r3, r2
 8006698:	e7e0      	b.n	800665c <_printf_float+0x16c>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	055a      	lsls	r2, r3, #21
 800669e:	d407      	bmi.n	80066b0 <_printf_float+0x1c0>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	4642      	mov	r2, r8
 80066a4:	4631      	mov	r1, r6
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	d12a      	bne.n	8006704 <_printf_float+0x214>
 80066ae:	e76b      	b.n	8006588 <_printf_float+0x98>
 80066b0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80066b4:	f240 80e0 	bls.w	8006878 <_printf_float+0x388>
 80066b8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80066bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	d133      	bne.n	800672e <_printf_float+0x23e>
 80066c6:	4a38      	ldr	r2, [pc, #224]	@ (80067a8 <_printf_float+0x2b8>)
 80066c8:	2301      	movs	r3, #1
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	f43f af59 	beq.w	8006588 <_printf_float+0x98>
 80066d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066da:	4543      	cmp	r3, r8
 80066dc:	db02      	blt.n	80066e4 <_printf_float+0x1f4>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	07d8      	lsls	r0, r3, #31
 80066e2:	d50f      	bpl.n	8006704 <_printf_float+0x214>
 80066e4:	9b05      	ldr	r3, [sp, #20]
 80066e6:	465a      	mov	r2, fp
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	f43f af4a 	beq.w	8006588 <_printf_float+0x98>
 80066f4:	f04f 0900 	mov.w	r9, #0
 80066f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80066fc:	f104 0a1a 	add.w	sl, r4, #26
 8006700:	45c8      	cmp	r8, r9
 8006702:	dc09      	bgt.n	8006718 <_printf_float+0x228>
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	079b      	lsls	r3, r3, #30
 8006708:	f100 8107 	bmi.w	800691a <_printf_float+0x42a>
 800670c:	68e0      	ldr	r0, [r4, #12]
 800670e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006710:	4298      	cmp	r0, r3
 8006712:	bfb8      	it	lt
 8006714:	4618      	movlt	r0, r3
 8006716:	e739      	b.n	800658c <_printf_float+0x9c>
 8006718:	2301      	movs	r3, #1
 800671a:	4652      	mov	r2, sl
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af30 	beq.w	8006588 <_printf_float+0x98>
 8006728:	f109 0901 	add.w	r9, r9, #1
 800672c:	e7e8      	b.n	8006700 <_printf_float+0x210>
 800672e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	dc3b      	bgt.n	80067ac <_printf_float+0x2bc>
 8006734:	4a1c      	ldr	r2, [pc, #112]	@ (80067a8 <_printf_float+0x2b8>)
 8006736:	2301      	movs	r3, #1
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af22 	beq.w	8006588 <_printf_float+0x98>
 8006744:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006748:	ea59 0303 	orrs.w	r3, r9, r3
 800674c:	d102      	bne.n	8006754 <_printf_float+0x264>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07d9      	lsls	r1, r3, #31
 8006752:	d5d7      	bpl.n	8006704 <_printf_float+0x214>
 8006754:	9b05      	ldr	r3, [sp, #20]
 8006756:	465a      	mov	r2, fp
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af12 	beq.w	8006588 <_printf_float+0x98>
 8006764:	f04f 0a00 	mov.w	sl, #0
 8006768:	f104 0b1a 	add.w	fp, r4, #26
 800676c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676e:	425b      	negs	r3, r3
 8006770:	4553      	cmp	r3, sl
 8006772:	dc01      	bgt.n	8006778 <_printf_float+0x288>
 8006774:	464b      	mov	r3, r9
 8006776:	e794      	b.n	80066a2 <_printf_float+0x1b2>
 8006778:	2301      	movs	r3, #1
 800677a:	465a      	mov	r2, fp
 800677c:	4631      	mov	r1, r6
 800677e:	4628      	mov	r0, r5
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	f43f af00 	beq.w	8006588 <_printf_float+0x98>
 8006788:	f10a 0a01 	add.w	sl, sl, #1
 800678c:	e7ee      	b.n	800676c <_printf_float+0x27c>
 800678e:	bf00      	nop
 8006790:	ffffffff 	.word	0xffffffff
 8006794:	7fefffff 	.word	0x7fefffff
 8006798:	08008c1c 	.word	0x08008c1c
 800679c:	08008c18 	.word	0x08008c18
 80067a0:	08008c24 	.word	0x08008c24
 80067a4:	08008c20 	.word	0x08008c20
 80067a8:	08008c28 	.word	0x08008c28
 80067ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067b2:	4553      	cmp	r3, sl
 80067b4:	bfa8      	it	ge
 80067b6:	4653      	movge	r3, sl
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	4699      	mov	r9, r3
 80067bc:	dc37      	bgt.n	800682e <_printf_float+0x33e>
 80067be:	2300      	movs	r3, #0
 80067c0:	9307      	str	r3, [sp, #28]
 80067c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067c6:	f104 021a 	add.w	r2, r4, #26
 80067ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067cc:	9907      	ldr	r1, [sp, #28]
 80067ce:	9306      	str	r3, [sp, #24]
 80067d0:	eba3 0309 	sub.w	r3, r3, r9
 80067d4:	428b      	cmp	r3, r1
 80067d6:	dc31      	bgt.n	800683c <_printf_float+0x34c>
 80067d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067da:	459a      	cmp	sl, r3
 80067dc:	dc3b      	bgt.n	8006856 <_printf_float+0x366>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	07da      	lsls	r2, r3, #31
 80067e2:	d438      	bmi.n	8006856 <_printf_float+0x366>
 80067e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e6:	ebaa 0903 	sub.w	r9, sl, r3
 80067ea:	9b06      	ldr	r3, [sp, #24]
 80067ec:	ebaa 0303 	sub.w	r3, sl, r3
 80067f0:	4599      	cmp	r9, r3
 80067f2:	bfa8      	it	ge
 80067f4:	4699      	movge	r9, r3
 80067f6:	f1b9 0f00 	cmp.w	r9, #0
 80067fa:	dc34      	bgt.n	8006866 <_printf_float+0x376>
 80067fc:	f04f 0800 	mov.w	r8, #0
 8006800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006804:	f104 0b1a 	add.w	fp, r4, #26
 8006808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680a:	ebaa 0303 	sub.w	r3, sl, r3
 800680e:	eba3 0309 	sub.w	r3, r3, r9
 8006812:	4543      	cmp	r3, r8
 8006814:	f77f af76 	ble.w	8006704 <_printf_float+0x214>
 8006818:	2301      	movs	r3, #1
 800681a:	465a      	mov	r2, fp
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f aeb0 	beq.w	8006588 <_printf_float+0x98>
 8006828:	f108 0801 	add.w	r8, r8, #1
 800682c:	e7ec      	b.n	8006808 <_printf_float+0x318>
 800682e:	4642      	mov	r2, r8
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	d1c1      	bne.n	80067be <_printf_float+0x2ce>
 800683a:	e6a5      	b.n	8006588 <_printf_float+0x98>
 800683c:	2301      	movs	r3, #1
 800683e:	4631      	mov	r1, r6
 8006840:	4628      	mov	r0, r5
 8006842:	9206      	str	r2, [sp, #24]
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f ae9e 	beq.w	8006588 <_printf_float+0x98>
 800684c:	9b07      	ldr	r3, [sp, #28]
 800684e:	9a06      	ldr	r2, [sp, #24]
 8006850:	3301      	adds	r3, #1
 8006852:	9307      	str	r3, [sp, #28]
 8006854:	e7b9      	b.n	80067ca <_printf_float+0x2da>
 8006856:	9b05      	ldr	r3, [sp, #20]
 8006858:	465a      	mov	r2, fp
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	d1bf      	bne.n	80067e4 <_printf_float+0x2f4>
 8006864:	e690      	b.n	8006588 <_printf_float+0x98>
 8006866:	9a06      	ldr	r2, [sp, #24]
 8006868:	464b      	mov	r3, r9
 800686a:	4442      	add	r2, r8
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	d1c2      	bne.n	80067fc <_printf_float+0x30c>
 8006876:	e687      	b.n	8006588 <_printf_float+0x98>
 8006878:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800687c:	f1b9 0f01 	cmp.w	r9, #1
 8006880:	dc01      	bgt.n	8006886 <_printf_float+0x396>
 8006882:	07db      	lsls	r3, r3, #31
 8006884:	d536      	bpl.n	80068f4 <_printf_float+0x404>
 8006886:	2301      	movs	r3, #1
 8006888:	4642      	mov	r2, r8
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	f43f ae79 	beq.w	8006588 <_printf_float+0x98>
 8006896:	9b05      	ldr	r3, [sp, #20]
 8006898:	465a      	mov	r2, fp
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	f43f ae71 	beq.w	8006588 <_printf_float+0x98>
 80068a6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80068aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80068b6:	d018      	beq.n	80068ea <_printf_float+0x3fa>
 80068b8:	464b      	mov	r3, r9
 80068ba:	f108 0201 	add.w	r2, r8, #1
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	d10c      	bne.n	80068e2 <_printf_float+0x3f2>
 80068c8:	e65e      	b.n	8006588 <_printf_float+0x98>
 80068ca:	2301      	movs	r3, #1
 80068cc:	465a      	mov	r2, fp
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae57 	beq.w	8006588 <_printf_float+0x98>
 80068da:	f108 0801 	add.w	r8, r8, #1
 80068de:	45c8      	cmp	r8, r9
 80068e0:	dbf3      	blt.n	80068ca <_printf_float+0x3da>
 80068e2:	4653      	mov	r3, sl
 80068e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068e8:	e6dc      	b.n	80066a4 <_printf_float+0x1b4>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	f104 0b1a 	add.w	fp, r4, #26
 80068f2:	e7f4      	b.n	80068de <_printf_float+0x3ee>
 80068f4:	2301      	movs	r3, #1
 80068f6:	4642      	mov	r2, r8
 80068f8:	e7e1      	b.n	80068be <_printf_float+0x3ce>
 80068fa:	2301      	movs	r3, #1
 80068fc:	464a      	mov	r2, r9
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	f43f ae3f 	beq.w	8006588 <_printf_float+0x98>
 800690a:	f108 0801 	add.w	r8, r8, #1
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006912:	1a5b      	subs	r3, r3, r1
 8006914:	4543      	cmp	r3, r8
 8006916:	dcf0      	bgt.n	80068fa <_printf_float+0x40a>
 8006918:	e6f8      	b.n	800670c <_printf_float+0x21c>
 800691a:	f04f 0800 	mov.w	r8, #0
 800691e:	f104 0919 	add.w	r9, r4, #25
 8006922:	e7f4      	b.n	800690e <_printf_float+0x41e>

08006924 <_printf_common>:
 8006924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	4616      	mov	r6, r2
 800692a:	4698      	mov	r8, r3
 800692c:	688a      	ldr	r2, [r1, #8]
 800692e:	690b      	ldr	r3, [r1, #16]
 8006930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006934:	4293      	cmp	r3, r2
 8006936:	bfb8      	it	lt
 8006938:	4613      	movlt	r3, r2
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006940:	4607      	mov	r7, r0
 8006942:	460c      	mov	r4, r1
 8006944:	b10a      	cbz	r2, 800694a <_printf_common+0x26>
 8006946:	3301      	adds	r3, #1
 8006948:	6033      	str	r3, [r6, #0]
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	0699      	lsls	r1, r3, #26
 800694e:	bf42      	ittt	mi
 8006950:	6833      	ldrmi	r3, [r6, #0]
 8006952:	3302      	addmi	r3, #2
 8006954:	6033      	strmi	r3, [r6, #0]
 8006956:	6825      	ldr	r5, [r4, #0]
 8006958:	f015 0506 	ands.w	r5, r5, #6
 800695c:	d106      	bne.n	800696c <_printf_common+0x48>
 800695e:	f104 0a19 	add.w	sl, r4, #25
 8006962:	68e3      	ldr	r3, [r4, #12]
 8006964:	6832      	ldr	r2, [r6, #0]
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	42ab      	cmp	r3, r5
 800696a:	dc26      	bgt.n	80069ba <_printf_common+0x96>
 800696c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006970:	6822      	ldr	r2, [r4, #0]
 8006972:	3b00      	subs	r3, #0
 8006974:	bf18      	it	ne
 8006976:	2301      	movne	r3, #1
 8006978:	0692      	lsls	r2, r2, #26
 800697a:	d42b      	bmi.n	80069d4 <_printf_common+0xb0>
 800697c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006980:	4641      	mov	r1, r8
 8006982:	4638      	mov	r0, r7
 8006984:	47c8      	blx	r9
 8006986:	3001      	adds	r0, #1
 8006988:	d01e      	beq.n	80069c8 <_printf_common+0xa4>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	6922      	ldr	r2, [r4, #16]
 800698e:	f003 0306 	and.w	r3, r3, #6
 8006992:	2b04      	cmp	r3, #4
 8006994:	bf02      	ittt	eq
 8006996:	68e5      	ldreq	r5, [r4, #12]
 8006998:	6833      	ldreq	r3, [r6, #0]
 800699a:	1aed      	subeq	r5, r5, r3
 800699c:	68a3      	ldr	r3, [r4, #8]
 800699e:	bf0c      	ite	eq
 80069a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069a4:	2500      	movne	r5, #0
 80069a6:	4293      	cmp	r3, r2
 80069a8:	bfc4      	itt	gt
 80069aa:	1a9b      	subgt	r3, r3, r2
 80069ac:	18ed      	addgt	r5, r5, r3
 80069ae:	2600      	movs	r6, #0
 80069b0:	341a      	adds	r4, #26
 80069b2:	42b5      	cmp	r5, r6
 80069b4:	d11a      	bne.n	80069ec <_printf_common+0xc8>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e008      	b.n	80069cc <_printf_common+0xa8>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4652      	mov	r2, sl
 80069be:	4641      	mov	r1, r8
 80069c0:	4638      	mov	r0, r7
 80069c2:	47c8      	blx	r9
 80069c4:	3001      	adds	r0, #1
 80069c6:	d103      	bne.n	80069d0 <_printf_common+0xac>
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295
 80069cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d0:	3501      	adds	r5, #1
 80069d2:	e7c6      	b.n	8006962 <_printf_common+0x3e>
 80069d4:	18e1      	adds	r1, r4, r3
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	2030      	movs	r0, #48	@ 0x30
 80069da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069de:	4422      	add	r2, r4
 80069e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069e8:	3302      	adds	r3, #2
 80069ea:	e7c7      	b.n	800697c <_printf_common+0x58>
 80069ec:	2301      	movs	r3, #1
 80069ee:	4622      	mov	r2, r4
 80069f0:	4641      	mov	r1, r8
 80069f2:	4638      	mov	r0, r7
 80069f4:	47c8      	blx	r9
 80069f6:	3001      	adds	r0, #1
 80069f8:	d0e6      	beq.n	80069c8 <_printf_common+0xa4>
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7d9      	b.n	80069b2 <_printf_common+0x8e>
	...

08006a00 <_printf_i>:
 8006a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	7e0f      	ldrb	r7, [r1, #24]
 8006a06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a08:	2f78      	cmp	r7, #120	@ 0x78
 8006a0a:	4691      	mov	r9, r2
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	469a      	mov	sl, r3
 8006a12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a16:	d807      	bhi.n	8006a28 <_printf_i+0x28>
 8006a18:	2f62      	cmp	r7, #98	@ 0x62
 8006a1a:	d80a      	bhi.n	8006a32 <_printf_i+0x32>
 8006a1c:	2f00      	cmp	r7, #0
 8006a1e:	f000 80d1 	beq.w	8006bc4 <_printf_i+0x1c4>
 8006a22:	2f58      	cmp	r7, #88	@ 0x58
 8006a24:	f000 80b8 	beq.w	8006b98 <_printf_i+0x198>
 8006a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a30:	e03a      	b.n	8006aa8 <_printf_i+0xa8>
 8006a32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a36:	2b15      	cmp	r3, #21
 8006a38:	d8f6      	bhi.n	8006a28 <_printf_i+0x28>
 8006a3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a40 <_printf_i+0x40>)
 8006a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a40:	08006a99 	.word	0x08006a99
 8006a44:	08006aad 	.word	0x08006aad
 8006a48:	08006a29 	.word	0x08006a29
 8006a4c:	08006a29 	.word	0x08006a29
 8006a50:	08006a29 	.word	0x08006a29
 8006a54:	08006a29 	.word	0x08006a29
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006a29 	.word	0x08006a29
 8006a60:	08006a29 	.word	0x08006a29
 8006a64:	08006a29 	.word	0x08006a29
 8006a68:	08006a29 	.word	0x08006a29
 8006a6c:	08006bab 	.word	0x08006bab
 8006a70:	08006ad7 	.word	0x08006ad7
 8006a74:	08006b65 	.word	0x08006b65
 8006a78:	08006a29 	.word	0x08006a29
 8006a7c:	08006a29 	.word	0x08006a29
 8006a80:	08006bcd 	.word	0x08006bcd
 8006a84:	08006a29 	.word	0x08006a29
 8006a88:	08006ad7 	.word	0x08006ad7
 8006a8c:	08006a29 	.word	0x08006a29
 8006a90:	08006a29 	.word	0x08006a29
 8006a94:	08006b6d 	.word	0x08006b6d
 8006a98:	6833      	ldr	r3, [r6, #0]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6032      	str	r2, [r6, #0]
 8006aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006aa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e09c      	b.n	8006be6 <_printf_i+0x1e6>
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	6820      	ldr	r0, [r4, #0]
 8006ab0:	1d19      	adds	r1, r3, #4
 8006ab2:	6031      	str	r1, [r6, #0]
 8006ab4:	0606      	lsls	r6, r0, #24
 8006ab6:	d501      	bpl.n	8006abc <_printf_i+0xbc>
 8006ab8:	681d      	ldr	r5, [r3, #0]
 8006aba:	e003      	b.n	8006ac4 <_printf_i+0xc4>
 8006abc:	0645      	lsls	r5, r0, #25
 8006abe:	d5fb      	bpl.n	8006ab8 <_printf_i+0xb8>
 8006ac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	da03      	bge.n	8006ad0 <_printf_i+0xd0>
 8006ac8:	232d      	movs	r3, #45	@ 0x2d
 8006aca:	426d      	negs	r5, r5
 8006acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad0:	4858      	ldr	r0, [pc, #352]	@ (8006c34 <_printf_i+0x234>)
 8006ad2:	230a      	movs	r3, #10
 8006ad4:	e011      	b.n	8006afa <_printf_i+0xfa>
 8006ad6:	6821      	ldr	r1, [r4, #0]
 8006ad8:	6833      	ldr	r3, [r6, #0]
 8006ada:	0608      	lsls	r0, r1, #24
 8006adc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ae0:	d402      	bmi.n	8006ae8 <_printf_i+0xe8>
 8006ae2:	0649      	lsls	r1, r1, #25
 8006ae4:	bf48      	it	mi
 8006ae6:	b2ad      	uxthmi	r5, r5
 8006ae8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006aea:	4852      	ldr	r0, [pc, #328]	@ (8006c34 <_printf_i+0x234>)
 8006aec:	6033      	str	r3, [r6, #0]
 8006aee:	bf14      	ite	ne
 8006af0:	230a      	movne	r3, #10
 8006af2:	2308      	moveq	r3, #8
 8006af4:	2100      	movs	r1, #0
 8006af6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006afa:	6866      	ldr	r6, [r4, #4]
 8006afc:	60a6      	str	r6, [r4, #8]
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	db05      	blt.n	8006b0e <_printf_i+0x10e>
 8006b02:	6821      	ldr	r1, [r4, #0]
 8006b04:	432e      	orrs	r6, r5
 8006b06:	f021 0104 	bic.w	r1, r1, #4
 8006b0a:	6021      	str	r1, [r4, #0]
 8006b0c:	d04b      	beq.n	8006ba6 <_printf_i+0x1a6>
 8006b0e:	4616      	mov	r6, r2
 8006b10:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b14:	fb03 5711 	mls	r7, r3, r1, r5
 8006b18:	5dc7      	ldrb	r7, [r0, r7]
 8006b1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b1e:	462f      	mov	r7, r5
 8006b20:	42bb      	cmp	r3, r7
 8006b22:	460d      	mov	r5, r1
 8006b24:	d9f4      	bls.n	8006b10 <_printf_i+0x110>
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d10b      	bne.n	8006b42 <_printf_i+0x142>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	07df      	lsls	r7, r3, #31
 8006b2e:	d508      	bpl.n	8006b42 <_printf_i+0x142>
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	6861      	ldr	r1, [r4, #4]
 8006b34:	4299      	cmp	r1, r3
 8006b36:	bfde      	ittt	le
 8006b38:	2330      	movle	r3, #48	@ 0x30
 8006b3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b42:	1b92      	subs	r2, r2, r6
 8006b44:	6122      	str	r2, [r4, #16]
 8006b46:	f8cd a000 	str.w	sl, [sp]
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	aa03      	add	r2, sp, #12
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4640      	mov	r0, r8
 8006b52:	f7ff fee7 	bl	8006924 <_printf_common>
 8006b56:	3001      	adds	r0, #1
 8006b58:	d14a      	bne.n	8006bf0 <_printf_i+0x1f0>
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	b004      	add	sp, #16
 8006b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	f043 0320 	orr.w	r3, r3, #32
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	4832      	ldr	r0, [pc, #200]	@ (8006c38 <_printf_i+0x238>)
 8006b6e:	2778      	movs	r7, #120	@ 0x78
 8006b70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	6831      	ldr	r1, [r6, #0]
 8006b78:	061f      	lsls	r7, r3, #24
 8006b7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b7e:	d402      	bmi.n	8006b86 <_printf_i+0x186>
 8006b80:	065f      	lsls	r7, r3, #25
 8006b82:	bf48      	it	mi
 8006b84:	b2ad      	uxthmi	r5, r5
 8006b86:	6031      	str	r1, [r6, #0]
 8006b88:	07d9      	lsls	r1, r3, #31
 8006b8a:	bf44      	itt	mi
 8006b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006b90:	6023      	strmi	r3, [r4, #0]
 8006b92:	b11d      	cbz	r5, 8006b9c <_printf_i+0x19c>
 8006b94:	2310      	movs	r3, #16
 8006b96:	e7ad      	b.n	8006af4 <_printf_i+0xf4>
 8006b98:	4826      	ldr	r0, [pc, #152]	@ (8006c34 <_printf_i+0x234>)
 8006b9a:	e7e9      	b.n	8006b70 <_printf_i+0x170>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	f023 0320 	bic.w	r3, r3, #32
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	e7f6      	b.n	8006b94 <_printf_i+0x194>
 8006ba6:	4616      	mov	r6, r2
 8006ba8:	e7bd      	b.n	8006b26 <_printf_i+0x126>
 8006baa:	6833      	ldr	r3, [r6, #0]
 8006bac:	6825      	ldr	r5, [r4, #0]
 8006bae:	6961      	ldr	r1, [r4, #20]
 8006bb0:	1d18      	adds	r0, r3, #4
 8006bb2:	6030      	str	r0, [r6, #0]
 8006bb4:	062e      	lsls	r6, r5, #24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	d501      	bpl.n	8006bbe <_printf_i+0x1be>
 8006bba:	6019      	str	r1, [r3, #0]
 8006bbc:	e002      	b.n	8006bc4 <_printf_i+0x1c4>
 8006bbe:	0668      	lsls	r0, r5, #25
 8006bc0:	d5fb      	bpl.n	8006bba <_printf_i+0x1ba>
 8006bc2:	8019      	strh	r1, [r3, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	4616      	mov	r6, r2
 8006bca:	e7bc      	b.n	8006b46 <_printf_i+0x146>
 8006bcc:	6833      	ldr	r3, [r6, #0]
 8006bce:	1d1a      	adds	r2, r3, #4
 8006bd0:	6032      	str	r2, [r6, #0]
 8006bd2:	681e      	ldr	r6, [r3, #0]
 8006bd4:	6862      	ldr	r2, [r4, #4]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7f9 fb31 	bl	8000240 <memchr>
 8006bde:	b108      	cbz	r0, 8006be4 <_printf_i+0x1e4>
 8006be0:	1b80      	subs	r0, r0, r6
 8006be2:	6060      	str	r0, [r4, #4]
 8006be4:	6863      	ldr	r3, [r4, #4]
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	2300      	movs	r3, #0
 8006bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bee:	e7aa      	b.n	8006b46 <_printf_i+0x146>
 8006bf0:	6923      	ldr	r3, [r4, #16]
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	47d0      	blx	sl
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d0ad      	beq.n	8006b5a <_printf_i+0x15a>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	079b      	lsls	r3, r3, #30
 8006c02:	d413      	bmi.n	8006c2c <_printf_i+0x22c>
 8006c04:	68e0      	ldr	r0, [r4, #12]
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	4298      	cmp	r0, r3
 8006c0a:	bfb8      	it	lt
 8006c0c:	4618      	movlt	r0, r3
 8006c0e:	e7a6      	b.n	8006b5e <_printf_i+0x15e>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4632      	mov	r2, r6
 8006c14:	4649      	mov	r1, r9
 8006c16:	4640      	mov	r0, r8
 8006c18:	47d0      	blx	sl
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d09d      	beq.n	8006b5a <_printf_i+0x15a>
 8006c1e:	3501      	adds	r5, #1
 8006c20:	68e3      	ldr	r3, [r4, #12]
 8006c22:	9903      	ldr	r1, [sp, #12]
 8006c24:	1a5b      	subs	r3, r3, r1
 8006c26:	42ab      	cmp	r3, r5
 8006c28:	dcf2      	bgt.n	8006c10 <_printf_i+0x210>
 8006c2a:	e7eb      	b.n	8006c04 <_printf_i+0x204>
 8006c2c:	2500      	movs	r5, #0
 8006c2e:	f104 0619 	add.w	r6, r4, #25
 8006c32:	e7f5      	b.n	8006c20 <_printf_i+0x220>
 8006c34:	08008c2a 	.word	0x08008c2a
 8006c38:	08008c3b 	.word	0x08008c3b

08006c3c <std>:
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	4604      	mov	r4, r0
 8006c42:	e9c0 3300 	strd	r3, r3, [r0]
 8006c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c4a:	6083      	str	r3, [r0, #8]
 8006c4c:	8181      	strh	r1, [r0, #12]
 8006c4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c50:	81c2      	strh	r2, [r0, #14]
 8006c52:	6183      	str	r3, [r0, #24]
 8006c54:	4619      	mov	r1, r3
 8006c56:	2208      	movs	r2, #8
 8006c58:	305c      	adds	r0, #92	@ 0x5c
 8006c5a:	f000 f906 	bl	8006e6a <memset>
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <std+0x58>)
 8006c60:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <std+0x5c>)
 8006c64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c66:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <std+0x60>)
 8006c68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <std+0x64>)
 8006c6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca4 <std+0x68>)
 8006c70:	6224      	str	r4, [r4, #32]
 8006c72:	429c      	cmp	r4, r3
 8006c74:	d006      	beq.n	8006c84 <std+0x48>
 8006c76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c7a:	4294      	cmp	r4, r2
 8006c7c:	d002      	beq.n	8006c84 <std+0x48>
 8006c7e:	33d0      	adds	r3, #208	@ 0xd0
 8006c80:	429c      	cmp	r4, r3
 8006c82:	d105      	bne.n	8006c90 <std+0x54>
 8006c84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8c:	f000 b96a 	b.w	8006f64 <__retarget_lock_init_recursive>
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	bf00      	nop
 8006c94:	08006de5 	.word	0x08006de5
 8006c98:	08006e07 	.word	0x08006e07
 8006c9c:	08006e3f 	.word	0x08006e3f
 8006ca0:	08006e63 	.word	0x08006e63
 8006ca4:	20000b78 	.word	0x20000b78

08006ca8 <stdio_exit_handler>:
 8006ca8:	4a02      	ldr	r2, [pc, #8]	@ (8006cb4 <stdio_exit_handler+0xc>)
 8006caa:	4903      	ldr	r1, [pc, #12]	@ (8006cb8 <stdio_exit_handler+0x10>)
 8006cac:	4803      	ldr	r0, [pc, #12]	@ (8006cbc <stdio_exit_handler+0x14>)
 8006cae:	f000 b869 	b.w	8006d84 <_fwalk_sglue>
 8006cb2:	bf00      	nop
 8006cb4:	2000000c 	.word	0x2000000c
 8006cb8:	080087bd 	.word	0x080087bd
 8006cbc:	2000001c 	.word	0x2000001c

08006cc0 <cleanup_stdio>:
 8006cc0:	6841      	ldr	r1, [r0, #4]
 8006cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf4 <cleanup_stdio+0x34>)
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	b510      	push	{r4, lr}
 8006cc8:	4604      	mov	r4, r0
 8006cca:	d001      	beq.n	8006cd0 <cleanup_stdio+0x10>
 8006ccc:	f001 fd76 	bl	80087bc <_fflush_r>
 8006cd0:	68a1      	ldr	r1, [r4, #8]
 8006cd2:	4b09      	ldr	r3, [pc, #36]	@ (8006cf8 <cleanup_stdio+0x38>)
 8006cd4:	4299      	cmp	r1, r3
 8006cd6:	d002      	beq.n	8006cde <cleanup_stdio+0x1e>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f001 fd6f 	bl	80087bc <_fflush_r>
 8006cde:	68e1      	ldr	r1, [r4, #12]
 8006ce0:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <cleanup_stdio+0x3c>)
 8006ce2:	4299      	cmp	r1, r3
 8006ce4:	d004      	beq.n	8006cf0 <cleanup_stdio+0x30>
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cec:	f001 bd66 	b.w	80087bc <_fflush_r>
 8006cf0:	bd10      	pop	{r4, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000b78 	.word	0x20000b78
 8006cf8:	20000be0 	.word	0x20000be0
 8006cfc:	20000c48 	.word	0x20000c48

08006d00 <global_stdio_init.part.0>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <global_stdio_init.part.0+0x30>)
 8006d04:	4c0b      	ldr	r4, [pc, #44]	@ (8006d34 <global_stdio_init.part.0+0x34>)
 8006d06:	4a0c      	ldr	r2, [pc, #48]	@ (8006d38 <global_stdio_init.part.0+0x38>)
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2104      	movs	r1, #4
 8006d10:	f7ff ff94 	bl	8006c3c <std>
 8006d14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d18:	2201      	movs	r2, #1
 8006d1a:	2109      	movs	r1, #9
 8006d1c:	f7ff ff8e 	bl	8006c3c <std>
 8006d20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d24:	2202      	movs	r2, #2
 8006d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d2a:	2112      	movs	r1, #18
 8006d2c:	f7ff bf86 	b.w	8006c3c <std>
 8006d30:	20000cb0 	.word	0x20000cb0
 8006d34:	20000b78 	.word	0x20000b78
 8006d38:	08006ca9 	.word	0x08006ca9

08006d3c <__sfp_lock_acquire>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	@ (8006d44 <__sfp_lock_acquire+0x8>)
 8006d3e:	f000 b912 	b.w	8006f66 <__retarget_lock_acquire_recursive>
 8006d42:	bf00      	nop
 8006d44:	20000cb9 	.word	0x20000cb9

08006d48 <__sfp_lock_release>:
 8006d48:	4801      	ldr	r0, [pc, #4]	@ (8006d50 <__sfp_lock_release+0x8>)
 8006d4a:	f000 b90d 	b.w	8006f68 <__retarget_lock_release_recursive>
 8006d4e:	bf00      	nop
 8006d50:	20000cb9 	.word	0x20000cb9

08006d54 <__sinit>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	4604      	mov	r4, r0
 8006d58:	f7ff fff0 	bl	8006d3c <__sfp_lock_acquire>
 8006d5c:	6a23      	ldr	r3, [r4, #32]
 8006d5e:	b11b      	cbz	r3, 8006d68 <__sinit+0x14>
 8006d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d64:	f7ff bff0 	b.w	8006d48 <__sfp_lock_release>
 8006d68:	4b04      	ldr	r3, [pc, #16]	@ (8006d7c <__sinit+0x28>)
 8006d6a:	6223      	str	r3, [r4, #32]
 8006d6c:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <__sinit+0x2c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f5      	bne.n	8006d60 <__sinit+0xc>
 8006d74:	f7ff ffc4 	bl	8006d00 <global_stdio_init.part.0>
 8006d78:	e7f2      	b.n	8006d60 <__sinit+0xc>
 8006d7a:	bf00      	nop
 8006d7c:	08006cc1 	.word	0x08006cc1
 8006d80:	20000cb0 	.word	0x20000cb0

08006d84 <_fwalk_sglue>:
 8006d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	4607      	mov	r7, r0
 8006d8a:	4688      	mov	r8, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	2600      	movs	r6, #0
 8006d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d94:	f1b9 0901 	subs.w	r9, r9, #1
 8006d98:	d505      	bpl.n	8006da6 <_fwalk_sglue+0x22>
 8006d9a:	6824      	ldr	r4, [r4, #0]
 8006d9c:	2c00      	cmp	r4, #0
 8006d9e:	d1f7      	bne.n	8006d90 <_fwalk_sglue+0xc>
 8006da0:	4630      	mov	r0, r6
 8006da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da6:	89ab      	ldrh	r3, [r5, #12]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d907      	bls.n	8006dbc <_fwalk_sglue+0x38>
 8006dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006db0:	3301      	adds	r3, #1
 8006db2:	d003      	beq.n	8006dbc <_fwalk_sglue+0x38>
 8006db4:	4629      	mov	r1, r5
 8006db6:	4638      	mov	r0, r7
 8006db8:	47c0      	blx	r8
 8006dba:	4306      	orrs	r6, r0
 8006dbc:	3568      	adds	r5, #104	@ 0x68
 8006dbe:	e7e9      	b.n	8006d94 <_fwalk_sglue+0x10>

08006dc0 <iprintf>:
 8006dc0:	b40f      	push	{r0, r1, r2, r3}
 8006dc2:	b507      	push	{r0, r1, r2, lr}
 8006dc4:	4906      	ldr	r1, [pc, #24]	@ (8006de0 <iprintf+0x20>)
 8006dc6:	ab04      	add	r3, sp, #16
 8006dc8:	6808      	ldr	r0, [r1, #0]
 8006dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dce:	6881      	ldr	r1, [r0, #8]
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	f001 fb57 	bl	8008484 <_vfiprintf_r>
 8006dd6:	b003      	add	sp, #12
 8006dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ddc:	b004      	add	sp, #16
 8006dde:	4770      	bx	lr
 8006de0:	20000018 	.word	0x20000018

08006de4 <__sread>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	460c      	mov	r4, r1
 8006de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dec:	f000 f86c 	bl	8006ec8 <_read_r>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	bfab      	itete	ge
 8006df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006df6:	89a3      	ldrhlt	r3, [r4, #12]
 8006df8:	181b      	addge	r3, r3, r0
 8006dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dfe:	bfac      	ite	ge
 8006e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e02:	81a3      	strhlt	r3, [r4, #12]
 8006e04:	bd10      	pop	{r4, pc}

08006e06 <__swrite>:
 8006e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0a:	461f      	mov	r7, r3
 8006e0c:	898b      	ldrh	r3, [r1, #12]
 8006e0e:	05db      	lsls	r3, r3, #23
 8006e10:	4605      	mov	r5, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	4616      	mov	r6, r2
 8006e16:	d505      	bpl.n	8006e24 <__swrite+0x1e>
 8006e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f000 f840 	bl	8006ea4 <_lseek_r>
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	4632      	mov	r2, r6
 8006e32:	463b      	mov	r3, r7
 8006e34:	4628      	mov	r0, r5
 8006e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	f000 b857 	b.w	8006eec <_write_r>

08006e3e <__sseek>:
 8006e3e:	b510      	push	{r4, lr}
 8006e40:	460c      	mov	r4, r1
 8006e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e46:	f000 f82d 	bl	8006ea4 <_lseek_r>
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	bf15      	itete	ne
 8006e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e5a:	81a3      	strheq	r3, [r4, #12]
 8006e5c:	bf18      	it	ne
 8006e5e:	81a3      	strhne	r3, [r4, #12]
 8006e60:	bd10      	pop	{r4, pc}

08006e62 <__sclose>:
 8006e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e66:	f000 b80d 	b.w	8006e84 <_close_r>

08006e6a <memset>:
 8006e6a:	4402      	add	r2, r0
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d100      	bne.n	8006e74 <memset+0xa>
 8006e72:	4770      	bx	lr
 8006e74:	f803 1b01 	strb.w	r1, [r3], #1
 8006e78:	e7f9      	b.n	8006e6e <memset+0x4>
	...

08006e7c <_localeconv_r>:
 8006e7c:	4800      	ldr	r0, [pc, #0]	@ (8006e80 <_localeconv_r+0x4>)
 8006e7e:	4770      	bx	lr
 8006e80:	20000158 	.word	0x20000158

08006e84 <_close_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d06      	ldr	r5, [pc, #24]	@ (8006ea0 <_close_r+0x1c>)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	f7fa faf8 	bl	8001484 <_close>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_close_r+0x1a>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_close_r+0x1a>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	20000cb4 	.word	0x20000cb4

08006ea4 <_lseek_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d07      	ldr	r5, [pc, #28]	@ (8006ec4 <_lseek_r+0x20>)
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	4608      	mov	r0, r1
 8006eac:	4611      	mov	r1, r2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	602a      	str	r2, [r5, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f7fa fb0d 	bl	80014d2 <_lseek>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_lseek_r+0x1e>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_lseek_r+0x1e>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	20000cb4 	.word	0x20000cb4

08006ec8 <_read_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4d07      	ldr	r5, [pc, #28]	@ (8006ee8 <_read_r+0x20>)
 8006ecc:	4604      	mov	r4, r0
 8006ece:	4608      	mov	r0, r1
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	602a      	str	r2, [r5, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f7fa fa9b 	bl	8001412 <_read>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_read_r+0x1e>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_read_r+0x1e>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	20000cb4 	.word	0x20000cb4

08006eec <_write_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d07      	ldr	r5, [pc, #28]	@ (8006f0c <_write_r+0x20>)
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	4608      	mov	r0, r1
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	602a      	str	r2, [r5, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f7fa faa6 	bl	800144c <_write>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_write_r+0x1e>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_write_r+0x1e>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	20000cb4 	.word	0x20000cb4

08006f10 <__errno>:
 8006f10:	4b01      	ldr	r3, [pc, #4]	@ (8006f18 <__errno+0x8>)
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000018 	.word	0x20000018

08006f1c <__libc_init_array>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f54 <__libc_init_array+0x38>)
 8006f20:	4c0d      	ldr	r4, [pc, #52]	@ (8006f58 <__libc_init_array+0x3c>)
 8006f22:	1b64      	subs	r4, r4, r5
 8006f24:	10a4      	asrs	r4, r4, #2
 8006f26:	2600      	movs	r6, #0
 8006f28:	42a6      	cmp	r6, r4
 8006f2a:	d109      	bne.n	8006f40 <__libc_init_array+0x24>
 8006f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f5c <__libc_init_array+0x40>)
 8006f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f60 <__libc_init_array+0x44>)
 8006f30:	f001 fe52 	bl	8008bd8 <_init>
 8006f34:	1b64      	subs	r4, r4, r5
 8006f36:	10a4      	asrs	r4, r4, #2
 8006f38:	2600      	movs	r6, #0
 8006f3a:	42a6      	cmp	r6, r4
 8006f3c:	d105      	bne.n	8006f4a <__libc_init_array+0x2e>
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f44:	4798      	blx	r3
 8006f46:	3601      	adds	r6, #1
 8006f48:	e7ee      	b.n	8006f28 <__libc_init_array+0xc>
 8006f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4e:	4798      	blx	r3
 8006f50:	3601      	adds	r6, #1
 8006f52:	e7f2      	b.n	8006f3a <__libc_init_array+0x1e>
 8006f54:	08008f94 	.word	0x08008f94
 8006f58:	08008f94 	.word	0x08008f94
 8006f5c:	08008f94 	.word	0x08008f94
 8006f60:	08008f98 	.word	0x08008f98

08006f64 <__retarget_lock_init_recursive>:
 8006f64:	4770      	bx	lr

08006f66 <__retarget_lock_acquire_recursive>:
 8006f66:	4770      	bx	lr

08006f68 <__retarget_lock_release_recursive>:
 8006f68:	4770      	bx	lr

08006f6a <quorem>:
 8006f6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6e:	6903      	ldr	r3, [r0, #16]
 8006f70:	690c      	ldr	r4, [r1, #16]
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	4607      	mov	r7, r0
 8006f76:	db7e      	blt.n	8007076 <quorem+0x10c>
 8006f78:	3c01      	subs	r4, #1
 8006f7a:	f101 0814 	add.w	r8, r1, #20
 8006f7e:	00a3      	lsls	r3, r4, #2
 8006f80:	f100 0514 	add.w	r5, r0, #20
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f94:	3301      	adds	r3, #1
 8006f96:	429a      	cmp	r2, r3
 8006f98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fa0:	d32e      	bcc.n	8007000 <quorem+0x96>
 8006fa2:	f04f 0a00 	mov.w	sl, #0
 8006fa6:	46c4      	mov	ip, r8
 8006fa8:	46ae      	mov	lr, r5
 8006faa:	46d3      	mov	fp, sl
 8006fac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fb0:	b298      	uxth	r0, r3
 8006fb2:	fb06 a000 	mla	r0, r6, r0, sl
 8006fb6:	0c02      	lsrs	r2, r0, #16
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	fb06 2303 	mla	r3, r6, r3, r2
 8006fbe:	f8de 2000 	ldr.w	r2, [lr]
 8006fc2:	b280      	uxth	r0, r0
 8006fc4:	b292      	uxth	r2, r2
 8006fc6:	1a12      	subs	r2, r2, r0
 8006fc8:	445a      	add	r2, fp
 8006fca:	f8de 0000 	ldr.w	r0, [lr]
 8006fce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fd8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fdc:	b292      	uxth	r2, r2
 8006fde:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fe2:	45e1      	cmp	r9, ip
 8006fe4:	f84e 2b04 	str.w	r2, [lr], #4
 8006fe8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006fec:	d2de      	bcs.n	8006fac <quorem+0x42>
 8006fee:	9b00      	ldr	r3, [sp, #0]
 8006ff0:	58eb      	ldr	r3, [r5, r3]
 8006ff2:	b92b      	cbnz	r3, 8007000 <quorem+0x96>
 8006ff4:	9b01      	ldr	r3, [sp, #4]
 8006ff6:	3b04      	subs	r3, #4
 8006ff8:	429d      	cmp	r5, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	d32f      	bcc.n	800705e <quorem+0xf4>
 8006ffe:	613c      	str	r4, [r7, #16]
 8007000:	4638      	mov	r0, r7
 8007002:	f001 f90d 	bl	8008220 <__mcmp>
 8007006:	2800      	cmp	r0, #0
 8007008:	db25      	blt.n	8007056 <quorem+0xec>
 800700a:	4629      	mov	r1, r5
 800700c:	2000      	movs	r0, #0
 800700e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007012:	f8d1 c000 	ldr.w	ip, [r1]
 8007016:	fa1f fe82 	uxth.w	lr, r2
 800701a:	fa1f f38c 	uxth.w	r3, ip
 800701e:	eba3 030e 	sub.w	r3, r3, lr
 8007022:	4403      	add	r3, r0
 8007024:	0c12      	lsrs	r2, r2, #16
 8007026:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800702a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800702e:	b29b      	uxth	r3, r3
 8007030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007034:	45c1      	cmp	r9, r8
 8007036:	f841 3b04 	str.w	r3, [r1], #4
 800703a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800703e:	d2e6      	bcs.n	800700e <quorem+0xa4>
 8007040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007048:	b922      	cbnz	r2, 8007054 <quorem+0xea>
 800704a:	3b04      	subs	r3, #4
 800704c:	429d      	cmp	r5, r3
 800704e:	461a      	mov	r2, r3
 8007050:	d30b      	bcc.n	800706a <quorem+0x100>
 8007052:	613c      	str	r4, [r7, #16]
 8007054:	3601      	adds	r6, #1
 8007056:	4630      	mov	r0, r6
 8007058:	b003      	add	sp, #12
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	6812      	ldr	r2, [r2, #0]
 8007060:	3b04      	subs	r3, #4
 8007062:	2a00      	cmp	r2, #0
 8007064:	d1cb      	bne.n	8006ffe <quorem+0x94>
 8007066:	3c01      	subs	r4, #1
 8007068:	e7c6      	b.n	8006ff8 <quorem+0x8e>
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	3b04      	subs	r3, #4
 800706e:	2a00      	cmp	r2, #0
 8007070:	d1ef      	bne.n	8007052 <quorem+0xe8>
 8007072:	3c01      	subs	r4, #1
 8007074:	e7ea      	b.n	800704c <quorem+0xe2>
 8007076:	2000      	movs	r0, #0
 8007078:	e7ee      	b.n	8007058 <quorem+0xee>
 800707a:	0000      	movs	r0, r0
 800707c:	0000      	movs	r0, r0
	...

08007080 <_dtoa_r>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b02 	vpush	{d8}
 8007088:	69c7      	ldr	r7, [r0, #28]
 800708a:	b091      	sub	sp, #68	@ 0x44
 800708c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007090:	ec55 4b10 	vmov	r4, r5, d0
 8007094:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007096:	9107      	str	r1, [sp, #28]
 8007098:	4681      	mov	r9, r0
 800709a:	9209      	str	r2, [sp, #36]	@ 0x24
 800709c:	930d      	str	r3, [sp, #52]	@ 0x34
 800709e:	b97f      	cbnz	r7, 80070c0 <_dtoa_r+0x40>
 80070a0:	2010      	movs	r0, #16
 80070a2:	f000 fd95 	bl	8007bd0 <malloc>
 80070a6:	4602      	mov	r2, r0
 80070a8:	f8c9 001c 	str.w	r0, [r9, #28]
 80070ac:	b920      	cbnz	r0, 80070b8 <_dtoa_r+0x38>
 80070ae:	4ba0      	ldr	r3, [pc, #640]	@ (8007330 <_dtoa_r+0x2b0>)
 80070b0:	21ef      	movs	r1, #239	@ 0xef
 80070b2:	48a0      	ldr	r0, [pc, #640]	@ (8007334 <_dtoa_r+0x2b4>)
 80070b4:	f001 fc5c 	bl	8008970 <__assert_func>
 80070b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80070bc:	6007      	str	r7, [r0, #0]
 80070be:	60c7      	str	r7, [r0, #12]
 80070c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	b159      	cbz	r1, 80070e0 <_dtoa_r+0x60>
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	604a      	str	r2, [r1, #4]
 80070cc:	2301      	movs	r3, #1
 80070ce:	4093      	lsls	r3, r2
 80070d0:	608b      	str	r3, [r1, #8]
 80070d2:	4648      	mov	r0, r9
 80070d4:	f000 fe72 	bl	8007dbc <_Bfree>
 80070d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	1e2b      	subs	r3, r5, #0
 80070e2:	bfbb      	ittet	lt
 80070e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070e8:	9303      	strlt	r3, [sp, #12]
 80070ea:	2300      	movge	r3, #0
 80070ec:	2201      	movlt	r2, #1
 80070ee:	bfac      	ite	ge
 80070f0:	6033      	strge	r3, [r6, #0]
 80070f2:	6032      	strlt	r2, [r6, #0]
 80070f4:	4b90      	ldr	r3, [pc, #576]	@ (8007338 <_dtoa_r+0x2b8>)
 80070f6:	9e03      	ldr	r6, [sp, #12]
 80070f8:	43b3      	bics	r3, r6
 80070fa:	d110      	bne.n	800711e <_dtoa_r+0x9e>
 80070fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007108:	4323      	orrs	r3, r4
 800710a:	f000 84e6 	beq.w	8007ada <_dtoa_r+0xa5a>
 800710e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007110:	4f8a      	ldr	r7, [pc, #552]	@ (800733c <_dtoa_r+0x2bc>)
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 84e8 	beq.w	8007ae8 <_dtoa_r+0xa68>
 8007118:	1cfb      	adds	r3, r7, #3
 800711a:	f000 bce3 	b.w	8007ae4 <_dtoa_r+0xa64>
 800711e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007122:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	d10a      	bne.n	8007142 <_dtoa_r+0xc2>
 800712c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800712e:	2301      	movs	r3, #1
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007134:	b113      	cbz	r3, 800713c <_dtoa_r+0xbc>
 8007136:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007138:	4b81      	ldr	r3, [pc, #516]	@ (8007340 <_dtoa_r+0x2c0>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4f81      	ldr	r7, [pc, #516]	@ (8007344 <_dtoa_r+0x2c4>)
 800713e:	f000 bcd3 	b.w	8007ae8 <_dtoa_r+0xa68>
 8007142:	aa0e      	add	r2, sp, #56	@ 0x38
 8007144:	a90f      	add	r1, sp, #60	@ 0x3c
 8007146:	4648      	mov	r0, r9
 8007148:	eeb0 0b48 	vmov.f64	d0, d8
 800714c:	f001 f918 	bl	8008380 <__d2b>
 8007150:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007154:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007156:	9001      	str	r0, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d045      	beq.n	80071e8 <_dtoa_r+0x168>
 800715c:	eeb0 7b48 	vmov.f64	d7, d8
 8007160:	ee18 1a90 	vmov	r1, s17
 8007164:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007168:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800716c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007170:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007174:	2500      	movs	r5, #0
 8007176:	ee07 1a90 	vmov	s15, r1
 800717a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800717e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007318 <_dtoa_r+0x298>
 8007182:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007186:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007320 <_dtoa_r+0x2a0>
 800718a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800718e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007328 <_dtoa_r+0x2a8>
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800719a:	eeb0 7b46 	vmov.f64	d7, d6
 800719e:	eea4 7b05 	vfma.f64	d7, d4, d5
 80071a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80071a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80071aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ae:	ee16 8a90 	vmov	r8, s13
 80071b2:	d508      	bpl.n	80071c6 <_dtoa_r+0x146>
 80071b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80071b8:	eeb4 6b47 	vcmp.f64	d6, d7
 80071bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c0:	bf18      	it	ne
 80071c2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80071c6:	f1b8 0f16 	cmp.w	r8, #22
 80071ca:	d82b      	bhi.n	8007224 <_dtoa_r+0x1a4>
 80071cc:	495e      	ldr	r1, [pc, #376]	@ (8007348 <_dtoa_r+0x2c8>)
 80071ce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80071d2:	ed91 7b00 	vldr	d7, [r1]
 80071d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80071da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071de:	d501      	bpl.n	80071e4 <_dtoa_r+0x164>
 80071e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80071e4:	2100      	movs	r1, #0
 80071e6:	e01e      	b.n	8007226 <_dtoa_r+0x1a6>
 80071e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ea:	4413      	add	r3, r2
 80071ec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80071f0:	2920      	cmp	r1, #32
 80071f2:	bfc1      	itttt	gt
 80071f4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80071f8:	408e      	lslgt	r6, r1
 80071fa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80071fe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007202:	bfd6      	itet	le
 8007204:	f1c1 0120 	rsble	r1, r1, #32
 8007208:	4331      	orrgt	r1, r6
 800720a:	fa04 f101 	lslle.w	r1, r4, r1
 800720e:	ee07 1a90 	vmov	s15, r1
 8007212:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007216:	3b01      	subs	r3, #1
 8007218:	ee17 1a90 	vmov	r1, s15
 800721c:	2501      	movs	r5, #1
 800721e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007222:	e7a8      	b.n	8007176 <_dtoa_r+0xf6>
 8007224:	2101      	movs	r1, #1
 8007226:	1ad2      	subs	r2, r2, r3
 8007228:	1e53      	subs	r3, r2, #1
 800722a:	9306      	str	r3, [sp, #24]
 800722c:	bf45      	ittet	mi
 800722e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007232:	9304      	strmi	r3, [sp, #16]
 8007234:	2300      	movpl	r3, #0
 8007236:	2300      	movmi	r3, #0
 8007238:	bf4c      	ite	mi
 800723a:	9306      	strmi	r3, [sp, #24]
 800723c:	9304      	strpl	r3, [sp, #16]
 800723e:	f1b8 0f00 	cmp.w	r8, #0
 8007242:	910c      	str	r1, [sp, #48]	@ 0x30
 8007244:	db18      	blt.n	8007278 <_dtoa_r+0x1f8>
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800724c:	4443      	add	r3, r8
 800724e:	9306      	str	r3, [sp, #24]
 8007250:	2300      	movs	r3, #0
 8007252:	9a07      	ldr	r2, [sp, #28]
 8007254:	2a09      	cmp	r2, #9
 8007256:	d845      	bhi.n	80072e4 <_dtoa_r+0x264>
 8007258:	2a05      	cmp	r2, #5
 800725a:	bfc4      	itt	gt
 800725c:	3a04      	subgt	r2, #4
 800725e:	9207      	strgt	r2, [sp, #28]
 8007260:	9a07      	ldr	r2, [sp, #28]
 8007262:	f1a2 0202 	sub.w	r2, r2, #2
 8007266:	bfcc      	ite	gt
 8007268:	2400      	movgt	r4, #0
 800726a:	2401      	movle	r4, #1
 800726c:	2a03      	cmp	r2, #3
 800726e:	d844      	bhi.n	80072fa <_dtoa_r+0x27a>
 8007270:	e8df f002 	tbb	[pc, r2]
 8007274:	0b173634 	.word	0x0b173634
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	2200      	movs	r2, #0
 800727c:	eba3 0308 	sub.w	r3, r3, r8
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	920a      	str	r2, [sp, #40]	@ 0x28
 8007284:	f1c8 0300 	rsb	r3, r8, #0
 8007288:	e7e3      	b.n	8007252 <_dtoa_r+0x1d2>
 800728a:	2201      	movs	r2, #1
 800728c:	9208      	str	r2, [sp, #32]
 800728e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007290:	eb08 0b02 	add.w	fp, r8, r2
 8007294:	f10b 0a01 	add.w	sl, fp, #1
 8007298:	4652      	mov	r2, sl
 800729a:	2a01      	cmp	r2, #1
 800729c:	bfb8      	it	lt
 800729e:	2201      	movlt	r2, #1
 80072a0:	e006      	b.n	80072b0 <_dtoa_r+0x230>
 80072a2:	2201      	movs	r2, #1
 80072a4:	9208      	str	r2, [sp, #32]
 80072a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	dd29      	ble.n	8007300 <_dtoa_r+0x280>
 80072ac:	4693      	mov	fp, r2
 80072ae:	4692      	mov	sl, r2
 80072b0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80072b4:	2100      	movs	r1, #0
 80072b6:	2004      	movs	r0, #4
 80072b8:	f100 0614 	add.w	r6, r0, #20
 80072bc:	4296      	cmp	r6, r2
 80072be:	d926      	bls.n	800730e <_dtoa_r+0x28e>
 80072c0:	6079      	str	r1, [r7, #4]
 80072c2:	4648      	mov	r0, r9
 80072c4:	9305      	str	r3, [sp, #20]
 80072c6:	f000 fd39 	bl	8007d3c <_Balloc>
 80072ca:	9b05      	ldr	r3, [sp, #20]
 80072cc:	4607      	mov	r7, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d13e      	bne.n	8007350 <_dtoa_r+0x2d0>
 80072d2:	4b1e      	ldr	r3, [pc, #120]	@ (800734c <_dtoa_r+0x2cc>)
 80072d4:	4602      	mov	r2, r0
 80072d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80072da:	e6ea      	b.n	80070b2 <_dtoa_r+0x32>
 80072dc:	2200      	movs	r2, #0
 80072de:	e7e1      	b.n	80072a4 <_dtoa_r+0x224>
 80072e0:	2200      	movs	r2, #0
 80072e2:	e7d3      	b.n	800728c <_dtoa_r+0x20c>
 80072e4:	2401      	movs	r4, #1
 80072e6:	2200      	movs	r2, #0
 80072e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80072ec:	f04f 3bff 	mov.w	fp, #4294967295
 80072f0:	2100      	movs	r1, #0
 80072f2:	46da      	mov	sl, fp
 80072f4:	2212      	movs	r2, #18
 80072f6:	9109      	str	r1, [sp, #36]	@ 0x24
 80072f8:	e7da      	b.n	80072b0 <_dtoa_r+0x230>
 80072fa:	2201      	movs	r2, #1
 80072fc:	9208      	str	r2, [sp, #32]
 80072fe:	e7f5      	b.n	80072ec <_dtoa_r+0x26c>
 8007300:	f04f 0b01 	mov.w	fp, #1
 8007304:	46da      	mov	sl, fp
 8007306:	465a      	mov	r2, fp
 8007308:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800730c:	e7d0      	b.n	80072b0 <_dtoa_r+0x230>
 800730e:	3101      	adds	r1, #1
 8007310:	0040      	lsls	r0, r0, #1
 8007312:	e7d1      	b.n	80072b8 <_dtoa_r+0x238>
 8007314:	f3af 8000 	nop.w
 8007318:	636f4361 	.word	0x636f4361
 800731c:	3fd287a7 	.word	0x3fd287a7
 8007320:	8b60c8b3 	.word	0x8b60c8b3
 8007324:	3fc68a28 	.word	0x3fc68a28
 8007328:	509f79fb 	.word	0x509f79fb
 800732c:	3fd34413 	.word	0x3fd34413
 8007330:	08008c59 	.word	0x08008c59
 8007334:	08008c70 	.word	0x08008c70
 8007338:	7ff00000 	.word	0x7ff00000
 800733c:	08008c55 	.word	0x08008c55
 8007340:	08008c29 	.word	0x08008c29
 8007344:	08008c28 	.word	0x08008c28
 8007348:	08008dc0 	.word	0x08008dc0
 800734c:	08008cc8 	.word	0x08008cc8
 8007350:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007354:	f1ba 0f0e 	cmp.w	sl, #14
 8007358:	6010      	str	r0, [r2, #0]
 800735a:	d86e      	bhi.n	800743a <_dtoa_r+0x3ba>
 800735c:	2c00      	cmp	r4, #0
 800735e:	d06c      	beq.n	800743a <_dtoa_r+0x3ba>
 8007360:	f1b8 0f00 	cmp.w	r8, #0
 8007364:	f340 80b4 	ble.w	80074d0 <_dtoa_r+0x450>
 8007368:	4ac8      	ldr	r2, [pc, #800]	@ (800768c <_dtoa_r+0x60c>)
 800736a:	f008 010f 	and.w	r1, r8, #15
 800736e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007372:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007376:	ed92 7b00 	vldr	d7, [r2]
 800737a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800737e:	f000 809b 	beq.w	80074b8 <_dtoa_r+0x438>
 8007382:	4ac3      	ldr	r2, [pc, #780]	@ (8007690 <_dtoa_r+0x610>)
 8007384:	ed92 6b08 	vldr	d6, [r2, #32]
 8007388:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800738c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007390:	f001 010f 	and.w	r1, r1, #15
 8007394:	2203      	movs	r2, #3
 8007396:	48be      	ldr	r0, [pc, #760]	@ (8007690 <_dtoa_r+0x610>)
 8007398:	2900      	cmp	r1, #0
 800739a:	f040 808f 	bne.w	80074bc <_dtoa_r+0x43c>
 800739e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80073a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80073a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80073ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073b0:	2900      	cmp	r1, #0
 80073b2:	f000 80b3 	beq.w	800751c <_dtoa_r+0x49c>
 80073b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80073ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80073be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c2:	f140 80ab 	bpl.w	800751c <_dtoa_r+0x49c>
 80073c6:	f1ba 0f00 	cmp.w	sl, #0
 80073ca:	f000 80a7 	beq.w	800751c <_dtoa_r+0x49c>
 80073ce:	f1bb 0f00 	cmp.w	fp, #0
 80073d2:	dd30      	ble.n	8007436 <_dtoa_r+0x3b6>
 80073d4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80073d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80073e4:	9105      	str	r1, [sp, #20]
 80073e6:	3201      	adds	r2, #1
 80073e8:	465c      	mov	r4, fp
 80073ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 80073ee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80073f2:	ee07 2a90 	vmov	s15, r2
 80073f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80073fe:	ee15 2a90 	vmov	r2, s11
 8007402:	ec51 0b15 	vmov	r0, r1, d5
 8007406:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800740a:	2c00      	cmp	r4, #0
 800740c:	f040 808a 	bne.w	8007524 <_dtoa_r+0x4a4>
 8007410:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007414:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007418:	ec41 0b17 	vmov	d7, r0, r1
 800741c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007424:	f300 826a 	bgt.w	80078fc <_dtoa_r+0x87c>
 8007428:	eeb1 7b47 	vneg.f64	d7, d7
 800742c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	d423      	bmi.n	800747e <_dtoa_r+0x3fe>
 8007436:	ed8d 8b02 	vstr	d8, [sp, #8]
 800743a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800743c:	2a00      	cmp	r2, #0
 800743e:	f2c0 8129 	blt.w	8007694 <_dtoa_r+0x614>
 8007442:	f1b8 0f0e 	cmp.w	r8, #14
 8007446:	f300 8125 	bgt.w	8007694 <_dtoa_r+0x614>
 800744a:	4b90      	ldr	r3, [pc, #576]	@ (800768c <_dtoa_r+0x60c>)
 800744c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007450:	ed93 6b00 	vldr	d6, [r3]
 8007454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	f280 80c8 	bge.w	80075ec <_dtoa_r+0x56c>
 800745c:	f1ba 0f00 	cmp.w	sl, #0
 8007460:	f300 80c4 	bgt.w	80075ec <_dtoa_r+0x56c>
 8007464:	d10b      	bne.n	800747e <_dtoa_r+0x3fe>
 8007466:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800746a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800746e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007472:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	f2c0 823c 	blt.w	80078f6 <_dtoa_r+0x876>
 800747e:	2400      	movs	r4, #0
 8007480:	4625      	mov	r5, r4
 8007482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007484:	43db      	mvns	r3, r3
 8007486:	9305      	str	r3, [sp, #20]
 8007488:	463e      	mov	r6, r7
 800748a:	f04f 0800 	mov.w	r8, #0
 800748e:	4621      	mov	r1, r4
 8007490:	4648      	mov	r0, r9
 8007492:	f000 fc93 	bl	8007dbc <_Bfree>
 8007496:	2d00      	cmp	r5, #0
 8007498:	f000 80a2 	beq.w	80075e0 <_dtoa_r+0x560>
 800749c:	f1b8 0f00 	cmp.w	r8, #0
 80074a0:	d005      	beq.n	80074ae <_dtoa_r+0x42e>
 80074a2:	45a8      	cmp	r8, r5
 80074a4:	d003      	beq.n	80074ae <_dtoa_r+0x42e>
 80074a6:	4641      	mov	r1, r8
 80074a8:	4648      	mov	r0, r9
 80074aa:	f000 fc87 	bl	8007dbc <_Bfree>
 80074ae:	4629      	mov	r1, r5
 80074b0:	4648      	mov	r0, r9
 80074b2:	f000 fc83 	bl	8007dbc <_Bfree>
 80074b6:	e093      	b.n	80075e0 <_dtoa_r+0x560>
 80074b8:	2202      	movs	r2, #2
 80074ba:	e76c      	b.n	8007396 <_dtoa_r+0x316>
 80074bc:	07cc      	lsls	r4, r1, #31
 80074be:	d504      	bpl.n	80074ca <_dtoa_r+0x44a>
 80074c0:	ed90 6b00 	vldr	d6, [r0]
 80074c4:	3201      	adds	r2, #1
 80074c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074ca:	1049      	asrs	r1, r1, #1
 80074cc:	3008      	adds	r0, #8
 80074ce:	e763      	b.n	8007398 <_dtoa_r+0x318>
 80074d0:	d022      	beq.n	8007518 <_dtoa_r+0x498>
 80074d2:	f1c8 0100 	rsb	r1, r8, #0
 80074d6:	4a6d      	ldr	r2, [pc, #436]	@ (800768c <_dtoa_r+0x60c>)
 80074d8:	f001 000f 	and.w	r0, r1, #15
 80074dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80074e0:	ed92 7b00 	vldr	d7, [r2]
 80074e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80074e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074ec:	4868      	ldr	r0, [pc, #416]	@ (8007690 <_dtoa_r+0x610>)
 80074ee:	1109      	asrs	r1, r1, #4
 80074f0:	2400      	movs	r4, #0
 80074f2:	2202      	movs	r2, #2
 80074f4:	b929      	cbnz	r1, 8007502 <_dtoa_r+0x482>
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	f43f af57 	beq.w	80073aa <_dtoa_r+0x32a>
 80074fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007500:	e753      	b.n	80073aa <_dtoa_r+0x32a>
 8007502:	07ce      	lsls	r6, r1, #31
 8007504:	d505      	bpl.n	8007512 <_dtoa_r+0x492>
 8007506:	ed90 6b00 	vldr	d6, [r0]
 800750a:	3201      	adds	r2, #1
 800750c:	2401      	movs	r4, #1
 800750e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007512:	1049      	asrs	r1, r1, #1
 8007514:	3008      	adds	r0, #8
 8007516:	e7ed      	b.n	80074f4 <_dtoa_r+0x474>
 8007518:	2202      	movs	r2, #2
 800751a:	e746      	b.n	80073aa <_dtoa_r+0x32a>
 800751c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007520:	4654      	mov	r4, sl
 8007522:	e762      	b.n	80073ea <_dtoa_r+0x36a>
 8007524:	4a59      	ldr	r2, [pc, #356]	@ (800768c <_dtoa_r+0x60c>)
 8007526:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800752a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800752e:	9a08      	ldr	r2, [sp, #32]
 8007530:	ec41 0b17 	vmov	d7, r0, r1
 8007534:	443c      	add	r4, r7
 8007536:	b34a      	cbz	r2, 800758c <_dtoa_r+0x50c>
 8007538:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800753c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007540:	463e      	mov	r6, r7
 8007542:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007546:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800754a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800754e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007552:	ee14 2a90 	vmov	r2, s9
 8007556:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800755a:	3230      	adds	r2, #48	@ 0x30
 800755c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007560:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007568:	f806 2b01 	strb.w	r2, [r6], #1
 800756c:	d438      	bmi.n	80075e0 <_dtoa_r+0x560>
 800756e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007572:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757a:	d46e      	bmi.n	800765a <_dtoa_r+0x5da>
 800757c:	42a6      	cmp	r6, r4
 800757e:	f43f af5a 	beq.w	8007436 <_dtoa_r+0x3b6>
 8007582:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007586:	ee26 6b03 	vmul.f64	d6, d6, d3
 800758a:	e7e0      	b.n	800754e <_dtoa_r+0x4ce>
 800758c:	4621      	mov	r1, r4
 800758e:	463e      	mov	r6, r7
 8007590:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007594:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007598:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800759c:	ee14 2a90 	vmov	r2, s9
 80075a0:	3230      	adds	r2, #48	@ 0x30
 80075a2:	f806 2b01 	strb.w	r2, [r6], #1
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80075ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80075b0:	d119      	bne.n	80075e6 <_dtoa_r+0x566>
 80075b2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80075b6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80075ba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c2:	dc4a      	bgt.n	800765a <_dtoa_r+0x5da>
 80075c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80075c8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	f57f af31 	bpl.w	8007436 <_dtoa_r+0x3b6>
 80075d4:	460e      	mov	r6, r1
 80075d6:	3901      	subs	r1, #1
 80075d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075dc:	2b30      	cmp	r3, #48	@ 0x30
 80075de:	d0f9      	beq.n	80075d4 <_dtoa_r+0x554>
 80075e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80075e4:	e027      	b.n	8007636 <_dtoa_r+0x5b6>
 80075e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80075ea:	e7d5      	b.n	8007598 <_dtoa_r+0x518>
 80075ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075f0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80075f4:	463e      	mov	r6, r7
 80075f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80075fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80075fe:	ee15 3a10 	vmov	r3, s10
 8007602:	3330      	adds	r3, #48	@ 0x30
 8007604:	f806 3b01 	strb.w	r3, [r6], #1
 8007608:	1bf3      	subs	r3, r6, r7
 800760a:	459a      	cmp	sl, r3
 800760c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007610:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007614:	d132      	bne.n	800767c <_dtoa_r+0x5fc>
 8007616:	ee37 7b07 	vadd.f64	d7, d7, d7
 800761a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	dc18      	bgt.n	8007656 <_dtoa_r+0x5d6>
 8007624:	eeb4 7b46 	vcmp.f64	d7, d6
 8007628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762c:	d103      	bne.n	8007636 <_dtoa_r+0x5b6>
 800762e:	ee15 3a10 	vmov	r3, s10
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d40f      	bmi.n	8007656 <_dtoa_r+0x5d6>
 8007636:	9901      	ldr	r1, [sp, #4]
 8007638:	4648      	mov	r0, r9
 800763a:	f000 fbbf 	bl	8007dbc <_Bfree>
 800763e:	2300      	movs	r3, #0
 8007640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007642:	7033      	strb	r3, [r6, #0]
 8007644:	f108 0301 	add.w	r3, r8, #1
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 824b 	beq.w	8007ae8 <_dtoa_r+0xa68>
 8007652:	601e      	str	r6, [r3, #0]
 8007654:	e248      	b.n	8007ae8 <_dtoa_r+0xa68>
 8007656:	f8cd 8014 	str.w	r8, [sp, #20]
 800765a:	4633      	mov	r3, r6
 800765c:	461e      	mov	r6, r3
 800765e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007662:	2a39      	cmp	r2, #57	@ 0x39
 8007664:	d106      	bne.n	8007674 <_dtoa_r+0x5f4>
 8007666:	429f      	cmp	r7, r3
 8007668:	d1f8      	bne.n	800765c <_dtoa_r+0x5dc>
 800766a:	9a05      	ldr	r2, [sp, #20]
 800766c:	3201      	adds	r2, #1
 800766e:	9205      	str	r2, [sp, #20]
 8007670:	2230      	movs	r2, #48	@ 0x30
 8007672:	703a      	strb	r2, [r7, #0]
 8007674:	781a      	ldrb	r2, [r3, #0]
 8007676:	3201      	adds	r2, #1
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	e7b1      	b.n	80075e0 <_dtoa_r+0x560>
 800767c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007680:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007688:	d1b5      	bne.n	80075f6 <_dtoa_r+0x576>
 800768a:	e7d4      	b.n	8007636 <_dtoa_r+0x5b6>
 800768c:	08008dc0 	.word	0x08008dc0
 8007690:	08008d98 	.word	0x08008d98
 8007694:	9908      	ldr	r1, [sp, #32]
 8007696:	2900      	cmp	r1, #0
 8007698:	f000 80e9 	beq.w	800786e <_dtoa_r+0x7ee>
 800769c:	9907      	ldr	r1, [sp, #28]
 800769e:	2901      	cmp	r1, #1
 80076a0:	f300 80cb 	bgt.w	800783a <_dtoa_r+0x7ba>
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	f000 80c4 	beq.w	8007832 <_dtoa_r+0x7b2>
 80076aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80076ae:	9e04      	ldr	r6, [sp, #16]
 80076b0:	461c      	mov	r4, r3
 80076b2:	9305      	str	r3, [sp, #20]
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	4413      	add	r3, r2
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	9b06      	ldr	r3, [sp, #24]
 80076bc:	2101      	movs	r1, #1
 80076be:	4413      	add	r3, r2
 80076c0:	4648      	mov	r0, r9
 80076c2:	9306      	str	r3, [sp, #24]
 80076c4:	f000 fc2e 	bl	8007f24 <__i2b>
 80076c8:	9b05      	ldr	r3, [sp, #20]
 80076ca:	4605      	mov	r5, r0
 80076cc:	b166      	cbz	r6, 80076e8 <_dtoa_r+0x668>
 80076ce:	9a06      	ldr	r2, [sp, #24]
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	dd09      	ble.n	80076e8 <_dtoa_r+0x668>
 80076d4:	42b2      	cmp	r2, r6
 80076d6:	9904      	ldr	r1, [sp, #16]
 80076d8:	bfa8      	it	ge
 80076da:	4632      	movge	r2, r6
 80076dc:	1a89      	subs	r1, r1, r2
 80076de:	9104      	str	r1, [sp, #16]
 80076e0:	9906      	ldr	r1, [sp, #24]
 80076e2:	1ab6      	subs	r6, r6, r2
 80076e4:	1a8a      	subs	r2, r1, r2
 80076e6:	9206      	str	r2, [sp, #24]
 80076e8:	b30b      	cbz	r3, 800772e <_dtoa_r+0x6ae>
 80076ea:	9a08      	ldr	r2, [sp, #32]
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	f000 80c5 	beq.w	800787c <_dtoa_r+0x7fc>
 80076f2:	2c00      	cmp	r4, #0
 80076f4:	f000 80bf 	beq.w	8007876 <_dtoa_r+0x7f6>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4622      	mov	r2, r4
 80076fc:	4648      	mov	r0, r9
 80076fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007700:	f000 fcc8 	bl	8008094 <__pow5mult>
 8007704:	9a01      	ldr	r2, [sp, #4]
 8007706:	4601      	mov	r1, r0
 8007708:	4605      	mov	r5, r0
 800770a:	4648      	mov	r0, r9
 800770c:	f000 fc20 	bl	8007f50 <__multiply>
 8007710:	9901      	ldr	r1, [sp, #4]
 8007712:	9005      	str	r0, [sp, #20]
 8007714:	4648      	mov	r0, r9
 8007716:	f000 fb51 	bl	8007dbc <_Bfree>
 800771a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800771c:	1b1b      	subs	r3, r3, r4
 800771e:	f000 80b0 	beq.w	8007882 <_dtoa_r+0x802>
 8007722:	9905      	ldr	r1, [sp, #20]
 8007724:	461a      	mov	r2, r3
 8007726:	4648      	mov	r0, r9
 8007728:	f000 fcb4 	bl	8008094 <__pow5mult>
 800772c:	9001      	str	r0, [sp, #4]
 800772e:	2101      	movs	r1, #1
 8007730:	4648      	mov	r0, r9
 8007732:	f000 fbf7 	bl	8007f24 <__i2b>
 8007736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007738:	4604      	mov	r4, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 81da 	beq.w	8007af4 <_dtoa_r+0xa74>
 8007740:	461a      	mov	r2, r3
 8007742:	4601      	mov	r1, r0
 8007744:	4648      	mov	r0, r9
 8007746:	f000 fca5 	bl	8008094 <__pow5mult>
 800774a:	9b07      	ldr	r3, [sp, #28]
 800774c:	2b01      	cmp	r3, #1
 800774e:	4604      	mov	r4, r0
 8007750:	f300 80a0 	bgt.w	8007894 <_dtoa_r+0x814>
 8007754:	9b02      	ldr	r3, [sp, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f040 8096 	bne.w	8007888 <_dtoa_r+0x808>
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007762:	2a00      	cmp	r2, #0
 8007764:	f040 8092 	bne.w	800788c <_dtoa_r+0x80c>
 8007768:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800776c:	0d12      	lsrs	r2, r2, #20
 800776e:	0512      	lsls	r2, r2, #20
 8007770:	2a00      	cmp	r2, #0
 8007772:	f000 808d 	beq.w	8007890 <_dtoa_r+0x810>
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	3301      	adds	r3, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	9b06      	ldr	r3, [sp, #24]
 800777e:	3301      	adds	r3, #1
 8007780:	9306      	str	r3, [sp, #24]
 8007782:	2301      	movs	r3, #1
 8007784:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 81b9 	beq.w	8007b00 <_dtoa_r+0xa80>
 800778e:	6922      	ldr	r2, [r4, #16]
 8007790:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007794:	6910      	ldr	r0, [r2, #16]
 8007796:	f000 fb79 	bl	8007e8c <__hi0bits>
 800779a:	f1c0 0020 	rsb	r0, r0, #32
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	4418      	add	r0, r3
 80077a2:	f010 001f 	ands.w	r0, r0, #31
 80077a6:	f000 8081 	beq.w	80078ac <_dtoa_r+0x82c>
 80077aa:	f1c0 0220 	rsb	r2, r0, #32
 80077ae:	2a04      	cmp	r2, #4
 80077b0:	dd73      	ble.n	800789a <_dtoa_r+0x81a>
 80077b2:	9b04      	ldr	r3, [sp, #16]
 80077b4:	f1c0 001c 	rsb	r0, r0, #28
 80077b8:	4403      	add	r3, r0
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	4406      	add	r6, r0
 80077c0:	4403      	add	r3, r0
 80077c2:	9306      	str	r3, [sp, #24]
 80077c4:	9b04      	ldr	r3, [sp, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	dd05      	ble.n	80077d6 <_dtoa_r+0x756>
 80077ca:	9901      	ldr	r1, [sp, #4]
 80077cc:	461a      	mov	r2, r3
 80077ce:	4648      	mov	r0, r9
 80077d0:	f000 fcba 	bl	8008148 <__lshift>
 80077d4:	9001      	str	r0, [sp, #4]
 80077d6:	9b06      	ldr	r3, [sp, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dd05      	ble.n	80077e8 <_dtoa_r+0x768>
 80077dc:	4621      	mov	r1, r4
 80077de:	461a      	mov	r2, r3
 80077e0:	4648      	mov	r0, r9
 80077e2:	f000 fcb1 	bl	8008148 <__lshift>
 80077e6:	4604      	mov	r4, r0
 80077e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d060      	beq.n	80078b0 <_dtoa_r+0x830>
 80077ee:	9801      	ldr	r0, [sp, #4]
 80077f0:	4621      	mov	r1, r4
 80077f2:	f000 fd15 	bl	8008220 <__mcmp>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	da5a      	bge.n	80078b0 <_dtoa_r+0x830>
 80077fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80077fe:	9305      	str	r3, [sp, #20]
 8007800:	9901      	ldr	r1, [sp, #4]
 8007802:	2300      	movs	r3, #0
 8007804:	220a      	movs	r2, #10
 8007806:	4648      	mov	r0, r9
 8007808:	f000 fafa 	bl	8007e00 <__multadd>
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	9001      	str	r0, [sp, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8177 	beq.w	8007b04 <_dtoa_r+0xa84>
 8007816:	4629      	mov	r1, r5
 8007818:	2300      	movs	r3, #0
 800781a:	220a      	movs	r2, #10
 800781c:	4648      	mov	r0, r9
 800781e:	f000 faef 	bl	8007e00 <__multadd>
 8007822:	f1bb 0f00 	cmp.w	fp, #0
 8007826:	4605      	mov	r5, r0
 8007828:	dc6e      	bgt.n	8007908 <_dtoa_r+0x888>
 800782a:	9b07      	ldr	r3, [sp, #28]
 800782c:	2b02      	cmp	r3, #2
 800782e:	dc48      	bgt.n	80078c2 <_dtoa_r+0x842>
 8007830:	e06a      	b.n	8007908 <_dtoa_r+0x888>
 8007832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007834:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007838:	e739      	b.n	80076ae <_dtoa_r+0x62e>
 800783a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800783e:	42a3      	cmp	r3, r4
 8007840:	db07      	blt.n	8007852 <_dtoa_r+0x7d2>
 8007842:	f1ba 0f00 	cmp.w	sl, #0
 8007846:	eba3 0404 	sub.w	r4, r3, r4
 800784a:	db0b      	blt.n	8007864 <_dtoa_r+0x7e4>
 800784c:	9e04      	ldr	r6, [sp, #16]
 800784e:	4652      	mov	r2, sl
 8007850:	e72f      	b.n	80076b2 <_dtoa_r+0x632>
 8007852:	1ae2      	subs	r2, r4, r3
 8007854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007856:	9e04      	ldr	r6, [sp, #16]
 8007858:	4413      	add	r3, r2
 800785a:	930a      	str	r3, [sp, #40]	@ 0x28
 800785c:	4652      	mov	r2, sl
 800785e:	4623      	mov	r3, r4
 8007860:	2400      	movs	r4, #0
 8007862:	e726      	b.n	80076b2 <_dtoa_r+0x632>
 8007864:	9a04      	ldr	r2, [sp, #16]
 8007866:	eba2 060a 	sub.w	r6, r2, sl
 800786a:	2200      	movs	r2, #0
 800786c:	e721      	b.n	80076b2 <_dtoa_r+0x632>
 800786e:	9e04      	ldr	r6, [sp, #16]
 8007870:	9d08      	ldr	r5, [sp, #32]
 8007872:	461c      	mov	r4, r3
 8007874:	e72a      	b.n	80076cc <_dtoa_r+0x64c>
 8007876:	9a01      	ldr	r2, [sp, #4]
 8007878:	9205      	str	r2, [sp, #20]
 800787a:	e752      	b.n	8007722 <_dtoa_r+0x6a2>
 800787c:	9901      	ldr	r1, [sp, #4]
 800787e:	461a      	mov	r2, r3
 8007880:	e751      	b.n	8007726 <_dtoa_r+0x6a6>
 8007882:	9b05      	ldr	r3, [sp, #20]
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	e752      	b.n	800772e <_dtoa_r+0x6ae>
 8007888:	2300      	movs	r3, #0
 800788a:	e77b      	b.n	8007784 <_dtoa_r+0x704>
 800788c:	9b02      	ldr	r3, [sp, #8]
 800788e:	e779      	b.n	8007784 <_dtoa_r+0x704>
 8007890:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007892:	e778      	b.n	8007786 <_dtoa_r+0x706>
 8007894:	2300      	movs	r3, #0
 8007896:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007898:	e779      	b.n	800778e <_dtoa_r+0x70e>
 800789a:	d093      	beq.n	80077c4 <_dtoa_r+0x744>
 800789c:	9b04      	ldr	r3, [sp, #16]
 800789e:	321c      	adds	r2, #28
 80078a0:	4413      	add	r3, r2
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	9b06      	ldr	r3, [sp, #24]
 80078a6:	4416      	add	r6, r2
 80078a8:	4413      	add	r3, r2
 80078aa:	e78a      	b.n	80077c2 <_dtoa_r+0x742>
 80078ac:	4602      	mov	r2, r0
 80078ae:	e7f5      	b.n	800789c <_dtoa_r+0x81c>
 80078b0:	f1ba 0f00 	cmp.w	sl, #0
 80078b4:	f8cd 8014 	str.w	r8, [sp, #20]
 80078b8:	46d3      	mov	fp, sl
 80078ba:	dc21      	bgt.n	8007900 <_dtoa_r+0x880>
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	dd1e      	ble.n	8007900 <_dtoa_r+0x880>
 80078c2:	f1bb 0f00 	cmp.w	fp, #0
 80078c6:	f47f addc 	bne.w	8007482 <_dtoa_r+0x402>
 80078ca:	4621      	mov	r1, r4
 80078cc:	465b      	mov	r3, fp
 80078ce:	2205      	movs	r2, #5
 80078d0:	4648      	mov	r0, r9
 80078d2:	f000 fa95 	bl	8007e00 <__multadd>
 80078d6:	4601      	mov	r1, r0
 80078d8:	4604      	mov	r4, r0
 80078da:	9801      	ldr	r0, [sp, #4]
 80078dc:	f000 fca0 	bl	8008220 <__mcmp>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f77f adce 	ble.w	8007482 <_dtoa_r+0x402>
 80078e6:	463e      	mov	r6, r7
 80078e8:	2331      	movs	r3, #49	@ 0x31
 80078ea:	f806 3b01 	strb.w	r3, [r6], #1
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	3301      	adds	r3, #1
 80078f2:	9305      	str	r3, [sp, #20]
 80078f4:	e5c9      	b.n	800748a <_dtoa_r+0x40a>
 80078f6:	f8cd 8014 	str.w	r8, [sp, #20]
 80078fa:	4654      	mov	r4, sl
 80078fc:	4625      	mov	r5, r4
 80078fe:	e7f2      	b.n	80078e6 <_dtoa_r+0x866>
 8007900:	9b08      	ldr	r3, [sp, #32]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 8102 	beq.w	8007b0c <_dtoa_r+0xa8c>
 8007908:	2e00      	cmp	r6, #0
 800790a:	dd05      	ble.n	8007918 <_dtoa_r+0x898>
 800790c:	4629      	mov	r1, r5
 800790e:	4632      	mov	r2, r6
 8007910:	4648      	mov	r0, r9
 8007912:	f000 fc19 	bl	8008148 <__lshift>
 8007916:	4605      	mov	r5, r0
 8007918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d058      	beq.n	80079d0 <_dtoa_r+0x950>
 800791e:	6869      	ldr	r1, [r5, #4]
 8007920:	4648      	mov	r0, r9
 8007922:	f000 fa0b 	bl	8007d3c <_Balloc>
 8007926:	4606      	mov	r6, r0
 8007928:	b928      	cbnz	r0, 8007936 <_dtoa_r+0x8b6>
 800792a:	4b82      	ldr	r3, [pc, #520]	@ (8007b34 <_dtoa_r+0xab4>)
 800792c:	4602      	mov	r2, r0
 800792e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007932:	f7ff bbbe 	b.w	80070b2 <_dtoa_r+0x32>
 8007936:	692a      	ldr	r2, [r5, #16]
 8007938:	3202      	adds	r2, #2
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	f105 010c 	add.w	r1, r5, #12
 8007940:	300c      	adds	r0, #12
 8007942:	f001 f807 	bl	8008954 <memcpy>
 8007946:	2201      	movs	r2, #1
 8007948:	4631      	mov	r1, r6
 800794a:	4648      	mov	r0, r9
 800794c:	f000 fbfc 	bl	8008148 <__lshift>
 8007950:	1c7b      	adds	r3, r7, #1
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	eb07 030b 	add.w	r3, r7, fp
 8007958:	9309      	str	r3, [sp, #36]	@ 0x24
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	46a8      	mov	r8, r5
 8007962:	9308      	str	r3, [sp, #32]
 8007964:	4605      	mov	r5, r0
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	9801      	ldr	r0, [sp, #4]
 800796a:	4621      	mov	r1, r4
 800796c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007970:	f7ff fafb 	bl	8006f6a <quorem>
 8007974:	4641      	mov	r1, r8
 8007976:	9002      	str	r0, [sp, #8]
 8007978:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800797c:	9801      	ldr	r0, [sp, #4]
 800797e:	f000 fc4f 	bl	8008220 <__mcmp>
 8007982:	462a      	mov	r2, r5
 8007984:	9006      	str	r0, [sp, #24]
 8007986:	4621      	mov	r1, r4
 8007988:	4648      	mov	r0, r9
 800798a:	f000 fc65 	bl	8008258 <__mdiff>
 800798e:	68c2      	ldr	r2, [r0, #12]
 8007990:	4606      	mov	r6, r0
 8007992:	b9fa      	cbnz	r2, 80079d4 <_dtoa_r+0x954>
 8007994:	4601      	mov	r1, r0
 8007996:	9801      	ldr	r0, [sp, #4]
 8007998:	f000 fc42 	bl	8008220 <__mcmp>
 800799c:	4602      	mov	r2, r0
 800799e:	4631      	mov	r1, r6
 80079a0:	4648      	mov	r0, r9
 80079a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80079a4:	f000 fa0a 	bl	8007dbc <_Bfree>
 80079a8:	9b07      	ldr	r3, [sp, #28]
 80079aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079ac:	9e04      	ldr	r6, [sp, #16]
 80079ae:	ea42 0103 	orr.w	r1, r2, r3
 80079b2:	9b08      	ldr	r3, [sp, #32]
 80079b4:	4319      	orrs	r1, r3
 80079b6:	d10f      	bne.n	80079d8 <_dtoa_r+0x958>
 80079b8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80079bc:	d028      	beq.n	8007a10 <_dtoa_r+0x990>
 80079be:	9b06      	ldr	r3, [sp, #24]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dd02      	ble.n	80079ca <_dtoa_r+0x94a>
 80079c4:	9b02      	ldr	r3, [sp, #8]
 80079c6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80079ca:	f88b a000 	strb.w	sl, [fp]
 80079ce:	e55e      	b.n	800748e <_dtoa_r+0x40e>
 80079d0:	4628      	mov	r0, r5
 80079d2:	e7bd      	b.n	8007950 <_dtoa_r+0x8d0>
 80079d4:	2201      	movs	r2, #1
 80079d6:	e7e2      	b.n	800799e <_dtoa_r+0x91e>
 80079d8:	9b06      	ldr	r3, [sp, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	db04      	blt.n	80079e8 <_dtoa_r+0x968>
 80079de:	9907      	ldr	r1, [sp, #28]
 80079e0:	430b      	orrs	r3, r1
 80079e2:	9908      	ldr	r1, [sp, #32]
 80079e4:	430b      	orrs	r3, r1
 80079e6:	d120      	bne.n	8007a2a <_dtoa_r+0x9aa>
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	ddee      	ble.n	80079ca <_dtoa_r+0x94a>
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	4648      	mov	r0, r9
 80079f2:	f000 fba9 	bl	8008148 <__lshift>
 80079f6:	4621      	mov	r1, r4
 80079f8:	9001      	str	r0, [sp, #4]
 80079fa:	f000 fc11 	bl	8008220 <__mcmp>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	dc03      	bgt.n	8007a0a <_dtoa_r+0x98a>
 8007a02:	d1e2      	bne.n	80079ca <_dtoa_r+0x94a>
 8007a04:	f01a 0f01 	tst.w	sl, #1
 8007a08:	d0df      	beq.n	80079ca <_dtoa_r+0x94a>
 8007a0a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007a0e:	d1d9      	bne.n	80079c4 <_dtoa_r+0x944>
 8007a10:	2339      	movs	r3, #57	@ 0x39
 8007a12:	f88b 3000 	strb.w	r3, [fp]
 8007a16:	4633      	mov	r3, r6
 8007a18:	461e      	mov	r6, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a20:	2a39      	cmp	r2, #57	@ 0x39
 8007a22:	d052      	beq.n	8007aca <_dtoa_r+0xa4a>
 8007a24:	3201      	adds	r2, #1
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	e531      	b.n	800748e <_dtoa_r+0x40e>
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	dd07      	ble.n	8007a3e <_dtoa_r+0x9be>
 8007a2e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007a32:	d0ed      	beq.n	8007a10 <_dtoa_r+0x990>
 8007a34:	f10a 0301 	add.w	r3, sl, #1
 8007a38:	f88b 3000 	strb.w	r3, [fp]
 8007a3c:	e527      	b.n	800748e <_dtoa_r+0x40e>
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a42:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d029      	beq.n	8007a9e <_dtoa_r+0xa1e>
 8007a4a:	9901      	ldr	r1, [sp, #4]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	220a      	movs	r2, #10
 8007a50:	4648      	mov	r0, r9
 8007a52:	f000 f9d5 	bl	8007e00 <__multadd>
 8007a56:	45a8      	cmp	r8, r5
 8007a58:	9001      	str	r0, [sp, #4]
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	f04f 020a 	mov.w	r2, #10
 8007a62:	4641      	mov	r1, r8
 8007a64:	4648      	mov	r0, r9
 8007a66:	d107      	bne.n	8007a78 <_dtoa_r+0x9f8>
 8007a68:	f000 f9ca 	bl	8007e00 <__multadd>
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	4605      	mov	r5, r0
 8007a70:	9b04      	ldr	r3, [sp, #16]
 8007a72:	3301      	adds	r3, #1
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	e776      	b.n	8007966 <_dtoa_r+0x8e6>
 8007a78:	f000 f9c2 	bl	8007e00 <__multadd>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4680      	mov	r8, r0
 8007a80:	2300      	movs	r3, #0
 8007a82:	220a      	movs	r2, #10
 8007a84:	4648      	mov	r0, r9
 8007a86:	f000 f9bb 	bl	8007e00 <__multadd>
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	e7f0      	b.n	8007a70 <_dtoa_r+0x9f0>
 8007a8e:	f1bb 0f00 	cmp.w	fp, #0
 8007a92:	bfcc      	ite	gt
 8007a94:	465e      	movgt	r6, fp
 8007a96:	2601      	movle	r6, #1
 8007a98:	443e      	add	r6, r7
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	9901      	ldr	r1, [sp, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	4648      	mov	r0, r9
 8007aa4:	f000 fb50 	bl	8008148 <__lshift>
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	9001      	str	r0, [sp, #4]
 8007aac:	f000 fbb8 	bl	8008220 <__mcmp>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	dcb0      	bgt.n	8007a16 <_dtoa_r+0x996>
 8007ab4:	d102      	bne.n	8007abc <_dtoa_r+0xa3c>
 8007ab6:	f01a 0f01 	tst.w	sl, #1
 8007aba:	d1ac      	bne.n	8007a16 <_dtoa_r+0x996>
 8007abc:	4633      	mov	r3, r6
 8007abe:	461e      	mov	r6, r3
 8007ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ac4:	2a30      	cmp	r2, #48	@ 0x30
 8007ac6:	d0fa      	beq.n	8007abe <_dtoa_r+0xa3e>
 8007ac8:	e4e1      	b.n	800748e <_dtoa_r+0x40e>
 8007aca:	429f      	cmp	r7, r3
 8007acc:	d1a4      	bne.n	8007a18 <_dtoa_r+0x998>
 8007ace:	9b05      	ldr	r3, [sp, #20]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	9305      	str	r3, [sp, #20]
 8007ad4:	2331      	movs	r3, #49	@ 0x31
 8007ad6:	703b      	strb	r3, [r7, #0]
 8007ad8:	e4d9      	b.n	800748e <_dtoa_r+0x40e>
 8007ada:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007adc:	4f16      	ldr	r7, [pc, #88]	@ (8007b38 <_dtoa_r+0xab8>)
 8007ade:	b11b      	cbz	r3, 8007ae8 <_dtoa_r+0xa68>
 8007ae0:	f107 0308 	add.w	r3, r7, #8
 8007ae4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	4638      	mov	r0, r7
 8007aea:	b011      	add	sp, #68	@ 0x44
 8007aec:	ecbd 8b02 	vpop	{d8}
 8007af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	f77f ae2c 	ble.w	8007754 <_dtoa_r+0x6d4>
 8007afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b00:	2001      	movs	r0, #1
 8007b02:	e64c      	b.n	800779e <_dtoa_r+0x71e>
 8007b04:	f1bb 0f00 	cmp.w	fp, #0
 8007b08:	f77f aed8 	ble.w	80078bc <_dtoa_r+0x83c>
 8007b0c:	463e      	mov	r6, r7
 8007b0e:	9801      	ldr	r0, [sp, #4]
 8007b10:	4621      	mov	r1, r4
 8007b12:	f7ff fa2a 	bl	8006f6a <quorem>
 8007b16:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007b1a:	f806 ab01 	strb.w	sl, [r6], #1
 8007b1e:	1bf2      	subs	r2, r6, r7
 8007b20:	4593      	cmp	fp, r2
 8007b22:	ddb4      	ble.n	8007a8e <_dtoa_r+0xa0e>
 8007b24:	9901      	ldr	r1, [sp, #4]
 8007b26:	2300      	movs	r3, #0
 8007b28:	220a      	movs	r2, #10
 8007b2a:	4648      	mov	r0, r9
 8007b2c:	f000 f968 	bl	8007e00 <__multadd>
 8007b30:	9001      	str	r0, [sp, #4]
 8007b32:	e7ec      	b.n	8007b0e <_dtoa_r+0xa8e>
 8007b34:	08008cc8 	.word	0x08008cc8
 8007b38:	08008c4c 	.word	0x08008c4c

08007b3c <_free_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4605      	mov	r5, r0
 8007b40:	2900      	cmp	r1, #0
 8007b42:	d041      	beq.n	8007bc8 <_free_r+0x8c>
 8007b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b48:	1f0c      	subs	r4, r1, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bfb8      	it	lt
 8007b4e:	18e4      	addlt	r4, r4, r3
 8007b50:	f000 f8e8 	bl	8007d24 <__malloc_lock>
 8007b54:	4a1d      	ldr	r2, [pc, #116]	@ (8007bcc <_free_r+0x90>)
 8007b56:	6813      	ldr	r3, [r2, #0]
 8007b58:	b933      	cbnz	r3, 8007b68 <_free_r+0x2c>
 8007b5a:	6063      	str	r3, [r4, #4]
 8007b5c:	6014      	str	r4, [r2, #0]
 8007b5e:	4628      	mov	r0, r5
 8007b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b64:	f000 b8e4 	b.w	8007d30 <__malloc_unlock>
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	d908      	bls.n	8007b7e <_free_r+0x42>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	1821      	adds	r1, r4, r0
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf01      	itttt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	1809      	addeq	r1, r1, r0
 8007b7a:	6021      	streq	r1, [r4, #0]
 8007b7c:	e7ed      	b.n	8007b5a <_free_r+0x1e>
 8007b7e:	461a      	mov	r2, r3
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	b10b      	cbz	r3, 8007b88 <_free_r+0x4c>
 8007b84:	42a3      	cmp	r3, r4
 8007b86:	d9fa      	bls.n	8007b7e <_free_r+0x42>
 8007b88:	6811      	ldr	r1, [r2, #0]
 8007b8a:	1850      	adds	r0, r2, r1
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d10b      	bne.n	8007ba8 <_free_r+0x6c>
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	4401      	add	r1, r0
 8007b94:	1850      	adds	r0, r2, r1
 8007b96:	4283      	cmp	r3, r0
 8007b98:	6011      	str	r1, [r2, #0]
 8007b9a:	d1e0      	bne.n	8007b5e <_free_r+0x22>
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	6053      	str	r3, [r2, #4]
 8007ba2:	4408      	add	r0, r1
 8007ba4:	6010      	str	r0, [r2, #0]
 8007ba6:	e7da      	b.n	8007b5e <_free_r+0x22>
 8007ba8:	d902      	bls.n	8007bb0 <_free_r+0x74>
 8007baa:	230c      	movs	r3, #12
 8007bac:	602b      	str	r3, [r5, #0]
 8007bae:	e7d6      	b.n	8007b5e <_free_r+0x22>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	1821      	adds	r1, r4, r0
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	bf04      	itt	eq
 8007bb8:	6819      	ldreq	r1, [r3, #0]
 8007bba:	685b      	ldreq	r3, [r3, #4]
 8007bbc:	6063      	str	r3, [r4, #4]
 8007bbe:	bf04      	itt	eq
 8007bc0:	1809      	addeq	r1, r1, r0
 8007bc2:	6021      	streq	r1, [r4, #0]
 8007bc4:	6054      	str	r4, [r2, #4]
 8007bc6:	e7ca      	b.n	8007b5e <_free_r+0x22>
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000cc0 	.word	0x20000cc0

08007bd0 <malloc>:
 8007bd0:	4b02      	ldr	r3, [pc, #8]	@ (8007bdc <malloc+0xc>)
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	f000 b825 	b.w	8007c24 <_malloc_r>
 8007bda:	bf00      	nop
 8007bdc:	20000018 	.word	0x20000018

08007be0 <sbrk_aligned>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	4e0f      	ldr	r6, [pc, #60]	@ (8007c20 <sbrk_aligned+0x40>)
 8007be4:	460c      	mov	r4, r1
 8007be6:	6831      	ldr	r1, [r6, #0]
 8007be8:	4605      	mov	r5, r0
 8007bea:	b911      	cbnz	r1, 8007bf2 <sbrk_aligned+0x12>
 8007bec:	f000 fea2 	bl	8008934 <_sbrk_r>
 8007bf0:	6030      	str	r0, [r6, #0]
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 fe9d 	bl	8008934 <_sbrk_r>
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	d103      	bne.n	8007c06 <sbrk_aligned+0x26>
 8007bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8007c02:	4620      	mov	r0, r4
 8007c04:	bd70      	pop	{r4, r5, r6, pc}
 8007c06:	1cc4      	adds	r4, r0, #3
 8007c08:	f024 0403 	bic.w	r4, r4, #3
 8007c0c:	42a0      	cmp	r0, r4
 8007c0e:	d0f8      	beq.n	8007c02 <sbrk_aligned+0x22>
 8007c10:	1a21      	subs	r1, r4, r0
 8007c12:	4628      	mov	r0, r5
 8007c14:	f000 fe8e 	bl	8008934 <_sbrk_r>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d1f2      	bne.n	8007c02 <sbrk_aligned+0x22>
 8007c1c:	e7ef      	b.n	8007bfe <sbrk_aligned+0x1e>
 8007c1e:	bf00      	nop
 8007c20:	20000cbc 	.word	0x20000cbc

08007c24 <_malloc_r>:
 8007c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c28:	1ccd      	adds	r5, r1, #3
 8007c2a:	f025 0503 	bic.w	r5, r5, #3
 8007c2e:	3508      	adds	r5, #8
 8007c30:	2d0c      	cmp	r5, #12
 8007c32:	bf38      	it	cc
 8007c34:	250c      	movcc	r5, #12
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	4606      	mov	r6, r0
 8007c3a:	db01      	blt.n	8007c40 <_malloc_r+0x1c>
 8007c3c:	42a9      	cmp	r1, r5
 8007c3e:	d904      	bls.n	8007c4a <_malloc_r+0x26>
 8007c40:	230c      	movs	r3, #12
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	2000      	movs	r0, #0
 8007c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d20 <_malloc_r+0xfc>
 8007c4e:	f000 f869 	bl	8007d24 <__malloc_lock>
 8007c52:	f8d8 3000 	ldr.w	r3, [r8]
 8007c56:	461c      	mov	r4, r3
 8007c58:	bb44      	cbnz	r4, 8007cac <_malloc_r+0x88>
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f7ff ffbf 	bl	8007be0 <sbrk_aligned>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	4604      	mov	r4, r0
 8007c66:	d158      	bne.n	8007d1a <_malloc_r+0xf6>
 8007c68:	f8d8 4000 	ldr.w	r4, [r8]
 8007c6c:	4627      	mov	r7, r4
 8007c6e:	2f00      	cmp	r7, #0
 8007c70:	d143      	bne.n	8007cfa <_malloc_r+0xd6>
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	d04b      	beq.n	8007d0e <_malloc_r+0xea>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	4639      	mov	r1, r7
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	eb04 0903 	add.w	r9, r4, r3
 8007c80:	f000 fe58 	bl	8008934 <_sbrk_r>
 8007c84:	4581      	cmp	r9, r0
 8007c86:	d142      	bne.n	8007d0e <_malloc_r+0xea>
 8007c88:	6821      	ldr	r1, [r4, #0]
 8007c8a:	1a6d      	subs	r5, r5, r1
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff ffa6 	bl	8007be0 <sbrk_aligned>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d03a      	beq.n	8007d0e <_malloc_r+0xea>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	442b      	add	r3, r5
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	bb62      	cbnz	r2, 8007d00 <_malloc_r+0xdc>
 8007ca6:	f8c8 7000 	str.w	r7, [r8]
 8007caa:	e00f      	b.n	8007ccc <_malloc_r+0xa8>
 8007cac:	6822      	ldr	r2, [r4, #0]
 8007cae:	1b52      	subs	r2, r2, r5
 8007cb0:	d420      	bmi.n	8007cf4 <_malloc_r+0xd0>
 8007cb2:	2a0b      	cmp	r2, #11
 8007cb4:	d917      	bls.n	8007ce6 <_malloc_r+0xc2>
 8007cb6:	1961      	adds	r1, r4, r5
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	6025      	str	r5, [r4, #0]
 8007cbc:	bf18      	it	ne
 8007cbe:	6059      	strne	r1, [r3, #4]
 8007cc0:	6863      	ldr	r3, [r4, #4]
 8007cc2:	bf08      	it	eq
 8007cc4:	f8c8 1000 	streq.w	r1, [r8]
 8007cc8:	5162      	str	r2, [r4, r5]
 8007cca:	604b      	str	r3, [r1, #4]
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f000 f82f 	bl	8007d30 <__malloc_unlock>
 8007cd2:	f104 000b 	add.w	r0, r4, #11
 8007cd6:	1d23      	adds	r3, r4, #4
 8007cd8:	f020 0007 	bic.w	r0, r0, #7
 8007cdc:	1ac2      	subs	r2, r0, r3
 8007cde:	bf1c      	itt	ne
 8007ce0:	1a1b      	subne	r3, r3, r0
 8007ce2:	50a3      	strne	r3, [r4, r2]
 8007ce4:	e7af      	b.n	8007c46 <_malloc_r+0x22>
 8007ce6:	6862      	ldr	r2, [r4, #4]
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	bf0c      	ite	eq
 8007cec:	f8c8 2000 	streq.w	r2, [r8]
 8007cf0:	605a      	strne	r2, [r3, #4]
 8007cf2:	e7eb      	b.n	8007ccc <_malloc_r+0xa8>
 8007cf4:	4623      	mov	r3, r4
 8007cf6:	6864      	ldr	r4, [r4, #4]
 8007cf8:	e7ae      	b.n	8007c58 <_malloc_r+0x34>
 8007cfa:	463c      	mov	r4, r7
 8007cfc:	687f      	ldr	r7, [r7, #4]
 8007cfe:	e7b6      	b.n	8007c6e <_malloc_r+0x4a>
 8007d00:	461a      	mov	r2, r3
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	d1fb      	bne.n	8007d00 <_malloc_r+0xdc>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6053      	str	r3, [r2, #4]
 8007d0c:	e7de      	b.n	8007ccc <_malloc_r+0xa8>
 8007d0e:	230c      	movs	r3, #12
 8007d10:	6033      	str	r3, [r6, #0]
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 f80c 	bl	8007d30 <__malloc_unlock>
 8007d18:	e794      	b.n	8007c44 <_malloc_r+0x20>
 8007d1a:	6005      	str	r5, [r0, #0]
 8007d1c:	e7d6      	b.n	8007ccc <_malloc_r+0xa8>
 8007d1e:	bf00      	nop
 8007d20:	20000cc0 	.word	0x20000cc0

08007d24 <__malloc_lock>:
 8007d24:	4801      	ldr	r0, [pc, #4]	@ (8007d2c <__malloc_lock+0x8>)
 8007d26:	f7ff b91e 	b.w	8006f66 <__retarget_lock_acquire_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	20000cb8 	.word	0x20000cb8

08007d30 <__malloc_unlock>:
 8007d30:	4801      	ldr	r0, [pc, #4]	@ (8007d38 <__malloc_unlock+0x8>)
 8007d32:	f7ff b919 	b.w	8006f68 <__retarget_lock_release_recursive>
 8007d36:	bf00      	nop
 8007d38:	20000cb8 	.word	0x20000cb8

08007d3c <_Balloc>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	69c6      	ldr	r6, [r0, #28]
 8007d40:	4604      	mov	r4, r0
 8007d42:	460d      	mov	r5, r1
 8007d44:	b976      	cbnz	r6, 8007d64 <_Balloc+0x28>
 8007d46:	2010      	movs	r0, #16
 8007d48:	f7ff ff42 	bl	8007bd0 <malloc>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	61e0      	str	r0, [r4, #28]
 8007d50:	b920      	cbnz	r0, 8007d5c <_Balloc+0x20>
 8007d52:	4b18      	ldr	r3, [pc, #96]	@ (8007db4 <_Balloc+0x78>)
 8007d54:	4818      	ldr	r0, [pc, #96]	@ (8007db8 <_Balloc+0x7c>)
 8007d56:	216b      	movs	r1, #107	@ 0x6b
 8007d58:	f000 fe0a 	bl	8008970 <__assert_func>
 8007d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d60:	6006      	str	r6, [r0, #0]
 8007d62:	60c6      	str	r6, [r0, #12]
 8007d64:	69e6      	ldr	r6, [r4, #28]
 8007d66:	68f3      	ldr	r3, [r6, #12]
 8007d68:	b183      	cbz	r3, 8007d8c <_Balloc+0x50>
 8007d6a:	69e3      	ldr	r3, [r4, #28]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d72:	b9b8      	cbnz	r0, 8007da4 <_Balloc+0x68>
 8007d74:	2101      	movs	r1, #1
 8007d76:	fa01 f605 	lsl.w	r6, r1, r5
 8007d7a:	1d72      	adds	r2, r6, #5
 8007d7c:	0092      	lsls	r2, r2, #2
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f000 fe14 	bl	80089ac <_calloc_r>
 8007d84:	b160      	cbz	r0, 8007da0 <_Balloc+0x64>
 8007d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d8a:	e00e      	b.n	8007daa <_Balloc+0x6e>
 8007d8c:	2221      	movs	r2, #33	@ 0x21
 8007d8e:	2104      	movs	r1, #4
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 fe0b 	bl	80089ac <_calloc_r>
 8007d96:	69e3      	ldr	r3, [r4, #28]
 8007d98:	60f0      	str	r0, [r6, #12]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e4      	bne.n	8007d6a <_Balloc+0x2e>
 8007da0:	2000      	movs	r0, #0
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	6802      	ldr	r2, [r0, #0]
 8007da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007daa:	2300      	movs	r3, #0
 8007dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007db0:	e7f7      	b.n	8007da2 <_Balloc+0x66>
 8007db2:	bf00      	nop
 8007db4:	08008c59 	.word	0x08008c59
 8007db8:	08008cd9 	.word	0x08008cd9

08007dbc <_Bfree>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	69c6      	ldr	r6, [r0, #28]
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	b976      	cbnz	r6, 8007de4 <_Bfree+0x28>
 8007dc6:	2010      	movs	r0, #16
 8007dc8:	f7ff ff02 	bl	8007bd0 <malloc>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	61e8      	str	r0, [r5, #28]
 8007dd0:	b920      	cbnz	r0, 8007ddc <_Bfree+0x20>
 8007dd2:	4b09      	ldr	r3, [pc, #36]	@ (8007df8 <_Bfree+0x3c>)
 8007dd4:	4809      	ldr	r0, [pc, #36]	@ (8007dfc <_Bfree+0x40>)
 8007dd6:	218f      	movs	r1, #143	@ 0x8f
 8007dd8:	f000 fdca 	bl	8008970 <__assert_func>
 8007ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007de0:	6006      	str	r6, [r0, #0]
 8007de2:	60c6      	str	r6, [r0, #12]
 8007de4:	b13c      	cbz	r4, 8007df6 <_Bfree+0x3a>
 8007de6:	69eb      	ldr	r3, [r5, #28]
 8007de8:	6862      	ldr	r2, [r4, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007df0:	6021      	str	r1, [r4, #0]
 8007df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	08008c59 	.word	0x08008c59
 8007dfc:	08008cd9 	.word	0x08008cd9

08007e00 <__multadd>:
 8007e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e04:	690d      	ldr	r5, [r1, #16]
 8007e06:	4607      	mov	r7, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	461e      	mov	r6, r3
 8007e0c:	f101 0c14 	add.w	ip, r1, #20
 8007e10:	2000      	movs	r0, #0
 8007e12:	f8dc 3000 	ldr.w	r3, [ip]
 8007e16:	b299      	uxth	r1, r3
 8007e18:	fb02 6101 	mla	r1, r2, r1, r6
 8007e1c:	0c1e      	lsrs	r6, r3, #16
 8007e1e:	0c0b      	lsrs	r3, r1, #16
 8007e20:	fb02 3306 	mla	r3, r2, r6, r3
 8007e24:	b289      	uxth	r1, r1
 8007e26:	3001      	adds	r0, #1
 8007e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e2c:	4285      	cmp	r5, r0
 8007e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8007e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e36:	dcec      	bgt.n	8007e12 <__multadd+0x12>
 8007e38:	b30e      	cbz	r6, 8007e7e <__multadd+0x7e>
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	42ab      	cmp	r3, r5
 8007e3e:	dc19      	bgt.n	8007e74 <__multadd+0x74>
 8007e40:	6861      	ldr	r1, [r4, #4]
 8007e42:	4638      	mov	r0, r7
 8007e44:	3101      	adds	r1, #1
 8007e46:	f7ff ff79 	bl	8007d3c <_Balloc>
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__multadd+0x5a>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <__multadd+0x84>)
 8007e52:	480d      	ldr	r0, [pc, #52]	@ (8007e88 <__multadd+0x88>)
 8007e54:	21ba      	movs	r1, #186	@ 0xba
 8007e56:	f000 fd8b 	bl	8008970 <__assert_func>
 8007e5a:	6922      	ldr	r2, [r4, #16]
 8007e5c:	3202      	adds	r2, #2
 8007e5e:	f104 010c 	add.w	r1, r4, #12
 8007e62:	0092      	lsls	r2, r2, #2
 8007e64:	300c      	adds	r0, #12
 8007e66:	f000 fd75 	bl	8008954 <memcpy>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4638      	mov	r0, r7
 8007e6e:	f7ff ffa5 	bl	8007dbc <_Bfree>
 8007e72:	4644      	mov	r4, r8
 8007e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e78:	3501      	adds	r5, #1
 8007e7a:	615e      	str	r6, [r3, #20]
 8007e7c:	6125      	str	r5, [r4, #16]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	08008cc8 	.word	0x08008cc8
 8007e88:	08008cd9 	.word	0x08008cd9

08007e8c <__hi0bits>:
 8007e8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e90:	4603      	mov	r3, r0
 8007e92:	bf36      	itet	cc
 8007e94:	0403      	lslcc	r3, r0, #16
 8007e96:	2000      	movcs	r0, #0
 8007e98:	2010      	movcc	r0, #16
 8007e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e9e:	bf3c      	itt	cc
 8007ea0:	021b      	lslcc	r3, r3, #8
 8007ea2:	3008      	addcc	r0, #8
 8007ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ea8:	bf3c      	itt	cc
 8007eaa:	011b      	lslcc	r3, r3, #4
 8007eac:	3004      	addcc	r0, #4
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb2:	bf3c      	itt	cc
 8007eb4:	009b      	lslcc	r3, r3, #2
 8007eb6:	3002      	addcc	r0, #2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	db05      	blt.n	8007ec8 <__hi0bits+0x3c>
 8007ebc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ec0:	f100 0001 	add.w	r0, r0, #1
 8007ec4:	bf08      	it	eq
 8007ec6:	2020      	moveq	r0, #32
 8007ec8:	4770      	bx	lr

08007eca <__lo0bits>:
 8007eca:	6803      	ldr	r3, [r0, #0]
 8007ecc:	4602      	mov	r2, r0
 8007ece:	f013 0007 	ands.w	r0, r3, #7
 8007ed2:	d00b      	beq.n	8007eec <__lo0bits+0x22>
 8007ed4:	07d9      	lsls	r1, r3, #31
 8007ed6:	d421      	bmi.n	8007f1c <__lo0bits+0x52>
 8007ed8:	0798      	lsls	r0, r3, #30
 8007eda:	bf49      	itett	mi
 8007edc:	085b      	lsrmi	r3, r3, #1
 8007ede:	089b      	lsrpl	r3, r3, #2
 8007ee0:	2001      	movmi	r0, #1
 8007ee2:	6013      	strmi	r3, [r2, #0]
 8007ee4:	bf5c      	itt	pl
 8007ee6:	6013      	strpl	r3, [r2, #0]
 8007ee8:	2002      	movpl	r0, #2
 8007eea:	4770      	bx	lr
 8007eec:	b299      	uxth	r1, r3
 8007eee:	b909      	cbnz	r1, 8007ef4 <__lo0bits+0x2a>
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	2010      	movs	r0, #16
 8007ef4:	b2d9      	uxtb	r1, r3
 8007ef6:	b909      	cbnz	r1, 8007efc <__lo0bits+0x32>
 8007ef8:	3008      	adds	r0, #8
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	0719      	lsls	r1, r3, #28
 8007efe:	bf04      	itt	eq
 8007f00:	091b      	lsreq	r3, r3, #4
 8007f02:	3004      	addeq	r0, #4
 8007f04:	0799      	lsls	r1, r3, #30
 8007f06:	bf04      	itt	eq
 8007f08:	089b      	lsreq	r3, r3, #2
 8007f0a:	3002      	addeq	r0, #2
 8007f0c:	07d9      	lsls	r1, r3, #31
 8007f0e:	d403      	bmi.n	8007f18 <__lo0bits+0x4e>
 8007f10:	085b      	lsrs	r3, r3, #1
 8007f12:	f100 0001 	add.w	r0, r0, #1
 8007f16:	d003      	beq.n	8007f20 <__lo0bits+0x56>
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	4770      	bx	lr
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	4770      	bx	lr
 8007f20:	2020      	movs	r0, #32
 8007f22:	4770      	bx	lr

08007f24 <__i2b>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	460c      	mov	r4, r1
 8007f28:	2101      	movs	r1, #1
 8007f2a:	f7ff ff07 	bl	8007d3c <_Balloc>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	b928      	cbnz	r0, 8007f3e <__i2b+0x1a>
 8007f32:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <__i2b+0x24>)
 8007f34:	4805      	ldr	r0, [pc, #20]	@ (8007f4c <__i2b+0x28>)
 8007f36:	f240 1145 	movw	r1, #325	@ 0x145
 8007f3a:	f000 fd19 	bl	8008970 <__assert_func>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	6144      	str	r4, [r0, #20]
 8007f42:	6103      	str	r3, [r0, #16]
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	bf00      	nop
 8007f48:	08008cc8 	.word	0x08008cc8
 8007f4c:	08008cd9 	.word	0x08008cd9

08007f50 <__multiply>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	4617      	mov	r7, r2
 8007f56:	690a      	ldr	r2, [r1, #16]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	bfa8      	it	ge
 8007f5e:	463b      	movge	r3, r7
 8007f60:	4689      	mov	r9, r1
 8007f62:	bfa4      	itt	ge
 8007f64:	460f      	movge	r7, r1
 8007f66:	4699      	movge	r9, r3
 8007f68:	693d      	ldr	r5, [r7, #16]
 8007f6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	eb05 060a 	add.w	r6, r5, sl
 8007f76:	42b3      	cmp	r3, r6
 8007f78:	b085      	sub	sp, #20
 8007f7a:	bfb8      	it	lt
 8007f7c:	3101      	addlt	r1, #1
 8007f7e:	f7ff fedd 	bl	8007d3c <_Balloc>
 8007f82:	b930      	cbnz	r0, 8007f92 <__multiply+0x42>
 8007f84:	4602      	mov	r2, r0
 8007f86:	4b41      	ldr	r3, [pc, #260]	@ (800808c <__multiply+0x13c>)
 8007f88:	4841      	ldr	r0, [pc, #260]	@ (8008090 <__multiply+0x140>)
 8007f8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f8e:	f000 fcef 	bl	8008970 <__assert_func>
 8007f92:	f100 0414 	add.w	r4, r0, #20
 8007f96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4573      	cmp	r3, lr
 8007fa0:	d320      	bcc.n	8007fe4 <__multiply+0x94>
 8007fa2:	f107 0814 	add.w	r8, r7, #20
 8007fa6:	f109 0114 	add.w	r1, r9, #20
 8007faa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007fae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	1beb      	subs	r3, r5, r7
 8007fb6:	3b15      	subs	r3, #21
 8007fb8:	f023 0303 	bic.w	r3, r3, #3
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	3715      	adds	r7, #21
 8007fc0:	42bd      	cmp	r5, r7
 8007fc2:	bf38      	it	cc
 8007fc4:	2304      	movcc	r3, #4
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	9103      	str	r1, [sp, #12]
 8007fcc:	428b      	cmp	r3, r1
 8007fce:	d80c      	bhi.n	8007fea <__multiply+0x9a>
 8007fd0:	2e00      	cmp	r6, #0
 8007fd2:	dd03      	ble.n	8007fdc <__multiply+0x8c>
 8007fd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d055      	beq.n	8008088 <__multiply+0x138>
 8007fdc:	6106      	str	r6, [r0, #16]
 8007fde:	b005      	add	sp, #20
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	f843 2b04 	str.w	r2, [r3], #4
 8007fe8:	e7d9      	b.n	8007f9e <__multiply+0x4e>
 8007fea:	f8b1 a000 	ldrh.w	sl, [r1]
 8007fee:	f1ba 0f00 	cmp.w	sl, #0
 8007ff2:	d01f      	beq.n	8008034 <__multiply+0xe4>
 8007ff4:	46c4      	mov	ip, r8
 8007ff6:	46a1      	mov	r9, r4
 8007ff8:	2700      	movs	r7, #0
 8007ffa:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ffe:	f8d9 3000 	ldr.w	r3, [r9]
 8008002:	fa1f fb82 	uxth.w	fp, r2
 8008006:	b29b      	uxth	r3, r3
 8008008:	fb0a 330b 	mla	r3, sl, fp, r3
 800800c:	443b      	add	r3, r7
 800800e:	f8d9 7000 	ldr.w	r7, [r9]
 8008012:	0c12      	lsrs	r2, r2, #16
 8008014:	0c3f      	lsrs	r7, r7, #16
 8008016:	fb0a 7202 	mla	r2, sl, r2, r7
 800801a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800801e:	b29b      	uxth	r3, r3
 8008020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008024:	4565      	cmp	r5, ip
 8008026:	f849 3b04 	str.w	r3, [r9], #4
 800802a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800802e:	d8e4      	bhi.n	8007ffa <__multiply+0xaa>
 8008030:	9b01      	ldr	r3, [sp, #4]
 8008032:	50e7      	str	r7, [r4, r3]
 8008034:	9b03      	ldr	r3, [sp, #12]
 8008036:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800803a:	3104      	adds	r1, #4
 800803c:	f1b9 0f00 	cmp.w	r9, #0
 8008040:	d020      	beq.n	8008084 <__multiply+0x134>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	4647      	mov	r7, r8
 8008046:	46a4      	mov	ip, r4
 8008048:	f04f 0a00 	mov.w	sl, #0
 800804c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008050:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008054:	fb09 220b 	mla	r2, r9, fp, r2
 8008058:	4452      	add	r2, sl
 800805a:	b29b      	uxth	r3, r3
 800805c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008060:	f84c 3b04 	str.w	r3, [ip], #4
 8008064:	f857 3b04 	ldr.w	r3, [r7], #4
 8008068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800806c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008070:	fb09 330a 	mla	r3, r9, sl, r3
 8008074:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008078:	42bd      	cmp	r5, r7
 800807a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800807e:	d8e5      	bhi.n	800804c <__multiply+0xfc>
 8008080:	9a01      	ldr	r2, [sp, #4]
 8008082:	50a3      	str	r3, [r4, r2]
 8008084:	3404      	adds	r4, #4
 8008086:	e79f      	b.n	8007fc8 <__multiply+0x78>
 8008088:	3e01      	subs	r6, #1
 800808a:	e7a1      	b.n	8007fd0 <__multiply+0x80>
 800808c:	08008cc8 	.word	0x08008cc8
 8008090:	08008cd9 	.word	0x08008cd9

08008094 <__pow5mult>:
 8008094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008098:	4615      	mov	r5, r2
 800809a:	f012 0203 	ands.w	r2, r2, #3
 800809e:	4607      	mov	r7, r0
 80080a0:	460e      	mov	r6, r1
 80080a2:	d007      	beq.n	80080b4 <__pow5mult+0x20>
 80080a4:	4c25      	ldr	r4, [pc, #148]	@ (800813c <__pow5mult+0xa8>)
 80080a6:	3a01      	subs	r2, #1
 80080a8:	2300      	movs	r3, #0
 80080aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080ae:	f7ff fea7 	bl	8007e00 <__multadd>
 80080b2:	4606      	mov	r6, r0
 80080b4:	10ad      	asrs	r5, r5, #2
 80080b6:	d03d      	beq.n	8008134 <__pow5mult+0xa0>
 80080b8:	69fc      	ldr	r4, [r7, #28]
 80080ba:	b97c      	cbnz	r4, 80080dc <__pow5mult+0x48>
 80080bc:	2010      	movs	r0, #16
 80080be:	f7ff fd87 	bl	8007bd0 <malloc>
 80080c2:	4602      	mov	r2, r0
 80080c4:	61f8      	str	r0, [r7, #28]
 80080c6:	b928      	cbnz	r0, 80080d4 <__pow5mult+0x40>
 80080c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008140 <__pow5mult+0xac>)
 80080ca:	481e      	ldr	r0, [pc, #120]	@ (8008144 <__pow5mult+0xb0>)
 80080cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80080d0:	f000 fc4e 	bl	8008970 <__assert_func>
 80080d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080d8:	6004      	str	r4, [r0, #0]
 80080da:	60c4      	str	r4, [r0, #12]
 80080dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80080e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080e4:	b94c      	cbnz	r4, 80080fa <__pow5mult+0x66>
 80080e6:	f240 2171 	movw	r1, #625	@ 0x271
 80080ea:	4638      	mov	r0, r7
 80080ec:	f7ff ff1a 	bl	8007f24 <__i2b>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80080f6:	4604      	mov	r4, r0
 80080f8:	6003      	str	r3, [r0, #0]
 80080fa:	f04f 0900 	mov.w	r9, #0
 80080fe:	07eb      	lsls	r3, r5, #31
 8008100:	d50a      	bpl.n	8008118 <__pow5mult+0x84>
 8008102:	4631      	mov	r1, r6
 8008104:	4622      	mov	r2, r4
 8008106:	4638      	mov	r0, r7
 8008108:	f7ff ff22 	bl	8007f50 <__multiply>
 800810c:	4631      	mov	r1, r6
 800810e:	4680      	mov	r8, r0
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff fe53 	bl	8007dbc <_Bfree>
 8008116:	4646      	mov	r6, r8
 8008118:	106d      	asrs	r5, r5, #1
 800811a:	d00b      	beq.n	8008134 <__pow5mult+0xa0>
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	b938      	cbnz	r0, 8008130 <__pow5mult+0x9c>
 8008120:	4622      	mov	r2, r4
 8008122:	4621      	mov	r1, r4
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ff13 	bl	8007f50 <__multiply>
 800812a:	6020      	str	r0, [r4, #0]
 800812c:	f8c0 9000 	str.w	r9, [r0]
 8008130:	4604      	mov	r4, r0
 8008132:	e7e4      	b.n	80080fe <__pow5mult+0x6a>
 8008134:	4630      	mov	r0, r6
 8008136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813a:	bf00      	nop
 800813c:	08008d8c 	.word	0x08008d8c
 8008140:	08008c59 	.word	0x08008c59
 8008144:	08008cd9 	.word	0x08008cd9

08008148 <__lshift>:
 8008148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	460c      	mov	r4, r1
 800814e:	6849      	ldr	r1, [r1, #4]
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008156:	68a3      	ldr	r3, [r4, #8]
 8008158:	4607      	mov	r7, r0
 800815a:	4691      	mov	r9, r2
 800815c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008160:	f108 0601 	add.w	r6, r8, #1
 8008164:	42b3      	cmp	r3, r6
 8008166:	db0b      	blt.n	8008180 <__lshift+0x38>
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff fde7 	bl	8007d3c <_Balloc>
 800816e:	4605      	mov	r5, r0
 8008170:	b948      	cbnz	r0, 8008186 <__lshift+0x3e>
 8008172:	4602      	mov	r2, r0
 8008174:	4b28      	ldr	r3, [pc, #160]	@ (8008218 <__lshift+0xd0>)
 8008176:	4829      	ldr	r0, [pc, #164]	@ (800821c <__lshift+0xd4>)
 8008178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800817c:	f000 fbf8 	bl	8008970 <__assert_func>
 8008180:	3101      	adds	r1, #1
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	e7ee      	b.n	8008164 <__lshift+0x1c>
 8008186:	2300      	movs	r3, #0
 8008188:	f100 0114 	add.w	r1, r0, #20
 800818c:	f100 0210 	add.w	r2, r0, #16
 8008190:	4618      	mov	r0, r3
 8008192:	4553      	cmp	r3, sl
 8008194:	db33      	blt.n	80081fe <__lshift+0xb6>
 8008196:	6920      	ldr	r0, [r4, #16]
 8008198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800819c:	f104 0314 	add.w	r3, r4, #20
 80081a0:	f019 091f 	ands.w	r9, r9, #31
 80081a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081ac:	d02b      	beq.n	8008206 <__lshift+0xbe>
 80081ae:	f1c9 0e20 	rsb	lr, r9, #32
 80081b2:	468a      	mov	sl, r1
 80081b4:	2200      	movs	r2, #0
 80081b6:	6818      	ldr	r0, [r3, #0]
 80081b8:	fa00 f009 	lsl.w	r0, r0, r9
 80081bc:	4310      	orrs	r0, r2
 80081be:	f84a 0b04 	str.w	r0, [sl], #4
 80081c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081c6:	459c      	cmp	ip, r3
 80081c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80081cc:	d8f3      	bhi.n	80081b6 <__lshift+0x6e>
 80081ce:	ebac 0304 	sub.w	r3, ip, r4
 80081d2:	3b15      	subs	r3, #21
 80081d4:	f023 0303 	bic.w	r3, r3, #3
 80081d8:	3304      	adds	r3, #4
 80081da:	f104 0015 	add.w	r0, r4, #21
 80081de:	4560      	cmp	r0, ip
 80081e0:	bf88      	it	hi
 80081e2:	2304      	movhi	r3, #4
 80081e4:	50ca      	str	r2, [r1, r3]
 80081e6:	b10a      	cbz	r2, 80081ec <__lshift+0xa4>
 80081e8:	f108 0602 	add.w	r6, r8, #2
 80081ec:	3e01      	subs	r6, #1
 80081ee:	4638      	mov	r0, r7
 80081f0:	612e      	str	r6, [r5, #16]
 80081f2:	4621      	mov	r1, r4
 80081f4:	f7ff fde2 	bl	8007dbc <_Bfree>
 80081f8:	4628      	mov	r0, r5
 80081fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008202:	3301      	adds	r3, #1
 8008204:	e7c5      	b.n	8008192 <__lshift+0x4a>
 8008206:	3904      	subs	r1, #4
 8008208:	f853 2b04 	ldr.w	r2, [r3], #4
 800820c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008210:	459c      	cmp	ip, r3
 8008212:	d8f9      	bhi.n	8008208 <__lshift+0xc0>
 8008214:	e7ea      	b.n	80081ec <__lshift+0xa4>
 8008216:	bf00      	nop
 8008218:	08008cc8 	.word	0x08008cc8
 800821c:	08008cd9 	.word	0x08008cd9

08008220 <__mcmp>:
 8008220:	690a      	ldr	r2, [r1, #16]
 8008222:	4603      	mov	r3, r0
 8008224:	6900      	ldr	r0, [r0, #16]
 8008226:	1a80      	subs	r0, r0, r2
 8008228:	b530      	push	{r4, r5, lr}
 800822a:	d10e      	bne.n	800824a <__mcmp+0x2a>
 800822c:	3314      	adds	r3, #20
 800822e:	3114      	adds	r1, #20
 8008230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800823c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008240:	4295      	cmp	r5, r2
 8008242:	d003      	beq.n	800824c <__mcmp+0x2c>
 8008244:	d205      	bcs.n	8008252 <__mcmp+0x32>
 8008246:	f04f 30ff 	mov.w	r0, #4294967295
 800824a:	bd30      	pop	{r4, r5, pc}
 800824c:	42a3      	cmp	r3, r4
 800824e:	d3f3      	bcc.n	8008238 <__mcmp+0x18>
 8008250:	e7fb      	b.n	800824a <__mcmp+0x2a>
 8008252:	2001      	movs	r0, #1
 8008254:	e7f9      	b.n	800824a <__mcmp+0x2a>
	...

08008258 <__mdiff>:
 8008258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	4689      	mov	r9, r1
 800825e:	4606      	mov	r6, r0
 8008260:	4611      	mov	r1, r2
 8008262:	4648      	mov	r0, r9
 8008264:	4614      	mov	r4, r2
 8008266:	f7ff ffdb 	bl	8008220 <__mcmp>
 800826a:	1e05      	subs	r5, r0, #0
 800826c:	d112      	bne.n	8008294 <__mdiff+0x3c>
 800826e:	4629      	mov	r1, r5
 8008270:	4630      	mov	r0, r6
 8008272:	f7ff fd63 	bl	8007d3c <_Balloc>
 8008276:	4602      	mov	r2, r0
 8008278:	b928      	cbnz	r0, 8008286 <__mdiff+0x2e>
 800827a:	4b3f      	ldr	r3, [pc, #252]	@ (8008378 <__mdiff+0x120>)
 800827c:	f240 2137 	movw	r1, #567	@ 0x237
 8008280:	483e      	ldr	r0, [pc, #248]	@ (800837c <__mdiff+0x124>)
 8008282:	f000 fb75 	bl	8008970 <__assert_func>
 8008286:	2301      	movs	r3, #1
 8008288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800828c:	4610      	mov	r0, r2
 800828e:	b003      	add	sp, #12
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	bfbc      	itt	lt
 8008296:	464b      	movlt	r3, r9
 8008298:	46a1      	movlt	r9, r4
 800829a:	4630      	mov	r0, r6
 800829c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082a0:	bfba      	itte	lt
 80082a2:	461c      	movlt	r4, r3
 80082a4:	2501      	movlt	r5, #1
 80082a6:	2500      	movge	r5, #0
 80082a8:	f7ff fd48 	bl	8007d3c <_Balloc>
 80082ac:	4602      	mov	r2, r0
 80082ae:	b918      	cbnz	r0, 80082b8 <__mdiff+0x60>
 80082b0:	4b31      	ldr	r3, [pc, #196]	@ (8008378 <__mdiff+0x120>)
 80082b2:	f240 2145 	movw	r1, #581	@ 0x245
 80082b6:	e7e3      	b.n	8008280 <__mdiff+0x28>
 80082b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082bc:	6926      	ldr	r6, [r4, #16]
 80082be:	60c5      	str	r5, [r0, #12]
 80082c0:	f109 0310 	add.w	r3, r9, #16
 80082c4:	f109 0514 	add.w	r5, r9, #20
 80082c8:	f104 0e14 	add.w	lr, r4, #20
 80082cc:	f100 0b14 	add.w	fp, r0, #20
 80082d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80082d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	46d9      	mov	r9, fp
 80082dc:	f04f 0c00 	mov.w	ip, #0
 80082e0:	9b01      	ldr	r3, [sp, #4]
 80082e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80082e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	fa1f f38a 	uxth.w	r3, sl
 80082f0:	4619      	mov	r1, r3
 80082f2:	b283      	uxth	r3, r0
 80082f4:	1acb      	subs	r3, r1, r3
 80082f6:	0c00      	lsrs	r0, r0, #16
 80082f8:	4463      	add	r3, ip
 80082fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008302:	b29b      	uxth	r3, r3
 8008304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008308:	4576      	cmp	r6, lr
 800830a:	f849 3b04 	str.w	r3, [r9], #4
 800830e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008312:	d8e5      	bhi.n	80082e0 <__mdiff+0x88>
 8008314:	1b33      	subs	r3, r6, r4
 8008316:	3b15      	subs	r3, #21
 8008318:	f023 0303 	bic.w	r3, r3, #3
 800831c:	3415      	adds	r4, #21
 800831e:	3304      	adds	r3, #4
 8008320:	42a6      	cmp	r6, r4
 8008322:	bf38      	it	cc
 8008324:	2304      	movcc	r3, #4
 8008326:	441d      	add	r5, r3
 8008328:	445b      	add	r3, fp
 800832a:	461e      	mov	r6, r3
 800832c:	462c      	mov	r4, r5
 800832e:	4544      	cmp	r4, r8
 8008330:	d30e      	bcc.n	8008350 <__mdiff+0xf8>
 8008332:	f108 0103 	add.w	r1, r8, #3
 8008336:	1b49      	subs	r1, r1, r5
 8008338:	f021 0103 	bic.w	r1, r1, #3
 800833c:	3d03      	subs	r5, #3
 800833e:	45a8      	cmp	r8, r5
 8008340:	bf38      	it	cc
 8008342:	2100      	movcc	r1, #0
 8008344:	440b      	add	r3, r1
 8008346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800834a:	b191      	cbz	r1, 8008372 <__mdiff+0x11a>
 800834c:	6117      	str	r7, [r2, #16]
 800834e:	e79d      	b.n	800828c <__mdiff+0x34>
 8008350:	f854 1b04 	ldr.w	r1, [r4], #4
 8008354:	46e6      	mov	lr, ip
 8008356:	0c08      	lsrs	r0, r1, #16
 8008358:	fa1c fc81 	uxtah	ip, ip, r1
 800835c:	4471      	add	r1, lr
 800835e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008362:	b289      	uxth	r1, r1
 8008364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008368:	f846 1b04 	str.w	r1, [r6], #4
 800836c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008370:	e7dd      	b.n	800832e <__mdiff+0xd6>
 8008372:	3f01      	subs	r7, #1
 8008374:	e7e7      	b.n	8008346 <__mdiff+0xee>
 8008376:	bf00      	nop
 8008378:	08008cc8 	.word	0x08008cc8
 800837c:	08008cd9 	.word	0x08008cd9

08008380 <__d2b>:
 8008380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008384:	460f      	mov	r7, r1
 8008386:	2101      	movs	r1, #1
 8008388:	ec59 8b10 	vmov	r8, r9, d0
 800838c:	4616      	mov	r6, r2
 800838e:	f7ff fcd5 	bl	8007d3c <_Balloc>
 8008392:	4604      	mov	r4, r0
 8008394:	b930      	cbnz	r0, 80083a4 <__d2b+0x24>
 8008396:	4602      	mov	r2, r0
 8008398:	4b23      	ldr	r3, [pc, #140]	@ (8008428 <__d2b+0xa8>)
 800839a:	4824      	ldr	r0, [pc, #144]	@ (800842c <__d2b+0xac>)
 800839c:	f240 310f 	movw	r1, #783	@ 0x30f
 80083a0:	f000 fae6 	bl	8008970 <__assert_func>
 80083a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ac:	b10d      	cbz	r5, 80083b2 <__d2b+0x32>
 80083ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	f1b8 0300 	subs.w	r3, r8, #0
 80083b8:	d023      	beq.n	8008402 <__d2b+0x82>
 80083ba:	4668      	mov	r0, sp
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	f7ff fd84 	bl	8007eca <__lo0bits>
 80083c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083c6:	b1d0      	cbz	r0, 80083fe <__d2b+0x7e>
 80083c8:	f1c0 0320 	rsb	r3, r0, #32
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	430b      	orrs	r3, r1
 80083d2:	40c2      	lsrs	r2, r0
 80083d4:	6163      	str	r3, [r4, #20]
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	61a3      	str	r3, [r4, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bf0c      	ite	eq
 80083e0:	2201      	moveq	r2, #1
 80083e2:	2202      	movne	r2, #2
 80083e4:	6122      	str	r2, [r4, #16]
 80083e6:	b1a5      	cbz	r5, 8008412 <__d2b+0x92>
 80083e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083ec:	4405      	add	r5, r0
 80083ee:	603d      	str	r5, [r7, #0]
 80083f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083f4:	6030      	str	r0, [r6, #0]
 80083f6:	4620      	mov	r0, r4
 80083f8:	b003      	add	sp, #12
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	6161      	str	r1, [r4, #20]
 8008400:	e7ea      	b.n	80083d8 <__d2b+0x58>
 8008402:	a801      	add	r0, sp, #4
 8008404:	f7ff fd61 	bl	8007eca <__lo0bits>
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	6163      	str	r3, [r4, #20]
 800840c:	3020      	adds	r0, #32
 800840e:	2201      	movs	r2, #1
 8008410:	e7e8      	b.n	80083e4 <__d2b+0x64>
 8008412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800841a:	6038      	str	r0, [r7, #0]
 800841c:	6918      	ldr	r0, [r3, #16]
 800841e:	f7ff fd35 	bl	8007e8c <__hi0bits>
 8008422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008426:	e7e5      	b.n	80083f4 <__d2b+0x74>
 8008428:	08008cc8 	.word	0x08008cc8
 800842c:	08008cd9 	.word	0x08008cd9

08008430 <__sfputc_r>:
 8008430:	6893      	ldr	r3, [r2, #8]
 8008432:	3b01      	subs	r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	b410      	push	{r4}
 8008438:	6093      	str	r3, [r2, #8]
 800843a:	da08      	bge.n	800844e <__sfputc_r+0x1e>
 800843c:	6994      	ldr	r4, [r2, #24]
 800843e:	42a3      	cmp	r3, r4
 8008440:	db01      	blt.n	8008446 <__sfputc_r+0x16>
 8008442:	290a      	cmp	r1, #10
 8008444:	d103      	bne.n	800844e <__sfputc_r+0x1e>
 8008446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800844a:	f000 b9df 	b.w	800880c <__swbuf_r>
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	1c58      	adds	r0, r3, #1
 8008452:	6010      	str	r0, [r2, #0]
 8008454:	7019      	strb	r1, [r3, #0]
 8008456:	4608      	mov	r0, r1
 8008458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800845c:	4770      	bx	lr

0800845e <__sfputs_r>:
 800845e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008460:	4606      	mov	r6, r0
 8008462:	460f      	mov	r7, r1
 8008464:	4614      	mov	r4, r2
 8008466:	18d5      	adds	r5, r2, r3
 8008468:	42ac      	cmp	r4, r5
 800846a:	d101      	bne.n	8008470 <__sfputs_r+0x12>
 800846c:	2000      	movs	r0, #0
 800846e:	e007      	b.n	8008480 <__sfputs_r+0x22>
 8008470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008474:	463a      	mov	r2, r7
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ffda 	bl	8008430 <__sfputc_r>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d1f3      	bne.n	8008468 <__sfputs_r+0xa>
 8008480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008484 <_vfiprintf_r>:
 8008484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	460d      	mov	r5, r1
 800848a:	b09d      	sub	sp, #116	@ 0x74
 800848c:	4614      	mov	r4, r2
 800848e:	4698      	mov	r8, r3
 8008490:	4606      	mov	r6, r0
 8008492:	b118      	cbz	r0, 800849c <_vfiprintf_r+0x18>
 8008494:	6a03      	ldr	r3, [r0, #32]
 8008496:	b90b      	cbnz	r3, 800849c <_vfiprintf_r+0x18>
 8008498:	f7fe fc5c 	bl	8006d54 <__sinit>
 800849c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800849e:	07d9      	lsls	r1, r3, #31
 80084a0:	d405      	bmi.n	80084ae <_vfiprintf_r+0x2a>
 80084a2:	89ab      	ldrh	r3, [r5, #12]
 80084a4:	059a      	lsls	r2, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_vfiprintf_r+0x2a>
 80084a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084aa:	f7fe fd5c 	bl	8006f66 <__retarget_lock_acquire_recursive>
 80084ae:	89ab      	ldrh	r3, [r5, #12]
 80084b0:	071b      	lsls	r3, r3, #28
 80084b2:	d501      	bpl.n	80084b8 <_vfiprintf_r+0x34>
 80084b4:	692b      	ldr	r3, [r5, #16]
 80084b6:	b99b      	cbnz	r3, 80084e0 <_vfiprintf_r+0x5c>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 f9e4 	bl	8008888 <__swsetup_r>
 80084c0:	b170      	cbz	r0, 80084e0 <_vfiprintf_r+0x5c>
 80084c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084c4:	07dc      	lsls	r4, r3, #31
 80084c6:	d504      	bpl.n	80084d2 <_vfiprintf_r+0x4e>
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	b01d      	add	sp, #116	@ 0x74
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	0598      	lsls	r0, r3, #22
 80084d6:	d4f7      	bmi.n	80084c8 <_vfiprintf_r+0x44>
 80084d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084da:	f7fe fd45 	bl	8006f68 <__retarget_lock_release_recursive>
 80084de:	e7f3      	b.n	80084c8 <_vfiprintf_r+0x44>
 80084e0:	2300      	movs	r3, #0
 80084e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e4:	2320      	movs	r3, #32
 80084e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ee:	2330      	movs	r3, #48	@ 0x30
 80084f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086a0 <_vfiprintf_r+0x21c>
 80084f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084f8:	f04f 0901 	mov.w	r9, #1
 80084fc:	4623      	mov	r3, r4
 80084fe:	469a      	mov	sl, r3
 8008500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008504:	b10a      	cbz	r2, 800850a <_vfiprintf_r+0x86>
 8008506:	2a25      	cmp	r2, #37	@ 0x25
 8008508:	d1f9      	bne.n	80084fe <_vfiprintf_r+0x7a>
 800850a:	ebba 0b04 	subs.w	fp, sl, r4
 800850e:	d00b      	beq.n	8008528 <_vfiprintf_r+0xa4>
 8008510:	465b      	mov	r3, fp
 8008512:	4622      	mov	r2, r4
 8008514:	4629      	mov	r1, r5
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ffa1 	bl	800845e <__sfputs_r>
 800851c:	3001      	adds	r0, #1
 800851e:	f000 80a7 	beq.w	8008670 <_vfiprintf_r+0x1ec>
 8008522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008524:	445a      	add	r2, fp
 8008526:	9209      	str	r2, [sp, #36]	@ 0x24
 8008528:	f89a 3000 	ldrb.w	r3, [sl]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 809f 	beq.w	8008670 <_vfiprintf_r+0x1ec>
 8008532:	2300      	movs	r3, #0
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800853c:	f10a 0a01 	add.w	sl, sl, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008548:	931a      	str	r3, [sp, #104]	@ 0x68
 800854a:	4654      	mov	r4, sl
 800854c:	2205      	movs	r2, #5
 800854e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008552:	4853      	ldr	r0, [pc, #332]	@ (80086a0 <_vfiprintf_r+0x21c>)
 8008554:	f7f7 fe74 	bl	8000240 <memchr>
 8008558:	9a04      	ldr	r2, [sp, #16]
 800855a:	b9d8      	cbnz	r0, 8008594 <_vfiprintf_r+0x110>
 800855c:	06d1      	lsls	r1, r2, #27
 800855e:	bf44      	itt	mi
 8008560:	2320      	movmi	r3, #32
 8008562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008566:	0713      	lsls	r3, r2, #28
 8008568:	bf44      	itt	mi
 800856a:	232b      	movmi	r3, #43	@ 0x2b
 800856c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008570:	f89a 3000 	ldrb.w	r3, [sl]
 8008574:	2b2a      	cmp	r3, #42	@ 0x2a
 8008576:	d015      	beq.n	80085a4 <_vfiprintf_r+0x120>
 8008578:	9a07      	ldr	r2, [sp, #28]
 800857a:	4654      	mov	r4, sl
 800857c:	2000      	movs	r0, #0
 800857e:	f04f 0c0a 	mov.w	ip, #10
 8008582:	4621      	mov	r1, r4
 8008584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008588:	3b30      	subs	r3, #48	@ 0x30
 800858a:	2b09      	cmp	r3, #9
 800858c:	d94b      	bls.n	8008626 <_vfiprintf_r+0x1a2>
 800858e:	b1b0      	cbz	r0, 80085be <_vfiprintf_r+0x13a>
 8008590:	9207      	str	r2, [sp, #28]
 8008592:	e014      	b.n	80085be <_vfiprintf_r+0x13a>
 8008594:	eba0 0308 	sub.w	r3, r0, r8
 8008598:	fa09 f303 	lsl.w	r3, r9, r3
 800859c:	4313      	orrs	r3, r2
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	46a2      	mov	sl, r4
 80085a2:	e7d2      	b.n	800854a <_vfiprintf_r+0xc6>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	1d19      	adds	r1, r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	9103      	str	r1, [sp, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfbb      	ittet	lt
 80085b0:	425b      	neglt	r3, r3
 80085b2:	f042 0202 	orrlt.w	r2, r2, #2
 80085b6:	9307      	strge	r3, [sp, #28]
 80085b8:	9307      	strlt	r3, [sp, #28]
 80085ba:	bfb8      	it	lt
 80085bc:	9204      	strlt	r2, [sp, #16]
 80085be:	7823      	ldrb	r3, [r4, #0]
 80085c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80085c2:	d10a      	bne.n	80085da <_vfiprintf_r+0x156>
 80085c4:	7863      	ldrb	r3, [r4, #1]
 80085c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80085c8:	d132      	bne.n	8008630 <_vfiprintf_r+0x1ac>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	1d1a      	adds	r2, r3, #4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	9203      	str	r2, [sp, #12]
 80085d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085d6:	3402      	adds	r4, #2
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80086b0 <_vfiprintf_r+0x22c>
 80085de:	7821      	ldrb	r1, [r4, #0]
 80085e0:	2203      	movs	r2, #3
 80085e2:	4650      	mov	r0, sl
 80085e4:	f7f7 fe2c 	bl	8000240 <memchr>
 80085e8:	b138      	cbz	r0, 80085fa <_vfiprintf_r+0x176>
 80085ea:	9b04      	ldr	r3, [sp, #16]
 80085ec:	eba0 000a 	sub.w	r0, r0, sl
 80085f0:	2240      	movs	r2, #64	@ 0x40
 80085f2:	4082      	lsls	r2, r0
 80085f4:	4313      	orrs	r3, r2
 80085f6:	3401      	adds	r4, #1
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fe:	4829      	ldr	r0, [pc, #164]	@ (80086a4 <_vfiprintf_r+0x220>)
 8008600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008604:	2206      	movs	r2, #6
 8008606:	f7f7 fe1b 	bl	8000240 <memchr>
 800860a:	2800      	cmp	r0, #0
 800860c:	d03f      	beq.n	800868e <_vfiprintf_r+0x20a>
 800860e:	4b26      	ldr	r3, [pc, #152]	@ (80086a8 <_vfiprintf_r+0x224>)
 8008610:	bb1b      	cbnz	r3, 800865a <_vfiprintf_r+0x1d6>
 8008612:	9b03      	ldr	r3, [sp, #12]
 8008614:	3307      	adds	r3, #7
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	3308      	adds	r3, #8
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008620:	443b      	add	r3, r7
 8008622:	9309      	str	r3, [sp, #36]	@ 0x24
 8008624:	e76a      	b.n	80084fc <_vfiprintf_r+0x78>
 8008626:	fb0c 3202 	mla	r2, ip, r2, r3
 800862a:	460c      	mov	r4, r1
 800862c:	2001      	movs	r0, #1
 800862e:	e7a8      	b.n	8008582 <_vfiprintf_r+0xfe>
 8008630:	2300      	movs	r3, #0
 8008632:	3401      	adds	r4, #1
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	4619      	mov	r1, r3
 8008638:	f04f 0c0a 	mov.w	ip, #10
 800863c:	4620      	mov	r0, r4
 800863e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008642:	3a30      	subs	r2, #48	@ 0x30
 8008644:	2a09      	cmp	r2, #9
 8008646:	d903      	bls.n	8008650 <_vfiprintf_r+0x1cc>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0c6      	beq.n	80085da <_vfiprintf_r+0x156>
 800864c:	9105      	str	r1, [sp, #20]
 800864e:	e7c4      	b.n	80085da <_vfiprintf_r+0x156>
 8008650:	fb0c 2101 	mla	r1, ip, r1, r2
 8008654:	4604      	mov	r4, r0
 8008656:	2301      	movs	r3, #1
 8008658:	e7f0      	b.n	800863c <_vfiprintf_r+0x1b8>
 800865a:	ab03      	add	r3, sp, #12
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	462a      	mov	r2, r5
 8008660:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <_vfiprintf_r+0x228>)
 8008662:	a904      	add	r1, sp, #16
 8008664:	4630      	mov	r0, r6
 8008666:	f7fd ff43 	bl	80064f0 <_printf_float>
 800866a:	4607      	mov	r7, r0
 800866c:	1c78      	adds	r0, r7, #1
 800866e:	d1d6      	bne.n	800861e <_vfiprintf_r+0x19a>
 8008670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008672:	07d9      	lsls	r1, r3, #31
 8008674:	d405      	bmi.n	8008682 <_vfiprintf_r+0x1fe>
 8008676:	89ab      	ldrh	r3, [r5, #12]
 8008678:	059a      	lsls	r2, r3, #22
 800867a:	d402      	bmi.n	8008682 <_vfiprintf_r+0x1fe>
 800867c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800867e:	f7fe fc73 	bl	8006f68 <__retarget_lock_release_recursive>
 8008682:	89ab      	ldrh	r3, [r5, #12]
 8008684:	065b      	lsls	r3, r3, #25
 8008686:	f53f af1f 	bmi.w	80084c8 <_vfiprintf_r+0x44>
 800868a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800868c:	e71e      	b.n	80084cc <_vfiprintf_r+0x48>
 800868e:	ab03      	add	r3, sp, #12
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	462a      	mov	r2, r5
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <_vfiprintf_r+0x228>)
 8008696:	a904      	add	r1, sp, #16
 8008698:	4630      	mov	r0, r6
 800869a:	f7fe f9b1 	bl	8006a00 <_printf_i>
 800869e:	e7e4      	b.n	800866a <_vfiprintf_r+0x1e6>
 80086a0:	08008d32 	.word	0x08008d32
 80086a4:	08008d3c 	.word	0x08008d3c
 80086a8:	080064f1 	.word	0x080064f1
 80086ac:	0800845f 	.word	0x0800845f
 80086b0:	08008d38 	.word	0x08008d38

080086b4 <__sflush_r>:
 80086b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086bc:	0716      	lsls	r6, r2, #28
 80086be:	4605      	mov	r5, r0
 80086c0:	460c      	mov	r4, r1
 80086c2:	d454      	bmi.n	800876e <__sflush_r+0xba>
 80086c4:	684b      	ldr	r3, [r1, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	dc02      	bgt.n	80086d0 <__sflush_r+0x1c>
 80086ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dd48      	ble.n	8008762 <__sflush_r+0xae>
 80086d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	d045      	beq.n	8008762 <__sflush_r+0xae>
 80086d6:	2300      	movs	r3, #0
 80086d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086dc:	682f      	ldr	r7, [r5, #0]
 80086de:	6a21      	ldr	r1, [r4, #32]
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	d030      	beq.n	8008746 <__sflush_r+0x92>
 80086e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	0759      	lsls	r1, r3, #29
 80086ea:	d505      	bpl.n	80086f8 <__sflush_r+0x44>
 80086ec:	6863      	ldr	r3, [r4, #4]
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086f2:	b10b      	cbz	r3, 80086f8 <__sflush_r+0x44>
 80086f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	2300      	movs	r3, #0
 80086fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086fc:	6a21      	ldr	r1, [r4, #32]
 80086fe:	4628      	mov	r0, r5
 8008700:	47b0      	blx	r6
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	d106      	bne.n	8008716 <__sflush_r+0x62>
 8008708:	6829      	ldr	r1, [r5, #0]
 800870a:	291d      	cmp	r1, #29
 800870c:	d82b      	bhi.n	8008766 <__sflush_r+0xb2>
 800870e:	4a2a      	ldr	r2, [pc, #168]	@ (80087b8 <__sflush_r+0x104>)
 8008710:	40ca      	lsrs	r2, r1
 8008712:	07d6      	lsls	r6, r2, #31
 8008714:	d527      	bpl.n	8008766 <__sflush_r+0xb2>
 8008716:	2200      	movs	r2, #0
 8008718:	6062      	str	r2, [r4, #4]
 800871a:	04d9      	lsls	r1, r3, #19
 800871c:	6922      	ldr	r2, [r4, #16]
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	d504      	bpl.n	800872c <__sflush_r+0x78>
 8008722:	1c42      	adds	r2, r0, #1
 8008724:	d101      	bne.n	800872a <__sflush_r+0x76>
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	b903      	cbnz	r3, 800872c <__sflush_r+0x78>
 800872a:	6560      	str	r0, [r4, #84]	@ 0x54
 800872c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800872e:	602f      	str	r7, [r5, #0]
 8008730:	b1b9      	cbz	r1, 8008762 <__sflush_r+0xae>
 8008732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008736:	4299      	cmp	r1, r3
 8008738:	d002      	beq.n	8008740 <__sflush_r+0x8c>
 800873a:	4628      	mov	r0, r5
 800873c:	f7ff f9fe 	bl	8007b3c <_free_r>
 8008740:	2300      	movs	r3, #0
 8008742:	6363      	str	r3, [r4, #52]	@ 0x34
 8008744:	e00d      	b.n	8008762 <__sflush_r+0xae>
 8008746:	2301      	movs	r3, #1
 8008748:	4628      	mov	r0, r5
 800874a:	47b0      	blx	r6
 800874c:	4602      	mov	r2, r0
 800874e:	1c50      	adds	r0, r2, #1
 8008750:	d1c9      	bne.n	80086e6 <__sflush_r+0x32>
 8008752:	682b      	ldr	r3, [r5, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0c6      	beq.n	80086e6 <__sflush_r+0x32>
 8008758:	2b1d      	cmp	r3, #29
 800875a:	d001      	beq.n	8008760 <__sflush_r+0xac>
 800875c:	2b16      	cmp	r3, #22
 800875e:	d11e      	bne.n	800879e <__sflush_r+0xea>
 8008760:	602f      	str	r7, [r5, #0]
 8008762:	2000      	movs	r0, #0
 8008764:	e022      	b.n	80087ac <__sflush_r+0xf8>
 8008766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800876a:	b21b      	sxth	r3, r3
 800876c:	e01b      	b.n	80087a6 <__sflush_r+0xf2>
 800876e:	690f      	ldr	r7, [r1, #16]
 8008770:	2f00      	cmp	r7, #0
 8008772:	d0f6      	beq.n	8008762 <__sflush_r+0xae>
 8008774:	0793      	lsls	r3, r2, #30
 8008776:	680e      	ldr	r6, [r1, #0]
 8008778:	bf08      	it	eq
 800877a:	694b      	ldreq	r3, [r1, #20]
 800877c:	600f      	str	r7, [r1, #0]
 800877e:	bf18      	it	ne
 8008780:	2300      	movne	r3, #0
 8008782:	eba6 0807 	sub.w	r8, r6, r7
 8008786:	608b      	str	r3, [r1, #8]
 8008788:	f1b8 0f00 	cmp.w	r8, #0
 800878c:	dde9      	ble.n	8008762 <__sflush_r+0xae>
 800878e:	6a21      	ldr	r1, [r4, #32]
 8008790:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008792:	4643      	mov	r3, r8
 8008794:	463a      	mov	r2, r7
 8008796:	4628      	mov	r0, r5
 8008798:	47b0      	blx	r6
 800879a:	2800      	cmp	r0, #0
 800879c:	dc08      	bgt.n	80087b0 <__sflush_r+0xfc>
 800879e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b0:	4407      	add	r7, r0
 80087b2:	eba8 0800 	sub.w	r8, r8, r0
 80087b6:	e7e7      	b.n	8008788 <__sflush_r+0xd4>
 80087b8:	20400001 	.word	0x20400001

080087bc <_fflush_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	690b      	ldr	r3, [r1, #16]
 80087c0:	4605      	mov	r5, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	b913      	cbnz	r3, 80087cc <_fflush_r+0x10>
 80087c6:	2500      	movs	r5, #0
 80087c8:	4628      	mov	r0, r5
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
 80087cc:	b118      	cbz	r0, 80087d6 <_fflush_r+0x1a>
 80087ce:	6a03      	ldr	r3, [r0, #32]
 80087d0:	b90b      	cbnz	r3, 80087d6 <_fflush_r+0x1a>
 80087d2:	f7fe fabf 	bl	8006d54 <__sinit>
 80087d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0f3      	beq.n	80087c6 <_fflush_r+0xa>
 80087de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087e0:	07d0      	lsls	r0, r2, #31
 80087e2:	d404      	bmi.n	80087ee <_fflush_r+0x32>
 80087e4:	0599      	lsls	r1, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_fflush_r+0x32>
 80087e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ea:	f7fe fbbc 	bl	8006f66 <__retarget_lock_acquire_recursive>
 80087ee:	4628      	mov	r0, r5
 80087f0:	4621      	mov	r1, r4
 80087f2:	f7ff ff5f 	bl	80086b4 <__sflush_r>
 80087f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087f8:	07da      	lsls	r2, r3, #31
 80087fa:	4605      	mov	r5, r0
 80087fc:	d4e4      	bmi.n	80087c8 <_fflush_r+0xc>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	059b      	lsls	r3, r3, #22
 8008802:	d4e1      	bmi.n	80087c8 <_fflush_r+0xc>
 8008804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008806:	f7fe fbaf 	bl	8006f68 <__retarget_lock_release_recursive>
 800880a:	e7dd      	b.n	80087c8 <_fflush_r+0xc>

0800880c <__swbuf_r>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	460e      	mov	r6, r1
 8008810:	4614      	mov	r4, r2
 8008812:	4605      	mov	r5, r0
 8008814:	b118      	cbz	r0, 800881e <__swbuf_r+0x12>
 8008816:	6a03      	ldr	r3, [r0, #32]
 8008818:	b90b      	cbnz	r3, 800881e <__swbuf_r+0x12>
 800881a:	f7fe fa9b 	bl	8006d54 <__sinit>
 800881e:	69a3      	ldr	r3, [r4, #24]
 8008820:	60a3      	str	r3, [r4, #8]
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	071a      	lsls	r2, r3, #28
 8008826:	d501      	bpl.n	800882c <__swbuf_r+0x20>
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	b943      	cbnz	r3, 800883e <__swbuf_r+0x32>
 800882c:	4621      	mov	r1, r4
 800882e:	4628      	mov	r0, r5
 8008830:	f000 f82a 	bl	8008888 <__swsetup_r>
 8008834:	b118      	cbz	r0, 800883e <__swbuf_r+0x32>
 8008836:	f04f 37ff 	mov.w	r7, #4294967295
 800883a:	4638      	mov	r0, r7
 800883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	6922      	ldr	r2, [r4, #16]
 8008842:	1a98      	subs	r0, r3, r2
 8008844:	6963      	ldr	r3, [r4, #20]
 8008846:	b2f6      	uxtb	r6, r6
 8008848:	4283      	cmp	r3, r0
 800884a:	4637      	mov	r7, r6
 800884c:	dc05      	bgt.n	800885a <__swbuf_r+0x4e>
 800884e:	4621      	mov	r1, r4
 8008850:	4628      	mov	r0, r5
 8008852:	f7ff ffb3 	bl	80087bc <_fflush_r>
 8008856:	2800      	cmp	r0, #0
 8008858:	d1ed      	bne.n	8008836 <__swbuf_r+0x2a>
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	3b01      	subs	r3, #1
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	6022      	str	r2, [r4, #0]
 8008866:	701e      	strb	r6, [r3, #0]
 8008868:	6962      	ldr	r2, [r4, #20]
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	429a      	cmp	r2, r3
 800886e:	d004      	beq.n	800887a <__swbuf_r+0x6e>
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	07db      	lsls	r3, r3, #31
 8008874:	d5e1      	bpl.n	800883a <__swbuf_r+0x2e>
 8008876:	2e0a      	cmp	r6, #10
 8008878:	d1df      	bne.n	800883a <__swbuf_r+0x2e>
 800887a:	4621      	mov	r1, r4
 800887c:	4628      	mov	r0, r5
 800887e:	f7ff ff9d 	bl	80087bc <_fflush_r>
 8008882:	2800      	cmp	r0, #0
 8008884:	d0d9      	beq.n	800883a <__swbuf_r+0x2e>
 8008886:	e7d6      	b.n	8008836 <__swbuf_r+0x2a>

08008888 <__swsetup_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4b29      	ldr	r3, [pc, #164]	@ (8008930 <__swsetup_r+0xa8>)
 800888c:	4605      	mov	r5, r0
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	460c      	mov	r4, r1
 8008892:	b118      	cbz	r0, 800889c <__swsetup_r+0x14>
 8008894:	6a03      	ldr	r3, [r0, #32]
 8008896:	b90b      	cbnz	r3, 800889c <__swsetup_r+0x14>
 8008898:	f7fe fa5c 	bl	8006d54 <__sinit>
 800889c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a0:	0719      	lsls	r1, r3, #28
 80088a2:	d422      	bmi.n	80088ea <__swsetup_r+0x62>
 80088a4:	06da      	lsls	r2, r3, #27
 80088a6:	d407      	bmi.n	80088b8 <__swsetup_r+0x30>
 80088a8:	2209      	movs	r2, #9
 80088aa:	602a      	str	r2, [r5, #0]
 80088ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	e033      	b.n	8008920 <__swsetup_r+0x98>
 80088b8:	0758      	lsls	r0, r3, #29
 80088ba:	d512      	bpl.n	80088e2 <__swsetup_r+0x5a>
 80088bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088be:	b141      	cbz	r1, 80088d2 <__swsetup_r+0x4a>
 80088c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d002      	beq.n	80088ce <__swsetup_r+0x46>
 80088c8:	4628      	mov	r0, r5
 80088ca:	f7ff f937 	bl	8007b3c <_free_r>
 80088ce:	2300      	movs	r3, #0
 80088d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	2300      	movs	r3, #0
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	f043 0308 	orr.w	r3, r3, #8
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	b94b      	cbnz	r3, 8008902 <__swsetup_r+0x7a>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f8:	d003      	beq.n	8008902 <__swsetup_r+0x7a>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	f000 f8c1 	bl	8008a84 <__smakebuf_r>
 8008902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008906:	f013 0201 	ands.w	r2, r3, #1
 800890a:	d00a      	beq.n	8008922 <__swsetup_r+0x9a>
 800890c:	2200      	movs	r2, #0
 800890e:	60a2      	str	r2, [r4, #8]
 8008910:	6962      	ldr	r2, [r4, #20]
 8008912:	4252      	negs	r2, r2
 8008914:	61a2      	str	r2, [r4, #24]
 8008916:	6922      	ldr	r2, [r4, #16]
 8008918:	b942      	cbnz	r2, 800892c <__swsetup_r+0xa4>
 800891a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800891e:	d1c5      	bne.n	80088ac <__swsetup_r+0x24>
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	0799      	lsls	r1, r3, #30
 8008924:	bf58      	it	pl
 8008926:	6962      	ldrpl	r2, [r4, #20]
 8008928:	60a2      	str	r2, [r4, #8]
 800892a:	e7f4      	b.n	8008916 <__swsetup_r+0x8e>
 800892c:	2000      	movs	r0, #0
 800892e:	e7f7      	b.n	8008920 <__swsetup_r+0x98>
 8008930:	20000018 	.word	0x20000018

08008934 <_sbrk_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d06      	ldr	r5, [pc, #24]	@ (8008950 <_sbrk_r+0x1c>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f8 fdd4 	bl	80014ec <_sbrk>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_sbrk_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_sbrk_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20000cb4 	.word	0x20000cb4

08008954 <memcpy>:
 8008954:	440a      	add	r2, r1
 8008956:	4291      	cmp	r1, r2
 8008958:	f100 33ff 	add.w	r3, r0, #4294967295
 800895c:	d100      	bne.n	8008960 <memcpy+0xc>
 800895e:	4770      	bx	lr
 8008960:	b510      	push	{r4, lr}
 8008962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896a:	4291      	cmp	r1, r2
 800896c:	d1f9      	bne.n	8008962 <memcpy+0xe>
 800896e:	bd10      	pop	{r4, pc}

08008970 <__assert_func>:
 8008970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008972:	4614      	mov	r4, r2
 8008974:	461a      	mov	r2, r3
 8008976:	4b09      	ldr	r3, [pc, #36]	@ (800899c <__assert_func+0x2c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4605      	mov	r5, r0
 800897c:	68d8      	ldr	r0, [r3, #12]
 800897e:	b14c      	cbz	r4, 8008994 <__assert_func+0x24>
 8008980:	4b07      	ldr	r3, [pc, #28]	@ (80089a0 <__assert_func+0x30>)
 8008982:	9100      	str	r1, [sp, #0]
 8008984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008988:	4906      	ldr	r1, [pc, #24]	@ (80089a4 <__assert_func+0x34>)
 800898a:	462b      	mov	r3, r5
 800898c:	f000 f842 	bl	8008a14 <fiprintf>
 8008990:	f000 f8d6 	bl	8008b40 <abort>
 8008994:	4b04      	ldr	r3, [pc, #16]	@ (80089a8 <__assert_func+0x38>)
 8008996:	461c      	mov	r4, r3
 8008998:	e7f3      	b.n	8008982 <__assert_func+0x12>
 800899a:	bf00      	nop
 800899c:	20000018 	.word	0x20000018
 80089a0:	08008d4d 	.word	0x08008d4d
 80089a4:	08008d5a 	.word	0x08008d5a
 80089a8:	08008d88 	.word	0x08008d88

080089ac <_calloc_r>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	fba1 5402 	umull	r5, r4, r1, r2
 80089b2:	b934      	cbnz	r4, 80089c2 <_calloc_r+0x16>
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7ff f935 	bl	8007c24 <_malloc_r>
 80089ba:	4606      	mov	r6, r0
 80089bc:	b928      	cbnz	r0, 80089ca <_calloc_r+0x1e>
 80089be:	4630      	mov	r0, r6
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	220c      	movs	r2, #12
 80089c4:	6002      	str	r2, [r0, #0]
 80089c6:	2600      	movs	r6, #0
 80089c8:	e7f9      	b.n	80089be <_calloc_r+0x12>
 80089ca:	462a      	mov	r2, r5
 80089cc:	4621      	mov	r1, r4
 80089ce:	f7fe fa4c 	bl	8006e6a <memset>
 80089d2:	e7f4      	b.n	80089be <_calloc_r+0x12>

080089d4 <__ascii_mbtowc>:
 80089d4:	b082      	sub	sp, #8
 80089d6:	b901      	cbnz	r1, 80089da <__ascii_mbtowc+0x6>
 80089d8:	a901      	add	r1, sp, #4
 80089da:	b142      	cbz	r2, 80089ee <__ascii_mbtowc+0x1a>
 80089dc:	b14b      	cbz	r3, 80089f2 <__ascii_mbtowc+0x1e>
 80089de:	7813      	ldrb	r3, [r2, #0]
 80089e0:	600b      	str	r3, [r1, #0]
 80089e2:	7812      	ldrb	r2, [r2, #0]
 80089e4:	1e10      	subs	r0, r2, #0
 80089e6:	bf18      	it	ne
 80089e8:	2001      	movne	r0, #1
 80089ea:	b002      	add	sp, #8
 80089ec:	4770      	bx	lr
 80089ee:	4610      	mov	r0, r2
 80089f0:	e7fb      	b.n	80089ea <__ascii_mbtowc+0x16>
 80089f2:	f06f 0001 	mvn.w	r0, #1
 80089f6:	e7f8      	b.n	80089ea <__ascii_mbtowc+0x16>

080089f8 <__ascii_wctomb>:
 80089f8:	4603      	mov	r3, r0
 80089fa:	4608      	mov	r0, r1
 80089fc:	b141      	cbz	r1, 8008a10 <__ascii_wctomb+0x18>
 80089fe:	2aff      	cmp	r2, #255	@ 0xff
 8008a00:	d904      	bls.n	8008a0c <__ascii_wctomb+0x14>
 8008a02:	228a      	movs	r2, #138	@ 0x8a
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0a:	4770      	bx	lr
 8008a0c:	700a      	strb	r2, [r1, #0]
 8008a0e:	2001      	movs	r0, #1
 8008a10:	4770      	bx	lr
	...

08008a14 <fiprintf>:
 8008a14:	b40e      	push	{r1, r2, r3}
 8008a16:	b503      	push	{r0, r1, lr}
 8008a18:	4601      	mov	r1, r0
 8008a1a:	ab03      	add	r3, sp, #12
 8008a1c:	4805      	ldr	r0, [pc, #20]	@ (8008a34 <fiprintf+0x20>)
 8008a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a22:	6800      	ldr	r0, [r0, #0]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	f7ff fd2d 	bl	8008484 <_vfiprintf_r>
 8008a2a:	b002      	add	sp, #8
 8008a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a30:	b003      	add	sp, #12
 8008a32:	4770      	bx	lr
 8008a34:	20000018 	.word	0x20000018

08008a38 <__swhatbuf_r>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a40:	2900      	cmp	r1, #0
 8008a42:	b096      	sub	sp, #88	@ 0x58
 8008a44:	4615      	mov	r5, r2
 8008a46:	461e      	mov	r6, r3
 8008a48:	da0d      	bge.n	8008a66 <__swhatbuf_r+0x2e>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a50:	f04f 0100 	mov.w	r1, #0
 8008a54:	bf14      	ite	ne
 8008a56:	2340      	movne	r3, #64	@ 0x40
 8008a58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	6031      	str	r1, [r6, #0]
 8008a60:	602b      	str	r3, [r5, #0]
 8008a62:	b016      	add	sp, #88	@ 0x58
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	466a      	mov	r2, sp
 8008a68:	f000 f848 	bl	8008afc <_fstat_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	dbec      	blt.n	8008a4a <__swhatbuf_r+0x12>
 8008a70:	9901      	ldr	r1, [sp, #4]
 8008a72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a7a:	4259      	negs	r1, r3
 8008a7c:	4159      	adcs	r1, r3
 8008a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a82:	e7eb      	b.n	8008a5c <__swhatbuf_r+0x24>

08008a84 <__smakebuf_r>:
 8008a84:	898b      	ldrh	r3, [r1, #12]
 8008a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a88:	079d      	lsls	r5, r3, #30
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	d507      	bpl.n	8008aa0 <__smakebuf_r+0x1c>
 8008a90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	6163      	str	r3, [r4, #20]
 8008a9c:	b003      	add	sp, #12
 8008a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa0:	ab01      	add	r3, sp, #4
 8008aa2:	466a      	mov	r2, sp
 8008aa4:	f7ff ffc8 	bl	8008a38 <__swhatbuf_r>
 8008aa8:	9f00      	ldr	r7, [sp, #0]
 8008aaa:	4605      	mov	r5, r0
 8008aac:	4639      	mov	r1, r7
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff f8b8 	bl	8007c24 <_malloc_r>
 8008ab4:	b948      	cbnz	r0, 8008aca <__smakebuf_r+0x46>
 8008ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aba:	059a      	lsls	r2, r3, #22
 8008abc:	d4ee      	bmi.n	8008a9c <__smakebuf_r+0x18>
 8008abe:	f023 0303 	bic.w	r3, r3, #3
 8008ac2:	f043 0302 	orr.w	r3, r3, #2
 8008ac6:	81a3      	strh	r3, [r4, #12]
 8008ac8:	e7e2      	b.n	8008a90 <__smakebuf_r+0xc>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	6020      	str	r0, [r4, #0]
 8008ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ad2:	81a3      	strh	r3, [r4, #12]
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ada:	b15b      	cbz	r3, 8008af4 <__smakebuf_r+0x70>
 8008adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f000 f81d 	bl	8008b20 <_isatty_r>
 8008ae6:	b128      	cbz	r0, 8008af4 <__smakebuf_r+0x70>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f023 0303 	bic.w	r3, r3, #3
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	81a3      	strh	r3, [r4, #12]
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	431d      	orrs	r5, r3
 8008af8:	81a5      	strh	r5, [r4, #12]
 8008afa:	e7cf      	b.n	8008a9c <__smakebuf_r+0x18>

08008afc <_fstat_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4d07      	ldr	r5, [pc, #28]	@ (8008b1c <_fstat_r+0x20>)
 8008b00:	2300      	movs	r3, #0
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	4611      	mov	r1, r2
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	f7f8 fcc7 	bl	800149c <_fstat>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d102      	bne.n	8008b18 <_fstat_r+0x1c>
 8008b12:	682b      	ldr	r3, [r5, #0]
 8008b14:	b103      	cbz	r3, 8008b18 <_fstat_r+0x1c>
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000cb4 	.word	0x20000cb4

08008b20 <_isatty_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4d06      	ldr	r5, [pc, #24]	@ (8008b3c <_isatty_r+0x1c>)
 8008b24:	2300      	movs	r3, #0
 8008b26:	4604      	mov	r4, r0
 8008b28:	4608      	mov	r0, r1
 8008b2a:	602b      	str	r3, [r5, #0]
 8008b2c:	f7f8 fcc6 	bl	80014bc <_isatty>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_isatty_r+0x1a>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_isatty_r+0x1a>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	20000cb4 	.word	0x20000cb4

08008b40 <abort>:
 8008b40:	b508      	push	{r3, lr}
 8008b42:	2006      	movs	r0, #6
 8008b44:	f000 f82c 	bl	8008ba0 <raise>
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7f8 fc57 	bl	80013fc <_exit>

08008b4e <_raise_r>:
 8008b4e:	291f      	cmp	r1, #31
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4605      	mov	r5, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	d904      	bls.n	8008b62 <_raise_r+0x14>
 8008b58:	2316      	movs	r3, #22
 8008b5a:	6003      	str	r3, [r0, #0]
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b64:	b112      	cbz	r2, 8008b6c <_raise_r+0x1e>
 8008b66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b6a:	b94b      	cbnz	r3, 8008b80 <_raise_r+0x32>
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f000 f831 	bl	8008bd4 <_getpid_r>
 8008b72:	4622      	mov	r2, r4
 8008b74:	4601      	mov	r1, r0
 8008b76:	4628      	mov	r0, r5
 8008b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7c:	f000 b818 	b.w	8008bb0 <_kill_r>
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d00a      	beq.n	8008b9a <_raise_r+0x4c>
 8008b84:	1c59      	adds	r1, r3, #1
 8008b86:	d103      	bne.n	8008b90 <_raise_r+0x42>
 8008b88:	2316      	movs	r3, #22
 8008b8a:	6003      	str	r3, [r0, #0]
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	e7e7      	b.n	8008b60 <_raise_r+0x12>
 8008b90:	2100      	movs	r1, #0
 8008b92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b96:	4620      	mov	r0, r4
 8008b98:	4798      	blx	r3
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e7e0      	b.n	8008b60 <_raise_r+0x12>
	...

08008ba0 <raise>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	@ (8008bac <raise+0xc>)
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f7ff bfd2 	b.w	8008b4e <_raise_r>
 8008baa:	bf00      	nop
 8008bac:	20000018 	.word	0x20000018

08008bb0 <_kill_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	@ (8008bd0 <_kill_r+0x20>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	f7f8 fc0d 	bl	80013dc <_kill>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d102      	bne.n	8008bcc <_kill_r+0x1c>
 8008bc6:	682b      	ldr	r3, [r5, #0]
 8008bc8:	b103      	cbz	r3, 8008bcc <_kill_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000cb4 	.word	0x20000cb4

08008bd4 <_getpid_r>:
 8008bd4:	f7f8 bbfa 	b.w	80013cc <_getpid>

08008bd8 <_init>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr

08008be4 <_fini>:
 8008be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be6:	bf00      	nop
 8008be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bea:	bc08      	pop	{r3}
 8008bec:	469e      	mov	lr, r3
 8008bee:	4770      	bx	lr
